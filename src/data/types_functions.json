[
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Redshift_Dialect", "arguments": {"dialect_operations": {"lazy": false}},"aliases": [],"description": "The dialect for Redshift connections."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation\naccording to the specific dialect."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part's that determine what order each part gets written in for the final SQL output\nIf you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "wrap_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps and possibly escapes the identifier so that it can be used in a\ngenerated query regardless of what characters it contains.\nThe quotes used will depend on the dialect."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "make_table_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": [],"description": "Generates a SQL expression for a table literal."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.\n\nOne of the purposes of this method is to verify if the expected ordering\nsettings are supported by the given database backend.","arguments": "- internal_column: the column to order by.\n- sort_direction: the direction of the ordering.\n- text_ordering: If provided, specifies that the column should be treated\n  as text values according to the provided ordering. For non-text types,\n  it should be set to `Nothing`."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso\n`Value_Type`."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "cast_op_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of certain operations with\ncertain arguments.\n\nIt is used when the normal type inference provided by the database engine\nneeds to be adjusted.\n\nIn most cases this method will just return the expression unchanged, it\nis used only to override the type in cases where the default one that the\ndatabase uses is not what we want."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "cast_aggregate_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of aggregate operations.\nSome DBs do CAST(SUM(x) AS FLOAT) others do SUM(CAST(x AS FLOAT))."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.\n\nReturns `Nothing` if the key is not defined."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "needs_literal_table_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "", "name": "redshift", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect for Redshift connections."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Error_Mapper", "type": "Redshift_Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Redshift_Error_Mapper", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Error_Mapper", "type": "Redshift_Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Error_Mapper", "type": "Redshift_Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Error_Mapper", "type": "Redshift_Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Redshift_Details", "type": "Redshift_Details", "name": "Redshift", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Redshift_Details", "arguments": {"host": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"host\""}, "port": {"lazy": false, "type": "Integer", "checked": true, "default": "5439"}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "db_user": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "credentials": {"lazy": false, "type": "Credentials|AWS_Credential", "checked": true, "default": "..Profile"}, "use_ssl": {"lazy": false, "type": "SSL_Mode", "checked": true, "default": "..Require"}, "client_cert": {"lazy": false, "type": "Client_Certificate|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Connect to a AWS Redshift database.","arguments": "- host: The hostname of the database server.\n- port: The port of the database server (defaults to 5439).\n- schema: The schema to connect to (if not provided or empty, the default schema will be used).\n- db_user: The user to connect to the database as.\n- credentials: The credentials to use for the connection (defaults AWS_Profile).\n- use_ssl: Whether to use SSL (defaults to `SSL_Mode.Require`).\n- client_cert: The client certificate to use or `Nothing` if not needed."},
{"module": "Standard.AWS.Database.Redshift.Redshift_Details", "type": "Redshift_Details", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.AWS.Database.Redshift.Redshift_Details", "type": "Redshift_Details", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}},"aliases": [],"description": "Build the Connection resource.","arguments": "- options: Overrides for the connection properties."},
{"module": "Standard.AWS.Database.Redshift.Redshift_Details", "type": "Redshift_Details", "name": "jdbc_url", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the jdbc url for the connection."},
{"module": "Standard.AWS.Database.Redshift.Redshift_Details", "type": "Redshift_Details", "name": "jdbc_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the properties for the connection."},
{"module": "Standard.AWS.Internal.Data_Link_Helpers", "type": "", "name": "decode_aws_credential", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "AWS_Credential", "arguments": {"json": {"lazy": false}},"aliases": [],"description": "Decodes the JSON representation of `AWS_Credential` as defined in `dataLinkSchema.json#/$defs/AwsAuth`."},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Path_Entry", "name": "Directory", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Path_Entry", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Path_Entry", "name": "File", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Path_Entry", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Path_Entry", "name": "is_directory", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path", "arguments": {"parts": {"lazy": false, "type": "Vector Path_Entry", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "join", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path", "arguments": {"paths": {"lazy": false, "type": "Vector Decomposed_S3_Path", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Reconstructs the original path."},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "normalize", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "parent", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path | Nothing", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "first_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Path_Entry | Nothing", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "drop_first_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Request_Body", "type": "", "name": "from_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "instance", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "create_dry_run_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "copy_original": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "remote_write_with_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "existing_file_behavior": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "s3_backup", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": [],"description": "A backup strategy tailored for S3.\nSince S3 does not support a cheap 'move' operation, the standard backup\nstrategy that mostly relies on it does not work too well.\nInstead, S3 relies on a simpler strategy:\n1. If the destination file exists, copy it to a backup location\n   (overwriting a previous backup file, if it was present).\n2. Write the new file.\n  i. If the write succeeded, that's it.\n     ii. If the write failed, 'restore' from the backup - copy the backup\n         back to the original location and delete the backup file (as it's no\n         longer needed because the original file is back with the old contents)."},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "copy_from_local", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "S3_File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "with_failure_handler", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"failure_action": {"lazy": true}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "recover_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true}, "key": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path ! Illegal_Argument", "arguments": {"uri": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "delimiter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "The delimiter used for path emulation.\n\nS3 does not treat `/` in any special way, it allows using any character as a\npath delimiter. In the future we could allow customizing it."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "is_root", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Checks if this path represents the root directory of a bucket."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "is_directory", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Checks if this path represents a directory."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "set_new_path", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {"new_path": {"lazy": false, "type": "Decomposed_S3_Path", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {"subpath": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Resolves a subdirectory entry.\nThis only makes logical sense for paths for which `path.is_directory == True`,\nbut it is not forbidden to call it on other types of paths.\n\nNote that the newly returned path will be a directory or not depending on\nif `subpath` ends with the delimiter."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "join", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {"subpaths": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "parent", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path | Nothing", "arguments": {},"aliases": [],"description": "Returns the parent directory.\nIt will return `Nothing` for the root directory."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "file_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Returns the 'file name' of this path.\nIf the path is a regular file, it will be its name.\nIf the path is a directory, it will be the name of that directory,\nwithout the trailing delimiter."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "is_descendant_of", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"other": {"lazy": false, "type": "S3_Path", "checked": true}},"aliases": [],"description": "Checks if the given other path is inside of this path.\nA directory is not a descendant of itself."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "bucket_root", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "without_trailing_slash", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "list_buckets", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}},"aliases": [],"icon": "data_input","description": "Gets the list of the S3 bucket names.","arguments": "- credentials: The credentials to use to access S3. If not specified, the\n  default credentials are used.","returns": "- A vector of bucket names (as Text).","errors": "- A vector of bucket names (as Text)."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "list_objects", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"bucket\""}, "prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}, "max_count": {"lazy": false, "type": "Integer", "checked": true, "default": "1000"}},"aliases": [],"icon": "data_input","description": "Gets the list of the items inside a bucket.","arguments": "- bucket: the name of the bucket.\n- prefix: the prefix of keys to match.\n- max_count: the maximum number of items to return. The default is 1000.\n- credentials: The credentials to use to access the S3 bucket. If not\n  specified, the default credentials are used.","returns": "- A vector of object keys (as Text) (including the prefix).","errors": "- A vector of object keys (as Text) (including the prefix)."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "get_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"bucket": {"lazy": false}, "key": {"lazy": false}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}, "delimiter": {"lazy": false, "default": "\"/\""}},"aliases": [],"icon": "data_input","description": "Gets an object from an S3 bucket.\nReturns a raw stream which can be read once.","arguments": "- bucket: the name of the bucket.\n- key: the key of the object.\n- credentials: AWS credentials. If not provided, the default credentials will\n  be used.\n- delimiter: The delimiter to use for deducing the filename from the path."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "head", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"bucket\""}, "key": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}},"aliases": [],"icon": "data_input","description": "Gets the metadata of a bucket or object.","arguments": "- bucket: the name of the bucket.\n- prefix: the prefix of keys to match.\n- credentials: The credentials to use to access the S3 bucket. If not\n  specified, the default credentials are used.","returns": "- A Dictionary of the associated metadata of a bucket or object.","errors": "- A Dictionary of the associated metadata of a bucket or object."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "raw_head", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bucket": {"lazy": false}, "key": {"lazy": false}, "credentials": {"lazy": false}},"aliases": [],"description": "Gets the raw metadata of a bucket or object.","arguments": "- bucket: the name of the bucket.\n- key: the key of the object.\n- credentials: AWS credentials."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "read_bucket", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bucket": {"lazy": false}, "prefix": {"lazy": false, "default": "\"\""}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}, "delimiter": {"lazy": false, "default": "\"/\""}, "max_count": {"lazy": false, "default": "1000"}},"aliases": [],"description": "Reads an S3 bucket returning a pair of vectors, one with common prefixes and\none with object keys.","arguments": "- bucket: The name of the bucket.\n- prefix: The prefix to use when searching for keys to return.\n- credentials: The credentials for the AWS resource.\n- delimiter: The delimiter used to deduce common prefixes."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "put_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true}, "key": {"lazy": false, "type": "Text", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}, "request_body": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "upload_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"local_file": {"lazy": false, "type": "File", "checked": true}, "bucket": {"lazy": false, "type": "Text", "checked": true}, "key": {"lazy": false, "type": "Text", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "delete_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true}, "key": {"lazy": false, "type": "Text", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}},"aliases": [],"description": "Deletes the object.\nIt will not raise any errors if the object does not exist."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "copy_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_bucket": {"lazy": false, "type": "Text", "checked": true}, "source_key": {"lazy": false, "type": "Text", "checked": true}, "target_bucket": {"lazy": false, "type": "Text", "checked": true}, "target_key": {"lazy": false, "type": "Text", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "handle_s3_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}, "bucket": {"lazy": false, "default": "\"\""}, "key": {"lazy": false, "default": "\"\""}},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "make_client", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false, "type": "AWS_Credential", "checked": true}},"aliases": [],"description": "Makes a client for the default region."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "make_client_for_bucket", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bucket_name": {"lazy": false, "type": "Text", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true}},"aliases": [],"description": "Makes a client using the region in which the specified bucket is located.\nThis is necessary, because if we are fetching the wrong region, we will get\n`PermanentRedirect` errors."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "handle_io_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Utility method for running an action with Java exceptions mapping."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "scheme", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "uri_prefix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Data_Link", "arguments": {"uri": {"lazy": false, "type": "Text", "checked": true}, "format_json": {"lazy": false}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "as_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_File", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "default_format", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any ! Illegal_State", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "as_writable_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_File", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "Data_Link_With_Input_Stream", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "Data_Link_With_Output_Stream", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "Writable_Data_Link", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "File_Like_Data_Link", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_File", "arguments": {"s3_path": {"lazy": false, "type": "S3_Path", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "Text", "checked": true, "default": "S3.uri_prefix"}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}},"aliases": [],"icon": "data_input","description": "Given an S3 URI, create a file representation.","arguments": "- uri: The URI of the file.\n  The URI must be in the form `s3://bucket/path/to/file`.\n  If the path contains `.` or `..` segments, they will be normalized.\n- credentials: The credentials to use when accessing the file.\n  If not specified, the default credentials are used.\n  Note, the credentials are not verified until the file is accessed.","returns": "- An `S3_File` object representing the file.","errors": "- An `S3_File` object representing the file."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new output stream for this file and runs the specified action\non it.\n\nThe created stream is automatically closed when `action` returns (even\nif it returns exceptionally).","arguments": "- open_options: A vector of `File_Access` objects determining how to open\n  the stream. These options set the access properties of the stream.\n- action: A function that operates on the output stream and returns some\n  value. The value is returned from this method."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new input stream for this file and runs the specified action\non it.\n\nThe created stream is automatically closed when `action` returns (even\nif it returns exceptionally).","arguments": "- open_options: A vector of `File_Access` objects determining how to open\n  the stream. These options set the access properties of the stream.\n- action: A function that operates on the input stream and returns some\n  value. The value is returned from this method."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["import", "load", "open"],"group": "Standard.Base.Input","icon": "data_input","description": "Read a file using the specified file format","arguments": "- format: A `File_Format` object used to read file into memory.\n  If `Auto_Detect` is specified; the provided file determines the specific\n  type and configures it appropriately.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function.\n  By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.","returns": "- The contents of the file read using the specified `File_Format`.","errors": "- The contents of the file read using the specified `File_Format`."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "list", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_filter": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Lists files contained in the directory denoted by this file.\nNote, as S3 does not have a native notion of directories, this operation\nwill return an empty Vector if the folder does not exist.","arguments": "- name_filter: A glob pattern that can be used to filter the returned\n  files. If it is not specified, all files are returned.\n- recursive: Specifies whether the returned list of files should include\n  also files from the subdirectories. If set to `False` (the default),\n  only the immediate children of the listed directory are considered.","returns": "- A vector of `S3_File` objects representing the files in the directory.","errors": "- A vector of `S3_File` objects representing the files in the directory."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "read_bytes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["load bytes", "open bytes"],"icon": "data_input","description": "Reads all bytes in this file into a byte vector.","returns": "- The contents of the file as a vector of bytes.","errors": "- The contents of the file as a vector of bytes."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "read_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load text", "open text"],"icon": "data_input","description": "Reads the whole file into a `Text`, with specified encoding.","arguments": "- encoding: The text encoding to decode the file with. Defaults to UTF-8.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function.","returns": "- The contents of the file as `Text` decoded with the specified encoding.","errors": "- The contents of the file as `Text` decoded with the specified encoding."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "copy_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Copies the S3 file to the specified destination.","arguments": "- destination: the destination to copy the file to.\n- replace_existing: specifies if the operation should proceed if the\n  destination file already exists. Defaults to `False`.","returns": "- The destination file if the operation was successful.","errors": "- The destination file if the operation was successful."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "move_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Moves the file to the specified destination.","arguments": "- destination: the destination to move the file to.\n- replace_existing: specifies if the operation should proceed if the\n  destination file already exists. Defaults to `False`.","returns": "- The destination file if the operation was successful.","errors": "- The destination file if the operation was successful.","remarks": "! S3 Move is a Copy and Delete\n\n  Since S3 does not support moving files, this operation is implemented\n  as a copy followed by delete. Keep in mind that the space usage of the\n  file will briefly be doubled and that the operation may not be as fast\n  as a local move often is."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "delete", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Deletes the object.","arguments": "- recursive: If the target is a non-empty directory, it will only be\n  removed if this is set to `True`. Defaults to `False`, meaning that the\n  operation will fail if the directory is not empty. This option has no\n  effect for files or data links.","errors": "","remarks": "? Data Links\n  If the file is a data link, this will delete the link itself, not\n  affecting its target."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "delete_if_exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Deletes the file if it had existed.","arguments": "- recursive: If the target is a non-empty directory, it will only be\n  removed if this is set to `True`. Defaults to `False`, meaning that the\n  operation will fail if the directory is not empty. This option has no\n  effect for files or data links.","errors": ""},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "create_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Output","icon": "folder_add","description": "Within S3 the concept of creating directories has slightly different\nmeaning than on other filesystems.\n\nThe `create_directory` method is provided on `S3_File` only for\ncompatibility - to allow easy switching between file-systems.\n\nIt does not perform any actual operation. Note that in S3 a directory is\ntreated as existing if it contains any entries. Thus, even after calling\nthis `create_directory` method, the `exists` method may still yield\n`False` until the directory is populated with some files.\n\nTo warn about this specific behaviour, a warning is attached to the\nresult."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"subpath": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "folder","description": "Join two path segments together, normalizing the `..` and `.` sub-paths.","arguments": "- subpath: The path to join to the path of `self`.","returns": "- An `S3_File` representing the joined and normalised path, with the same\n  credentials.","remarks": "! S3 Directory Handling\n\n  Note that regular S3 buckets do not have a 'native' notion of\n  directories, instead they are emulated using prefixes and a delimiter\n  (in Enso, the delimiter is set to \"/\").\n\n  The trailing slash determines if the given path is treated as a\n  directory or as a regular file.\n\n  However, for ease-of-use, if a path without a trailing slash is used\n  with the `/` operator it will be accepted and the sub paths will be\n  resolved, even though such a path would not be treated as a directory\n  by any other operations.\n\n  See: https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-folders.html"},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "resolve_single_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"part": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An internal helper method that resolves a single part (subpath) of a path."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"subpaths": {"lazy": false, "type": "Vector | Text", "checked": true}},"aliases": [],"group": "Standard.Base.Calculations","icon": "folder","description": "Join two or more path segments together, normalizing the `..` and `.` subpaths.","arguments": "- sub-paths: The path segment or segments to join to the path of `self`.","returns": "- An `S3_File` representing the joined and normalised path, with the same\n  credentials.","remarks": "! S3 Directory Handling\n\n  Note that regular S3 buckets do not have a 'native' notion of\n  directories, instead they are emulated using prefixes and a delimiter\n  (in Enso, the delimiter is set to \"/\").\n\n  The trailing slash determines if the given path is treated as a\n  directory or as a regular file.\n\n  However, for ease-of-use, if a path without a trailing slash is used\n  with the `/` operator it will be accepted and the sub paths will be\n  resolved, even though such a path would not be treated as a directory\n  by any other operations.\n\n  See: https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-folders.html"},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the name of this file."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "extension", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the extension of the file."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "path", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the path of this file."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "uri", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the URI of this file\nThe URI is in the form `s3://bucket/path/to/file`."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the folder or file exists","returns": "- `True` if the bucket or object exists, `False` otherwise.","errors": "- `True` if the bucket or object exists, `False` otherwise.","remarks": "? Data Links\n  If the file is a data link, this checks if the data link itself exists. \n  It does not tell anything about existence of the data link target."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "size", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the size of a file in bytes.","errors": "","remarks": "? Data Links\n  If the file is a data link that points to a file, the size of the \n  target file will be returned."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "creation_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the creation time of a file.","returns": "- An `S3_Error` error as only the last modified time is available for S3\n  objects.","remarks": "? Data Links\n  If the file is a data link, this returns the creation time of the data \n  link."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "last_modified_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the last modified time of a file.","errors": "","remarks": "? Data Links\n  If the file is a data link, this returns the modification time of the \n  data link."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "is_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if this is a folder.","returns": "- `True` if the S3 path represents a folder, `False` otherwise.","remarks": "! S3 Directory Handling\n\n  Note that regular S3 buckets do not have a 'native' notion of\n  directories, instead they are emulated using prefixes and a delimiter\n  (in Enso, the delimiter is set to \"/\").\n\n  The trailing slash determines if the given path is treated as a\n  directory or as a regular file.\n\n\n? Data Links\n  If the file is a data link, this checks whether the target of the data \n  link is a directory."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "is_directory_no_follow_links", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if this file is a directory, not following links."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "is_regular_file", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if this is a regular file.","returns": "- `True` if the S3 path represents a file, `False` otherwise.","remarks": "! S3 Directory Handling\n\n  Note that regular S3 buckets do not have a 'native' notion of\n  directories, instead they are emulated using prefixes and a delimiter\n  (in Enso, the delimiter is set to \"/\").\n\n  The trailing slash determines if the given path is treated as a\n  directory or as a regular file.\n\n\n? Data Links\n  If the file is a data link, this checks whether the target of the data \n  link is a regular file."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "is_data_link", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "parent", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Resolves the parent of this file.","returns": "- The parent of this file as an `S3_File` object or if a top level then\n  `Nothing`."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "is_descendant_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if `self` is a descendant of `other`.","returns": "- `True` if `self` is a descendant of `other`, `False` otherwise."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Return the absolute path of this S3_File."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this S3_File."},
{"module": "Standard.AWS.S3.S3_File", "type": "File_Format_Metadata", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "File_Like", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "Writable_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "Data_Link_From_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_translate_file_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"related_file": {"lazy": false}, "result": {"lazy": false}},"aliases": [],"description": "A helper that translates lower level S3 errors to file-system errors."},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_without_trailing_slash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_File", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": [],"description": "Ensure the file has no trailing slash.\nThis is needed when treating a possible directory as a data link entity - to\nfind its S3 object we need to strip the trailing slash if it has one."},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_s3_file_as_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_check_is_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": [],"description": "If the file _may_ be a data link we now need to verify it further.\nOn S3 this is complicated because there is no direct notion of\ndirectories, so a path `s3://Bucket/a.datalink/b` can mean both\nthat `a.datalink` is a data link file, or just that `b` is a\nregular file inside a weirdly named 'directory' `a.datalink`.\n\nTo distinguish these scenarios we use the following heuristics:\n- if the entity under the given path `s3://Bucket/a.datalink`\n  exists, that means there is a file, so we treat it as a data link.\n- if that entity does not exist, but there are entities under the\n  path `s3://Bucket/a.datalink/`, we treat it as a directory.\n- if that entity does not exist and there are no 'child entities'\n  we determine the treatment based on the exact path containing a\n  trailing slash character - if the path was\n  `s3://Bucket/a.datalink`, that will be a data link (e.g. this\n  may be passed as destination of a write method while creating a\n  new link), but if it contains a slash\n  (`s3://Bucket/a.datalink/`) that will be treated as a directory.\n\nWe acknowledge an edge case where both objects\n`s3://Bucket/a.datalink` and `s3://Bucket/a.datalink/b` exist\n(since the concept of directories in S3 is 'simulated' and there\nis nothing preventing such aliasing). In that case, we treat the\nfirst object (`s3://Bucket/a.datalink`) as a data link, thus\nrendering `s3://Bucket/a.datalink/b` inaccessible. This is not\nideal, but we report a warning. Note that the user cannot create\nsuch situation from Enso because once the entity starts to exist\n(either as data link or as directory) it cannot be interpreted as\nthe other one. We can still encounter such scenarios in buckets\ncreated externally."},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_exists_entity_direct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": [],"description": "Checks if an object exists under the given key _directly_.\nThis is different from `exists` which will be true if any child objects exist\nunder a given directory key. This method, however, will only return true if\nan object with the exact key exists and is not just an empty marker (as used\nsometimes to mark directories)."},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_has_children_entities", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_invalidate_caches_on_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.AWS", "type": "AWS", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS", "arguments": {},"aliases": [],"description": "Methods for interacting with AWS services."},
{"module": "Standard.AWS.AWS", "type": "AWS", "name": "signed_fetch", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true, "default": "Missing_Argument.throw \"uri\""}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "format": {"lazy": false, "default": "Auto_Detect"}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}, "region_service": {"lazy": false, "type": "AWS_Region_Service", "checked": true, "default": "AWS.resolve_region_and_service uri"}},"aliases": ["download", "http get"],"icon": "data_input","description": "Fetches from an AWS URI signing the request with the necessary headers,\nand returns the response, parsing the body if the content-type is\nrecognised. Returns an error if the status code does not represent a\nsuccessful response.","arguments": "- method: The HTTP method to use. Must be one of `HTTP_Method.Get`,\n  `HTTP_Method.Head`, `HTTP_Method.Delete`, `HTTP_Method.Options`.\n  Defaults to `HTTP_Method.Get`.\n- headers: The headers to send with the request. Defaults to an empty\n  vector.\n- format: The format to use for interpreting the response.\n  Defaults to `Auto_Detect`. If `Raw_Response` is selected or if the\n  format cannot be determined automatically, a raw HTTP `Response` will\n  be returned.\n- credentials: The credentials to use for signing the request. Defaults\n  to the default AWS credentials.\n- region_service: The region and service to use for signing the request.\n  Defaults to the region and service parsed from the URI."},
{"module": "Standard.AWS.AWS", "type": "AWS", "name": "signed_post", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true, "default": "Missing_Argument.throw \"uri\""}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Post"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "response_format": {"lazy": false, "default": "Auto_Detect"}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}, "region_service": {"lazy": false, "type": "AWS_Region_Service", "checked": true, "default": "AWS.resolve_region_and_service uri"}},"aliases": ["http post", "upload"],"icon": "data_upload","description": "Writes the provided data to the provided AWS URI signing the request with\nthe necessary headers. Returns the response, parsing the body if the\ncontent-type is recognised. Returns an error if the status code does not\nrepresent a successful response.","arguments": "- uri: The URI to fetch.\n- body: The data to write. See `Supported Body Types` below.\n- method: The HTTP method to use. Must be one of `HTTP_Method.Post`,\n  `HTTP_Method.Put`, `HTTP_Method.Patch`. Defaults to `HTTP_Method.Post`.\n- headers: The headers to send with the request. Defaults to an empty\n  vector.\n- response_format: The format to use for interpreting the response.\n  Defaults to `Auto_Detect`. If `Raw_Response` is selected or if the\n  format cannot be determined automatically, a raw HTTP `Response` will\n  be returned.\n- credentials: The credentials to use for signing the request. Defaults\n  to the default AWS credentials.\n- region_service: The region and service to use for signing the request.\n  Defaults to the region and service parsed from the URI."},
{"module": "Standard.AWS.AWS", "type": "AWS", "name": "hash_bytes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bytes": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Hash a Vector of bytes using SHA256 (as used by AWS)."},
{"module": "Standard.AWS.AWS", "type": "AWS", "name": "resolve_region_and_service", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true, "default": "Missing_Argument.throw \"uri\""}},"aliases": [],"description": "Resolve the region and service from an AWS based URI.\nSplits a standard form AWS URI into the region and service.\n\nThe URI must be in the forms:\n- `https://(*.)<service>.<region>.amazonaws.com`.\n- `https://(*.)<region>.<service>.amazonaws.com`.","arguments": "- uri: The URI to resolve."},
{"module": "Standard.AWS.AWS", "type": "AWS_Region_Service", "name": "Region_Service", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Region_Service", "arguments": {"region": {"lazy": false, "type": "Text", "checked": true}, "service": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Holds the region and service of an AWS URI."},
{"module": "Standard.AWS.AWS", "type": "", "name": "_make_client", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false}, "region_service": {"lazy": false}, "http": {"lazy": false}, "hash": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "Default", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Credential", "arguments": {},"aliases": [],"description": "Access AWS using the default credential method."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "Profile", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Credential", "arguments": {"profile": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027default\u0027"}},"aliases": [],"description": "Access using IAM via an AWS profile.","arguments": "- profile: AWS profile name (if empty uses default)."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "Key", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Credential", "arguments": {"access_key_id": {"lazy": false, "type": "Text|Enso_Secret", "checked": true, "default": "Missing_Argument.throw \"access_key_id\""}, "secret_access_key": {"lazy": false, "type": "Text|Enso_Secret", "checked": true, "default": "Missing_Argument.throw \"secret_access_key\""}},"aliases": [],"description": "Access using IAM via an AWS access key ID and secret access key.","arguments": "- access_key_id: AWS access key ID.\n- secret_access_key: AWS secret access key."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "With_Configuration", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "AWS_Credential", "arguments": {"base_credential": {"lazy": false, "type": "AWS_Credential", "checked": true}, "default_region": {"lazy": false, "type": "AWS_Region", "checked": true}},"aliases": [],"description": "Allows to override additional configuration associated with the credential.","arguments": "- base_credential: The base credential to use. It should be one of:\n  Default, Profile, Key.\n- default_region: The default region to use for operations that may\n  require a region but it is not explicitly specified."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "profile_names", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "cloud","description": "Returns a vector of the available profile names."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "is_default_credential_available", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "A helper method that checks if default AWS credentials are available.\nThis method returns `True` if and only if the `AWS_Credential.Default`\nwill be able to resolve to some credentials. If this method returns\n`False`, operations relying on `AWS_Credential.Default` will fail."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "with_default_override", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"override": {"lazy": false, "type": "AWS_Credential", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Runs the action with the default credentials overridden.\n\nThis method is mainly meant to be used for testing, but it can also be\nused by users if they do not have means to override the default\ncredentials in their environment."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"add_user_password": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "as_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generates a Java representation of the credential.\n\nNote that this ignores the additional properties that may be set by\n`With_Configuration` constructor. These are expected to be handled\nseparately."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "with_default_region", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Credential", "arguments": {"region": {"lazy": false, "type": "AWS_Region", "checked": true, "default": "Missing_Argument.throw \"region\""}},"aliases": [],"icon": "metadata","description": "Sets the default region for operations that need it but do not specify it\nexplicitly."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "get_default_region", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "AWS_Region", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "Default", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Region", "arguments": {},"aliases": [],"description": "The default AWS region is inferred based on the following settings:\n1. If `AWS_REGION` environment variable is set, it is used as the default.\n2. If the `~/.aws` configuration specifies a region, it is used.\n3. If running in the Enso Cloud or on any EC2 instance, the region is inferred from the instance metadata.\n4. If the region cannot be inferred in any way, `eu-west-1` is used as a fallback."},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "Default_With_Profile", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Region", "arguments": {"profile_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Resolves default region in the same manner as `Default`,\nbut in step (2), it uses the specified profile instead of a default one."},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "Region", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Region", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "AWS Region specified by its id."},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "all_region_ids", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "resolve_id", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "as_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Java_Region", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Region", "type": "", "name": "fallback_region", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The fallback region used if all other methods cannot determine the default region."},
{"module": "Standard.AWS.Errors", "type": "Invalid_AWS_URI", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_AWS_URI", "arguments": {"uri": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "Invalid_AWS_URI", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "AWS_SDK_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "AWS_SDK_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "AWS_SDK_Error", "name": "handle_java_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "AWS_SDK_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Error", "arguments": {"message": {"lazy": false, "type": "Text|Nothing", "checked": true}, "code": {"lazy": false, "type": "Text|Nothing", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Bucket_Not_Found", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Bucket_Not_Found", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Bucket_Not_Found", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Key_Not_Found", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Key_Not_Found", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true}, "key": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Key_Not_Found", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "More_Records_Available", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "More_Records_Available", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "More_Records_Available", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Warning", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Warning", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Warning", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Warning", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Download.Download_Mode", "type": "Download_Mode", "name": "If_Not_Exists", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Download_Mode", "arguments": {},"aliases": [],"description": "Download the file if it does not already exist on disk."},
{"module": "Standard.Base.Data.Download.Download_Mode", "type": "Download_Mode", "name": "If_Older_Than", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Download_Mode", "arguments": {"age": {"lazy": false, "type": "Duration", "checked": true}},"aliases": [],"description": "Download the file if it is older than the specified age."},
{"module": "Standard.Base.Data.Download.Download_Mode", "type": "Download_Mode", "name": "Always", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Download_Mode", "arguments": {},"aliases": [],"description": "Always download."},
{"module": "Standard.Base.Data.Download.Download_Mode", "type": "Download_Mode", "name": "should_download", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "Determine if a file should be downloaded, based on the file type,\ndownload mode, and file age."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Any", "name": "to_json", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts the given value to a JSON serialized value."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Error", "name": "to_json", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serialized value."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Text", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms and maps, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Number", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms and maps, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Integer", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Converts a JS_Object to an Integer."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Decimal", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Converts a JS_Object to a Decimal."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Boolean", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms and maps, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Nothing", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms and maps, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Array", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms and maps, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Vector", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Any", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Error", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Locale", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object.\nCustom serialization for Locale, serializes the language, country and variant."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Dictionary", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object.\nFor Map, this is serialized as a Vector of Key-Value pairs.\n\nEnso Maps support arbitrary types as map keys, so we cannot serialize them into JS Objects because there only strings are accepted as keys."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Text", "name": "parse_fast_json", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Extension for Text to allow use.\nDeprecated: The `parse_json` method uses a faster implementation now by default"},
{"module": "Standard.Base.Data.Numeric.Internal.Decimal_Internal", "type": "Decimal_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decimal_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Numeric.Internal.Decimal_Internal", "type": "Decimal_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Decimal", "checked": true}, "y": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numeric.Internal.Decimal_Internal", "type": "Decimal_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numeric.Math_Context", "type": "Unlimited", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Unlimited", "arguments": {},"aliases": [],"description": "Specifies infinite precision in a `Math_Context`.","examples": "> Example\n  Specify infinite precision in constructing a Decimal.\n\n      d1 = Decimal.new \"1\"\n      d3 = Decimal.new \"3\"\n      d4 = Decimal.new \"4\"\n\n      d1.divide d3 (Math_Context.new 12)\n      # => 0.333333333333\n\n      d1.divide d3 (Math_Context.new Unlimited)\n      # => Arithmetic_Error.Error 'Non-terminating decimal expansion; no exact representable decimal result.'\n\n      d1.divide d4 (Math_Context.new Unlimited)\n      # => 0.25"},
{"module": "Standard.Base.Data.Numeric.Math_Context", "type": "Math_Context", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Math_Context", "arguments": {"math_context": {"lazy": false, "type": "MathContext", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numeric.Math_Context", "type": "Math_Context", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"precision": {"lazy": false, "type": "Integer | Unlimited", "checked": true}, "rounding_mode": {"lazy": false, "type": "Rounding_Mode", "checked": true, "default": "Rounding_Mode.half_up"}},"aliases": [],"icon": "math","description": "Construct a `Math_Context` value.","arguments": "- precision: The non-negative int precision setting. A value of `0`\n  specifies exact operations.\n- rounding_mode: The rounding mode to use."},
{"module": "Standard.Base.Data.Numeric.Rounding_Mode", "type": "Rounding_Mode", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Rounding_Mode", "arguments": {"rounding_mode": {"lazy": false, "type": "RoundingMode", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numeric.Rounding_Mode", "type": "Rounding_Mode", "name": "half_up", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "Round towards positive infinity for positive numbers, and negative\ninfinity for negative numbers. (This is the default.)"},
{"module": "Standard.Base.Data.Numeric.Rounding_Mode", "type": "Rounding_Mode", "name": "bankers", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "Rownd towards the nearest neighbor, with ties broken by rounding towards\nthe nearest even neighbor."},
{"module": "Standard.Base.Data.Ordering.Natural_Order", "type": "", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"text1": {"lazy": false}, "text2": {"lazy": false}, "case_sensitivity": {"lazy": false, "default": "Case_Sensitivity.Sensitive"}},"aliases": [],"description": "Compares two text values according to the natural dictionary ordering.","examples": "> Example\n  Compare two texts according to the natural dictionary ordering.\n\n      Natural_Order.compare \"a2\" \"a100\" == Ordering.Less\n\n\n> Example\n  Sort a vector of texts according to the natural dictionary ordering.\n\n      [\"a2\", \"a1\", \"a100\", \"a001\", \"a0001\"].sort by=Natural_Order.compare . should_equal [\"a0001\", \"a001\", \"a1\", \"a2\", \"a100\"]"},
{"module": "Standard.Base.Data.Ordering.Vector_Lexicographic_Order", "type": "", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"vector1": {"lazy": false}, "vector2": {"lazy": false}, "element_comparator": {"lazy": false, "default": "Ordering.compare _ _", "comment": "- element_comparator (optional): A custom compare function defining the order   between particular elements. Uses the default ordering by default."}},"aliases": [],"description": "Compares two Vectors according to the lexicographic ordering.\n\n\n\nReturns whether `vector1` is less, equal or greater than `vector2` according\nto the lexicographic ordering. The ordering is defined as follows:\n- If `vector1` is empty and `vector2` is not, than `Less` is returned;\n  similarly if `vector1` is non-empty, but `vector2` is empty, `Greater` is\n  returned.\n- If the first element of `vector1` is less or greater than the first element\n  of `vector2` than this is specifies the ordering between the vectors. If\n  the first element is equal, the tails of both vectors are compared\n  according to the same algorithm.","arguments": "- vector1: The first vector to compare.\n- vector2: The second vector to compare.\n- element_comparator (optional): A custom compare function defining the order\n  between particular elements. Uses the default ordering by default.","examples": "> Example\n  Compare two vectors lexicographically.\n\n      Vector_Lexicographic_Order.compare [1, 2, 3] [1, 3, 0] == Ordering.Less\n      Vector_Lexicographic_Order.compare [1, 2, 3] [1, 2] == Ordering.Greater\n      Vector_Lexicographic_Order.compare [] [1] == Ordering.Less\n      Vector_Lexicographic_Order.compare [1] [1] == Ordering.Equal"},
{"module": "Standard.Base.Data.Range.Extensions", "type": "Integer", "name": "up_to", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": ["range"],"group": "Input","icon": "input_number","description": "Creates an increasing range of integers from `self` to `n`.","arguments": "- n: The end of the range.\n- include_end: Specifies if the right end of the range should be included.\n  By default, the range is right-exclusive.\n- step: The step between each element in the range. By default, the step is\n  1.","examples": "> Example\n  Create a range containing the numbers 0, 1, 2, 3, 4.\n\n      0.up_to 5\n\n\n> Example\n  Create a range containing elements 1, 2, 3.\n\n      1.up_to 3 include_end=True"},
{"module": "Standard.Base.Data.Range.Extensions", "type": "Integer", "name": "down_to", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": ["range"],"group": "Input","icon": "input_number","description": "Creates a decreasing right-exclusive range of integers from `self` to `n`.","arguments": "- n: The end of the range.\n- include_end: Specifies if the right end of the range should be included.\n  By default, the range is right-exclusive.\n- step: The step between each element in the range. By default, the step is\n  1. Step should be a positive integer and will be subtracted between each.","examples": "> Example\n  Create a range containing the numbers 5, 4, 3, 2, 1.\n\n      5.down_to 0\n\n\n> Example\n  Create a range containing elements 3, 2, 1.\n\n      3.down_to 1 include_end=True"},
{"module": "Standard.Base.Data.Read.Many_Files_List", "type": "Many_Files_List", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Many_Files_List", "arguments": {"original_value": {"lazy": false}, "paths_to_load": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"arguments": "- original_value: The original value that represents a list of files.\n  Some return modes may use it as it contains more information than just\n  list of files (e.g. it can be a source table).\n- paths_to_load: A vector of paths to load. This is the fallback that can\n  be used by any return mode if it does not recognize the original value.\n  The vector is expected to contain values that can be passed into\n  `Data.read` (so it can be Text, File, URI or any other kind of file -\n  e.g. S3_File)."},
{"module": "Standard.Base.Data.Read.Many_Files_List", "type": "Many_Files_List", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Many_Files_List", "type": "Many_Files_List", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Many_Files_List", "type": "Many_Files_List", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Return_As", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "make_return", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Many_Files_List", "checked": true}, "objects": {"lazy": false, "type": "Vector (Any | Failed_To_Load)", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Base", "name": "As_Vector", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Return_As_Base", "arguments": {},"aliases": [],"description": "Will return a Vector of objects that were loaded.\nThe order of the returned Vector is the same as in the input."},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Base", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Base", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Base", "name": "make_return", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Many_Files_List", "checked": true}, "objects": {"lazy": false, "type": "Vector (Any | Failed_To_Load)", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Table_Mock", "name": "As_Merged_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Return_As_Table_Mock", "arguments": {"columns_to_keep": {"lazy": false, "default": "Nothing"}, "match": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Table_Mock", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "", "name": "_get_known_return_classes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "", "name": "replace_with_nothing_and_propagate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false, "type": "Vector (Any | Failed_To_Load)", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "A helper method that takes a Vector and replaces `Failed_To_Load` with `Nothing`, raising them as warnings."},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Return_As_Base", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Statistics.Extensions", "type": "Vector", "name": "compute", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}},"aliases": [],"group": "Statistics","icon": "transform4","description": "Compute a single statistic on the vector (ignoring Nothing and NaN values).","arguments": "- statistic: Statistic to calculate."},
{"module": "Standard.Base.Data.Statistics.Extensions", "type": "Vector", "name": "compute_bulk", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"statistics": {"lazy": false, "type": "Vector", "checked": true, "default": "[..Count, ..Sum]"}},"aliases": [],"icon": "column_add","description": "Compute statistics on the vector (ignoring Nothing and NaN values).","arguments": "- statistics: Set of statistics to calculate."},
{"module": "Standard.Base.Data.Statistics.Extensions", "type": "Vector", "name": "running", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}},"aliases": ["count", "cumulative", "maximum", "mean", "minimum", "product", "standard deviation", "sum", "total", "variance"],"group": "Statistics","icon": "math","description": "Compute a single running statistic on the vector (ignoring Nothing and NaN\nvalues).","arguments": "- statistic: Statistic to calculate."},
{"module": "Standard.Base.Data.Statistics.Extensions", "type": "Vector", "name": "running_bulk", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"statistics": {"lazy": false, "type": "Vector Statistic", "checked": true, "default": "[..Count, ..Sum]"}},"aliases": [],"icon": "math","description": "Compute a set running statistics on the vector (ignoring Nothing and NaN\nvalues).","arguments": "- statistics: Set of statistics to calculate."},
{"module": "Standard.Base.Data.Statistics.Extensions", "type": "Vector", "name": "rank_data", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"method": {"lazy": false, "type": "Rank_Method", "checked": true, "default": "..Average"}},"aliases": [],"group": "Statistics","icon": "column_add","description": "Assigns a rank to each value of data, dealing with equal values according to\nthe method.","arguments": "- method: Method used to deal with equal values."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Match_Iterator", "arguments": {"pattern": {"lazy": false, "type": "Regex", "checked": true}, "input": {"lazy": false, "type": "Text", "checked": true}, "cursor": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}, "input": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator", "name": "next", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Return the next match, or the last filler string if there is no\nadditional match.\n\nAlso returns the next iterator, if there was a match."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator", "name": "early_exit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the remainder of the string, unmatched."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator_Value", "name": "Next", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Match_Iterator_Value", "arguments": {"filler": {"lazy": false, "type": "Utf_16_Span", "checked": true}, "match": {"lazy": false, "type": "Match", "checked": true}, "next_iterator": {"lazy": false, "type": "Match_Iterator", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator_Value", "name": "Last", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Match_Iterator_Value", "arguments": {"filler": {"lazy": false, "type": "Utf_16_Span", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "Replacer", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Replacer", "arguments": {"replacement": {"lazy": false, "type": "Vector Replacement", "checked": true}},"aliases": [],"description": "Implements a replacement for a regular expression.\n\nRegex.replace uses a Replacer to replace each regex match with\na replacement string. This string can contain references to match\ngroups from the original regex.\n\nThe `new` smart constructor parses a Text into a vector of\nReplacements. Each Replacement is either a literal string or a\ngroup number. To provide a replacement for a regex match, the\nReplacer iterates through the Replacement vector, substitutes\nthe match group contents for each group number, and concatenates\nall the strings together to form the full replacement string."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "Replacer", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replacement_string": {"lazy": false}, "pattern": {"lazy": false}},"aliases": [],"description": "Creates a new Replacer.","arguments": "- replacement_string: a string, possibly containing group references,\n  that will be used to provide a replacement in a regex match."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "Replacer", "name": "replace", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"match": {"lazy": false}},"aliases": [],"description": "Build a replacement string from a match.","arguments": "- match: the match from the original string that is to be replaced."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "Replacement", "name": "Literal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Replacement", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A string literal to replace with."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "Replacement", "name": "Substitution", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Replacement", "arguments": {"group_number": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Target group to insert."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "get_lru_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get the size of the Replacer LRU cache. For testing."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "replacer_cache_lookup", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replacement_string": {"lazy": false}},"aliases": [],"description": "Look up a replacement string in the Replacer LRU cache. For testing."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "group_reference_regex", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "build_replacement_vector_cached", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replacement_string": {"lazy": false}, "pattern": {"lazy": false}},"aliases": [],"description": "Build a replacement vector.\n\nParse the replacement string into an alternating series of literal\nstrings and group reference numbers.\n\nUses Replacement_Cache to avoid rebuilding the vector for recently used\nreplacement strings."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "build_replacement_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replacement_string": {"lazy": false}, "pattern": {"lazy": false}},"aliases": [],"description": "Build a replacement vector.\n\nParse the replacement string into an alternating series of literal\nstrings and group reference numbers."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "parse_group_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}, "match": {"lazy": false}},"aliases": [],"description": "Parse a capture group reference.\n\n\n\nReturns a Replacement: a group number, or, in the case of `$$`, a literal.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions","arguments": "- pattern: the Regex used to initiate the replacement. This is used\n  to identify and validate capture groups.\n- match: the match of the replacement string against group_reference_regex."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Match", "arguments": {"pattern": {"lazy": false, "type": "Regex", "checked": true}, "internal_regex_result": {"lazy": false, "type": "Any", "checked": true}, "input": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "internal_regex_result : RegexResult (Truffle)\n(See https://github.com/oracle/graal/blob/master/regex/docs/README.md)"},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the `Match`."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "internal_start", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false}},"aliases": [],"description": "Returns the start UTF16 character index of a group.\n\nThis method goes directly to the internal match object. It does not\ntake group names, and does not have a default.","arguments": "- group: the integer group number."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "internal_end", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false}},"aliases": [],"description": "Returns the end UTF16 character index, plus one, of a group.\n\nThis method goes directly to the internal match object. It does not\ntake group names, and does not have a default.","arguments": "- group: the integer group number."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "utf_16_start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}},"aliases": [],"icon": "metadata","description": "Returns the start UTF16 character index of a group.","arguments": "- group: the group name or number. Marked groups defined in the regex are\n  numbered starting at 1; group 0 refers to the entire match."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "utf_16_end", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}},"aliases": [],"icon": "metadata","description": "Returns the end UTF16 character index, plus one, of a group.","arguments": "- group: the group name or number. Marked groups defined in the regex are\n  numbered starting at 1; group 0 refers to the entire match."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the start grapheme index of a group.","arguments": "- group: the group name or number. Marked groups defined in the regex are\n  numbered starting at 1; group 0 refers to the entire match.","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "end", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the end grapheme index, plus one, of a group.","arguments": "- group: the group name or number. Marked groups defined in the regex are\n  numbered starting at 1; group 0 refers to the entire match.","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "utf_16_span", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}, "default": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "metadata","description": "Gets the UTF16 span matched by the group with the provided identifier, or\na default value if the group did not participate in the match. If no such\ngroup exists for the provided identifier, a `No_Such_Group` is returned.","arguments": "- group: The integer index or name of that group.","remarks": "? The Full Match\n  The group with index 0 is always the full match of the pattern.\n\n\n? Named Groups by Index\n  If the regex contained named groups, these may also be accessed by\n  index based on their position in the pattern.\n\n\n! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications.\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n     \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. If the caller tries to get group 3,\nMatch.utf_16_span will return the default value."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "span", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}, "default": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the grapheme span matched by the group with the provided identifier, or\na default value if the group did not participate in the match. If no such group\nexists for the provided identifier, a `No_Such_Group` is returned.","arguments": "- group: The integer index or name of that group.","remarks": "? The Full Match\n  The group with index 0 is always the full match of the pattern.\n\n\n? Named Groups by Index\n  If the regex contained named groups, these may also be accessed by\n  index based on their position in the pattern.\n\n\n! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications.\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n     \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. If the caller tries to get\ngroup 3, Match.span will return the default value."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}, "default": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the Text matched by the group with the provided identifier, or\na default value if the group did not participate in the match. If no such\ngroup exists for the provided identifier, a `No_Such_Group` is returned.","arguments": "- group: The integer index or name of that group.","remarks": "? The Full Match\n  The group with index 0 is always the full match of the pattern.\n\n\n? Named Groups by Index\n  If the regex contained named groups, these may also be accessed by\n  index based on their position in the pattern.\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n     \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. If the caller tries to get\ngroup 3, Match.text will return the default value."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "groups", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"default": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets a vector containing the Text of _all_ of the capturing groups in\nthe pattern, replacing the value of groups that did not participate in\nthe match with `default`. This vector includes group 0, which contains\nthe entire match.","arguments": "- default: The value to return for a given index when the group at that\n  index did not participate in the match.","examples": "> Example\n  Get a vector of the text matched by all of the groups in this match,\n  replacing the value for groups that didn't match with \"UNMATCHED\".\n\n      import Standard.Examples\n\n      example_groups =\n          match = Examples.match\n          match.groups default=\"UNMATCHED\"","remarks": "? The Full Match\n  The group with index 0 is always the full match of the pattern.\n\n\n? Named Groups by Index\n  If the regex contained named groups, these may also be accessed by\n  index based on their position in the pattern.\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n     \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. `groups` will return the\ndefault value for groups that do not participate."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "named_groups", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"default": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets a Dictionary containing the named capturing groups for the pattern,\nreplacing the value for groups that did not participate in the match with\n`default`.\n\n\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n     \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. `named_groups` will map\na named group that does not participate to the default value.","arguments": "- default: The value to return for a given name when the group at that\n  index did not participate in the match.","examples": "> Example\n  Get the Dictionary of all of the named groups in this match, replacing\n  the value for groups that didn't participate in the match with\n  \"UNMATCHED\".\n\n     pattern = Regex.compile \"(.. .. )(?<letters>.+)()??(?<empty>)??\"\n     input = \"aa ab abc a bc bcd\"\n     match = pattern.match input\n     ## match.named_groups.keys.sort == [\"empty\", \"letters\"]"},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "split","description": "Gets the grapheme span matched by the group with the provided index, or\na default value if the group did not participate in the match.\nIf the identifier is invalid then `if_missing` is returned.","arguments": "- id: The integer index or name of that group.\n- if_missing: The value to return if the index is out of bounds."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "split","description": "Gets the grapheme span matched by the group with the provided index, or\na default value if the group did not participate in the match.\nIf the identifier is invalid then Index_Out_Of_Bounds is thrown.","arguments": "- id: The integer index or name of that group.\n- if_missing: The value to return if the index is out of bounds."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Leading_Whitespace", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more whitespace characters at the beginning of a string."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Trailing_Whitespace", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more whitespace characters at the end of a string."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Duplicate_Whitespace", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more whitespace characters that are preceded by another whitespace character."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "All_Whitespace", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more whitespace characters anywhere in a string."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Newlines", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more newline characters."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Leading_Numbers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more digits at the beginning of a string."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Trailing_Numbers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more digits at the end of a string."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Non_ASCII", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any character that is not in the ASCII range (0x00-0x7F)."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Tabs", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any tab characters."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Letters", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any alphabetic characters (both lowercase and uppercase)."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Numbers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any digits."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Punctuation", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any punctuation characters from the set: comma, period, exclamation mark, question mark, colon, semicolon, single quote, double quote, parenthesis."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Symbols", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any characters that are not an alphabetic character, digit, or whitespace."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "regex_pattern", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Regex", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Named_Pattern", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Case", "type": "Case", "name": "Lower", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case", "arguments": {},"aliases": [],"description": "All letters in lower case."},
{"module": "Standard.Base.Data.Text.Case", "type": "Case", "name": "Upper", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case", "arguments": {},"aliases": [],"description": "All letters in upper case."},
{"module": "Standard.Base.Data.Text.Case", "type": "Case", "name": "Title", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case", "arguments": {},"aliases": [],"description": "First letter of each word in upper case, rest in lower case."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "Default", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case_Sensitivity", "arguments": {},"aliases": [],"description": "Use the default case-sensitivity for the environment.\nFor in-memory operations, it will be case sensitive.\nFor database operations, it will follow the collation default."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "Sensitive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case_Sensitivity", "arguments": {},"aliases": [],"description": "Represents a case-sensitive comparison mode."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "Insensitive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case_Sensitivity", "arguments": {"locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"description": "Represents a case-insensitive comparison mode.","arguments": "- locale: The locale used for the comparison."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "folding_strategy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"case_sensitivity": {"lazy": false}},"aliases": [],"description": "Creates a Java `TextFoldingStrategy` from the case sensitivity setting."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Case_Sensitivity to a friendly string."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "is_case_insensitive_in_memory", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Is case insensitive when in memory. This requires that, if\ncase-insensitive, that the locale be the default locale, and if it's not,\nthrows Illegal_Argument."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "to_explicit_sensitivity_in_memory", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to either Sensitive or Insensitive, for the in-memory case."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "disallow_non_default_locale", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Throws an error if self is Insensitive with a non-default locale"},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "Default", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Encoding", "arguments": {},"aliases": [],"description": "A default encoding that will try to guess the encoding based on some heuristics.\nSee `Encoding.default`."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Encoding", "arguments": {"internal_character_set": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An encoding identified by its Java name.","arguments": "- character_set: java.nio.charset name."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Gets the default drop down option for Encoding."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "all_character_sets", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get all available character sets from Java as Encodings.\nUsed to provide auto completion in the UI."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "all_encodings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get all available Encodings."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "from_name", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"icon": "convert","description": "Create an Encoding from a Text."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "from_java_charset", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Encoding", "arguments": {"charset": {"lazy": false, "type": "Charset", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "default", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Encoding", "arguments": {},"aliases": [],"icon": "convert","description": "A default encoding that will try to guess the encoding based on some\nheuristics.\n\nIf a BOM is present, it will be used to determine UTF-8 or UTF-16\nencoding. Otherwise, the input is decoded using UTF-8 unless it contains\ninvalid UTF-8 sequences, in which case Windows-1252 is used as a fallback.\n\nWhen used for encoding, it will either use the same encoding detection\nheuristics as in read in case of Append mode. When writing a new file,\nit will always use UTF-8.\n\nThis encoding cannot be passed to some functions that require a Java\nCharset."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "ascii", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for ASCII."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "utf_8", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Unicode UTF-8."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "utf_16_le", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Unicode UTF-16 Little Endian."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "utf_16_be", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Unicode UTF-16 Big Endian."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "utf_32_le", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Unicode UTF-32 Little Endian."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "utf_32_be", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Unicode UTF-32 Big Endian."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1250", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Central European (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1251", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Cyrillic (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1252", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["iso-8859-1"],"icon": "convert","description": "Encoding for Western European (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1253", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Greek (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1254", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["iso-8859-9"],"icon": "convert","description": "Encoding for Turkish (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1255", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Hebrew (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1256", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Arabic (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1257", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Baltic (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1258", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Vietnamese (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "to_java_charset", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert an Encoding to it's corresponding Java Charset, if applicable.\nThis method should be used in places not aware of special logic for the\nDefault encoding. In such places, usage of Default encoding will be forbidden."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "to_java_charset_or_null", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert an Encoding to it's corresponding Java Charset or null if it is the Default encoding.\nThis method should only be used in places where a null Charset is expected - i.e. places aware of the Default encoding."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "character_set_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text ! Illegal_Argument", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the name of the character set."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Encoding to a friendly string."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "reverse", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Text","icon": "text","description": "Returns a new `Text` object with the characters in the reverse order of the input.","examples": "> Example\n  Reverse the text \"Hello, world!\".\n\n      \"Hello, world!\".reverse","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "each", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies the provided `function` to each character in `self`.\n\n\n\nThis method does not return the results, so it is only useful for performing\ncomputations with side-effects.\n\nIf the function returns a dataflow error, the error is converted to a\npanic and thrown immediately stopping further processing.","arguments": "- function: The operation to apply to each character in the text.","examples": "> Example\n  Print each character in the text \"aaa\".\n\n      \"aaa\".each IO.println","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "at", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": ["get character"],"group": "Selections","icon": "split","description": "Returns a character from the text at the specified index (0-based).","arguments": "- index: The location in the text to get the character from. The\n    index is also allowed be negative, then the characters are\n    counted from the end of the text, i.e. -1 will correspond to the\n    last character.","examples": "> Example\n  Get the individual characters in the text \"건반(Korean)\".\n\n      \"건반(Korean)\".at 1 == \"반\"","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "get", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": ["get character"],"icon": "split","description": "Returns a character from the text at the specified index (0-based).\nIf the index is invalid then `if_missing` is returned.","arguments": "- index: The location in the text to get the character from. The\n    index is also allowed be negative, then the characters are\n    counted from the end of the text, i.e. -1 will correspond to the\n    last character.\n  - if_missing: The value to return if the index is out of bounds.","examples": "> Example\n  Get the individual characters in the text \"건반(Korean)\".\n\n      \"건반(Korean)\".get 1 == \"반\"","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "first", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "split","description": "Returns the first character from the text.","examples": "> Example\n  Get the first character in the text \"건반(Korean)\".\n\n      \"건반(Korean)\".first == \"건\"","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "second", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "split","description": "Returns the second character from the text.","examples": "> Example\n  Get the second character in the text \"건반(Korean)\".\n\n      \"건반(Korean)\".second == \"반\"","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "last", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "split","description": "Returns the last character from the text.","examples": "> Example\n  Get the last character in the text \"건반(Korean)\".\n\n      \"건반(Korean)\".last == \")\"","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "characters", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["get characters"],"group": "Text","icon": "convert","description": "Returns a vector containing all characters in the given text.","examples": "> Example\n  Get the individual characters in the text \"건반(Korean)\".\n\n      \"건반(Korean)\".characters","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "find", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Regex | Text", "checked": true, "default": "\".*\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["match"],"group": "Selections","icon": "find","description": "Find the regular expression `pattern` in `self`, returning the first match\nif present or `Nothing` if not found.\n\nFor details on Enso's Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","arguments": "- pattern: The pattern to match `self` against.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  Find the first substring matching the regex.\n\n      example_find =\n          ## This matches `abc` @ character 11\n          \"aabbbbccccaabcaaaa\".find \"a[ab]c\"\n      example_find_insensitive =\n          ## This matches `aBc` @ character 11\n          \"aabbbbccccaaBcaaaa\".find \"a[ab]c\" Case_Sensitivity.Insensitive","errors": ""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "find_all", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Text|Regex", "checked": true, "default": "\".*\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["matches"],"group": "Selections","icon": "find","description": "Finds all the matches of the regular expression `pattern` in `self`,\nreturning a Vector. If not found, will be an empty Vector.\n\nFor details on Enso's Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","arguments": "- pattern: The pattern to match `self` against.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  Find the substring matching the regex.\n\n      example_find_all =\n           ## This matches `aabbbbc` @ character 0 and `abc` @ character 11\n          \"aabbbbccccaabcaaaa\".find_all \"a[ab]+c\"\n      example_find_all_insensitive =\n           ## This matches `aABbbbc` @ character 0 and `aBC` @ character 11\n          \"aABbbbccccaaBCaaaa\".find_all \"a[ab]+c\" Case_Sensitivity.Insensitive","errors": ""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "match", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean ! Regex_Syntax_Error | Illegal_Argument", "arguments": {"pattern": {"lazy": false, "type": "Text|Regex", "checked": true, "default": "\".*\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["check matches", "like", "regex"],"group": "Text","icon": "preparation","description": "Checks if the whole text in `self` matches a provided `pattern`.\n\nFor details on Enso's Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","arguments": "- pattern: The pattern to match `self` against.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  Checks if whole text matches a basic email regex.\n\n      example_match =\n          regex = \".+ct@.+\"\n          # Evaluates to true\n          \"contact@enso.org\".match regex\n      example_match_insensitive =\n          regex = \".+ct@.+\"\n          # Evaluates to true\n          \"CONTACT@enso.org\".match regex Case_Sensitivity.Insensitive","errors": ""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "to_regex", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"case_insensitive": {"lazy": false, "default": "False"}},"aliases": [],"group": "Text","icon": "text","description": "Compile the text into a regex pattern that can be used for matching.\n\n\n\nIf an empty regex is used, `compile` throws an `Illegal_Argument` error.","arguments": "- case_insensitive: Enables or disables case-insensitive matching. Case\n  insensitive matching behaves as if it normalises the case of all input\n  text before matching on it.","remarks": "? Why Compile?\n  While many regex engines are able to cache ad-hoc patterns, it is often\n  useful to be able to manually retain a pattern that you have computed. This\n  function exists so you can hold onto the resultant `Pattern` object,\n  instead of immediately proceeding to match using it."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "split", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"delimiter": {"lazy": false, "default": "\",\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "use_regex": {"lazy": false, "default": "False"}},"aliases": ["parse", "tokenize"],"group": "Conversions","icon": "split","description": "Takes a delimiter and returns the vector that results from splitting `self`\non each of its occurrences.","arguments": "- delimiter: The pattern used to split the text.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively. The values are compared case sensitively by default.\n- use_regex: If true, the term is used as a regular expression.","examples": "> Example\n  Split the text on any occurrence of the separator `\"::\"`.\n\n      text = \"Namespace::package::package::Type\"\n      text.split \"::\" == [\"Namespace\", \"package\", \"package\", \"Type\"]\n\n\n> Example\n  Split the text on a regex pattern.\n\n      \"abc--def==>ghi\".split \"[-=>]+\" use_regex=True == [\"abc\", \"def\", \"ghi\"]\n\n\n> Example\n  Split the text on any whitespace.\n\n      'abc  def\\tghi'.split '\\\\s+' use_regex=True == [\"abc\", \"def\", \"ghi\"]\n\n\n> Example\n  Split with a vector of strings.\n\n      'azbzczdzezfzg'.split ['b', 'zez'] == ['az', 'zczd', 'fzg']"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "tokenize", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Text|Regex", "checked": true, "default": "Missing_Argument.throw \"pattern\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["parse", "regex", "split"],"group": "Conversions","icon": "split","description": "Takes an input string and and a pattern and returns all the matches as a\n`Vector Text`. If the pattern contains marked groups, the values are\nconcatenated together; otherwise the whole match is returned.","arguments": "- input: The text to tokenize.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively. The values are compared case sensitively by default.","examples": "> Example\n  Split to blocks of 3 characters.\n\n     \"ABCDEF\" . tokenize  \"...\" == [\"ABC\",\"DEF\"]\n\n\n> Example\n  Split to blocks of 3 characters taking first and third letters.\n\n     \"ABCDEF\" . tokenize \"(.).(.)\" == [\"AC\",\"DF\"]\n\n\n> Example\n  Split a text on any white space.\n\n     'Hello Big\\r\\nWide\\tWorld\\nGoodbye!' . tokenize \"(\\S+)(?:\\s+|$)\"\n         == [\"Hello\",\"Big\",\"Wide\",\"World\",\"Goodbye!\"]"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "replace", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text | Regex", "checked": true}, "replacement": {"lazy": false, "type": "Text", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "Case_Sensitivity.Default"}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["replace text"],"group": "Text","icon": "text","description": "Perform a text or regex replace.\n\nReturns the text with all matched elements replaced by the provided\nreplacement. If `input` is empty, the function returns the input unchanged.\n\nThe replacement string can contain references to groups matched by the\nregex. The following syntaxes are supported:\n    $0: the entire match string\n    $&: the entire match string\n    $n: the nth group\n    $&lt;foo&gt;: Named group `foo`\n\nFor details on Enso's Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","arguments": "- term: The `Text` or `Regex` to find.\n- replacement: The text to replace matches with.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- only_first: If True, only replace the first match.","examples": "> Example\n  Replace letters in the text \"aaa\".\n\n      'aaa'.replace 'aa' 'b' == 'ba'\n\n\n> Example\n  Replace all occurrences of letters 'l' and 'o' with '#'.\n\n      \"Hello World!\".replace \"[lo]\".to_regex \"#\" == \"He### W#r#d!\"\n\n\n> Example\n  Replace the first occurrence of letter 'l' with '#'.\n\n      \"Hello World!\".replace \"l\" \"#\" only_first=True == \"He#lo World!\"\n\n\n> Example\n  Replace texts in quotes with parentheses.\n\n       '\"abc\" foo \"bar\" baz'.replace '\"(.*?)\"'.to_regex '($1)' == '(abc) foo (bar) baz'\n\n\n> Example\n  Extended partial matches in case-insensitive mode.\n\n      # The ß symbol matches the letter `S` twice in case-insensitive mode, because it folds to `ss`.\n      'ß'.replace 'S' 'A' case_sensitivity=Case_Sensitivity.Insensitive . should_equal 'AA'\n      # The 'ﬃ' ligature is a single grapheme cluster, so even if just a part of it is matched, the whole grapheme is replaced.\n      'aﬃb'.replace 'i' 'X' case_sensitivity=Case_Sensitivity.Insensitive . should_equal 'aXb'\n\n\n> Example\n  Regexp replace.\n\n      '<a href=\"url\">content</a>'.replace '<a href=\"(.*?)\">(.*?)</a>'.to_regex '$2 is at $1'== 'content is at url'","errors": "","remarks": "! Matching Grapheme Clusters\n  In case-insensitive mode, a single character can match multiple characters,\n  for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match\n  `ffi` or `f` etc. Thus in this mode, it is sometimes possible for a term to\n  match only a part of some single grapheme cluster, for example in the text\n  `ﬃa` the term `ia` will match just one-third of the first grapheme `ﬃ`.\n  Since we do not have the resolution to distinguish such partial matches, a\n  match which matched just a part of some grapheme cluster is extended and\n  treated as if it matched the whole grapheme cluster. Thus the whole\n  grapheme cluster may be replaced with the replacement text even if just a\n  part of it was matched."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "cleanse", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"remove": {"lazy": false}},"aliases": [],"group": "Text","icon": "text","description": "Applies the specified cleansings to the text.","arguments": "- remove: A vector of the named patterns to cleanse from the text. The named patterns are\n   applied in the order they are provided. The same named pattern can be used multiple\n   times. The named patterns are:\n   - ..Leading_Whitespace: Removes all whitespace from the start of the string.\n   - ..Trailing_Whitespace: Removes all whitespace from the end of the string.\n   - ..Duplicate_Whitespace: Removes all duplicate whitespace from the string replacing it with the first whitespace character of the duplicated block.\n   - ..All_Whitespace: Removes all whitespace from the string.\n   - ..Newlines: Removes all newline characters from the string. Line Feed and Carriage Return characters are considered newlines.\n   - ..Leading_Numbers: Removes all numbers from the start of the string.\n   - ..Trailing_Numbers: Removes all numbers from the end of the string.\n   - ..Non_ASCII: Removes all non-ascii characters from the string.\n   - ..Tabs: Removes all tab characters from the string.\n   - ..Letters: Removes all letters from the string.\n   - ..Numbers: Removes all numbers characters from the string.\n   - ..Punctuation: Removes all characters in the set ,.!?():;'\" from the string.\n   - ..Symbols: Removes anything that isn't letters, numbers or whitespace from the string.","examples": "> Example\nRemove leading and trailing spaces from text.\n\n      text.cleanse [..Leading_Whitespace, ..Trailing_Whitespace]"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Cleansable_Text", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "words", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"keep_whitespace": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["get words"],"group": "Text","icon": "text","description": "Returns a vector containing all words in the given text.","arguments": "- keep_whitespace: Whether or not the whitespace around the words should be\n  preserved. If set to `True`, the whitespace will be included as a \"word\" in\n  the output.","examples": "> Example\n  Getting the words in the sentence \"I have not one, but two cats.\"\n\n     \"I have not one, but two cats.\".words == ['I', 'have', 'not', 'one', ',', 'but', 'two', 'cats', '.']\n\n\n> Example\n  Getting the words in the Thai sentence \"แมวมีสี่ขา\"\n\n      \"แมวมีสี่ขา\".words == ['แมว', 'มี', 'สี่', 'ขา']","remarks": "! What is a Word?\n  A word is defined based on the definition of Word Boundaries in the Unicode\n  Standard Annex 29, supplemented by language-specific dictionaries for\n  Chinese, Japanese, Thai, and Khmer."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "lines", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"keep_endings": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["get lines"],"group": "Text","icon": "text","description": "Splits the text into lines, based on '\\n', '\\r' or '\\r\\n' line endings.\n\nEmpty lines are added for leading newlines. Multiple consecutive\nnewlines will also yield additional empty lines. A line ending at the end of\nthe line is not required, but if it is present it will not cause an empty\nline to be added at the end.","examples": "> Example\n  Split the text 'a\\nb\\nc' into lines.\n\n     'a\\nb\\nc'.lines == ['a', 'b', 'c']\n\n\n> Example\n  Split the text '\\na\\n\\nb\\n\\n' into lines.\n\n     '\\na\\n\\nb\\n\\n\\n'.lines == ['', 'a', '', 'b', '', '']\n\n\n> Example\n  Split the text '\\na\\nb\\n' into lines, keeping the line endings.\n\n     '\\na\\nb\\n'.lines keep_endings=True == ['\\n', 'a\\n', 'b\\n']"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "insert", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true}, "that": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Text","icon": "text_input","description": "Inserts text value at the specified index.","arguments": "- index: The position (0-based) in the text to inset text at.\n    When the index is non-negative the text is inserted before the\n    specified position.\n    When the index is negative, then the characters are counted from\n    the end of the text and the text is inserted after the specified\n    position, i.e. -1 will insert the text after the last character.","examples": "> Example\n Insert text at a specified index\n\n      \"Hello World!\".insert 0 \" Cruel\" == \" CruelHello World!\"\n      \"Hello World!\".insert 5 \" Cruel\" == \"Hello Cruel World!\"\n      \"Hello World!\".insert -1 \" Cruel\" == \"Hello World! Cruel\"","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "is_digit", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Logical","icon": "metadata","description": "Returns if a character from the text at the specified index (0-based) is a\ndigit (0-9).","arguments": "- index: The location in the text to get the character from. The\n    index is also allowed to be negative, then the characters are\n    counted from the end of the text, i.e. -1 will correspond to the\n    last character.","examples": "> Example\n  Check if an individual character is a digit:\n\n      \"0\".is_digit == True\n      \"A0\".is_digit == False\n      \"A0\".is_digit 1 == True\n      \"건반(Korean)\".is_digit 1 == False","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "is_whitespace", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the text consists only of whitespace characters.","examples": "> Example\n  Check if a text is whitespace only.\n\n      ' \\t'.is_whitespace == True\n      \"0 \".is_whitespace == False"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "bytes", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"icon": "convert","description": "Returns a vector containing bytes representing the specified encoding of the\ninput text.\n\nThis is useful for low-level operations, such as binary data encoding.","arguments": "- encoding: The text encoding to encode self with. Defaults to UTF-8.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function.\n  By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.","examples": "> Example\n  Get the ASCII bytes of the text \"Hello\".\n\n      \"Hello\".bytes (Encoding.ascii)"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "from_bytes", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"bytes": {"lazy": false}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "convert","description": "Takes a vector of bytes and returns Text resulting from decoding it using the\nspecified encoding.","arguments": "- bytes: The vector of UTF-8 bytes.\n- encoding: The text encoding to decode the bytes with. Defaults to UTF-8.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function. By default, a dataflow error is raised.","examples": "> Example\n  Decode a sequence of ASCII bytes into Text.\n\n      Text.from_bytes [72, 101, 108, 108, 111] (Encoding.ascii)"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "utf_8", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"icon": "convert","description": "Returns a vector containing bytes representing the UTF-8 encoding of the\ninput text.\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.","arguments": "- on_problems: Specifies the behavior when a problem occurs during the\n  function.\n  By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.","examples": "> Example\n  Get the UTF-8 bytes of the text \"Hello\".\n\n      \"Hello\".utf_8"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "from_utf_8", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"bytes": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "convert","description": "Takes a vector of bytes and returns Text resulting from decoding it as UTF-8.\n\n\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.","arguments": "- bytes: The vector of UTF-8 bytes.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function. By default, a dataflow error is raised.","examples": "> Example\n  Decoding the bytes to get a text.\n\n      Text.from_utf_8 [-32, -92, -107, -32, -91, -115, -32, -92, -73, -32, -92, -65]"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "char_vector", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Returns a vector containing the UTF-16 characters that encode the input text.\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.","examples": "> Example\n  Get the character vector of the text \"Hello\".\n\n      \"Hello\".char_vector"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "from_char_vector", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"chars": {"lazy": false}},"aliases": [],"icon": "convert","description": "Takes a vector of characters and returns the text that results from it.\n\n\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.","arguments": "- chars: The vector of UTF-16 characters."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "codepoints", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Returns a vector containing integers representing the Unicode codepoints of\nthe input text.\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.","examples": "> Example\n  Get the codepoints of the text \"Hello\".\n\n      \"Hello\".codepoints"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "from_codepoints", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"codepoints": {"lazy": false}},"aliases": [],"icon": "convert","description": "Takes an array of numbers and returns the text resulting from interpreting it\nas a sequence of Unicode codepoints.\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.","examples": "> Example\n  Converting a vector of codepoints back into a text.\n      Text.from_codepoints [129318, 127996, 8205, 9794, 65039]"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "starts_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "type": "Text", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["check prefix"],"group": "Text","icon": "preparation","description": "Checks whether `self` starts with `prefix`.","arguments": "- prefix: The prefix to see if `self` starts with.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  See if the text \"Hello!\" starts with the specified prefix.\n\n      \"Hello!\".starts_with \"Hello\" == True\n      \"Hello!\".starts_with \"hello\" == False\n      \"Hello!\".starts_with \"hello\" Case_Sensitivity.Insensitive == True","remarks": "! Unicode Equality\n  The definition of equality includes Unicode canonicalization. I.e. two\n  texts are equal if they are identical after canonical decomposition. This\n  ensures that different ways of expressing the same character in the\n  underlying binary representation are considered equal.\n\n      'ś' . starts_with 's' == False\n      's\\u{301}' . starts_with 's' == False\n      's\\u{301}' . starts_with 'ś' == True\n      'ś' . starts_with 's\\u{301}' == True"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "ends_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"suffix": {"lazy": false, "type": "Text", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["check suffix"],"group": "Text","icon": "preparation","description": "Checks whether `self` ends with `suffix`.","arguments": "- suffix: The suffix to see if `self` ends with.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  See if the text \"Hello World\" ends with the specified suffix.\n\n      \"Hello World\".ends_with \"World\" == True\n      \"Hello World\".ends_with \"world\" == False\n      \"Hello World\".ends_with \"world\" Case_Sensitivity.Insensitive == True","remarks": "! Unicode Equality\n  The definition of equality includes Unicode canonicalization. I.e. two\n  texts are equal if they are identical after canonical decomposition. This\n  ensures that different ways of expressing the same character in the\n  underlying binary representation are considered equal."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "contains", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["contains"],"group": "Logical","icon": "preparation","description": "Checks whether `self` contains `sequence` as its substring.","arguments": "- term: The term to find.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","returns": "`True` if term is found within `self`. `False` otherwise.","examples": "> Example\n  See if the text \"Hello\" contains the text \"ell\".\n\n      \"Hello\".contains \"ell\"\n\n\n> Example\n  See if the text \"Cześć\" contains the text 's\\u{301}' (which folds to 'ś').\n\n      \"Cześć\".contains 's\\u{301}'\n\n\n> Example\n  See if the text \"Hello!\" contains the text 'LO', ignoring case.\n\n      \"Hello!\".contains \"LO\" Case_Sensitivity.Insensitive","remarks": "! Unicode Equality\n  The definition of equality includes Unicode canonicalization. I.e. two\n  texts are equal if they are identical after canonical decomposition. This\n  ensures that different ways of expressing the same character in the\n  underlying binary representation are considered equal.\n\n      'ś' . contains 's' == False\n      's\\u{301}' . contains 's' == False\n      's\\u{301}' . contains 'ś' == True\n      'ś' . contains 's\\u{301}' == True"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "*", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Operators","icon": "text","description": "Takes an integer and returns a new text, consisting of `count` concatenated\ncopies of `self`.","arguments": "- count: The number of times that the text `self` should be repeated to make\n  the new text.","examples": "> Example\n  Repeat the text \"A\" five times.\n\n      \"A\" * 5 == \"AAAAA\"\n\n\n> Example\n  Repeat the text \"Hello \" twice.\n\n      \"Hello \" * 2 == \"Hello Hello \""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "repeat", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"group": "Calculations","icon": "text","description": "Takes an integer and returns a new text, consisting of `count` concatenated\ncopies of `self`.","arguments": "- count: The number of times that the text `self` should be repeated to make\n  the new text.","examples": "> Example\n  Repeat the text \"ABBA\" five times.\n\n      \"ABBA\".repeat 5 == \"ABBAABBAABBAABBAABBA\"\n\n\n> Example\n  Repeat the text \"Hello \" twice.\n\n      \"Hello \".repeat 2 == \"Hello Hello \""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "take", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Text_Sub_Range | Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "left", "limit", "mid", "right", "slice", "substring", "tail", "top"],"group": "Selections","icon": "split","description": "Creates a new Text by selecting the specified range of the input.\n\nThis can select a section of text from the beginning, end, or middle of the\ninput using various criteria defined by the range parameter.","arguments": "- range: The section of the self text to return.\n  If a `Text_Sub_Range`, then the selection is interpreted following the rules of that type.\n  If a `Range`, the selection is specified by two indices, from and to.","returns": "The part of the input as specified by the range parameter.","examples": "> Example\n  Various different ways to take part of \"Hello World!\"\n\n      \"Hello World!\".take ..First == \"H\"\n      \"Hello World!\".take (..First 5) == \"Hello\"\n      \"Hello World!\".take (..First 0) == \"\"\n      \"Hello World!\".take ..Last == \"!\"\n      \"Hello World!\".take (..Last 6) == \"World!\"\n      \"Hello World!\".take (..Before \" \") == \"Hello\"\n      \"Hello World!\".take (..Before_Last \"o\") == \"Hello W\"\n      \"Hello World!\".take (..After \" \") == \"World!\"\n      \"Hello World!\".take (..After_Last \"o\") == \"rld!\"\n      \"Hello World!\".take (..While c->c!=\" \") == \"Hello\"\n      \"Hello World!\".take (..Range 3 5) == \"lo\"\n      \"Hello World!\".take (..Range 5 Nothing) == \" World!\"\n      \"Hello World!\".take (..Range 5 12) == \" World!\"\n      \"Hello World!\".take (..Range 6 12 2) == \"Wrd\"\n      \"Hello World!\".take (..Every 2 first=6) == \"Wrd\"\n      \"Hello World!\".take (..Every 3) == \"Hl Wl\"\n      \"Hello World!\".take (..By_Index 0) == \"H\"\n      \"Hello World!\".take (..By_Index [1, 0, 0, 6, 0]) == \"eHHWH\"\n      \"Hello World!\".take (..By_Index [Range 0 3, 6, Range 6 12 2]) == \"HelWWrd\"\n      \"Hello World!\".take (..Sample 3 seed=42) == \"l d\""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "drop", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Text_Sub_Range | Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Selections","icon": "split","description": "Creates a new Text by removing the specified range of the input.\n\nThis can select a section of text from the beginning, end, or middle of the\ninput using various criteria defined by the range parameter.","arguments": "- range: The section of the this text to return.\n  If a `Text_Sub_Range`, then the selection is interpreted following the rules of that type.\n  If a `Range`, the selection is specified by two indices, from and to.","returns": "The part of the input as specified by the range parameter.","examples": "> Example\n  Various different ways to take part of \"Hello World!\"\n\n      \"Hello World!\".drop ..First == \"ello World!\"\n      \"Hello World!\".drop (..First 5) == \" World!\"\n      \"Hello World!\".drop (..First 0) == \"Hello World!\"\n      \"Hello World!\".drop ..Last == \"Hello World\"\n      \"Hello World!\".drop (..Last 6) == \"Hello \"\n      \"Hello World!\".drop (..Before \" \") == \" World!\"\n      \"Hello World!\".drop (..Before_Last \"o\") == \"orld!\"\n      \"Hello World!\".drop (..After \" \") == \"Hello \"\n      \"Hello World!\".drop (..After_Last \"o\") == \"Hello Wo\"\n      \"Hello World!\".drop (..While c->c!=\" \") == \" World!\"\n      \"Hello World!\".drop (..Range 3 5) == \"Hel World!\"\n      \"Hello World!\".drop (..Range 5 Nothing) == \"Hello\"\n      \"Hello World!\".drop (..Range 5 12) == \"Hello\"\n      \"Hello World!\".drop (..Range 6 12 2) == \"Hello ol!\"\n      \"Hello World!\".drop (..Every 2 first=6) == \"Hello ol!\"\n      \"Hello World!\".drop (..Every 3) == \"elo ord!\"\n      \"Hello World!\".drop (..By_Index 0) == \"ello World!\"\n      \"Hello World!\".drop (..By_Index [1, 0, 0, 6, 0]) == \"llo orld!\"\n      \"Hello World!\".drop (..By_Index [Range 0 3, 6, Range 6 12 2]) == \"lo ol!\"\n      \"Hello World!\".drop (..Sample 3 seed=42) == \"HeloWorl!\""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "to_case", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"case_option": {"lazy": false, "type": "Case", "checked": true, "default": "..Lower"}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": ["lower", "proper", "title", "upper"],"group": "Text","icon": "text","description": "Converts each character in `self` to the specified case.","arguments": "- case_option: specifies how to convert the characters.\n- locale: specifies the locale for character case mapping. Defaults to\n  `Locale.default`.","examples": "> Example\n  Converting a text to lower case in the default locale:\n\n      \"My TeXt!\".to_case == \"my text!\"\n\n\n> Example\n  Converting a text to upper case in a specified locale:\n\n      from Standard.Base import all\n\n      example_case_with_locale = \"i\".to_case Upper (Locale.new \"tr\") == \"İ\"","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications.\n\n\n! What is title case?\n  Title case capitalizes the first letter of every word and ensures that all\n  the remaining letters are in lower case. Some definitions of title case\n  avoid capitalizing minor words (like the article \"the\" in English) but this\n  implementation treats all words in the same way."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "pad", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "with_pad": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027 \u0027"}, "at": {"lazy": false, "type": "Location", "checked": true, "default": "..Right"}},"aliases": [],"group": "Calculations","icon": "text","description": "Returns the input padded to the specified `length`, using the `with_pad`\nstring repeated at the start or the end.","arguments": "- length: The new length for the output. The result is the original string if\n  the input length is more than length.\n- with_pad: The string to use to pad the input. If the last repetition\n  exceeds the target length, it is truncated to the required size. If padding\n  at the `End`, the beginning of the padding string is used and if padding at\n  `Start`, the end of the string is used.\n- at: The location of where to pad the input.","examples": "> Example\n  Padding a text with whitespace at the end.\n\n      \"Hello World!\".pad 15 == \"Hello World!   \"\n\n\n> Example\n  Behavior of padding if the `with_pad` string has to be truncated.\n\n      \"HELLO\".pad 9 \"AB\" == \"HELLOABAB\"\n      \"HELLO\".pad 8 \"AB\" == \"HELLOABA\"\n      \"HELLO\".pad 8 \"AB\" ..Left == \"BABHELLO\""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "trim", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "default": "_.is_whitespace"}},"aliases": [],"group": "Text","icon": "text","description": "This function removes the specified `trim_characters`, by default any\nwhitespace, from the start, the end, or both ends of the input.","arguments": "- where: The location of where to trim the input. By default, this function\n  trims both ends of the input.\n- what: Either a `Text` containing characters that should be removed or a\n  predicate taking single character strings and specifying if they should be\n  removed. By default, all Unicode whitespace is removed.","examples": "> Example\n  Trimming whitespace from a string.\n\n      \" Hello! \".trim == \"Hello!\"\n      \" Hello! \".trim ..Left == \"Hello! \"\n      \" Hello! \".trim ..Right == \" Hello!\"\n\n\n> Example\n  Trimming a specific set of letters from a string.\n\n     \"ABC123\".trim ..Left \"ABC\" == \"123\"\n     \"ABBA123\".trim ..Left \"ABC\" == \"123\""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "locate", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "mode": {"lazy": false, "default": "Matching_Mode.First"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["position_of", "span_of"],"group": "Text","icon": "find","description": "Find the location of the `term` in the input.\nReturns a Span representing the location at which the term was found, or\n`Nothing` if the term was not found in the input.","arguments": "- term: The term to find.\n- mode: Specifies if the first or last occurrence of the term should be\n  returned if there are multiple occurrences within the input. The first\n  occurrence is returned by default.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  Finding location of a substring.\n\n      \"Hello World!\".locate \"J\" == Nothing\n      \"Hello World!\".locate \"o\" == Span (Range 4 5) \"Hello World!\"\n      \"Hello World!\".locate \"o\" mode=Matching_Mode.Last == Span (Range 7 8) \"Hello World!\"\n\n\n> Example\n  Match length differences in case-insensitive matching.\n\n      term = \"straße\"\n      text = \"MONUMENTENSTRASSE 42\"\n      match = text . locate term case_sensitivity=Case_Sensitivity.Insensitive\n      term.length . should_equal 6\n      match.length . should_equal 7\n\n\n> Example\n  Extending matches to full grapheme clusters.\n\n      ligatures = \"ﬃﬄ\"\n      ligatures.length == 2\n      term_1 = \"IFF\"\n      match_1 = ligatures . locate term_1 case_sensitivity=Case_Sensitive.Insensitive\n      term_1.length == 3\n      match_1.length == 2\n      term_2 = \"ffiffl\"\n      match_2 = ligatures . locate term_2 case_sensitivity=Case_Sensitive.Insensitive\n      term_2.length == 6\n      match_2.length == 2\n      # After being extended to full grapheme clusters, both terms \"IFF\" and \"ffiffl\" match the same span of grapheme clusters.\n      match_1 == match_2","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications.\n\n\n! Match Length\n  The  function returns not only the index of the match but a `Span` instance\n  which contains both the start and end indices, allowing to determine the\n  length of the match. This is useful for case insensitive matching. In\n  case-insensitive mode, a single character can match multiple characters,\n  for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match\n  `ffi` or `f` etc. Thus in case-insensitive mode, the length of the match\n  can be shorter or longer than the term that was being matched, so it is\n  extremely important to not rely on the length of the matched term when\n  analysing the matches as they may have different lengths.\n\n\n! Matching Grapheme Clusters\n  In case-insensitive mode, a single character can match multiple characters,\n  for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match\n  `ffi` or `f` etc. Thus in this mode, it is sometimes possible for a term to\n  match only a part of some single grapheme cluster, for example in the text\n  `ﬃa` the term `ia` will match just one-third of the first grapheme `ﬃ`.\n  Since we do not have the resolution to distinguish such partial matches\n  (as that would require non-integer indices), so a match which matched just\n  a part of some grapheme cluster is extended and treated as if it matched\n  the whole grapheme cluster."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "locate_all", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["index_of_all", "position_of_all", "span_of_all"],"group": "Text","icon": "find","description": "Finds all the locations of the `term` in the input.\nIf not found, the function returns an empty Vector.","arguments": "- term: The term to find.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  Finding locations of all occurrences of a substring.\n\n      \"Hello World!\".locate_all \"J\" == []\n      \"Hello World!\".locate_all \"o\" . map .start == [4, 7]\n\n\n> Example\n  Match length differences in case-insensitive matching.\n\n      term = \"strasse\"\n      text = \"MONUMENTENSTRASSE ist eine große Straße.\"\n      match = text . locate_all term case_sensitivity=Case_Sensitive.Insensitive\n      term.length == 7\n      match . map .length == [7, 6]\n\n\n> Example\n  Extending matches to full grapheme clusters.\n\n      ligatures = \"ﬃﬄFFIFF\"\n      ligatures.length == 7\n      match_1 = ligatures . locate_all \"IFF\" case_sensitivity=Case_Sensitive.Insensitive\n      match_1 . map .length == [2, 3]\n      match_2 = ligatures . locate_all \"ffiff\" case_sensitivity=Case_Sensitive.Insensitive\n      match_2 . map .length == [2, 5]","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications.\n\n\n! Match Length\n  The  function returns not only the index of the match but a `Span` instance\n  which contains both the start and end indices, allowing to determine the\n  length of the match. This is useful for case insensitive matching. In\n  case-insensitive mode, a single character can match multiple characters,\n  for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match\n  `ffi` or `f` etc. Thus in case-insensitive mode, the length of the match\n  can be shorter or longer than the term that was being matched, so it is\n  extremely important to not rely on the length of the matched term when\n  analysing the matches as they may have different lengths.\n\n\n! Matching Grapheme Clusters\n  In case-insensitive mode, a single character can match multiple characters,\n  for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match\n  `ffi` or `f` etc. Thus in this mode, it is sometimes possible for a term to\n  match only a part of some single grapheme cluster, for example in the text\n  `ﬃa` the term `ia` will match just one-third of the first grapheme `ﬃ`.\n  Since we do not have the resolution to distinguish such partial matches\n  (as that would require non-integer indices), so a match which matched just\n  a part of some grapheme cluster is extended and treated as if it matched\n  the whole grapheme cluster."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "index_of", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": [],"group": "Values","icon": "find","description": "Find the first index of the `term` in the input.\nReturns `Nothing` if the term was not found in the input.\n\nUsing `locate` is preferred as then you can also get the length of the match\nwhich may not necessarily be equal to the length of the searched term - not\nonly in case of regex matching but also in case insensitive mode.\nSee the Match Length section of `locate` for an explanation.","arguments": "- term: The term to find.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the vector.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  Finding location of a substring.\n\n      \"Hello World!\".index_of \"J\" == Nothing\n      \"Hello World!\".index_of \"o\" == 4","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "last_index_of", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "start": {"lazy": false, "default": "-1"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": [],"group": "Values","icon": "find","description": "Find the last index of the `term` in the input.\nReturns `Nothing` if the term was not found in the input.\n\nUsing `locate` is preferred as then you can also get the length of the match\nwhich may not necessarily be equal to the length of the searched term - not\nonly in case of regex matching but also in case insensitive mode.\nSee the Match Length section of `locate` for an explanation.","arguments": "- term: The term to find.\n- start: The index to start searching backwards from. If the index is\n  negative, it is counted from the end of the vector.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  Finding location of a substring.\n\n      \"Hello World!\".last_index_of \"J\" == Nothing\n      \"Hello World!\".last_index_of \"o\" == 7","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_float", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false, "default": "Locale.default"}},"aliases": ["float from text", "to_float"],"group": "Conversions","icon": "convert","description": "Parses a textual representation of a float into a float number, returning\na `Number_Parse_Error` if the text does not represent a valid float.","arguments": "- locale: The locale that specifies the format to use when parsing","examples": "> Example\n  Parse the text \"7.6\" into a float number.\n\n      \"7.6\".parse_float"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_integer", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Number_Parse_Error", "arguments": {"radix": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}},"aliases": ["integer from text", "to_integer"],"group": "Conversions","icon": "convert","description": "Parses a textual representation of an integer into an integer number, returning\na `Number_Parse_Error` if the text does not represent a valid integer.","arguments": "- radix: The number base to use for parsing (defaults to 10). `radix`\n  must be between 2 and 36 (inclusive) -- see https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Character.html#MIN_RADIX.","examples": "> Example\n  Parse the text \"20220216\" into an integer number.\n\n     \"20220216\".parse"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_json", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["json from text"],"group": "Conversions","icon": "convert","description": "Parse a Text value into a `JS_Object` or an Enso primitive value (like\n`Text`, `Number`, `Boolean`, `Nothing`), or a `Vector` of values.","examples": "> Example\n Parse the text \"[null, null, true, false]\".\n\n     \"[null, null, true, false]\".parse_json"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_date", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.iso_date"}},"aliases": ["date from text", "to_date"],"group": "Conversions","icon": "convert","description": "Converts text containing a date into a Date object.\n\nThis method will return a `Time_Error` if the provided time cannot be parsed.","arguments": "- format: The format to use for parsing the input text.","examples": "> Example\n  Parse the date of 23rd December 2020.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"2020-12-23\".parse_date\n\n\n> Example\n  Recover from an error due to a wrong format.\n\n      import Standard.Base.Data.Text.Extensions\n      from Standard.Base.Errors.Common import Time_Error\n\n      example_parse_err = \"my birthday\".parse_date . catch Time_Error _->\n          Date.new 2000 1 1\n\n\n> Example\n  Parse \"1999-1-1\" as Date using a custom format.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"1999-1-1\".parse_date \"yyyy-M-d\"\n\n\n> Example\n  Recover from the parse error.\n\n      import Standard.Base.Data.Text.Extensions\n      from Standard.Base.Errors.Common import Time_Error\n\n      example_parse_err =\n          date = \"1999-1-1\".parse_date \"yyyy-MM-dd\"\n          date.catch Time_Error (_->Date.new 2000 1 1)","remarks": "? Default Date Formatting\n  Unless you provide a custom format, the text must represent a valid date\n  that can be parsed using the ISO-8601 extended local date format. The\n  format consists of:\n\n  - Four digits or more for the year. Years in the range 0000 to 9999\n    will be pre-padded by zero to ensure four digits. Years outside\n    that range will have a prefixed positive or negative symbol.\n  - A dash\n  - Two digits for the month-of-year. This is pre-padded by zero to ensure\n    two digits.\n  - A dash\n  - Two digits for the day-of-month. This is pre-padded by zero to ensure two\n    digits.\n\n\n? Pattern Syntax\n  If the pattern is provided as `Text`, it is parsed using the format\n  described below. See `Date_Time_Formatter` for more options.\n  - y: Year. The number of pattern letters determines the minimum number of\n    digits.\n    - y: The year using any number of digits.\n    - yy: The year, using at most two digits. The default range is\n      1950-2049, but this can be changed by including the end year in\n      braces e.g. `yy{2099}`.\n    - yyyy: The year, using exactly four digits.\n  - M: Month of year. The number of pattern letters determines the format:\n    - M: Any number (1-12).\n    - MM: Month number with zero padding required (01-12).\n    - MMM: Short name of the month (Jan-Dec).\n    - MMMM: Full name of the month (January-December).\n    The month names depend on the selected locale.\n  - d: Day. The number of pattern letters determines the format:\n    - d: Any number (1-31).\n    - dd: Day number with zero padding required (01-31).\n    - ddd: Short name of the day of week (Mon-Sun).\n    - dddd: Full name of the day of week (Monday-Sunday).\n    The weekday names depend on the selected locale.\n    Both day of week and day of month may be included in a single pattern -\n    in such case the day of week is used as a sanity check.\n  - Q: Quarter of year.\n    If only year and quarter are provided in the pattern, when parsing a\n    date, the result will be the first day of that quarter."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_date_time", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.default_enso_zoned_date_time"}},"aliases": ["date_time from text"],"group": "Conversions","icon": "convert","description": "Obtains an instance of `Date_Time` from a text such as\n\"2007-12-03T10:15:30+01:00 Europe/Paris\".\n\nThis method will return a `Time_Error` if the provided time cannot be parsed.","arguments": "- format: The format to use for parsing the input text.","examples": "> Example\n  Parse UTC time.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"2020-10-01T04:11:12Z\".parse_date_time\n\n\n> Example\n  Parse UTC-04:00 time.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"2020-10-01T04:11:12-04:00\".parse_date_time\n\n\n> Example\n  Parse UTC-04:00 time specifying New York timezone.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"2020-10-01T04:11:12-04:00[America/New_York]\".parse_date_time\n\n\n> Example\n  Parse UTC-04:00 time with nanoseconds.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"2020-10-01T04:11:12.177528-04:00\".parse_date_time\n\n\n> Example\n  Recover from the parse error.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"2020-10-01\".parse_date_time . catch Time_Error (_->Date_Time.now)\n\n\n> Example\n  Parse \"2020-05-06 04:30:20\" as Date_Time\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"2020-05-06 04:30:20\".parse_date_time \"yyyy-MM-dd HH:mm:ss\"\n\n\n> Example\n  Parse \"06 of May 2020 at 04:30AM\" as Date_Tme\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse =\n         \"06 of May 2020 at 04:30AM\".parse_date_time \"dd 'of' MMMM yyyy 'at' hh:mma\"","remarks": "? Default Date_Time Format\n  Unless you provide a custom format, the text must represent a valid\n  date-time as defined by the ISO-8601 format (see https://en.wikipedia.org/wiki/ISO_8601).\n  If a time zone is present, it must be in the ISO-8601 Extended Date/Time\n  Format (EDTF) (see https://en.wikipedia.org/wiki/ISO_8601#EDTF). The time\n  zone format consists of:\n\n  - The ISO offset date time.\n  - If the zone ID is not available or is a zone offset then the format is\n    complete.\n  - An open square bracket '['.\n  - The zone ID. This is not part of the ISO-8601 standard. Parsing is case\n    sensitive.\n  - A close square bracket ']'.\n\n\n? Pattern Syntax\n  If the pattern is provided as `Text`, it is parsed using the format\n  described below. See `Date_Time_Formatter` for more options.\n  - y: Year. The number of pattern letters determines the minimum number of\n    digits.\n    - y: The year using any number of digits.\n    - yy: The year, using at most two digits. The default range is\n      1950-2049, but this can be changed by including the end year in\n      braces e.g. `yy{2099}`.\n    - yyyy: The year, using exactly four digits.\n  - M: Month of year. The number of pattern letters determines the format:\n    - M: Any number (1-12).\n    - MM: Month number with zero padding required (01-12).\n    - MMM: Short name of the month (Jan-Dec).\n    - MMMM: Full name of the month (January-December).\n    The month names depend on the selected locale.\n  - d: Day. The number of pattern letters determines the format:\n    - d: Any number (1-31).\n    - dd: Day number with zero padding required (01-31).\n    - ddd: Short name of the day of week (Mon-Sun).\n    - dddd: Full name of the day of week (Monday-Sunday).\n    The weekday names depend on the selected locale.\n    Both day of week and day of month may be included in a single pattern -\n    in such case the day of week is used as a sanity check.\n  - Q: Quarter of year.\n    If only year and quarter are provided in the pattern, when parsing a\n    date, the result will be the first day of that quarter.\n  - H: 24h hour of day (0-23).\n  - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n    between AM and PM.\n  - m: Minute of hour.\n  - s: Second of minute.\n  - f: Fractional part of the second. The number of pattern letters\n    determines the number of digits. If one letter is used, any number of\n    digits will be accepted.\n  - a: AM/PM marker.\n  - T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,\n    -08:30), otherwise - Time zone name (e.g. Central European Time, CET).\n  - Z: Zone offset (e.g. +0000, -0830, +08:30:15)."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_time_of_day", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.iso_time"}},"aliases": ["time_of_day from text", "to_time_of_day"],"group": "Conversions","icon": "convert","description": "Obtains an instance of `Time_Of_Day` from a text such as \"10:15\".\n\nThis method will return a `Time_Error` if the provided time cannot be parsed.","arguments": "- format: The format to use for parsing the input text.","examples": "> Example\n  Get the time 15:05:30.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"15:05:30\".parse_time_of_day\n\n\n> Example\n  Recover from the parse error.\n\n      import Standard.Base.Data.Text.Extensions\n      from Standard.Base.Errors.Common import Time_Error\n\n      example_parse = \"half twelve\".parse_time_of_day . catch Time_Error _->\n          Time_Of_Day.new\n\n\n> Example\n  Parse \"04:30:20\" as Time_Of_Day.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"04:30:20\".parse_time_of_day \"HH:mm:ss\"\n\n\n> Example\n  Parse \"4:30AM\" as Time_Of_Day\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"4:30AM\".parse_time_of_day \"h:mma\"","remarks": "? Default Time Format\n  Unless you provide a custom format, the text must represent a valid time\n  and is parsed using the ISO-8601 extended local time format.\n  The format consists of:\n\n  - Two digits for the hour-of-day. This is pre-padded by zero to ensure two\n    digits.\n  - A colon\n  - Two digits for the minute-of-hour. This is pre-padded by zero to ensure\n    two digits.\n  - If the second-of-minute is not available then the format is complete.\n  - A colon\n  - Two digits for the second-of-minute. This is pre-padded by zero to ensure\n    two digits.\n  - If the nano-of-second is zero or not available then the format is\n    complete.\n  - A float point\n  - One to nine digits for the nano-of-second. As many digits will be output\n    as required.\n\n\n? Pattern Syntax\n  If the pattern is provided as `Text`, it is parsed using the format\n  described below. See `Date_Time_Formatter` for more options.\n  - H: 24h hour of day (0-23).\n  - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n    between AM and PM.\n  - m: Minute of hour.\n  - s: Second of minute.\n  - f: Fractional part of the second. The number of pattern letters\n    determines the number of digits. If one letter is used, any number of\n    digits will be accepted.\n  - a: AM/PM marker."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_time_zone", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["time_zone from text", "to_time_zone"],"group": "Conversions","icon": "convert","description": "This method parses the ID producing a `Time_Zone`.","examples": "> Example\n  Get Central European Time.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"CET\".parse_time_zone\n\n\n> Example\n  Get Moscow time.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"Europe/Moscow\".parse_time_zone\n\n\n> Example\n  Get time zone -06:00.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"-06:00\".parse_time_zone\n\n\n> Example\n  Get custom offset +03:02:01 of 3 hours 2 minutes an 1 second.\n\n      import Standard.Base.Data.Text.Extensions\n\n      example_parse = \"+03:02:01\".parse_time_zone"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "to_decimal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"scale": {"lazy": false, "type": "Integer | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this `Text` to a `Decimal`.","arguments": "- scale: the optional Decimal scale to use. See `Decimal.set_scale` for more\n  information about Decimal scales. If this argument is not used, the default\n  scale is used.","examples": "> Example\n  Convert a `Text` to a `Decimal`.\n\n      d = \"23.456\".to_decimal\n      d == Decimal.new \"23.456\"\n      # => True\n\n ! Error Conditions\n\n     - If an explicit `scale` parameter is passed, and the scale is not\n       large enough to represent the number exactly, an `Arithmetic_Error`\n       is thrown.\n\n\n> Example\n  Convert a `Text` to a `Decimal` with an explicit scale.\n\n      d = \"23.456\".to_decimal scale=4\n      d == Decimal.new \"23.456\"\n      # => True\n\n\n> Example\n  Get an error when using a scale that is too small.\n\n      \"23.456\".to_decimal scale=2\n      # => Arithmetic_Error"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "substring", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false, "type": "Integer", "checked": true}, "length": {"lazy": false, "type": "Integer", "checked": true, "default": "self.length"}},"aliases": ["mid", "slice", "substring"],"group": "Selections","icon": "split","description": "Creates a new Text by selecting the specified range of the input.","arguments": "- start: the character position to start the substring at. 0-based index. Has support for negative values.\n- length: the number of characters to include from start.","returns": "Part of the selected Text starting at start and stopping after length.","examples": "> Example\n  Various different ways to take part of \"Hello World!\"\n\n      \"Hello World!\".substring 3 2 == \"lo\"\n      \"Hello World!\".substring 5 Nothing == \" World!\"\n      \"Hello World!\".substring 5 7 == \" World!\"\n      \"Hello World!\".substring -7 3 == \" Wo\""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "", "name": "_slice_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "char_ranges": {"lazy": false}},"aliases": [],"description": "Returns a new Text constructed by slicing the input according to the provided\nranges. The ranges are assumed to have step equal to 1 and bounds within the\ninput's range.\n\nThe input ranges are in UTF-16 code unit space."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "", "name": "_split_find_delimiters", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false}, "delimiter": {"lazy": false}, "case_sensitivity": {"lazy": false}},"aliases": [],"description": "Find occurrences of delimiters in a string."},
{"module": "Standard.Base.Data.Text.Line_Ending_Style", "type": "Line_Ending_Style", "name": "Unix", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Line_Ending_Style", "arguments": {},"aliases": [],"description": "Unix-style endings. Used, among others, on Linux and modern MacOS.\nThe text equivalent is `'\\n'`."},
{"module": "Standard.Base.Data.Text.Line_Ending_Style", "type": "Line_Ending_Style", "name": "Windows", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Line_Ending_Style", "arguments": {},"aliases": [],"description": "Windows-style endings. The text equivalent is `'\\r\\n'`."},
{"module": "Standard.Base.Data.Text.Line_Ending_Style", "type": "Line_Ending_Style", "name": "Mac_Legacy", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Line_Ending_Style", "arguments": {},"aliases": [],"description": "Legacy MacOS endings. Only used on very old Mac systems.\nThe text equivalent is `'\\r\\n'`."},
{"module": "Standard.Base.Data.Text.Line_Ending_Style", "type": "Line_Ending_Style", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the text equivalent of the line ending."},
{"module": "Standard.Base.Data.Text.Location", "type": "Location", "name": "Left", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Location", "arguments": {},"aliases": [],"description": "Indicates the beginning of a text."},
{"module": "Standard.Base.Data.Text.Location", "type": "Location", "name": "Right", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Location", "arguments": {},"aliases": [],"description": "Indicates the end of a text."},
{"module": "Standard.Base.Data.Text.Location", "type": "Location", "name": "Both", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Location", "arguments": {},"aliases": [],"description": "Indicates both the beginning and end of a text."},
{"module": "Standard.Base.Data.Text.Matching_Mode", "type": "Matching_Mode", "name": "First", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Matching_Mode", "arguments": {},"aliases": [],"description": "Matches the first found instance."},
{"module": "Standard.Base.Data.Text.Matching_Mode", "type": "Matching_Mode", "name": "Last", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Matching_Mode", "arguments": {},"aliases": [],"description": "Matches the last found instance."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "NFC", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Normalization", "arguments": {},"aliases": [],"description": "Unicode NFC normalization mode."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "NFD", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Normalization", "arguments": {},"aliases": [],"description": "Unicode NFD normalization mode."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "NFKC", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Normalization", "arguments": {},"aliases": [],"description": "Unicode NFKC normalization mode."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "NFKD", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Normalization", "arguments": {},"aliases": [],"description": "Unicode NFKD normalization mode."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "NFKCCasefold", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Normalization", "arguments": {},"aliases": [],"description": "Unicode NFKC_CF normalization mode."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "get_java_mode", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "get_mode_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Prim_Text_Helper", "type": "", "name": "optimize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "Forces flattening of a text value."},
{"module": "Standard.Base.Data.Text.Prim_Text_Helper", "type": "", "name": "compile_regex", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}, "options": {"lazy": false}},"aliases": [],"description": "Compile the regex using the Truffle regex library.\n\nReturns a Java RegexObject (Truffle)\n(See https://github.com/oracle/graal/blob/master/regex/docs/README.md)","arguments": "- pattern: the regex to compile\n- options: string containing traditional regex flags (for example, \"g\"\n as in \"/foo/g\""},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Regex", "arguments": {"case_insensitive": {"lazy": false, "type": "Boolean", "checked": true}, "internal_regex_object": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "internal_regex_object : RegexObject (Truffle)\n(See https://github.com/oracle/graal/blob/master/regex/docs/README.md)"},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "compile", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Regex | Text", "checked": true}, "case_insensitive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "text","description": "Compile the provided `expression` into a `Regex` that can be used for\nmatching.\n\nFor details on Enso's Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","arguments": "- expression: The text representing the regular expression that you want to\n  compile. Must be non-empty.\n- case_insensitive: Enables or disables case-insensitive matching. Case\n  insensitive matching behaves as if it normalises the case of all input\n  text before matching on it.","errors": ""},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "escape", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}},"aliases": [],"icon": "text","description": "Escape the special characters in `expression` such that the result is a\nvalid literal pattern for the original string.","arguments": "- expression: The expression to escape metacharacters in.","examples": "> Example\n  Turn a Text into a regex that matches that string exactly.\n\n      example_escape =\n          literal_string = \"\\!\\.|abcde\"\n          Regex.escape literal_string"},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "pattern", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the original pattern used to create this `Regex`."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the `Regex`."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "matches", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Text","icon": "preparation","description": "Returns `True` if the input matches against the pattern described by\n`self`, otherwise `False`.","arguments": "- input: The text to check for matching."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "match", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Text","icon": "find","description": "Tries to match the provided `input` against the pattern `self`.\n\nReturns a `Match` containing the matched text and its match groups, or\n`Nothing` if the match failed.","arguments": "- input: The text to match the pattern described by `self` against."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "match_all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Text","icon": "find","description": "Tries to match the provided `input` against the pattern `self`.\n\nReturns a `Vector Match` object, each containing the matched text\nand its match groups.","arguments": "- input: The text to match the pattern described by `self` against."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["match"],"group": "Selections","icon": "find","description": "Tries to match the provided `input` against the pattern `self`.\n\nReturns a `Text` containing the matched text, or `Nothing` if the match\nfailed.","arguments": "- input: The text to match the pattern described by `self` against."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "find_all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["matches"],"group": "Selections","icon": "find","description": "Tries to match the provided `input` against the pattern `self`.\n\nReturns a `Vector Text`, each containing the matched text.\nIf the pattern does not match, an empty `Vector` is returned.","arguments": "- input: The text to match the pattern described by `self` against."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "split", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["parse", "tokenize"],"group": "Conversions","icon": "split","description": "Splits the `input` text based on the pattern described by `self`.\n\nThis method will _always_ return a vector. If no splits take place, the\nvector will contain a single element (equal to the original string).","arguments": "- input: The text to split based on the pattern described by `self`.\n- only_first: If true, only split at the first occurrence.","examples": "> Example\n  Split on the first instance of the pattern.\n      pattern = Regex.compile \"cd\"\n      input = \"abcdefcdghij\"\n      texts = pattern.split input only_first=True\n      texts . should_equal [\"ab\", \"efcdghij\"]\n\n\n> Example\n  Split on the all instances of the pattern in the input.\n     pattern = Regex.compile \"a\"\n     input = \"bacadaeaf\"\n     texts = pattern.split input\n     texts . should_equal [\"b\", \"c\", \"d\", \"e\", \"f\"]\n\n\n> Example\n  Returns the original text if there are no matches.\n      pattern = Regex.compile \"aa\"\n      input = \"abcdefghij\"\n      texts = pattern.split input\n      texts . should_equal [\"abcdefghij\"]"},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "tokenize", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["parse", "split"],"group": "Conversions","icon": "split","description": "Takes an input string and returns all the matches as a `Vector Text`.\nIf the pattern contains marked groups, the values are concatenated\ntogether; otherwise the whole match is returned. Non-participating\ngroups are omitted.","arguments": "- input: The text to tokenize.","examples": "> Example\n  Split to blocks of 3 characters.\n\n      Regex.compile '...' . tokenize 'ABCDEF' == ['ABC','DEF']\n\n\n> Example\n  Split to blocks of 3 characters taking first and third letters.\n\n      Regex.compile '(.).(.)' . tokenize 'ABCDEF' == ['AC','DF']\n\n\n> Example\n  Split a text on any white space.\n\n      Regex.compile '(\\S+)(?:\\s+|$)' . tokenize 'Hello Big\\r\\nWide\\tWorld\\nGoodbye!'\n          == ['Hello','Big','Wide','World','Goodbye!']"},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}, "replacement": {"lazy": false, "type": "Text", "checked": true}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Text","icon": "text","description": "Replace all occurrences of the pattern described by `self` in the `input`\nwith the specified `replacement`.\n\nIf this method performs no replacements it will return the `input` text\nunchanged.\n\nThe replacement string can contain references to groups matched by the\nregex. The following syntaxes are supported:\n    $0: the entire match string\n    $&: the entire match string\n    $n: the nth group\n    $&lt;foo&gt;: Named group `foo`","arguments": "- input: The text in which to perform the replacement(s).\n- replacement: The literal text with which to replace any matches.\n- only_first: If True, only replace the first match.","examples": "> Example\n  Replace letters in the text \"aa\".\n\n      pattern = Regex.compile 'aa'\n      pattern.replace 'aaa' 'b' == 'ba'\n\n\n> Example\n  Replace all occurrences of letters 'l' and 'o' with '#'.\n\n       pattern = Regex.compile '[lo]'\n       pattern.replace 'Hello World!' '#' == 'He### W#r#d!'\n\n\n> Example\n  Replace the first occurrence of letter 'l' with '#'.\n\n      pattern = Regex.compile 'l'\n      pattern.replace 'Hello World!' '#' only_first=True == 'He#lo World!'\n\n\n> Example\n  Replace texts in quotes with parentheses.\n\n       pattern = Regex.compile '\"(.*?)\"'\n       pattern.replace '\"abc\" foo \"bar\" baz' '($1)' == '(abc) foo (bar) baz'\n\n\n> Example\n  Replace a literal string with a replacement value.\n\n      pattern = Regex.compile \"aa\"\n      input = \"aa ab aa ac ad aa aa ax\"s\n      match = pattern.replace input \"xyz\"\n      match == \"xyz ab xyz ac ad xyz xyz ax\"\n\n\n> Example\n  Replace each word with the same word surrounded by `[]`.\n\n      pattern = Regex.compile \"([a-z]+)\"\n      pattern.replace \"foo bar, baz\" \"[$1]\" == \"[foo] [bar], [baz]\""},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "lookup_group", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"id": {"lazy": false}},"aliases": [],"description": "Look up a match group name or number, and check that it is valid.","arguments": "- id: The name or number of the group that was asked for.","returns": "A group number.\n\nA group number is invalid if it is outside the range of groups\nthat were in the original pattern.\n\nA group name is invalid if it was not defined in the original pattern.\n\nA group name is an alias for a group number; if a name is passed to\nthis method, it returns the corresponding group number.\n\nIf a group number is passed to `lookup_group` and it is valid, it will\nsimply return the group number.\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n     \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. If the caller tries to get group 3,\nMatch.group will return Nothing."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "iterator", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false}},"aliases": [],"description": "Return a lazy iterator over matches against a string.","arguments": "- text: the string to match against."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "group_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Return the number of groups in the underlying RegexObject.\nNote, the count includes group 0 (the whole match) as well."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "named_groups", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Return a vector of all named group names."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "group_nums_to_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Return a Dictionary from group number to group name. Only includes named\ngroups."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "recompile", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}},"aliases": [],"description": "Recompile the underlying regex string; used to change the\ncase-sensitivity of a compiled Regex."},
{"module": "Standard.Base.Data.Text.Regex", "type": "No_Such_Group", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Group", "arguments": {"id": {"lazy": false, "type": "Text | Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex", "type": "No_Such_Group", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the `No_Such_Group`."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex_Syntax_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Regex_Syntax_Error", "arguments": {"message": {"lazy": false}},"aliases": [],"arguments": "- message: A description of the erroneous syntax."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex_Syntax_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the `Regex_Syntax_Error`."},
{"module": "Standard.Base.Data.Text.Regex", "type": "", "name": "polyglot_map_to_dictionary", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"map": {"lazy": false}},"aliases": [],"description": "Convert the polyglot map to a Dictionary."},
{"module": "Standard.Base.Data.Text.Regex", "type": "", "name": "read_group_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"polyglot_map": {"lazy": false}, "name": {"lazy": false}},"aliases": [],"description": "Get the named group from the polyglot map."},
{"module": "Standard.Base.Data.Text.Regex", "type": "", "name": "match_to_group_maybe", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"match": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex", "type": "", "name": "build_tokenization_output_from_match", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}, "match": {"lazy": false}},"aliases": [],"description": "Build an output string from a Match resulting from `tokenize`.\nSee `tokenize`."},
{"module": "Standard.Base.Data.Text.Regex", "type": "", "name": "regex", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "text","description": "Shorthand to create a regular expression from a Text value.\n\nIf an empty regex is used, throws an Illegal_Argument error.","arguments": "- expression: The text representing the regular expression that you want to\n  compile. Must be non-empty."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Span", "arguments": {"range": {"lazy": false, "type": "Range", "checked": true}, "parent": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A representation of a span of characters in Enso's `Text` type.","arguments": "- range: The range of characters over which the span exists. The range is\n  assumed to have `step` equal to 1.\n- parent: The text over which the span exists.","examples": "> Example\n  Creating a span over the first three characters of the text \"hello!\".\n\n      import Standard.Base.Data.Text.Span\n\n      example_span =\n          text = \"Hello!\"\n          range = 0.up_to 3\n          Span.Value range text","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The index of the first character included in the span.","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "end", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The index of the first character after `start` that is _not_ included in\nthe span.","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The length of the span in extended grapheme clusters.","remarks": "! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the part of the text that this span covers."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "to_utf_16_span", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Converts the span of extended grapheme clusters to a corresponding span\nof UTF-16 code units.","examples": "> Example\n  Find the span of code units corresponding to the span of extended grapheme clusters.\n\n  text = 'ae\\u{301}fz'\n  (Span.Value (Range 1 3) text).to_utf_16_span == (Utf_16_Span.Value (Range 1 4) text)"},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Span."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Utf_16_Span", "arguments": {"range": {"lazy": false, "type": "Range", "checked": true}, "parent": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A representation of a span of UTF-16 code units in Enso's `Text` type.","arguments": "- range: The range of code units over which the span exists. The range is\n  assumed to have `step` equal to 1.\n- parent: The text over which the span exists.","examples": "> Example\n  Creating a span over the first three code units of the text 'a\\u{301}bc'.\n\n      import Standard.Base.Data.Text.Span\n\n      example_span =\n          text = 'a\\u{301}bc'\n          Span.Utf_16_Span.Value (Range 0 3) text"},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The index of the first code unit included in the span."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "end", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The index of the first code unit after `start` that is _not_ included in\nthe span."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The length of the span in UTF-16 code units."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the part of the text that this span covers."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "to_grapheme_span", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Returns a span of extended grapheme clusters which is the closest\napproximation of this span of code units.\n\nThe resulting span is extended in such a way that every code unit that\nwas contained by the original span is also contained in a new span. Since\nsome grapheme clusters consist of multiple code units, after the span was\nextended it may also contain code units which were not contained inside\nof the original span.","examples": "> Example\n  Convert a codepoint span to graphemes and back.\n\n  text = 'a\\u{301}e\\u{302}o\\u{303}'\n  span = Utf_16_Span.Value (Range 1 5) text # The span contains the units [\\u{301}, e, \\u{302}, o].\n  extended = span.to_grapheme_span\n  extended == Span.Value (Range 0 3) text # The span is extended to the whole string since it contained code units from every grapheme cluster.\n  extended.to_utf_16_span == Utf_16_Span.Value (Range 0 6) text"},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Span."},
{"module": "Standard.Base.Data.Text.Span", "type": "", "name": "range_to_char_indices", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "range": {"lazy": false}},"aliases": [],"description": "Utility function taking a range pointing at grapheme clusters and converting\nto a range on the underlying code units."},
{"module": "Standard.Base.Data.Text.Text_Cleanse", "type": "Text_Cleanse", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text_Cleanse", "arguments": {"named_pattern": {"lazy": false, "type": "Named_Pattern", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Cleanse", "type": "Text_Cleanse", "name": "apply", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"input": {"lazy": false, "type": "Cleansable_Text", "checked": true}},"aliases": [],"description": "Apply the cleanse operation to the text."},
{"module": "Standard.Base.Data.Text.Text_Cleanse", "type": "Cleansable_Text", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Cleansable_Text", "arguments": {"replace": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Ordering", "type": "Text_Ordering", "name": "Default", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Ordering", "arguments": {"sort_digits_as_numbers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Specifies the ordering of text values.\n\nFor the In-memory backend, the default ordering is case-sensitive. In\ndatabases, the default ordering depends on the database configuration.","arguments": "- sort_digits_as_numbers: Sort digits in the text as numbers. Setting\n  this to `True` results in a \"Natural\" ordering."},
{"module": "Standard.Base.Data.Text.Text_Ordering", "type": "Text_Ordering", "name": "Case_Sensitive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Ordering", "arguments": {"sort_digits_as_numbers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Case sensitive ordering of values.\n\nIt will ensure case-sensitive ordering regardless of backend defaults.\nThis may make database queries more complicated and may result in being\nunable to rely on existing indices, thus potentially making the queries\nmuch slower. The `Default` ordering is preferred wherever possible.","arguments": "- sort_digits_as_numbers: Sort digits in the text as numbers. Setting\n  this to `True` results in a \"Natural\" ordering."},
{"module": "Standard.Base.Data.Text.Text_Ordering", "type": "Text_Ordering", "name": "Case_Insensitive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Ordering", "arguments": {"locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}, "sort_digits_as_numbers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Case insensitive ordering of values.\n\nIt will ensure case-insensitive ordering regardless of backend defaults.\nThis may make database queries more complicated and may result in being\nunable to rely on existing indices, thus potentially making the queries\nmuch slower. The `Default` ordering is preferred wherever possible.","arguments": "- sort_digits_as_numbers: Sort digits in the text as numbers. Setting\n  this to `True` results in a \"Natural\" ordering."},
{"module": "Standard.Base.Data.Text.Text_Ordering", "type": "Text_Ordering", "name": "case_sensitivity", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns this ordering's case sensitivity setting."},
{"module": "Standard.Base.Data.Text.Text_Ordering", "type": "Text_Ordering", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Text_Ordering to a friendly string."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "Before", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Sub_Range", "arguments": {"delimiter": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Select characters until the first instance of `delimiter`.\nSelect an empty string if `delimiter` is empty.\nSelect the entire string if the input does not contain `delimiter`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "Before_Last", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Sub_Range", "arguments": {"delimiter": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Select characters until the last instance of `delimiter`.\nSelect an empty string if `delimiter` is empty.\nSelect the entire string if the input does not contain `delimiter`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "After", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Sub_Range", "arguments": {"delimiter": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Select characters after the first instance of `delimiter`.\nSelect an empty string if the input does not contain `delimiter`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "After_Last", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Sub_Range", "arguments": {"delimiter": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Select characters after the last instance of `delimiter`.\nSelect an empty string if the input does not contain `delimiter`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "default_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "The widget for `Text_Sub_Range` also displays options for\n`Index_Sub_Range` since the former is supposed to 'expand' the latter and\nis always used together with it."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this `Text_Sub_Range`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Codepoint_Ranges", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Codepoint_Ranges", "arguments": {"ranges": {"lazy": false, "type": "Vector Range", "checked": true}, "is_sorted_and_distinct": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "A list of codepoint ranges corresponding to the matched parts of the\ninput.","arguments": "- ranges: the list of ranges. Each `Range` has `step` equal to 1.\n- is_sorted_and_distinct: A helper value specifying if the ranges are\n  already sorted and non-intersecting."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Codepoint_Ranges", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "range": {"lazy": false, "type": "Text_Sub_Range | Index_Sub_Range | Range | Integer", "checked": true}},"aliases": [],"description": "Finds code-point indices corresponding to the part of the input matching the\nrange specified by one of the types: `Text_Sub_Range`, `Index_Sub_Range`,\n`Range`.\n\nThis method may return either a single range instance or a vector of ranges.\n\nWhile the input ranges may have varying steps, they are processed and split\nin such a way that the ranges returned by this method always have a step\nequal to 1."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Codepoint_Ranges", "name": "sorted_and_distinct_ranges", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a new sorted list of ranges where intersecting ranges have been\nmerged.\n\nEmpty ranges are not discarded."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "find_sub_range_end", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "predicate": {"lazy": false}},"aliases": [],"description": "Utility function to find char indices for Text_Sub_Range.","arguments": "- text: Text to search\n- predicate: Function to test each character, receives:\n  - index: current index\n  - start: index the char array to start of grapheme cluster\n  - end: index the char array to start of next grapheme cluster\n  If the predicate returns True for a given character, the loop will exit.","returns": "Either a Pair of char indices for current grapheme cluster or Pair Nothing (char array length) if not found."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "resolve_index_or_range", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "descriptor": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "character_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "Returns an array of UTF-16 code-unit indices corresponding to the beginning\nand end of each consecutive grapheme cluster.\n\nThese indices are consistent with the vector returned by `Text.char_vector`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "batch_resolve_indices_or_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "descriptors": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "panic_on_non_positive_step", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "normalize_range", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false}, "length": {"lazy": false}},"aliases": [],"description": "Ensures that the range is valid and trims it to the length of the collection."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date", "arguments": {},"aliases": [],"description": "This type represents a date, often viewed as year-month-day.\n\nFor example, the value \"2nd October 2007\" can be stored in a `Date`.\n\nThis class does not store or represent a time or timezone. Instead, it\nis a description of the date, as used for birthdays. It cannot represent\nan instant on the time-line without additional information such as an\noffset or timezone."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "today", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["current date", "now"],"group": "DateTime","icon": "time","description": "Obtains the current date from the system clock in the system timezone.","examples": "> Example\n  Get the current date.\n\n      example_today = Date.today"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"year": {"lazy": false, "type": "Integer", "checked": true}, "month": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "day": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"group": "DateTime","icon": "time","description": "Constructs a new Date from a year, month, and day.\n\n\n\nReturns a `Time_Error` if the provided time is not valid.","arguments": "- year: The year to represent.\n- month: The month-of-year to represent, from 1 (January) to 12 (December).\n- day: The day-of-month to represent, from 1 to 31. It must be valid for the\n  year and month.","examples": "> Example\n  Create a new local date at Unix epoch.\n\n      from Standard.Base import Date\n\n      example_new = Date.new 1970\n\n\n> Example\n  Get the local date of 5th August 1986.\n\n      example_new = Date.new 1986 8 5"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.iso_date"}},"aliases": ["date from text"],"group": "Conversions","icon": "convert","description": "Converts text containing a date into a Date object.\n\n\n\nReturns a `Time_Error` if the provided `text` cannot be parsed using the\nprovided `format`.","arguments": "- text: The text to try and parse as a date.\n- format: A pattern describing how to parse the text,\n  or a `Date_Time_Formatter`.","examples": "> Example\n  Parse the date of 23rd December 2020.\n\n      from Standard.Base import Date\n\n      example_parse = Date.parse \"2020-12-23\"\n\n\n> Example\n  Recover from an error due to a wrong format.\n\n      from Standard.Base import Date\n      from Standard.Base.Errors.Common import Time_Error\n\n      example_parse_err = Date.parse \"my birthday\" . catch Time_Error _->\n          Date.new 2000 1 1\n\n\n> Example\n  Parse \"1999-1-1\" as Date using a custom format.\n\n      from Standard.Base import Date\n\n      example_parse = Date.parse \"1999-1-1\" \"yyyy-M-d\"\n\n\n> Example\n  Recover from the parse error.\n\n      from Standard.Base import Date\n      from Standard.Base.Errors.Common import Time_Error\n\n      example_parse_err =\n          date = Date.parse \"1999-1-1\" \"yyyy-MM-dd\"\n          date.catch Time_Error (_->Date.new 2000 1 1)","remarks": "? Default Date Formatting\n  Unless you provide a custom format, the text must represent a valid date\n  that can be parsed using the ISO-8601 extended local date format. The\n  format consists of:\n\n  - Four digits or more for the year. Years in the range 0000 to 9999\n    will be pre-padded by zero to ensure four digits. Years outside\n    that range will have a prefixed positive or negative symbol.\n  - A dash\n  - Two digits for the month-of-year. This is pre-padded by zero to ensure\n    two digits.\n  - A dash\n  - Two digits for the day-of-month. This is pre-padded by zero to ensure two\n    digits.\n\n\n? Pattern Syntax\n  If the pattern is provided as `Text`, it is parsed using the format\n  described below. See `Date_Time_Formatter` for more options.\n  - y: Year. The number of pattern letters determines the minimum number of\n    digits.\n    - y: The year using any number of digits.\n    - yy: The year, using at most two digits. The default range is\n      1950-2049, but this can be changed by including the end year in\n      braces e.g. `yy{2099}`.\n    - yyyy: The year, using exactly four digits.\n  - M: Month of year. The number of pattern letters determines the format:\n    - M: Any number (1-12).\n    - MM: Month number with zero padding required (01-12).\n    - MMM: Short name of the month (Jan-Dec).\n    - MMMM: Full name of the month (January-December).\n    The month names depend on the selected locale.\n  - d: Day. The number of pattern letters determines the format:\n    - d: Any number (1-31).\n    - dd: Day number with zero padding required (01-31).\n    - ddd: Short name of the day of week (Mon-Sun).\n    - dddd: Full name of the day of week (Monday-Sunday).\n    The weekday names depend on the selected locale.\n    Both day of week and day of month may be included in a single pattern -\n    in such case the day of week is used as a sanity check.\n  - Q: Quarter of year.\n    If only year and quarter are provided in the pattern, when parsing a\n    date, the result will be the first day of that quarter."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"include_today": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Gets the default drop down option for Date."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the year field.","examples": "> Example\n  Get the current year.\n\n      from Standard.Base import Date\n\n      example_year = Date.today.year"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the month of year field, as a number from 1 to 12.","examples": "> Example\n  Get the current month.\n\n      example_month = Date.today.month"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "day", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the day of month field.","examples": "> Example\n  Get the current day.\n\n      from Standard.Base import Date\n\n      example_day = Date.today.day"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "week_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false, "default": "Nothing"}},"aliases": [],"icon": "metadata","description": "Returns the number of week of year this date falls into.\n\nProduces a warning for a Date that is before epoch start.","arguments": "- locale: the locale used to define the notion of weeks of year.\n  If no locale is provided, then the ISO 8601 week of year is used.","remarks": "! Locale Dependency\n  Note that this operation is locale-specific. It varies both by the\n  local definition of the first day of week and the definition of the\n  first week of year. For example, in the US, the first day of the week\n  is Sunday and week 1 is the week containing January 1. In the UK on the\n  other hand, the first day of the week is Monday, and week 1 is the week\n  containing the first Thursday of the year. Therefore it is important to\n  properly specify the `locale` argument."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "is_leap_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns if the date is in a leap year.\n\nProduces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "length_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns the number of days in the year represented by this date.\n\nProduces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "century", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the century of the date."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "quarter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the quarter of the year the date falls into."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "length_of_month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns the number of days in the month represented by this date.\n\nProduces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "day_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the day of the year."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "day_of_week", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the day of the week.\n\nProduces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "start_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Date_Period.Month"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the first date within the `Date_Period` containing self."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "end_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Date_Period.Month"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the last date within the `Date_Period` containing self."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "next", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "type": "Date_Period", "checked": true, "default": "..Day"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the next date adding the `Date_Period` to self.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.","arguments": "- period: the period to add to self."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "previous", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "type": "Date_Period", "checked": true, "default": "..Day"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the previous date subtracting the `Date_Period` from self.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.","arguments": "- period: the period to add to self."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "until", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false}},"aliases": [],"group": "DateTime","icon": "time","description": "Creates a `Period` between self and the provided end date.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.","arguments": "- end: the end date of the interval to count workdays in."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "days_until", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false}, "include_end_date": {"lazy": false, "default": "False"}},"aliases": [],"group": "DateTime","icon": "time","description": "Counts the days between self (inclusive) and the provided end date\n(exclusive, or inclusive if include_end_date=True).\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.","arguments": "- end: the end date of the interval to count workdays in.\n- include_end_date: whether to include the end date in the count.\n  By default the end date is not included in the interval."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "date_part", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "type": "Date_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns a requested date part as integer.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "date_diff", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false, "type": "Date", "checked": true}, "period": {"lazy": false, "type": "Date_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Computes a time difference between the two dates.\n\nIt returns an integer expressing how many periods fit between the two\ndates.\n\nThe difference will be positive if `end` is greater than `self`.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.","arguments": "- end: A date to compute the difference from.\n- period: The period to compute the difference in."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "date_add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Integer", "checked": true}, "period": {"lazy": false, "type": "Date_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Shifts the date by a specified period.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.","arguments": "- amount: An integer specifying by how many periods to shift the date.\n- period: The period by which to shift."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "work_days_until", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false}, "holidays": {"lazy": false, "default": "[]"}, "include_end_date": {"lazy": false, "default": "False"}},"aliases": [],"group": "DateTime","icon": "time","description": "Counts workdays between self (inclusive) and the provided end date\n(exclusive).\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.","arguments": "- end: the end date of the interval to count workdays in.\n- holidays: dates of holidays to skip when counting workdays.\n- include_end_date: whether to include the end date in the count.\n  By default the end date is not included in the interval.","examples": "> Example\n  Count the number of workdays between two dates.\n\n      from Standard.Base import Date\n\n      example_workdays = Date.new 2020 1 1 . work_days_until (Date.new 2020 1 5)","remarks": "? Including the end date\n  To be consistent with how we usually represent intervals (in an\n  end-exclusive manner), by default the end date is not included in the\n  count. This has the nice property that for example to count the work\n  days within the next week you can do\n  `date.work_days_until (date + (Period.new days=7))` and it will look at\n  the 7 days starting from the current `date` and not 8 days. This also\n  gives us a property that\n  `date.work_days_until (date.add_work_days N) == N` for any non-negative\n  N. On the other hand, sometimes we may want the end date to be included\n  in the count, so we provide the `include_end_date` argument for that\n  purpose. Setting it to `True` should make the result consistent with\n  the `NETWORKDAYS` function in Excel and similar products."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "to_date_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"time_of_day": {"lazy": false, "default": "Time_Of_Day.new"}, "zone": {"lazy": false, "default": "Time_Zone.system"}},"aliases": ["date to time"],"group": "Conversions","icon": "convert","description": "Combine this date with time of day to create a point in time.","arguments": "- time_of_day: The time to combine with the date to create a time.\n- zone: The time-zone in which to create the time.","examples": "> Example\n  Convert this date to midnight UTC time.\n\n      from Standard.Base import Date, Time_Of_Day, Time_Zone\n\n      example_to_time = Date.new 2020 2 3 . to_date_time Time_Of_Day.new Time_Zone.utc"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Period | Date_Period", "checked": true}},"aliases": ["add period"],"group": "Operators","icon": "time","description": "Add the specified amount of time to this instant to get another date.","arguments": "- amount: The amount of time to add to this instant. It can be a\n  `Period` or `Date_Period`.","examples": "> Example\n  Add 6 months to a local date.\n\n      import Standard.Base.Data.Time.Duration\n\n      example_add = Date.new 2020 + (Period.new months=6)\n\n\n> Example\n  Add a month to a local date.\n\n      import Standard.Base.Data.Time.Date_Period\n\n      example_add = Date.new 2020 + Date_Period.Month"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "up_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false, "type": "Date", "checked": true}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Date_Period|Period", "checked": true, "default": "Date_Period.Day"}},"aliases": ["date range"],"group": "Input","icon": "time","description": "Creates an increasing range of dates from `self` to `end`.","arguments": "- end: The end of the range.\n- include_end: Specifies if the right end of the range should be\n  included. By default, the range is right-exclusive.\n- step: The step of the range. It can be a `Date_Period` or `Period`.\n  By default, the step is one day.","examples": "> Example\n  Create a range of dates.\n\n      (Date.new 2021 12 05).up_to (Date.new 2021 12 10)\n\n\n> Example\n  Create a range containing dates [2021-12-05, 2021-12-06].\n\n      (Date.new 2021 12 05).up_to (Date.new 2021 12 06) include_end=True"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "down_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false, "type": "Date", "checked": true}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Date_Period|Period", "checked": true, "default": "Date_Period.Day"}},"aliases": ["date range"],"group": "Input","icon": "time","description": "Creates a decreasing range of dates from `self` to `end`.","arguments": "- end: The end of the range.\n- include_end: Specifies if the right end of the range should be included. By\n  default, the range is right-exclusive.","examples": "> Example\n  Create a reverse range of dates.\n\n      (Date.new 2021 12 10).down_to (Date.new 2021 12 05)\n\n\n> Example\n  Create a range containing dates [2021-12-06, 2021-12-05].\n\n      (Date.new 2021 12 06).down_to (Date.new 2021 12 05) include_end=True"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "add_work_days", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"days": {"lazy": false, "default": "1"}, "holidays": {"lazy": false, "default": "[]"}},"aliases": [],"group": "DateTime","icon": "time","description": "Shift the date by the specified amount of business days.\n\nFor the purpose of this method, the business days are defined to be\nMonday through Friday.\n\nProduces a warning for a Date that is before epoch start. See\n`Date_Time.enso_epoch_start`.\n\nThis method always returns a day which is a business day - if the shift\namount is zero, the closest following business day is returned. For the\npurpose of calculating the shift, the holidays are treated as if we were\nstarting at the next business day after them, for example counting the\nshift starting on Saturday or Sunday works as if we were counting the\nshift from Monday (for positive shifts). So shifting Sunday by zero days\nwill return Monday, but shifting it by one day will return a Tuesday\n(so that there is the full work day - Monday) within the interval. For\nnegative shifts, shifting either Saturday or Sunday one day backwards\nwill return Friday, but shifting Monday one day backwards will return a\nFriday. The whole logic is made consistent with `work_days_until`, so\nthat the following properties hold:\n    date.work_days_until (date.add_work_days N) == N for any N >= 0\n    (date.add_work_days N).work_days_until date == -N for any N < 0","arguments": "- amount: The number of business days to shift the date by. If `amount`\n  is zero, the current date is returned, unless it is a weekend or a\n  holiday, in which case the next business day is returned.\n- holidays: An optional list of dates of custom holidays that should also\n  be skipped. If it is not provided, only weekends are skipped.","examples": "> Example\n  Shift the date by 5 business days.\n\n      example_shift = Date.new 2020 2 3 . add_work_days 5"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "internal_add_work_days", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"days": {"lazy": false, "default": "1"}, "holidays": {"lazy": false, "default": "[]"}},"aliases": [],"description": "ensure_in_epoch breaks tail call annotation and causes\nstack overflow. That is why `add_work_days` method is split into\ntwo methods."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Period | Date_Period", "checked": true}},"aliases": ["subtract period"],"group": "Operators","icon": "time","description": "Subtract the specified amount of time from this instant to get another\ndate.","arguments": "- amount: The amount of time to add to this instant. It can be a\n  `Period` or `Date_Period`.","examples": "> Example\n  Subtract 7 days from a local date.\n\n      from Standard.Base import Date\n      import Standard.Base.Data.Time.Duration\n\n      example_subtract = Date.new 2020 - (Period.new days=7)\n\n\n> Example\n  Subtract a month from a local date.\n\n      import Standard.Base.Data.Time.Date_Period\n\n      example_add = Date.new 2020 - Date_Period.Month"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Date."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JS_Object representing this Date.","examples": "> Example\n  Convert the current date to a JS_Object.\n\n      example_to_json = Date.today.to_js_object"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.iso_date"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Format this date using the provided format specifier.","arguments": "- format: A pattern describing how to format the text,\n  or a `Date_Time_Formatter`.","examples": "> Example\n  Format \"2020-06-02\" as \"2 Jun 2020\"\n\n      from Standard.Base import Date\n\n      example_format = Date.new 2020 6 2 . format \"d MMMM yyyy\"\n\n\n> Example\n  Format \"2020-06-02\" as \"2 Jun 20\"\n\n      example_format = Date.new 2020 6 2 . format \"d MMMM yy\"\n\n\n> Example\n  Format \"2020-06-02\" as \"Tuesday, 02 Jun 2020\"\n\n      example_format = Date.new 2020 6 2 . format \"EEEE, dd MMMM yyyy\"\n\n\n> Example\n  Format \"2020-06-02\" as \"Tue Jun 2\"\n\n      example_format = Date.new 2020 6 2 . format \"EEE MMM d\"\n\n\n> Example\n  Format \"2020-06-02\" as \"2020AD\"\n\n      example_format = Date.new 2020 6 2 . format \"yyyyGG\"\n\n\n> Example\n  Format \"2020-06-21\" with French locale as \"21. juin 2020\"\n\n      example_format = Date.new 2020 6 21 . format (Date_Time_Formatter.from \"d. MMMM yyyy\" (Locale.new \"fr\"))","remarks": "? Pattern Syntax\n  If the pattern is provided as `Text`, it is parsed using the format\n  described below. See `Date_Time_Formatter` for more options.\n  - y: Year. The number of pattern letters determines the minimum number of\n    digits.\n    - y: The year using any number of digits.\n    - yy: The year, using at most two digits. The default range is\n      1950-2049, but this can be changed by including the end year in\n      braces e.g. `yy{2099}`.\n    - yyyy: The year, using exactly four digits.\n  - M: Month of year. The number of pattern letters determines the format:\n    - M: Any number (1-12).\n    - MM: Month number with zero padding required (01-12).\n    - MMM: Short name of the month (Jan-Dec).\n    - MMMM: Full name of the month (January-December).\n    The month names depend on the selected locale.\n  - d: Day. The number of pattern letters determines the format:\n    - d: Any number (1-31).\n    - dd: Day number with zero padding required (01-31).\n    - ddd: Short name of the day of week (Mon-Sun).\n    - dddd: Full name of the day of week (Monday-Sunday).\n    The weekday names depend on the selected locale.\n    Both day of week and day of month may be included in a single pattern -\n    in such case the day of week is used as a sanity check.\n  - Q: Quarter of year.\n    If only year and quarter are provided in the pattern, when parsing a\n    date, the result will be the first day of that quarter."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation.","examples": "> Example\n  Getting the Enso code of the date 29-October-2024.\n\n      (Date.new 2024 10 29).pretty\n      ## Returns a Text\n         Date.new 2024 10 29"},
{"module": "Standard.Base.Data.Time.Date", "type": "", "name": "new_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"year": {"lazy": false}, "month": {"lazy": false}, "day": {"lazy": false}},"aliases": [],"description": "Constructs a new Date from a year, month, and day.\n\n\n\nRecommended to use `Date.new` instead which handles potential exceptions.","arguments": "- year: The year to represent.\n- month: The month-of-year to represent, from 1 (January) to 12 (December).\n- day: The day-of-month to represent, from 1 to 31. It must be valid for the\n  year and month."},
{"module": "Standard.Base.Data.Time.Date", "type": "", "name": "week_days_between", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date", "type": "", "name": "is_weekend", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date", "type": "", "name": "fits_in_range", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date", "type": "", "name": "make_day_picker", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "cache": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "Year", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Period", "arguments": {},"aliases": [],"description": "Represents a date period of a calendar year.\n\nIts length in days will depend on context (accounting for leap years)."},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "Quarter", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Period", "arguments": {},"aliases": [],"description": "Represents a date period of a quarter - 3 calendar months."},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "Month", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Period", "arguments": {},"aliases": [],"description": "Represents a date period of a month.\n\nIts length in days will depend on context of what month it is used."},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "Week", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Period", "arguments": {"first_day": {"lazy": false, "type": "Day_Of_Week", "checked": true, "default": "Day_Of_Week.Monday"}},"aliases": [],"description": "Represents a 7-day week starting at a given day.\n\nBy default, the first day of the week is Monday, but this can be adjusted\nto any other day.\n\nThe starting day will be ignored for methods that just compute the time\ndifferences. It only matters for methods that need to find a beginning or\nend of a specific period (like `start_of` or `end_of`).\n\nThe `date_part` method will return the ISO 8601 week of year number,\nregardless of the starting day."},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "Day", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a single calendar day."},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "adjust_start", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "adjust_end", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "to_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "to_java_unit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "Internal_Constructor", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Date_Range", "arguments": {"start": {"lazy": false, "type": "Date", "checked": true}, "end": {"lazy": false, "type": "Date", "checked": true}, "step": {"lazy": false, "type": "Period", "checked": true}, "increasing": {"lazy": false, "type": "Boolean", "checked": true}, "cached_length": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Never use the constructor directly to construct a range, as it does not\nallow to verify invariants and may lead to unexpected behavior."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false, "default": "Date.today"}, "end": {"lazy": false, "default": "Date.today"}, "step": {"lazy": false, "default": "Date_Period.Day"}},"aliases": [],"icon": "time","description": "Create a representation of a right-exclusive range of dates.\n\nThe range is increasing or decreasing, depending on if the start date is\nbefore or after the end date.","arguments": "- start: The left boundary of the range. Its value is included.\n- end: The right boundary of the range. Its value is excluded.\n- step: The step between dates. It must be positive - to construct a\n  decreasing range, flip the start and the end or use `down_to`, but\n  keeping the positive step."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "new_internal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "increasing": {"lazy": false}, "step": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "with_step", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_step": {"lazy": false, "type": "Date_Period|Period", "checked": true}},"aliases": [],"group": "Calculations","icon": "time","description": "Creates a copy of this range with a changed step.","arguments": "- new_step: The new step to use. It can either be a `Date_Period` or\n  `Period`. The provided `Period` must be positive, i.e. all of `years`,\n  `months` and `days` must be non-negative and at least one of them has\n  to be positive.","examples": "> Example\n  Create a range representing the first day of every month in a year.\n\n      (Date.new 2020 1 1).up_to (Date.new 2020 12 31) . with_step Date_Period.Month\n\n\n> Example\n  Create a a decreasing range of every other day between two dates.\n\n      (Date.new 2022 10 23).down_to (Date.new 2022 10 1) . with_step (Period.new days=2)"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a textual representation."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation.","examples": "> Example\n  Getting the Enso code of the date range 10-September-2024 until\n  29-October-2024.\n\n      (Date.new 2024 09 10).up_to (Date.new 2024 10 29) . pretty\n      ## Returns a Text\n         Date_Range.new (Date.new 2024 09 10) (Date.new 2024 10 29)"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Returns the first element that is included within the range or `Nothing`\nif the range is empty."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Returns the second element that is included within the range or `Nothing`\nif the range has less than 2 element"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Returns the last element that is included within the range or `Nothing`\nif the range is empty."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the number of elements in the range.","examples": "> Example\n  The following range has 2 elements.\n\n     (Date.new 2023 04 05) . up_to (Date.new 2023 04 07) . length"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the range at a specified index (0-based).","arguments": "- index: The location in the range to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back,\n  i.e. -1 will correspond to the last element.","examples": "> Example\n  Get the second element of a range.\n\n       (Date.new 2023 04 05) . up_to (Date.new 2023 04 07) . get 1 == (Date.new 2023 04 06)\n\n\n> Example\n  Get the last element of a range with step.\n\n     (Date.new 2023 04 05) . up_to (Date.new 2023 10 07) . with_step Date_Period.Month . get -1 == (Date.new 2023 10 05)"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the range at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.","arguments": "- index: The location in the range to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back,\n  i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "internal_at", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"i": {"lazy": false}},"aliases": [],"description": "Generates the i-th element of the range.\n\nThis method does no bounds checking, it should be used only internally."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Applies a function to each element in the range, producing a vector of\nresults.","arguments": "- function: The function to apply to each date in the range.","examples": "> Example\n  Create a vector that contains the numbers twice that of the numbers in\n  the range.\n\n      1.up_to 10 . map (*2)"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts the range to a vector containing the dates in the range.","examples": "> Example\n  Getting a vector of dates from 2021-05-07 to 2021-05-10 (exclusive).\n\n      (Date.new 2021 05 07).up_to (Date.new 2021 05 10) . to_vector"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this range is empty.","examples": "> Example\n  Checking if the range of days from start of 2020 to start of 2023 is empty.\n\n      (Date.new 2020).up_to (Date.new 2023) . is_empty"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this range is not empty.","examples": "> Example\n  Checking if the range of days from start of 2020 to start of 2023 is not empty.\n\n      (Date.new 2020).up_to (Date.new 2023) . is_empty"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Filter_Condition | (Date -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Returns a vector of all elements of this range which satisfy a condition.","arguments": "- filter: The filter to apply to the range. It can either be an instance\n  of `Filter_Condition` or a predicate taking a value and returning a\n  boolean value indicating whether the corresponding element should be\n  kept or not.","examples": "> Example\n  Selecting all elements that are greater than 2020-10-12.\n\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 15) . filter (> (Date.new 2020 10 12))\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 15) . filter (..Greater than=(Date.new 2020 10 12))"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "partition", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Date -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Partitions the range into `Vector`s of elements which satisfy a given\ncondition and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of\nelements which did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Splitting a range into weekends and weekdays.\n\n      is_weekend day =\n         [Day_Of_Week.Saturday, Day_Of_Week.Sunday].contains day.day_of_week\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 15).partition is_weekend"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function for each element in the range.\n\nThis method does not return the results, so it is only useful for performing\ncomputations with side-effects.\n\nIf the function returns a dataflow error, the error is converted to a\npanic and thrown immediately stopping further processing.","arguments": "- function: The function to apply to each integer in the range.","examples": "> Example\n  To print all dates from 2020-10-01 to 2020-10-05.\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 05) include_end=True . each IO.println"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "each_with_index", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the range.\n\nEssentially acts like `range.to_vector.each_with_index`, but it is more\nefficient.","arguments": "- function: A function to apply that takes two parameters: first the\n  index of a given range element and then the actual range element.","examples": "> Example\n  Print range elements with their indices within the range.\n\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 05).each_with_index ix-> elem-> IO.println (Pair ix elem)"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines all the elements of the range, by iteratively applying the\npassed function with next elements of the range.","arguments": "- init: The initial value for the fold.\n- function: A binary function taking an item and a date, and returning\n  an item.","examples": "> Example\n  In the following example, we'll compute how many days in the range are\n  a Monday.\n\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . fold 0 acc-> date->\n         if date.day_of_week == Day_Of_Week.Monday then acc+1 else acc"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "running_fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the range, by iteratively applying the\npassed function with the next element of the range. After each step the\nvalue is stored resulting in a new Vector of the same size as self.","arguments": "- init: The initial value for the fold.\n- function: A function taking two elements and combining them."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Date -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition is satisfied for all dates in this range.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Checking that all dates in the range are after 2020-10-01.\n\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . all (> (Date.new 2020 10 01))"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Date -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition is satisfied for any date in this range.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Checking that at least one date in the range is after 2020-10-01.\n\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . any (..Greater (Date.new 2020 10 01))"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Date -> Boolean)", "checked": true}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Gets the first index when a condition is satisfied this range.\nIf no index satisfies the predicate, returns `if_missing`.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the range.\n- if_missing: Value returned if no element satisfies the predicate.","examples": "> Example\n  Get the first date in the range that is a Monday.\n\n         (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . find (d-> d.day_of_week == Day_Of_Week.Monday)"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks if the range contains the specified value.","examples": "> Example\n  Check if a particular date is in the range.\n\n       (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . with_step (Period.new days=2) . contains (Date.new 2020 10 15)"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of an element in the range.\nReturns Nothing if the element is not found.","arguments": "- condition: Either the element to search for, a `Filter_Condition` or a\n  predicate function to test each element.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the range.","examples": "> Example\n  Find the index of a first day that is a Monday.\n\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . index_of (d-> d.day_of_week == Day_Of_Week.Monday)"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of an element in the range.\nReturns Nothing if the element is not found.","arguments": "- condition: Either the element to search for, a `Filter_Condition` or a\n  predicate function to test each element.\n- start: The index to start searching backwards from. If the index is\n  negative, it is counted from the end of the range.","examples": "> Example\n  Find the index of a first day that is a Monday.\n\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . last_index_of (d-> d.day_of_week == Day_Of_Week.Monday)"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the range, returning a vector with the same elements as the\noriginal range, but in the opposite order.","examples": "> Example\n  Reverse a range of dates.\n\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . reverse","remarks": "? Returning a `Vector`\n\n  This method cannot return back a `Date_Range`, as some ranges are not\n  reversible. For example, the range `(Date.new 2020 02 29).up_to (Date.new 2023) . with_step Date_Period.Year`\n  will have `2022-02-28` as its last entry. But if we create a\n  range starting at `2022-02-28` and going backwards by a year, its last\n  element will be `2020-02-28` and not `2020-02-29` as in the original.\n  Thus, to preserve the contents we need to return a vector."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "if_empty": {"lazy": true, "default": "Error.throw (Empty_Error.Error Date_Range)"}},"aliases": [],"icon": "preparation","description": "Combines all the elements of a non-empty range using a binary operation.\nIf the range is empty, returns `if_empty`.","arguments": "- function: A binary operation that takes two dates and combines them\n  into a new date.\n- if_empty: Value returned if the range is empty."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "default_column_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Default column name based on step."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "compute_length_and_verify", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "step": {"lazy": false}, "increasing": {"lazy": false}},"aliases": [],"description": "Computes the length of the range and verifies its invariants.\n\nIf any of the invariants are violated, a dataflow error is raised."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "is_period_positive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "compute_length_step_days", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "step": {"lazy": false}, "increasing": {"lazy": false}},"aliases": [],"description": "Assumes that the range is not empty."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "compute_length_step_months", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "step": {"lazy": false}, "increasing": {"lazy": false}},"aliases": [],"description": "Assumes that the range is not empty."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "nth_element_of_range", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "step": {"lazy": false}, "increasing": {"lazy": false}, "n": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "compute_length_step_brute_force", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "step": {"lazy": false}, "increasing": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "unify_condition_for_index_of", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Date | Filter_Condition | Function", "checked": true}},"aliases": [],"description": "This adds an additional type check."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "date_range_default_filter_condition_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Vector", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Date_Time", "arguments": {},"aliases": [],"description": "A date-time with a timezone in the ISO-8601 calendar system, such as\n\"2007-12-03T10:15:30+01:00 Europe/Paris\".\n\nTime is a representation of a date-time with a timezone. This class\nstores all date and time fields, to a precision of nanoseconds, and a\ntimezone, with a zone offset used to handle ambiguous local\ndate-times.\n\nFor example, the value \"2nd October 2007 at 13:45.30.123456789 +02:00 in\nthe Europe/Paris timezone\" can be stored as `Time`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "enso_epoch_start", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "time","description": "Obtains the start of the epoch for Enso.","remarks": "? Start of the epoch\nFor Enso, start of the epoch is equal to the start of the Gregorian calendar,\nwhich is on 15th October 1582.\n\nInvoking some Gregorian calendar related functionalities, like `is_leap_year`,\nis computed for all the date times, including those before an epoch start,\nwith today's rules. Trying to get some Gregorian calendar related properties\nfor a historical date times that is defined before the epoch is likely an error,\nas the Gregorian calendar had not yet been introduced. Therefore, for such\nhistorical date times, a warning is attached to the result."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "now", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["current time"],"group": "DateTime","icon": "time","description": "Obtains the current date-time from the system clock in the system timezone.","examples": "> Example\n  Get the current time\n\n      from Standard.Base import Date_Time\n\n      example_now = Date_Time.now"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"year": {"lazy": false, "type": "Integer", "checked": true, "default": "Missing_Argument.throw \"year\""}, "month": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "day": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "hour": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "minute": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "second": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "millisecond": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "microsecond": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "nanosecond": {"lazy": false, "default": "0"}, "zone": {"lazy": false, "type": "Time_Zone", "checked": true, "default": "Time_Zone.system"}},"aliases": [],"group": "DateTime","icon": "time","description": "Obtains an instance of `Date_Time` from a year, month, day, hour, minute,\nsecond, nanosecond and timezone.\n\n\n\nReturns a `Time_Error` if the provided time cannot be represented.","arguments": "- year: The year to represent, any Integer is valid.\n- month: the month-of-year to represent, from 1 (January) to 12 (December)\n- day: the day-of-month to represent, from 1 to 31 and must be valid for the\n  year and month\n- hour: the hour-of-day to represent, from 0 to 23\n- minute: the minute-of-hour to represent, from 0 to 59\n- second: the second-of-minute to represent, from 0 to 59\n- millisecond: the millisecond-of-second to represent, from 0 to 999.\n- microsecond: the microsecond-of-second to represent, from 0 to 999,999.\n- nanosecond: The nano-of-second to represent, from 0 to 999,999,999.\n- zone: the timezone","examples": "> Example\n  Create a new zoned date time at Unix epoch.\n\n      from Standard.Base import Date_Time, Time_Zone\n\n      example_new = Date_Time.new 1970 (zone = Time_Zone.utc)\n\n\n> Example\n  Get the 5 August 1986 at midnight.\n\n      from Standard.Base import Date_Time, Time_Zone\n\n      example_new = Date_Time.new 1986 8 5"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.default_enso_zoned_date_time"}},"aliases": ["time from text"],"group": "Conversions","icon": "convert","description": "Obtains an instance of `Time` from a text such as\n\"2007-12-03T10:15:30+01:00 Europe/Paris\".\n\nThis method will return a `Time_Error` if the provided time cannot be\nparsed.","arguments": "- text: The text representing the time to be parsed.\n- format: A pattern describing how to parse the text,\n  or a `Date_Time_Formatter`.","examples": "> Example\n  Parse UTC time.\n\n      from Standard.Base import Date_Time\n\n      example_parse = Date_Time.parse \"2020-10-01T04:11:12Z\"\n\n\n> Example\n  Parse UTC-04:00 time.\n\n      from Standard.Base import Date_Time\n\n      example_parse = Date_Time.parse \"2020-10-01T04:11:12-04:00\"\n\n\n> Example\n  Parse UTC-04:00 time specifying New York timezone.\n\n      from Standard.Base import Date_Time\n\n      example_parse = Date_Time.parse \"2020-10-01T04:11:12-04:00[America/New_York]\"\n\n\n> Example\n  Parse UTC-04:00 time with nanoseconds.\n\n      from Standard.Base import Date_Time\n\n      example_parse = Date_Time.parse \"2020-10-01T04:11:12.177528-04:00\"\n\n\n> Example\n  Recover from the parse error.\n\n      from Standard.Base import Date_Time\n\n      example_parse = Date_Time.parse \"2020-10-01\" . catch Time_Error (_->Date_Time.now)\n\n\n> Example\n  Parse \"2020-05-06 04:30:20\" as Date_Time\n\n      from Standard.Base import Date_Time\n\n      example_parse = Date_Time.parse \"2020-05-06 04:30:20\" \"yyyy-MM-dd HH:mm:ss\"\n\n\n> Example\n  Parse \"06 of May 2020 at 04:30AM\" as Date_Tme\n\n      from Standard.Base import Date_Time\n\n      example_parse =\n         Date_Time.parse \"06 of May 2020 at 04:30AM\" \"dd 'of' MMMM yyyy 'at' hh:mma\"","remarks": "? Pattern Syntax\n  If the pattern is provided as `Text`, it is parsed using the format\n  described below. See `Date_Time_Formatter` for more options.\n  - y: Year. The number of pattern letters determines the minimum number of\n    digits.\n    - y: The year using any number of digits.\n    - yy: The year, using at most two digits. The default range is\n      1950-2049, but this can be changed by including the end year in\n      braces e.g. `yy{2099}`.\n    - yyyy: The year, using exactly four digits.\n  - M: Month of year. The number of pattern letters determines the format:\n    - M: Any number (1-12).\n    - MM: Month number with zero padding required (01-12).\n    - MMM: Short name of the month (Jan-Dec).\n    - MMMM: Full name of the month (January-December).\n    The month names depend on the selected locale.\n  - d: Day. The number of pattern letters determines the format:\n    - d: Any number (1-31).\n    - dd: Day number with zero padding required (01-31).\n    - ddd: Short name of the day of week (Mon-Sun).\n    - dddd: Full name of the day of week (Monday-Sunday).\n    The weekday names depend on the selected locale.\n    Both day of week and day of month may be included in a single pattern -\n    in such case the day of week is used as a sanity check.\n  - Q: Quarter of year.\n    If only year and quarter are provided in the pattern, when parsing a\n    date, the result will be the first day of that quarter.\n  - H: 24h hour of day (0-23).\n  - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n    between AM and PM.\n  - m: Minute of hour.\n  - s: Second of minute.\n  - f: Fractional part of the second. The number of pattern letters\n    determines the number of digits. If one letter is used, any number of\n    digits will be accepted.\n  - a: AM/PM marker.\n  - T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,\n    -08:30), otherwise - Time zone name (e.g. Central European Time, CET).\n  - Z: Zone offset.\n    - Z, ZZ, ZZZ: A short offset form (+HHmm).\n      No offset is indicated by \"+0000\". This can be customized by setting\n      an alternative no offset string in curly braces, e.g. `zz{Z}`.\n    - ZZZZ: Localized offset (e.g. GMT-08:00).\n    - ZZZZZ: A full offset form (+HH:mm:ss).\n      No offset is indicated by \"Z\". This can be customized as above, e.g.\n      `ZZZZZ{0}`.\n\n\n? Default Date_Time Format\n  Unless you provide a custom format, the text must represent a valid\n  date-time as defined by the ISO-8601 format (see https://en.wikipedia.org/wiki/ISO_8601).\n  If a time zone is present, it must be in the ISO-8601 Extended\n  Date/Time Format (EDTF) (see https://en.wikipedia.org/wiki/ISO_8601#EDTF).\n  The time zone format consists of:\n\n  - The ISO offset date time.\n  - If the zone ID is not available or is a zone offset then the format is\n    complete.\n  - An open square bracket '['.\n  - The zone ID. This is not part of the ISO-8601 standard. Parsing is case\n    sensitive.\n  - A close square bracket ']'."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "from_unix_epoch_seconds", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"seconds": {"lazy": false, "type": "Integer", "checked": true}, "nanoseconds": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"icon": "convert","description": "Creates a new `Date_Time` from a Unix epoch timestamp in seconds (and optional nanoseconds).","arguments": "- seconds: The number of seconds since the Unix epoch.\n- nanoseconds: The number of nanoseconds within the second.","examples": "> Example\n  Create a new `Date_Time` from a Unix epoch timestamp.\n\n      from Standard.Base import Date_Time\n\n      example_from_unix_epoch = Date_Time.from_unix_epoch_seconds 1601587200"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "from_unix_epoch_milliseconds", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"milliseconds": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"icon": "convert","description": "Creates a new `Date_Time` from a Unix epoch timestamp in milliseconds.","arguments": "- milliseconds: The number of milliseconds since the Unix epoch.","examples": "> Example\n  Create a new `Date_Time` from a Unix epoch timestamp.\n\n      from Standard.Base import Date_Time\n\n      example_from_unix_epoch = Date_Time.from_unix_epoch_milliseconds 1601587200000"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the year portion of the time.","examples": "> Example\n  Get the current year.\n\n      from Standard.Base import Date_Time\n\n      example_year = Date_Time.now.year"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the month portion of the time as a number from 1 to 12.","examples": "> Example\n  Get the current month.\n\n      from Standard.Base import Date_Time\n\n      example_month = Date_Time.now.month"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "day", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the day portion of the time.","examples": "> Example\n  Get the current day.\n\n      from Standard.Base import Date_Time\n\n      example_day = Date_Time.now.day"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "hour", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the hour portion of the time.","examples": "> Example\n  Get the current hour.\n\n      from Standard.Base import Date_Time\n\n      example_hour = Date_Time.now.hour"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "minute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the minute portion of the time.","examples": "> Example\n  Get the current minute.\n\n      from Standard.Base import Date_Time\n\n      example_minute = Date_Time.now.minute"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the second portion of the time.","examples": "> Example\n  Get the current second.\n\n      from Standard.Base import Date_Time\n\n      example_second = Date_Time.now.second"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "millisecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the millisecond portion of the time.","examples": "> Example\n  Get the current millisecond.\n\n      from Standard.Base import Date_Time\n\n      example_millisecond = Date_Time.now.millisecond"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "microsecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the microsecond portion of the time.","examples": "> Example\n  Get the current microsecond.\n\n      from Standard.Base import Date_Time\n\n      example_microsecond = Date_Time.now.microsecond"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "nanosecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"include_milliseconds": {"lazy": false, "default": "False"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the nanosecond portion of the time.","arguments": "- include_milliseconds: Specifies if the whole fractional part of the\n  second should be returned as nanoseconds. Defaults to `False`, meaning\n  it will only return the nanosecond part in the range 0-999.","examples": "> Example\n  Get the current nanosecond.\n\n      from Standard.Base import Date_Time\n\n      example_nanosecond = Date_Time.now.nanosecond"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "zone", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Get the timezone for the time.","examples": "> Example\n  Get the current timezone.\n\n      from Standard.Base import Date_Time\n\n      example_zone = Date_Time.now.zone"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_unix_epoch_seconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Return the number of seconds from the Unix epoch start (1.1.1970)\n\nIf this Date_Time is before the epoch start, returns a negative number.","examples": "> Example\n  Get the current number of seconds from the Unix epoch.\n\n      from Standard.Base import Date_Time\n\n      example_epoch = Date_Time.now.to_unix_epoch_seconds"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_unix_epoch_milliseconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Return the number of milliseconds from the Unix epoch start.\n\nIf this Date_Time is before an epoch start, returns a negative number.","examples": "> Example\n  Get the current number of milliseconds from the Enso epoch.\n\n      from Standard.Base import Date_Time\n\n      example_epoch = Date_Time.now.to_unix_epoch_milliseconds"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_enso_epoch_seconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Return the number of seconds from the Enso epoch start.\n\nSee `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_enso_epoch_milliseconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Return the number of milliseconds from the Enso epoch start.\n\nSee `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "time_of_day", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Convert this point in time to time of day, discarding the time zone\ninformation.","examples": "> Example\n  Convert the current time to a time of day.\n\n      from Standard.Base import Date_Time\n\n      example_time_of_day = Date_Time.now.time_of_day"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "week_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false, "default": "Nothing"}},"aliases": [],"icon": "metadata","description": "Returns the number of week of year this date falls into.\n\nProduces a warning for a Date that is before epoch start.","arguments": "- locale: the locale used to define the notion of weeks of year.\n  If no locale is provided, then the ISO 8601 week of year is used.","remarks": "! Locale Dependency\n  Note that this operation is locale-specific. It varies both by the\n  local definition of the first day of week and the definition of the\n  first week of year. For example, in the US, the first day of the week\n  is Sunday and week 1 is the week containing January 1. In the UK on the\n  other hand, the first day of the week is Monday, and week 1 is the week\n  containing the first Thursday of the year. Therefore it is important to\n  properly specify the `locale` argument."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "is_leap_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns if the date is in a leap year.\n\nProduces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "length_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns the number of days in the year represented by this date.\n\nProduces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "century", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the century of the date."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "quarter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the quarter of the year the date falls into."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "length_of_month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns the number of days in the month represented by this date.\n\nProduces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "day_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the day of the year."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "day_of_week", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the day of the week."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "start_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Date_Period.Month"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the first date within the `Time_Period` or `Date_Period`\ncontaining self."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "end_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Date_Period.Month"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the last date within the `Time_Period` or `Date_Period`\ncontaining self."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "date", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["time to date"],"group": "DateTime","icon": "metadata","description": "Convert this point in time to date, discarding the time of day\ninformation.","examples": "> Example\n  Convert the current time to a date.\n\n      from Standard.Base import Date_Time\n\n      example_date = Date_Time.now.date"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "at_zone", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"zone": {"lazy": false}},"aliases": ["change time zone"],"group": "DateTime","icon": "time","description": "Convert the time instant to the same instant in the provided time zone.","arguments": "- zone: The timezone to convert the time instant into.","examples": "> Example\n  Convert time instance to -04:00 timezone.\n\n      from Standard.Base import Date_Time, Time_Zone\n\n      example_at_zone = Date_Time.new 2020 . at_zone (Time_Zone.new -4)"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "date_part", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns a requested date-time part as integer.\n\nProduces a warning for a Date_Time that is before epoch start.\nSee `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "date_diff", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false, "type": "Date_Time", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Computes a time difference between the two date-times.\n\nIt returns an integer expressing how many periods fit between the two\ndate-times.\n\nThe difference will be positive if `end` is greater than `self`.\n\nProduces a warning for a Date_Time that is before epoch start.\nSee `Date_Time.enso_epoch_start`.","arguments": "- end: A date-time to compute the difference from.\n- period: The period to compute the difference in."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "date_add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Integer", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Shifts the date-time by a specified period.\n\nProduces a warning for a Date_Time that is before epoch start.\nSee `Date_Time.enso_epoch_start`.","arguments": "- amount: An integer specifying by how many periods to shift the\n  date-time.\n- period: The period by which to shift."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Duration | Period | Time_Period | Date_Period", "checked": true}},"aliases": ["add duration", "add period"],"group": "Operators","icon": "time","description": "Add the specified amount of time to this instant to produce a new instant.","arguments": "- amount: The amount of time to add to this instant, It can be a\n  `Duration`, `Period`, `Time_Period`, or `Date_Period`.","examples": "> Example\n  Add 15 years and 3 hours to a zoned date time.\n\n      from Standard.Base import Date_Time, Period\n      from Standard.Base.Data.Time import Duration\n\n      example_plus = Date_Time.new 2020 + (Period.new years=15) + (Duration.new hours=3)\n\n\n> Example\n  Add one quarter to a zoned date time.\n\n      from Standard.Base import Date_Time, Date_Period\n\n      example_plus = Date_Time.new 2020 + Date_Period.Quarter"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "add_work_days", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"days": {"lazy": false, "default": "1"}, "holidays": {"lazy": false, "default": "[]"}},"aliases": [],"group": "DateTime","icon": "time","description": "Shift the date by the specified amount of business days.\n\nFor the purpose of this method, the business days are defined to be\nMonday through Friday.\n\nProduces a warning if called on a Date_Time that is before an epoch\nstart. See `Date_Time.enso_epoch_start`.\n\nThis method always returns a day which is a business day - if the shift\namount is zero, the closest following business day is returned. For the\npurpose of calculating the shift, the holidays are treated as if we were\nstarting at the next business day after them, for example counting the\nshift starting on Saturday or Sunday works as if we were counting the\nshift from Monday (for positive shifts). So shifting Sunday by zero days\nwill return Monday, but shifting it by one day will return a Tuesday\n(so that there is the full work day - Monday) within the interval. For\nnegative shifts, shifting either Saturday or Sunday one day backwards\nwill return Friday, but shifting Monday one day backwards will return a\nFriday. The whole logic is made consistent with `work_days_until`, so\nthat the following properties hold:\n    date.work_days_until (date.add_work_days N) == N for any N >= 0\n    (date.add_work_days N).work_days_until date == -N for any N < 0\n\nThe time of day is preserved, only the date is shifted.","arguments": "- amount: The number of business days to shift the date by. If `amount`\n  is zero, the current date is returned, unless it is a weekend or a\n  holiday, in which case the next business day is returned.\n- holidays: An optional list of dates of custom holidays that should also\n  be skipped. If it is not provided, only weekends are skipped.","examples": "> Example\n  Shift the date by 5 business days.\n\n      example_shift = Date_Time.new 2020 2 3 11 45 . add_work_days 5"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Duration | Period | Time_Period | Date_Period", "checked": true}},"aliases": ["subtract duration", "subtract period"],"group": "Operators","icon": "time","description": "Subtract the specified amount of time from this instant to get a new\ninstant.\n\nProduces a warning if the resulting date time is before an Enso epoch.","arguments": "- amount: The amount of time to add to this instant, It can be a\n  `Duration`, `Period`, `Time_Period`, or `Date_Period`.","examples": "> Example\n  Subtract 1 year, 9 months and 12 hours from a zoned date time.\n\n      from Standard.Base import Date_Time\n      import Standard.Base.Data.Time.Duration\n\n      example_minus = Date_Time.new 2020 - (Period.new years=1) - (Period.new months=9) - (Duration.new hours=5)\n\n\n> Example\n  Subtract one quarter from a zoned date time.\n\n      from Standard.Base import Date_Time, Date_Period\n\n      example_plus = Date_Time.new 2020 - Date_Period.Quarter"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Date_Time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation.","examples": "> Example\n  Getting the Enso code of the date 29-October-2024 12:34.\n\n      (Date_Time.new 2024 10 29 12 34).pretty\n      ## Returns a Text\n         Date_Time.new 2024 10 29 12 34"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing a Date_Time.","examples": "> Example\n  Convert the current time to a JS_Object.\n\n      example_to_json = Date_Time.now.to_js_object"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true}},"aliases": [],"group": "Conversions","icon": "convert","description": "Format this time as text using the specified format specifier.","arguments": "- format: A pattern describing how to format the text,\n  or a `Date_Time_Formatter`.","examples": "> Example\n  Format \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" as\n  \"2020-10-08T16:41:13+03:00[Europe/Moscow]\".\n\n      from Standard.Base import Date_Time\n\n      example_format =\n         Date_Time.parse \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" . format \"yyyy-MM-dd'T'HH:mm:ssZZZZ'['tt']'\"\n\n\n> Example\n  Format \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" as\n  \"Thursday October 8 4:41 PM\".\n      from Standard.Base import Date_Time\n\n      example_format =\n         Date_Time.parse \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" . format \"EEEE MMMM d h:mm a\"\n\n\n> Example\n  Format \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" as\n  \"Thu Oct 8 (16:41)\".\n\n      from Standard.Base import Date_Time\n\n      example_format =\n         Date_Time.parse \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" . format \"EEE MMM d (HH:mm)\"\n\n\n> Example\n  Format \"2020-06-21T16:41:13+03:00\" with French locale as \"21. juin 2020\"\n\n      from Standard.Base import Date_Time\n      import Standard.Base.Data.Locale.Locale\n\n      example_format =\n          Date_Time.parse \"2020-06-21T16:41:13+03:00\" . format \"d. MMMM yyyy\" (Locale.new \"fr\")","remarks": "? Pattern Syntax\n  If the pattern is provided as `Text`, it is parsed using the format\n  described below. See `Date_Time_Formatter` for more options.\n  - y: Year. The number of pattern letters determines the minimum number of\n    digits.\n    - y: The year using any number of digits.\n    - yy: The year, using at most two digits. The default range is\n      1950-2049, but this can be changed by including the end year in\n      braces e.g. `yy{2099}`.\n    - yyyy: The year, using exactly four digits.\n  - M: Month of year. The number of pattern letters determines the format:\n    - M: Any number (1-12).\n    - MM: Month number with zero padding required (01-12).\n    - MMM: Short name of the month (Jan-Dec).\n    - MMMM: Full name of the month (January-December).\n    The month names depend on the selected locale.\n  - d: Day. The number of pattern letters determines the format:\n    - d: Any number (1-31).\n    - dd: Day number with zero padding required (01-31).\n    - ddd: Short name of the day of week (Mon-Sun).\n    - dddd: Full name of the day of week (Monday-Sunday).\n    The weekday names depend on the selected locale.\n    Both day of week and day of month may be included in a single pattern -\n    in such case the day of week is used as a sanity check.\n  - Q: Quarter of year.\n    If only year and quarter are provided in the pattern, when parsing a\n    date, the result will be the first day of that quarter.\n  - H: 24h hour of day (0-23).\n  - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n    between AM and PM.\n  - m: Minute of hour.\n  - s: Second of minute.\n  - f: Fractional part of the second. The number of pattern letters\n    determines the number of digits. If one letter is used, any number of\n    digits will be accepted.\n  - a: AM/PM marker.\n  - T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,\n    -08:30), otherwise - Time zone name (e.g. Central European Time, CET).\n  - Z: Zone offset.\n    - Z, ZZ, ZZZ: A short offset form (+HHmm).\n      No offset is indicated by \"+0000\". This can be customized by setting\n      an alternative no offset string in curly braces, e.g. `zz{Z}`.\n    - ZZZZ: Localized offset (e.g. GMT-08:00).\n    - ZZZZZ: A full offset form (+HH:mm:ss).\n      No offset is indicated by \"Z\". This can be customized as above, e.g.\n      `ZZZZZ{0}`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "", "name": "unix_epoch_start", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "", "name": "ensure_in_epoch", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "", "name": "new_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"year": {"lazy": false}, "month": {"lazy": false}, "day": {"lazy": false}, "hour": {"lazy": false}, "minute": {"lazy": false}, "second": {"lazy": false}, "nanosecond": {"lazy": false}, "zone": {"lazy": false}},"aliases": [],"description": "Obtains an instance of `Date_Time` from a year, month, day, hour, minute,\nsecond, nanosecond and timezone.\n\n\n\nRecommended to use `Date_Time.new` instead which handles potential exceptions.","arguments": "- year: The year to represent, any Integer is valid.\n- month: the month-of-year to represent, from 1 (January) to 12 (December)\n- day: the day-of-month to represent, from 1 to 31 and must be valid for the\n  year and month\n- hour: the hour-of-day to represent, from 0 to 23\n- minute: the minute-of-hour to represent, from 0 to 59\n- second: the second-of-minute to represent, from 0 to 59\n- nanosecond: the nano-of-second to represent, from 0 to 999,999,999\n- zone: the timezone"},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Date_Time_Formatter", "arguments": {"underlying": {"lazy": false, "type": "EnsoDateTimeFormatter", "checked": true}, "deferred_parsing_warnings": {"lazy": true, "default": "[]"}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "from_simple_pattern", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"icon": "convert","description": "Creates a formatter from a simple date-time format pattern.\n\nEvery letter in the pattern is interpreted as a pattern character as\ndescribed in the table below. Any character that is not a letter in the\npattern is treated as a literal character. If a sequence of letters needs\nto be put in as a literal, it can be escaped using single quotes. Use two\nsingle quotes in a row to represent a single quote in the result. As\nexplained below, curly braces can have special meaning (see 'yy'); to\nenter a literal curly brace, put it inside a quoted literal.\n\nPattern characters are interpreted case insensitively, with the exception\nof `M/m' and 'H/h'.","examples": "> Example\n  Parsing date/time values\n\n      Date_Time.parse \"2021-10-12T12:34:56.789+0200\" \"yyyy-MM-dd'T'HH:mm:ss.fZ\" == (Date_Time.new 2021 10 12 12 34 56 millisecond=789 zone=(Time_Zone.new hours=2))\n      Date.parse \"Tue, 12 Oct 2021\" \"ddd, d MMM yyyy\" == (Date.new 2021 10 12)\n      Date_Time.parse \"12/10/2021 5:34 PM\" \"d/M/Y h:mm a\" == (Date_Time.new 2021 10 12 17 34 00)\n\n\n> Example\n  Note that the default locale may not support full-length day/month names, so you may need to set a specific locale for this to work.\n\n      Date.parse \"Thursday, 1 October '98\" (Date_Time_Formatter.from \"dddd, d MMMM ''yy\" Locale.uk) == (Date.new 1998 10 01)\n\n\n> Example\n  Omitting the day will yield the first day of the month.\n\n      Date.parse \"2021-10\" \"yyyy-MM\" == (Date.new 2021 10 01)\n\n\n> Example\n  Omitting the year will yield the current year.\n\n      Date.parse \"10-12\" \"MM-dd\" == (Date.new (Date.today.year) 10 12)\n\n\n> Example\n  Parsing a two-digit year with a custom base year.\n\n      Date.parse \"1 Nov '95\" \"d MMM ''yy{2099}\" == (Date.new 2095 11 01)","remarks": "? Date pattern characters\n\n- y: Year. The number of pattern letters determines the minimum number of\n  digits.\n  - y: The year using any number of digits.\n  - yy: The year, using at most two digits. The default range is\n    1950-2049, but this can be changed by including the end year in\n    braces e.g. `yy{2099}`.\n  - yyyy: The year, using exactly four digits.\n- M: Month of year. The number of pattern letters determines the format:\n  - M: Any number (1-12).\n  - MM: Month number with zero padding required (01-12).\n  - MMM: Short name of the month (Jan-Dec).\n  - MMMM: Full name of the month (January-December).\n  The month names depend on the selected locale.\n- d: Day. The number of pattern letters determines the format:\n  - d: Any number (1-31).\n  - dd: Day number with zero padding required (01-31).\n  - ddd: Short name of the day of week (Mon-Sun).\n  - dddd: Full name of the day of week (Monday-Sunday).\n  The weekday names depend on the selected locale.\n  Both day of week and day of month may be included in a single pattern -\n  in such case the day of week is used as a sanity check.\n- e: An alternative notation: single `e` maps to `ddd` and `ee` or more\n  map to `dddd` meaning name of day of week.\n- Q: Quarter of year.\n  If only year and quarter are provided in the pattern, when parsing a\n  date, the result will be the first day of that quarter.\n\n\n? Time pattern characters\n\n- H: 24h hour of day (0-23).\n- h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n  between AM and PM.\n- m: Minute of hour.\n- s: Second of minute.\n- f: Fractional part of the second. The number of pattern letters\n  determines the number of digits. If one letter is used, any number of\n  digits will be accepted.\n- a: AM/PM marker.\n\n\n? Time zone pattern characters\n\n- T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,\n  -08:30), otherwise - Time zone name (e.g. Central European Time, CET).\n- Z: Zone offset.\n  - Z, ZZ, ZZZ: A short offset form (+HHmm).\n    No offset is indicated by \"+0000\". This can be customized by setting\n    an alternative no offset string in curly braces, e.g. `zz{Z}`.\n  - ZZZZ: Localized offset (e.g. GMT-08:00).\n  - ZZZZZ: A full offset form (+HH:mm:ss).\n    No offset is indicated by \"Z\". This can be customized as above, e.g.\n    `ZZZZZ{0}`.\n- v: Time zone name (same as TTTT).\n- V: Time zone ID (same as T).\n\nSome parts, like fractions of a second may not be required. The square\nbrackets `[]` can be used to surround such optional sections."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "from_iso_week_date_pattern", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Text", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"icon": "convert","description": "Creates a formatter from a pattern for the ISO 8601 leap week calendar.\n\nThe ISO 8601 leap week calendar is a variation of the ISO 8601 calendar\nthat defines a leap week as the week that contains the 29th of February.\nThis calendar is used by some European and Middle Eastern countries.\n\nThe pattern is a sequence of letters and symbols that are interpreted as\nfollows:\n- Y: The week based year.\n  - In case the year is parsed in two digit mode (`YY`), the default\n    range is 1950-2049, but this can be changed by including the end year\n    in braces e.g. `YY{2099}`\n- w: Week of year.\n- d: Day of week.\n  - d: Numeric day of week (1-7). 1 is Monday.\n  - dd: Numeric day of week with zero padding (01-07).\n  - ddd: Short name of the day of week (Mon-Sun).\n  - dddd: Full name of the day of week (Monday-Sunday).\n  The weekday names depend on the selected locale.\n- e: An alternative notation: single `e` maps to `ddd` and `ee` or more\n  map to `dddd` meaning name of day of week.\n\nMoreover, all time and timezone pattern characters like in `Simple` case\nare supported too - in case you need to parse a date time value with the\ndate part in ISO week date format.\n\nThe same as in the `Simple` pattern, the single quotes can be used to\nescape letter literals and square brackets can be used to indicate\noptional sections.","examples": "> Example\n  Parsing a date in the ISO week date format\n\n      Date.parse \"1976-W53-6\" (Date_Time_Formatter.from_iso_week_date_pattern \"YYYY-'W'WW-d\") == (Date.new 1977 01 01)\n      Date.parse \"1978-W01, Mon\" (Date_Time_Formatter.from_iso_week_date_pattern \"YYYY-'W'WW, eee\") == (Date.new 1978 01 02)\n      Date_Time.parse \"1978-W01-4 12:34:56\" (Date_Time_Formatter.from_iso_week_date_pattern \"YYYY-'W'WW-d HH:mm:ss\") == (Date_Time.new 1978 01 05 12 34 56)\n\n\n> Example\n  Omitting the day of the week will result in the first day of that week.\n\n      Date.parse (Date_Time_Formatter.from_iso_week_date_pattern \"YYYY-'W'WW\") \"1978-W01\" == (Date.new 1978 01 02)"},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "from_java", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"pattern": {"lazy": false}, "locale": {"lazy": false, "type": "Locale | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"icon": "convert","description": "Creates a formatter from a Java `DateTimeFormatter` instance or a text\npattern parsed using the Java parser: `DateTimeFormatter.ofPattern`.\n\nSee the Java documentation for explanation of the pattern format:\nhttps://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html#patterns","arguments": "- pattern: The pattern string to parse using the Java pattern rules, or\n  an existing `DateTimeFormatter` instance.\n- locale: A locale to use when constructing the formatter from a text\n  pattern. If not specified, defaults to `Locale.default`. If passing a\n  `DateTimeFormatter` instance and this argument is set, it will\n  overwrite the original locale of that formatter."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "default_enso_zoned_date_time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The default format for date-time used in Enso.\nIt acts as `ISO_Zoned_Date_Time` but both offset and timezone are optional.\n\nFor example, it may parse date of the form `2011-12-03 10:15:30+01:00[Europe/Paris]`,\nas well as `2011-12-03T10:15:30` assuming the default timezone."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "iso_zoned_date_time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The ISO 8601 format for date-time with offset and timezone.\nThe date and time parts may be separated by a single space or a `T`.\n\nFor example, it may parse date of the form `2011-12-03 10:15:30+01:00[Europe/Paris]`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "iso_offset_date_time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The ISO 8601 format for date-time with offset.\nThe date and time parts may be separated by a single space or a `T`.\n\nFor example, it may parse date of the form `2011-12-03 10:15:30+01:00`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "iso_local_date_time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The ISO 8601 format for date-time without a timezone.\nThe date and time parts may be separated by a single space or a `T`.\n\nFor example, it may parse date of the form `2011-12-03 10:15:30`. The\ntimezone will be set to `Time_Zone.system`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "iso_date", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The ISO 8601 format for date.\n\nFor example, it may parse date of the form `2011-12-03`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "iso_time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The ISO 8601 format for time.\n\nFor example, it may parse time of the form `10:15:30`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a text representation of this formatter."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Parses a human-readable representation of this formatter."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "with_locale", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false, "type": "Locale", "checked": true}},"aliases": [],"icon": "convert","description": "Returns a copy of this formatter with a changed locale."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "handle_java_errors", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "parse_date", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "parse_date_time", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "parse_time", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "format_date", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false, "type": "Date", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "format_date_time", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date_time": {"lazy": false, "type": "Date_Time", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "format_time", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"time": {"lazy": false, "type": "Time_Of_Day", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "with_parsing_warnings", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"continuation": {"lazy": true}},"aliases": [],"description": "Adds parsing warnings, if any, to the result of `continuation`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "get_java_formatter_for_parsing", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the `underlying` formatter, also ensuring that parse-only\nwarnings are attached to it, to be propagated."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "pattern_approximation_as_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a pattern that is associated with this formatter.\n\nFor formatters created using `from_simple_pattern` and\n`from_iso_week_date_pattern` or `from_java` with a Text pattern this will\njust be the pattern. For constants, it will be a pattern that best\nresembles that constant. For formatters created from a Java formatter\ninstance, this will be the text representation of that formatter."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Sunday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Sunday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Monday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Monday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Tuesday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Tuesday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Wednesday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Wednesday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Thursday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Thursday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Friday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Friday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Saturday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Saturday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "to_integer", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"first_day": {"lazy": false, "default": "Day_Of_Week.Sunday"}, "start_at_zero": {"lazy": false, "default": "False"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert the Day_Of_Week to an Integer.","arguments": "- `first_day`: The first day of the week.\n- `start_at_zero`: If True, first day of the week is 0 otherwise is 1."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Day_Of_Week_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Day_Of_Week", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}, "first_day": {"lazy": false, "type": "Day_Of_Week", "checked": true, "default": "Day_Of_Week.Sunday"}, "start_at_zero": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Convert from an integer to a Day_Of_Week","arguments": "- `that`: The first day of the week.\n- `first_day`: The first day of the week.\n- `start_at_zero`: If True, first day of the week is 0 otherwise is 1."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Duration", "arguments": {},"aliases": [],"description": "Represents the amount of time between two points in time."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "between", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"start_inclusive": {"lazy": false}, "end_exclusive": {"lazy": false}, "timezone_aware": {"lazy": false, "default": "True"}},"aliases": [],"icon": "time","description": "Create an interval representing the duration between two points in time.","arguments": "- start_inclusive: The start datetime of the duration, included.\n- end_exclusive: The end datetime of the duration, excluded.\n- timezone_aware: Whether the duration between two given times should be\n  aware of the timezone, that can be set for start or end times.","examples": "> Example\n  An hour interval between two points in time.\n\n      from Standard.Base import Date_Time\n      import Standard.Base.Data.Time.Duration\n\n      example_between = Duration.between Date_Time.now (Date_Time.new 2010 10 20)"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"hours": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "minutes": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "seconds": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "milliseconds": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "nanoseconds": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "DateTime","icon": "time","description": "Create a duration from time units.","arguments": "- hours: hours\n- minutes: minutes\n- seconds: seconds\n- milliseconds: milliseconds\n- nanoseconds: nanoseconds","examples": "> Example\n  Duration of 2 hours.\n\n      import Standard.Base.Data.Time.Duration\n\n      example_duration = Duration.new hours=2"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "zero", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "time","description": "Create a zero (empty) duration.","examples": "> Example\n  Folding a vector of durations.\n\n      import Standard.Base.Data.Time.Duration\n\n      durations = [(Duration.new seconds=1), (Duration.new seconds=2), (Duration.new seconds=3)]\n      example_sum = durations.fold Duration.zero (+)"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "time_execution", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": true}},"aliases": [],"icon": "time","description": "Time the evaluation of a function, return a Pair of Duration and Result","arguments": "- function: Function to execute."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["add duration"],"group": "Operators","icon": "time","description": "Add the specified amount of time to this duration.","arguments": "- that: The duration to add to `self`.","examples": "> Example\n  Add 6 seconds to a duration of 3 minutes\n\n      import Standard.Base.Data.Time.Duration\n\n      example_add = (Duration.new minutes=3) + (Duration.new seconds=6)\n\n\n> Example\n  Add 12 hours to a duration of 30 minutes.\n\n      import Standard.Base.Data.Time.Duration\n\n      example_add = (Duration.new minutes=30) + (Duration.new hours=12)"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["subtract duration"],"group": "Operators","icon": "time","description": "Subtract the specified amount of time from this duration.","arguments": "- that: The duration to subtract from `self`.","examples": "> Example\n  Substract 30 minutes from a duration of 6 hours.\n\n      import Standard.Base.Data.Time.Duration\n\n      example_subtract = (Duration.new hours=6) - (Duration.new minutes=30)"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "nanoseconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the portion of the duration expressed in nanoseconds.","examples": "> Example\n  Get the portion of the duration expressed in nanoseconds.\n\n      import Standard.Examples\n\n      example_nanos = Examples.duration.nanoseconds"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "milliseconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the portion of the duration expressed in milliseconds.","examples": "> Example\n  Get the portion of the duration expressed in milliseconds.\n\n      import Standard.Examples\n\n      example_millis = Examples.duration.milliseconds"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "seconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the portion of the duration expressed in seconds.","examples": "> Example\n  Get the portion of the duration expressed in seconds.\n\n      import Standard.Examples\n\n      example_seconds = Examples.duration.seconds"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "minutes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the portion of the duration expressed in minutes.","examples": "> Example\n  Get the portion of the duration expressed in minutes.\n\n      import Standard.Examples\n\n      example_minutes = Examples.duration.minutes"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "hours", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the portion of the duration expressed in hours.","examples": "> Example\n  Get the portion of the duration expressed in hours.\n\n      import Standard.Examples\n\n      example_hours = Examples.duration.milliseconds"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "total_milliseconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "convert","description": "Convert the duration to total milliseconds."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "total_seconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "convert","description": "Convert the duration to total seconds."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "total_minutes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "convert","description": "Convert the duration to total minutes."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "total_hours", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "convert","description": "Convert the duration to total minutes."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing a Duration.","examples": "> Example\n  Convert a duration of 10 seconds to a JS_Object.\n\n      example_to_json = (Duration.new seconds=10).to_js_object"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Duration to a friendly string."},
{"module": "Standard.Base.Data.Time.Duration", "type": "", "name": "between_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start_inclusive": {"lazy": false}, "end_exclusive": {"lazy": false}, "timezone_aware": {"lazy": false}},"aliases": [],"description": "Create an interval representing the duration between two points in time.\n\n\n\nRecommended to use `Duration.between` instead which provides defaults.","arguments": "- start_inclusive: The start datetime of the duration, included.\n- end_exclusive: The end datetime of the duration, excluded.\n- timezone_aware: Whether the duration between two given times should be\n  aware of the timezone, that can be set for start or end times."},
{"module": "Standard.Base.Data.Time.Duration", "type": "", "name": "new_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"hours": {"lazy": false}, "minutes": {"lazy": false}, "seconds": {"lazy": false}, "milliseconds": {"lazy": false}, "nanoseconds": {"lazy": false}},"aliases": [],"description": "Create a duration from time units.\n\n\n\nRecommended to use `Duration.new` instead which provides defaults.","arguments": "- hours: hours\n- minutes: minutes\n- seconds: seconds\n- milliseconds: milliseconds\n- nanoseconds: nanoseconds"},
{"module": "Standard.Base.Data.Time.Duration", "type": "", "name": "ensure_duration", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Errors", "type": "Date_Time_Format_Parse_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Date_Time_Format_Parse_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates an error during parsing of a date time format pattern."},
{"module": "Standard.Base.Data.Time.Errors", "type": "Date_Time_Format_Parse_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Errors", "type": "Suspicious_Date_Time_Format", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Suspicious_Date_Time_Format", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates a warning when parsing a date time format."},
{"module": "Standard.Base.Data.Time.Errors", "type": "Suspicious_Date_Time_Format", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Period", "arguments": {"internal_period": {"lazy": false, "type": "Java_Period", "checked": true}},"aliases": [],"arguments": "- internal_period: An internal representation of period of type\n  java.time.Period."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "between", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"start_date_inclusive": {"lazy": false}, "end_date_exclusive": {"lazy": false}},"aliases": [],"icon": "time","description": "Create a Period representing the time interval between two dates.","arguments": "- start_date_inclusive: The start date of the period, included.\n- end_date_exclusive: The end date of the period, excluded.","examples": "> Example\n  Get a Period between 2022-10-21 and 2022-09-12\n\n      import Standard.Base.Data.Time.Period\n\n      example_period = Period.between (Date.new 2022 10 21) (Date.new 2022 9 12)"},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"years": {"lazy": false, "default": "0"}, "months": {"lazy": false, "default": "0"}, "days": {"lazy": false, "default": "0"}},"aliases": [],"group": "DateTime","icon": "time","description": "Create a new Period from years, months and days.","arguments": "- years: Amount of years.\n- months: Amount of months.\n- days: Amount of days.","examples": "> Example\n  Create a Period of 2 years and 5 days\n\n      import Standard.Base.Data.Time.Period\n\n      example_period = Period.new 2 0 5"},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "years", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "time","description": "Get the portion of the period expressed in years."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "months", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "time","description": "Get the portion of the period expressed in months."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "total_months", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "time","description": "Get the portion of the period coming from months and years as months\n(every year is translated to 12 months)."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "days", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "time","description": "Get the portion of the period expressed in days."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other_period": {"lazy": false}},"aliases": ["add period"],"group": "Operators","icon": "time","description": "Add the specified amount of time to this period.","arguments": "- other_period: The period to add to `self`. Note that this cannot be a\n  `Duration`, neither `Date_Time`.","examples": "> Example\nAdd 1 day to 1 month.\n\n    import Standard.Base.Data.Time.Period\n\n    example_add = (Period.new months=1) + (Period.new days=1)"},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other_period": {"lazy": false}},"aliases": ["subtract period"],"group": "Operators","icon": "time","description": "Subtract a specified amount of time from this period.","arguments": "- other_period: Other Period to add to this Period. Note that this\n  cannot be a `Duration`, neither `Date_Time`.","examples": "> Example\n  Subtract 11 months from a period of 3 years\n\n      import Standard.Base.Data.Time.Period\n\n      example_subtract = (Period.new years=3) - (Period.new months=11)"},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"factor": {"lazy": false}},"aliases": ["multiply", "times"],"group": "Operators","icon": "time","description": "Multiply the amount of time in this period by the specified scalar.","arguments": "- factor: The scalar to multiply by.","examples": "> Example\n  Multiply a period of 1 year and 2 months by 2\n\n      import Standard.Base.Data.Time.Period\n\n      example_multiply = (Period.new years=1 months=2) * 2"},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "negate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Operators","icon": "operators","description": "Negate all amounts in the period.\n\nThis is useful when a period used for going forward in time needs to be\nused for going backwards instead."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Period to a friendly string."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing a Period.","examples": "> Example\n  Convert a period of 10 months to a JS_Object.\n\n      example_to_json = (Period.new months=10).to_js_object"},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation.","examples": "> Example\n  Getting the Enso code of the period 1 month and 2 days.\n\n      (Period.new months=1 days=2).pretty\n      ## Returns a Text\n         Time_Of_Day.new 12 34 millisecond=500"},
{"module": "Standard.Base.Data.Time.Period", "type": "", "name": "ensure_period", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}, "action": {"lazy": true}, "error_msg": {"lazy": false, "default": "\"Cannot use Duration as a parameter\""}},"aliases": []},
{"module": "Standard.Base.Data.Time.Period", "type": "", "name": "catch_java_exceptions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"operation": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Of_Day", "arguments": {},"aliases": [],"description": "This type is a date-time object that represents a time, often viewed\nas hour-minute-second.\n\nTime is represented to nanosecond precision. For example, the value\n\"13:45.30.123456789\" can be stored in a `Time_Of_Day`."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "now", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "time","description": "Obtains the current time from the system clock in the default time-zone.","examples": "> Example\n  Get the current time in the default time zone.\n\n      from Standard.Base import Time_Of_Day\n\n      example_now = Time_Of_Day.now"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"hour": {"lazy": false, "default": "0"}, "minute": {"lazy": false, "default": "0"}, "second": {"lazy": false, "default": "0"}, "millisecond": {"lazy": false, "default": "0"}, "microsecond": {"lazy": false, "default": "0"}, "nanosecond": {"lazy": false, "default": "0"}},"aliases": [],"group": "DateTime","icon": "time","description": "Obtains an instance of `Time_Of_Day` from an hour, minute, second\nand nanosecond.\n\n\n\nReturns a `Time_Error` if the provided time is not a valid time.","arguments": "- hour: The hour-of-day to represent, from 0 to 23.\n- minute: The minute-of-hour to represent, from 0 to 59.\n- second: The second-of-minute to represent, from 0 to 59.\n- millisecond: the millisecond-of-second to represent, from 0 to 999.\n- microsecond: the microsecond-of-second to represent, from 0 to 999,999.\n- nanosecond: The nano-of-second to represent, from 0 to 999,999,999.","examples": "> Example\n  Create a new local time at Unix epoch.\n\n      from Standard.Base import Time_Of_Day\n\n      example_epoch = Time_Of_Day.new\n\n\n> Example\n  Get the local time at 9:30.\n\n      from Standard.Base import Time_Of_Day\n\n      example_epoch = Time_Of_Day.new hour=9 minute=30"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.iso_time"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Obtains an instance of `Time_Of_Day` from a text such as \"10:15\".\n\n\n\nReturns a `Time_Error` if the provided text cannot be parsed using the\ndefault format.","arguments": "- text: The text to parse as a time of day.\n- format: A pattern describing how to parse the text,\n  or a `Date_Time_Formatter`.","examples": "> Example\n  Get the time 15:05:30.\n\n      from Standard.Base import Time_Of_Day\n\n      example_parse = Time_Of_Day.parse \"15:05:30\"\n\n\n> Example\n  Recover from the parse error.\n\n      from Standard.Base import Time_Of_Day\n      from Standard.Base.Errors.Common import Time_Error\n\n      example_parse = Time_Of_Day.parse \"half twelve\" . catch Time_Error _->\n          Time_Of_Day.new\n\n\n> Example\n  Parse \"04:30:20\" as Time_Of_Day.\n\n      from Standard.Base import Time_Of_Day\n\n      example_parse = Time_Of_Day.parse \"04:30:20\" \"HH:mm:ss\"\n\n\n> Example\n  Parse \"4:30AM\" as Time_Of_Day\n\n      from Standard.Base import Time_Of_Day\n\n      example_parse = Time_Of_Day.parse \"4:30AM\" \"h:mma\"","remarks": "? Default Time Format\n  Unless you provide a custom format, the text must represent a valid\n  time and is parsed using the ISO-8601 extended local time format.\n  The format consists of:\n\n  - Two digits for the hour-of-day. This is pre-padded by zero to ensure two\n    digits.\n  - A colon\n  - Two digits for the minute-of-hour. This is pre-padded by zero to ensure\n    two digits.\n  - If the second-of-minute is not available then the format is complete.\n  - A colon\n  - Two digits for the second-of-minute. This is pre-padded by zero to ensure\n    two digits.\n  - If the nano-of-second is zero or not available then the format is\n    complete.\n  - A decimal point\n  - One to nine digits for the nano-of-second. As many digits will be output\n    as required.\n\n\n? Pattern Syntax\n  If the pattern is provided as `Text`, it is parsed using the format\n  described below. See `Date_Time_Formatter` for more options.\n  - H: 24h hour of day (0-23).\n  - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n    between AM and PM.\n  - m: Minute of hour.\n  - s: Second of minute.\n  - f: Fractional part of the second. The number of pattern letters\n    determines the number of digits. If one letter is used, any number of\n    digits will be accepted.\n  - a: AM/PM marker."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"include_now": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Gets the default drop down option for Time_Of_Day."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "hour", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the hour portion of the time of day.","examples": "> Example\n  Get the current hour.\n\n      from Standard.Base import Time_Of_Day\n\n      example_hour = Time_Of_Day.now.hour"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "minute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the minute portion of the time of day.","examples": "> Example\n  Get the current minute.\n\n      from Standard.Base import Time_Of_Day\n\n      example_minute = Time_Of_Day.now.minute"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the second portion of the time of day.","examples": "> Example\n  Get the current second.\n\n      from Standard.Base import Time_Of_Day\n\n      example_second = Time_Of_Day.now.second"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "millisecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the millisecond portion of the time of day.","examples": "> Example\n  Get the current millisecond.\n\n      from Standard.Base import Time_Of_Day\n\n      example_millisecond = Time_Of_Day.now.millisecond"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "microsecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the microsecond portion of the time of day.","examples": "> Example\n  Get the current microsecond.\n\n      from Standard.Base import Time_Of_Day\n\n      example_microsecond = Time_Of_Day.now.microsecond"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "nanosecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"include_milliseconds": {"lazy": false, "default": "False"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the nanosecond portion of the time of day.","arguments": "- include_milliseconds: Specifies if the whole fractional part of the\n  second should be returned as nanoseconds. Defaults to `False`, meaning\n  it will only return the nanosecond part in the range 0-999.","examples": "> Example\n  Get the current nanosecond.\n\n      from Standard.Base import Time_Of_Day\n\n      example_nanosecond = Time_Of_Day.now.nanosecond"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "start_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Time_Period.Hour"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the first time within the `Time_Period` containing self."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "end_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Time_Period.Hour"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the last time within the `Time_Period` containing self."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "to_seconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Extracts the time as the number of seconds, from 0 to 24 * 60 * 60 - 1.","examples": "> Example\n  Convert the current time into elapsed seconds in the day.\n\n      from Standard.Base import Time_Of_Day\n\n      example_to_seconds = Time_Of_Day.now.to_seconds"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "to_date_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}, "zone": {"lazy": false, "default": "Time_Zone.system"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Combine this time of day with a date to create a point in time.","arguments": "- date: The date on which this time should occur.\n- zone: The time-zone in which the time is specified.","examples": "> Example\n  Convert local time to 1st January 2020 12:30 at system timezone.\n\n      from Standard.Base import Time_Of_Day\n\n      example_to_time = Time_Of_Day.new 12 30 . to_time (Date.new 2020)"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "date_part", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "type": "Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns a requested time part as integer."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "date_diff", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false, "type": "Time_Of_Day", "checked": true}, "period": {"lazy": false, "type": "Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Computes a time difference between the two times of day.\n\nIt returns an integer expressing how many periods fit between the two\ntimes of day.\n\nThe difference will be positive if `end` is greater than `self`.","arguments": "- end: A time of day to compute the difference from.\n- period: The period to compute the difference in."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "date_add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Integer", "checked": true}, "period": {"lazy": false, "type": "Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Shifts the time of day by a specified period.","arguments": "- amount: An integer specifying by how many periods to shift the time.\n- period: The period by which to shift."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Duration | Time_Period", "checked": true}},"aliases": ["add duration"],"group": "Operators","icon": "time","description": "Add the specified amount of time to this instant to get a new instant.","arguments": "- amount: The amount of time to add to this instant. It can be a\n  `Duration` or `Time_Period`.","examples": "> Example\n  Add a `Duration` to a `Time_Of_Day`.\n\n      from Standard.Base import Time_Of_Day, Duration\n\n      example_plus = Time_Of_Day.new + (Duration.new seconds=3)\n\n\n> Example\n  Add a `Time_Period` to a `Time_Of_Day`.\n\n      from Standard.Base import Time_Of_Day, Time_Period\n\n      example_plus = Time_Of_Day.new + Time_Period.Hour"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Duration | Time_Period", "checked": true}},"aliases": ["subtract duration"],"group": "Operators","icon": "time","description": "Subtract the  specified amount of time from this instant to get a new\ninstant.","arguments": "- amount: The amount of time to add to this instant. It can be a\n  `Duration` or `Time_Period`.","examples": "> Example\n  Subtract 12 hours from a local time.\n\n      from Standard.Base import Time_Of_Day, Duration\n\n      example_minus = Time_Of_Day.now - (Duration.new hours=12)\n\n\n> Example\n  Subtract a `Time_Period` from a `Time_Of_Day`.\n\n      from Standard.Base import Time_Of_Day, Time_Period\n\n      example_plus = Time_Of_Day.new - Time_Period.Hour"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this Time_Of_Day.","examples": "> Example\n  Convert the current time to a JS_Object.\n\n      example_to_json = Time_Of_Day.now.to_js_object"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Time_Of_Day."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true}},"aliases": [],"group": "Conversions","icon": "convert","description": "Format this time of day using the provided formatter pattern.","arguments": "- format: A pattern describing how to format the text,\n  or a `Date_Time_Formatter`.","examples": "> Example\n  Format \"16:21:10\" as \"16:21:00.1234\"\n\n      from Standard.Base import Time_Of_Day\n\n      example_format = Time_Of_Day.new 16 21 10 . format \"HH:mm:ss.SSSS\"\n\n\n> Example\n  Format \"16:21:10\" as \"16:21:00.123456789\"\n\n      from Standard.Base import Time_Of_Day\n\n      example_format = Time_Of_Day.new 16 21 10 . format \"HH:mm:ss.n\"\n\n\n> Example\n  Format \"16:21:10\" as \"4:21pm\"\n\n      from Standard.Base import Time_Of_Day\n\n      example_format = Time_Of_Day.new 16 21 10 . format \"h:mma\"\n\n\n> Example\n  Format \"16:21:10\" as \"04:21:10pm\"\n\n      from Standard.Base import Time_Of_Day\n\n      example_format = Time_Of_Day.new 16 21 10 . format \"hh:mm:ssa\"\n\n\n> Example\n  Format \"16:21:10\" as \"hour:4\"\n\n      from Standard.Base import Time_Of_Day\n\n      example_format = Time_Of_Day.new 16 21 10 . format \"'hour:'h\"","remarks": "? Pattern Syntax\n  If the pattern is provided as `Text`, it is parsed using the format\n  described below. See `Date_Time_Formatter` for more options.\n  - H: 24h hour of day (0-23).\n  - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n    between AM and PM.\n  - m: Minute of hour.\n  - s: Second of minute.\n  - f: Fractional part of the second. The number of pattern letters\n    determines the number of digits. If one letter is used, any number of\n    digits will be accepted.\n  - a: AM/PM marker."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation.","examples": "> Example\n  Getting the Enso code of the time 12:34:00.5\n\n      (Time_Of_Day.new 12 34 0 500).pretty\n      ## Returns a Text\n         Time_Of_Day.new 12 34 millisecond=500"},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "", "name": "new_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"hour": {"lazy": false}, "minute": {"lazy": false}, "second": {"lazy": false}, "nanosecond": {"lazy": false}},"aliases": [],"description": "Obtains an instance of `Time_Of_Day` from an hour, minute, second\nand nanosecond.\n\n\n\nRecommended to use `Time_Of_Day.new` instead which handles potential exceptions.","arguments": "- hour: The hour-of-day to represent, from 0 to 23.\n- minute: The minute-of-hour to represent, from 0 to 59.\n- second: The second-of-minute to represent, from 0 to 59.\n- nanosecond: The nano-of-second to represent, from 0 to 999,999,999."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Hour", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of an hour."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Minute", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a minute."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Second", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a second."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Millisecond", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a millisecond."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Microsecond", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a microsecond."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Nanosecond", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a nanosecond."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "to_java_unit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "adjust_start", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "adjust_end", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "to_duration", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Zone", "arguments": {},"aliases": [],"description": "A type representing a time zone.\n\n\n\nA time zone can be eiter offset-based like \"-06:00\" or id-based like\n\"Europe/Paris\".","arguments": "- internal_zone_id: The identifier for the internal zone of the\n  representation."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "system", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "time","description": "The system default timezone.","examples": "> Example\n  Get the system default timezone.\n\n      from Standard.Base import Time_Zone\n\n      example_system = Time_Zone.system"},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "local", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["current time zone"],"icon": "time","description": "The system's local timezone.","examples": "> Example\n  Get the system's local timezone.\n\n      from Standard.Base import Time_Zone\n\n      example_local = Time_Zone.local"},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "utc", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["utc time zone"],"icon": "time","description": "The UTC timezone.","examples": "> Example\n  Get the UTC timezone.\n\n      from Standard.Base import Time_Zone\n\n      example_utc = Time_Zone.utc"},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"hours": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "minutes": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "seconds": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"icon": "time","description": "Obtains an instance of `Time_Zone` using an offset in hours, minutes and seconds\nfrom the UTC zone.","arguments": "- hours: The timezone offset in hours from UTC, from -18 to +18.\n- minutes: The timezone offset in minutes from the nearest hour, from 0 to\n  ±59. The sign must match that of the hours argument.\n- seconds: The timezone offset in seconds from the nearest minute, from 0 to\n  ±59. The sign must match that of the minutes argument.","examples": "> Example\n  Get time zone 1 hour 1 minute and 50 seconds from UTC.\n\n      from Standard.Base.Time.Time_Zone import Time_Zone\n\n      example_new = Time_Zone.new 1 1 50"},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["time zone from text"],"group": "Conversions","icon": "convert","description": "This method parses the ID producing a `Time_Zone`.","arguments": "- id: The text representing a zone identifier.","examples": "> Example\n  Get Central European Time.\n\n      from Standard.Base import Time_Zone\n\n      example_parse = Time_Zone.parse \"CET\"\n\n\n> Example\n  Get Moscow time.\n\n      from Standard.Base import Time_Zone\n\n      example_parse = Time_Zone.parse \"Europe/Moscow\"\n\n\n> Example\n  Get time zone -06:00.\n\n      from Standard.Base import Time_Zone\n\n      example_parse = Time_Zone.parse \"-06:00\"\n\n\n> Example\n  Get custom offset +03:02:01 of 3 hours 2 minutes an 1 second.\n\n      from Standard.Base import Time_Zone\n\n      example_parse = Time_Zone.parse \"+03:02:01\""},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Gets the default drop down option for Time_Zone."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "zone_names", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "time","description": "Gets a list of all the time zone names that are predefined."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "zone_id", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Get the unique timezone ID.","examples": "> Example\n  Get the unique identifier for your system's current timezone.\n\n      from Standard.Base import Time_Zone\n\n      example_zone_id = Time_Zone.system.zone_id"},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "offset", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"at": {"lazy": false}},"aliases": [],"group": "DateTime","icon": "metadata","description": "Get the offset in seconds at given date time.","arguments": "- at: The date to compute offset at."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this Time_Zone.","examples": "> Example\n  Convert your system's current timezone to a JS_Object.\n\n      from Standard.Base import Time_Zone\n\n      example_to_json = Time_Zone.system.to_js_object"},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Time_Zone."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "", "name": "new_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"hours": {"lazy": false}, "minutes": {"lazy": false}, "seconds": {"lazy": false}},"aliases": [],"description": "Obtains an instance of `Time_Zone` using an offset in hours, minutes and seconds\nfrom the UTC zone.\n\n\n\nRecommended to use `Time_Zone.new` instead which provides defaults.","arguments": "- hours: The timezone offset in hours from UTC, from -18 to +18.\n- minutes: The timezone offset in minutes from the nearest hour, from 0 to\n  ±59. The sign must match that of the hours argument.\n- seconds: The timezone offset in seconds from the nearest minute, from 0 to\n  ±59. The sign must match that of the minutes argument."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "", "name": "parse_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "This method parses the ID producing a `Time_Zone`.\n\n\n\nRecommended to use `Time_Zone.parse` instead which handles potential exceptions.","arguments": "- text: The text representing a zone identifier."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "XML_Format", "arguments": {},"aliases": [],"description": "A `File_Format` for reading and writing XML files."},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Array", "arguments": {},"aliases": [],"description": "The type of primitive mutable arrays."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the array at a specified index (0-based).","arguments": "- index: The location in the array to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back\n  of the array, i.e. -1 will correspond to the last element.","examples": "> Example\n  Get the second element of an array.\n\n      [1, 2, 3].to_array.at 1 == 2\n\n\n> Example\n  Get the last element of an array.\n\n      [1, 2, 3].to_array.at -1 == 3"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of elements stored in this array.","examples": "> Example\n  Checking the length of an array.\n\n      [1, 2, 3, 4].to_array.length"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "to_array", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Identity.\nThis method is implemented purely for completeness with the runtime's\nprimitive array protocol."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"order": {"lazy": false, "default": "Sort_Direction.Ascending"}, "on": {"lazy": false, "default": "Nothing"}, "by": {"lazy": false, "default": "Nothing"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Ignore"}},"aliases": ["order_by"],"group": "Calculations","icon": "order","description": "Sort the array.\n\n\n\nBy default, elements are sorted in ascending order.\n\nThis is a stable sort, meaning that items that compare the same will not\nhave their order changed by the sorting process.","arguments": "- order: The order in which the array elements are sorted.\n- on: A projection from the element type to the value of that element\n  being sorted on. If set to `Nothing` (the default),\n  identity function will be used.\n- by: A function that compares the result of applying `on` to two\n  elements, returning an an `Ordering` if the two elements are comparable\n  or `Nothing` if they are not. If set to `Nothing` (the default argument),\n  `Ordering.compare _ _` method will be used.\n- on_problems: A `Problem_Behavior` specifying what should happen if two\n  incomparable values are encountered.","examples": "> Example\n  Sorting an array of numbers.\n\n      [5, 2, 3, 45, 15].to_array.sort == [2, 3, 5, 15, 45].to_array\n\n\n> Example\n  Sorting an array of `Pair`s on the first element, descending.\n\n      [Pair 1 2, Pair -1 8].to_array.sort Sort_Direction.Descending (_.first)\n\n\n> Example\n  Sorting an array with elements with different comparators. Values `1`\n  and `My_Type` have different comparators. `1` will be sorted before `My_Type`\n  because it has the default comparator.\n\n      [My_Type.Value 'hello', 1].to_array.sort == [1, My_Type.Value 'hello'].to_array","remarks": "! Computational Complexity\n  The complexities for this sort are:\n  - *Worst-Case Time:* `O(n * log n)`\n  - *Best-Case Time:* `O(n)`\n  - *Average Time:* `O(n * log n)`\n  - *Worst-Case Space:* `O(n)` additional\n\n\n? Incomparable values\n  Incomparable values are either values with different comparators or with\n  the same comparator returning `Nothing` from its `compare` method.\n  See the documentation of the `Ordering` module for more info.\n\n\n? Implementation Note\n  The sort implementation is based upon an adaptive, iterative mergesort\n  that requires far fewer than `n * log(n)` comparisons when the array\n  is partially sorted. When the array is randomly ordered, the\n  performance is equivalent to a standard mergesort.\n\n\n? Multiple comparators\n  Elements with different comparators are incomparable by definition.\n  This case is handled by first grouping the `self` array into groups\n  with the same comparator, recursively sorting these groups, and then\n  merging them back together. The order of the sorted groups in the\n  resulting array is based on the order of fully qualified names of\n  the comparators in the `self` array, with the exception of the group\n  for the default comparator, which is always the first group.\n\n  Additionally, an `Incomparable_Values` dataflow error will be returned\n  if the `on_problems` parameter is set to `Report_Error`, or a warning\n  attached if the `on_problems` parameter is set to `Report_Warning` in\n  case of encountering incomparable values.\n\n  It takes equal advantage of ascending and descending runs in the array,\n  making it much simpler to merge two or more sorted arrays: simply\n  concatenate them and sort."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Selections","icon": "parse3","description": "Creates a new `Vector` with only the specified range of elements from the\ninput, removing any elements outside the range.","arguments": "- range: The section of the this array to return.\n  If an `Index_Sub_Range`, then the selection is interpreted following\n  the rules of that type.\n  If a `Range`, the selection is specified by two indices, from and to."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Selections","icon": "parse3","description": "Creates a new `Vector`, removing any elements from the specified range.","arguments": "- range: The section of the this array to return.\n  If an `Index_Sub_Range`, then the selection is interpreted following\n  the rules of that type.\n  If a `Range`, the selection is specified by two indices, from and to."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "insert", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"at": {"lazy": false, "default": "self.length"}, "item": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Calculations","icon": "row_add","description": "Inserts the given item into the array at the given index.","arguments": "- at: The index at which to insert the item before.\n  If the index is less than 0, the index will be counted back from the\n  end. If the index is equal to the length of the array, the item will\n  be appended to the end of the array.\n- item: The item to insert into the array.","examples": "> Example\n  Insert 'X' into an array at different locations:\n\n     ['a', 'b', 'c'].to_array.insert 1 'X' == ['a', 'X', 'b', 'c'].to_array\n     ['a', 'b', 'c'].to_array.insert -1 'X' == ['a', 'b', 'X', 'c'].to_array\n     ['a', 'b', 'c'].to_array.insert item='X' == ['a', 'b', 'c', 'X'].to_array"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "remove", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"at": {"lazy": false, "default": "-1"}},"aliases": [],"group": "Selections","icon": "table_clean","description": "Removes the item at the given index from the array.","arguments": "- at: The index at which to remove the item.\n  If the index is less than 0, the index will be counted back from the\n  end."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the first element from the array, or an `Index_Out_Of_Bounds` if the array\nis empty.","examples": "> Example\n  The following code returns 1.\n\n      [1, 2, 3, 4].to_array.first"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the second element from the array, or a `Index_Out_Of_Bounds` if the\narray doesn't have a second element.\n\nUseful when tuples are implemented as arrays.","examples": "> Example\n  The following code returns 2.\n\n      [1, 2, 3, 4].to_array.second"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get the last element of the array, or an `Index_Out_Of_Bounds` if the array is\nempty.","examples": "> Example\n  The following code returns 4.\n\n      [1, 2, 3, 4].to_array.last"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of an element in the array.\nReturns Nothing if the element is not found.","arguments": "- condition: Either the element to search for, a `Filter_Condition` or a\n  predicate function to test each element.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the array.","examples": "> Example\n  Find the index of an element in an array.\n\n      [1, 2, 3].to_array.index_of 2 == 1\n\n\n> Example\n  Find the index of the first palindrome.\n\n      [\"ab\", \"abab\", \"aba\", \"bbb\"].to_array.index_of (s-> s == s.reverse) == 2"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of an element in the array.\nReturns `Nothing` if the element is not found.","arguments": "- condition: Either the element to search for, a `Filter_Condition` or a\n  predicate function to test each element.\n- start: The index to start searching backwards from. If the index is\n  negative, it is counted from the end of the array.","examples": "> Example\n  Find the last index of an element in an array.\n\n      [1, 2, 3, 1, 2, 3].to_array.last_index_of 2 == 4\n\n\n> Example\n  Find the index of the last palindrome.\n\n      [\"ab\", \"abab\", \"aba\", \"bbb\"].to_array.last_index_of (s-> s == s.reverse) == 3"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this array is empty.","examples": "> Example\n  Checking for emptiness.\n\n      [].to_array.is_empty"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "to_list", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Converts the array to a list with the same elements."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "distinct", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on": {"lazy": false, "default": "x-\u003ex"}},"aliases": ["deduplicate", "unique"],"group": "Selections","icon": "preparation","description": "Keeps only unique elements within the array, removing any duplicates.\n\n\n\nThe returned unique elements are kept in the same order as they appeared\nin the input.\n\nOut of multiple equivalent (equal up to the `on` projection) elements,\nalways the one appearing first in the input is kept.","arguments": "- on: A projection from the element type to the value of that element\n      which determines the uniqueness criteria.","examples": "> Example\n  Removing repeating entries.\n\n      [1, 3, 1, 2, 2, 1].to_array . distinct == [1, 3, 2].to_array\n\n\n> Example\n  Keeping only pairs whose first elements are unique.\n\n      [Pair 1 \"a\", Pair 2 \"b\", Pair 1 \"c\"].to_array . distinct (on = _.first) == [Pair 1 \"a\", Pair 2 \"b\"].to_array"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "duplicates", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on": {"lazy": false, "default": "x-\u003ex"}},"aliases": ["duplicates"],"group": "Selections","icon": "preparation","description": "Returns only non-unique elements within the array.\n\n\n\nThe returned duplicate elements are kept in the same order as the\nfirst duplicate appeared in the input.","arguments": "- on: A projection from the element type to the value of that element\n      which determines the uniqueness criteria.","examples": "> Example\n  Removing unique entries.\n\n      [1, 3, 1, 2, 2, 1].to_array . duplicates == [1, 1, 2, 2, 1].to_array"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "column_add","description": "Applies a function to each element of the array, returning the `Vector` of\nresults.","arguments": "- function: A function that takes an element in the array and returns\n  some transformation of that element.\n- on_problems: Specifies how to handle any problems that arise in\n  `function`.","examples": "> Example\n  Add 1 to each element of the array.\n\n      [1, 2, 3].to_array . map +1","errors": ""},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "flat_map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "union","description": "Applies a function to each element of the array, returning the `Vector`\nthat contains all results concatenated.","arguments": "- function: A function that takes an element in the array, transforms\n  it, and returns a `Vector`.\n- on_problems: Specifies how to handle any problems that arise in\n  `function`.","examples": "> Example\n  Replace each number `n` in the array with itself repeated n times.\n\n     [0, 1, 2].to_array . flat_map (n -> Vector.fill n n)","errors": ""},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Selects all elements of this array which satisfy a condition.","arguments": "- filter: The filter to apply to the array. It can either be an instance\n  of `Filter_Condition` or a predicate taking a value and returning a\n  boolean value indicating whether the corresponding element should be\n  kept or not.","examples": "> Example\n  Selecting all elements that are greater than 3.\n\n      [1, 2, 3, 4, 5].to_array.filter (> 3)\n      [1, 2, 3, 4, 5].to_array.filter (..Greater than=3)"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "flatten", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Calculations","icon": "union","description": "Transforms an array of arrays into a `Vector` of inner elements - removes\none layer of nesting from a stack of nested arrays.","examples": "> Example\n  Flatten an array of arrays of numbers.\n\n     [[1, 2, 3].to_array, [4, 10].to_array, [].to_array, [0].to_array, [0].to_array].to_array . flatten == [1, 2, 3, 4, 10, 0, 0].to_array"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "short_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"max_entries": {"lazy": false, "default": "10"}},"aliases": []},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "running_fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the array, by iteratively applying the\npassed function with the next element of the array. After each step the\nvalue is stored resulting in a new array of the same size as self.","arguments": "- init: The initial value for the fold.\n- function: A function taking two elements and combining them.","examples": "> Example\n  Compute the running sum of all of the elements in an array\n\n     [1, 2, 3].to_array.running_fold 0 (+)"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the array, by iteratively applying the\npassed function with next elements of the array.\n\n\n\nIn general, the result of\n    [l0, l1, ..., ln].to_array . fold init f\nis the same as\n    f (...(f (f init l0) l1)...) ln","arguments": "- init: The initial value for the fold.\n- function: A function taking two elements and combining them.","examples": "> Example\n  Compute the sum of all of the elements in an array.\n\n      [0, 1, 2].to_array . fold 0 (+)"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "fold_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the array, by iteratively applying the\npassed function with next elements of the array.","arguments": "- init: The initial value for the fold.\n- function: A function taking the current value, an index and an item\n  and combining them.","examples": "> Example\n  Compute the sum of all of the elements and indexes in an array.\n\n      [0, 1, 2].to_array . fold_with_index 0 (s->i->e->s+i+e)"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "pad", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "elem": {"lazy": false}},"aliases": [],"group": "Calculations","icon": "union","description": "Extend `self` array to the length of `n` appending elements `elem` to\nthe end.\n\n\n\nIf the new length `n` is less than existing length, `self` array is\nreturned.","arguments": "- n: The length to pad `self` out to.\n- elem: The element to fill the new padded slots with.","examples": "> Example\n  Extending array to the length of 5\n\n      [1, 2, 3].to_array.pad 5 0 == [1, 2, 3, 0, 0].to_array\n\n\n> Example\n  Extending array to the length of 5\n\n      [1, 2, 3, 4, 5].to_array.pad 5 0 == [1, 2, 3, 4, 5].to_array"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "partition", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "split","description": "Partitions the array into `Vector`s of elements which satisfy a given\ncondition and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of elements\nwhich did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input array.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Splitting an array into elements that start with a prefix.\n\n      [\"a\", \"b\", \"ax\", \"bx\"].to_array.partition (..Starts_With \"a\") == (Pair [\"a\", \"ax\"].to_array [\"b\", \"bx\"].to_array)\n\n\n> Example\n  Splitting an array into even and odd elements.\n\n      [1, 2, 3, 4, 5].to_array.partition (x -> x % 2 == 0) == (Pair [2, 4].to_array [1, 3, 5].to_array)"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "partition_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"icon": "preparation","description": "Partitions the array into `Vector`s of elements which satisfy a given\npredicate and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of elements\nwhich did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input array.","arguments": "- predicate: A function that takes an index and an element and returns a\n  boolean value.","examples": "> Example\n  Splitting an array into elements at even and odd positions.\n\n      [\"a\", \"b\", \"c\", \"d\"].to_array.partition_with_index (ix -> _ -> ix % 2 == 0) == (Pair [\"a\", \"c\"].to_array [\"b\", \"d\"].to_array)"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "transpose", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "map_row","description": "Swaps the rows and columns of a matrix represented by an array of arrays.","examples": "> Example\n  Transpose an array of arrays.\n\n      matrix = [[0, 1, 2].to_array, [3, 4, 5].to_array, [6, 7, 8].to_array].to_array\n      # +---+---+---+\n      # | 0 | 1 | 2 |\n      # +---+---+---+\n      # | 3 | 4 | 5 |\n      # +---+---+---+\n      # | 6 | 7 | 8 |\n      # +---+---+---+\n\n      transposed = [[0, 3, 6].to_array, [1, 4, 7].to_array, [2, 5, 8].to_array].to_array\n      # +---+---+---+\n      # | 0 | 3 | 6 |\n      # +---+---+---+\n      # | 1 | 4 | 7 |\n      # +---+---+---+\n      # | 2 | 5 | 8 |\n      # +---+---+---+\n\n      matrix.transposed == transposed\n      # => True","errors": ""},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "map_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "column_add","description": "Applies a function to each element of the array, returning the `Vector`\nof results.\n\n\n\nThe function is called with both the element index as well as the\nelement itself.","arguments": "- function: A function that takes an index and an item and calculates a\n  new value for at that index.\n- on_problems: Specifies how to handle any problems that arise in\n  `function`.","examples": "> Example\n  Sum numbers with their indices in an array.\n\n      [1, 2, 3].to_array.map_with_index (+)","errors": ""},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "slice", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": [],"description": "Creates a new array with the skipping elements until `start` and then\ncontinuing until `end` index.","arguments": "- start: The index of the first element to include.\n- end: The index to stop slicing at.","examples": "> Example\n  Remove the first 2 elements then continue until index 5 from the array.\n\n      [1, 2, 3, 4, 5, 6, 7, 8].to_array.slice 2 5 == [3, 4, 5].to_array"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Returns the first element of the array that satisfies the condition or\n`if_missing` if no elements of the array satisfy it.","arguments": "- condition: A `Filter_Condition` or a function that takes an element and\n  returns a boolean value specifying if it satisfies the condition.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the array.\n- if_missing: Value returned if no element satisfies the predicate.","examples": "> Example\n  Finding a first element of the array that is larger than 3.\n\n      [1, 2, 3, 4, 5].to_array.find (> 3)"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the array at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.","arguments": "- index: The location in the array to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back\n  of the array, i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this array is not empty.","examples": "> Example\n  Checking for non-emptiness.\n\n      [1].to_array.not_empty"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "filter_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"group": "Selections","icon": "preparation","description": "Selects all elements of this array which satisfy a predicate.","arguments": "- predicate: A function that takes an index and a list element and\n  returns a boolean value that says whether that value should be included\n  in the result.","examples": "> Example\n  Selecting all elements which are equal to their position in the array.\n\n      [0, 10, 2, 2].to_array.filter (==) == [0, 2].to_array"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"separator": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- separator (optional): The text to use to join the textual elements of the array."}, "prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- prefix (optional): The prefix to add at the beginning."}, "suffix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- suffix (optional): The suffix to add at the end."}},"aliases": [],"group": "Calculations","icon": "join","description": "When `self` is an array of text values, concatenates all the values by\ninterspersing them with `separator`.","arguments": "- separator (optional): The text to use to join the textual elements of the array.\n- prefix (optional): The prefix to add at the beginning.\n- suffix (optional): The suffix to add at the end.","examples": "> Example\n  Join the elements of the array together as a string.\n\n      [\"foo\", \"bar\", \"baz\"].to_array.join \", \""},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generates a human-readable text representation of the array."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "if_empty": {"lazy": true, "default": "Error.throw (Empty_Error.Error Array)"}},"aliases": [],"icon": "column_add","description": "Combines all the elements of a non-empty array using a binary operation.\nIf the array is empty, it returns `if_empty`.","arguments": "- function: A binary operation that takes two items and combines them.\n- if_empty: Value returned if the array is empty.","examples": "> Example\n  Compute the sum of all the elements in an array.\n\n      [0, 1, 2].to_array . reduce (+)"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a predicate holds for at least one element of self array.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Checking if any element of the array is larger than 3.\n\n      [1, 2, 3, 4, 5].to_array.any (..Greater than=3)\n\n\n> Example\n  Checking if any element of the array is even.\n\n      [1, 2, 3, 4, 5].to_array.any (x-> x%2 == 0)"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition holds for all elements in this array.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Check if all elements in the array are less than zero.\n\n      [-1, 1, 5, 8].to_array.all (..Less than=0)\n\n\n> Example\n  Check if all elements in the array are even.\n\n      [-1, 1, 5, 8].to_array.all (x-> x%2 == 0)"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"elem": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether this array contains a given value as an element.","arguments": "- elem: The item to see if it exists in the array.","examples": "> Example\n  Checking if the array contains the number 72.\n\n      [1, 383, 72, 301].to_array.contains 72"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}, "function": {"lazy": false, "default": "[_,_]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": ["combine", "join by row position", "merge"],"group": "Calculations","icon": "join2-1","description": "Performs a pair-wise operation passed in `function` on consecutive\nelements of `self` and `that`.\n\n\n\nThe result of this function is a `Vector` of length being the shorter of\n`self` and `that`, containing results of calling `function`.","arguments": "- that: The array to zip with `self`.\n- function: The function used to combine pairwise elements of `self` and\n  `that`.\n- on_problems: Specifies how to handle any problems that arise in\n  `function`.","examples": "> Example\n  Calculate the pairwise sum of two arrays.\n\n      [1, 2, 3].to_array.zip [4, 5, 6].to_array (+)\n\n\n> Example\n  When the `function` is not provided, it defaults to creating a pair\n  of both elements.\n\n      [1, 2, 3].to_array.zip [4, 5, 6].to_array == [[1, 4].to_array, [2, 5].to_array, [3, 6].to_array].to_array","errors": ""},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Returns the array as a `Vector`."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the array, returning a `Vector` with the same elements, but in\nthe opposite order.","examples": "> Example\n  Reverse a two-element array.\n\n      [1, 2].to_array.reverse"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the array.\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.\n\nIf the function returns a dataflow error, the error is converted to a\npanic and thrown immediately stopping further processing.","arguments": "- function: A function to apply to each element of the array.","examples": "> Example\n  Print each element in the array to standard output.\n\n      [1, 2, 3, 4, 5].to_array . each IO.println"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "each_with_index", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the array.\n\n\n\nThe function is called with both the element index as well as the\nelement itself.\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.","arguments": "- function: A function to apply that takes an index and an item.","examples": "> Example\n  Print each element in the array to standard output.\n\n      [1, 2, 3, 4, 5].to_array . each_with_index (ix->elem-> IO.println Pair ix elem)"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["append", "concatenate", "union"],"group": "Operators","icon": "union","description": "Concatenates two arrays, resulting in a new `Vector`, containing all the\nelements of `self`, followed by all the elements of `that`.","arguments": "- that: The array to concatenate to the end of `self`.","examples": "> Example\n  Concatenate two single-element arrays.\n\n      [1].to_array + [2].to_array"},
{"module": "Standard.Base.Data.Array_Proxy", "type": "Array_Proxy", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Array_Proxy", "arguments": {"ignore": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Array_Proxy", "type": "Array_Proxy", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"length": {"lazy": false}, "at": {"lazy": false}},"aliases": [],"description": "Creates a new `Array_Proxy` from a length and a callback.","arguments": "- length: The length of the array to create.\n- at: A function which returns each element of the array.","examples": "> Example\n  Create a Vector of 10 million elements without allocating any storage.\n\n      Vector.from_polyglot_array (Array_Proxy.new 10000000 (i -> i))"},
{"module": "Standard.Base.Data.Array_Proxy", "type": "Array_Proxy", "name": "from_proxy_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"proxy": {"lazy": false}},"aliases": [],"description": "Creates a new `Array_Proxy` from an object providing `length` and `at`\nmethods."},
{"module": "Standard.Base.Data.Base_64", "type": "Base_64", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Base_64", "arguments": {},"aliases": [],"description": "A helper utility for handling base64 encoding."},
{"module": "Standard.Base.Data.Base_64", "type": "Base_64", "name": "encode_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}},"aliases": [],"icon": "convert","description": "Converts a string to bytes using the specified encoding, and encodes that\nto base64."},
{"module": "Standard.Base.Data.Base_64", "type": "Base_64", "name": "decode_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text ! Encoding_Error", "arguments": {"encoded_text": {"lazy": false, "type": "Text", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}},"aliases": [],"icon": "convert","description": "Decodes a base64 encoded string, using the provided encoding."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "True", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "The boolean value representing true."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "False", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "The boolean value representing false."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "&&", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": true}},"aliases": ["and"],"group": "Logical","icon": "operators","description": "Computes the logical and (conjunction) of two booleans.","arguments": "- that: The boolean to compute the conjunction of this with.","examples": "> Example\n  Computing the conjunction of False and True (to get False).\n\n      False && True","remarks": "! Short Circuiting\n  This method is implemented in a short-circuiting manner. This means\n  that if this is False, it will no longer evaluate that."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "||", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": true}},"aliases": ["or"],"group": "Logical","icon": "operators","description": "Computes the logical or (disjunction) of two booleans.","arguments": "- that: The boolean to compute the disjunction of this with.","examples": "> Example\n  Computing the disjunction of True and False (to get True).\n\n      True || False","remarks": "! Short Circuiting\n  This method is implemented in a short-circuiting manner. This means\n  that if this is True, it will no longer evaluate that."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "not", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "operators","description": "Computes the logical negation of this.","examples": "> Example\n  Negating True to get False.\n\n      True.not"},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "if_then_else", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on_true": {"lazy": true}, "on_false": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "The if-then-else control flow operator that executes one of two branches\nbased on a conditional.\n\n\n\nBoth of the arguments to this method are _lazy_, meaning that they will\nonly be evaluated if they are needed (based on the condition).","arguments": "- on_true: The computation to evaluate if this evaluates to True.\n- on_false: The computation to evaluate if this evaluates to False.","examples": "> Example\n  Telling the user if a number 27 is divisible by three.\n\n      if (27 % 3) == 0 then IO.println \"Yes\" else IO.println \"No\""},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "if_then", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on_true": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "The if-then control flow operator that executes a branch if the condition\nis true, and otherwise returns Nothing.\n\n\n\nThe argument to this method is _lazy_, meaning that it will only be\nevaluated if the this evaluates to True.","arguments": "- on_true: The computation to evaluate if this evaluates to True.","examples": "> Example\n  Printing a message to the user only if a number is divisible by three.\n\n      if (27 % 3) == 0 then IO.println \"Fizz\""},
{"module": "Standard.Base.Data.Color", "type": "Color", "name": "HCL", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Color", "arguments": {"hue": {"lazy": false, "type": "Integer", "checked": true}, "chroma": {"lazy": false, "type": "Integer", "checked": true}, "lightness": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "A color represented in the HCL color space."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decimal", "arguments": {"big_decimal": {"lazy": false, "type": "BigDecimal", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "From_Float", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decimal", "arguments": {"big_decimal": {"lazy": false, "type": "BigDecimal", "checked": true}, "original_value": {"lazy": false, "type": "Float", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error | Number_Parse_Error", "arguments": {"x": {"lazy": false, "type": "Text | Integer | Float", "checked": true}, "mc": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"icon": "input_number","description": "Construct a `Decimal` from a `Text`, `Integer` or `Float`.","arguments": "- x: The `Text`, `Integer`, or `Float` to construct a `Decimal` from.\n- mc: The `Math_Context` to use to specify precision and `Rounding_Mode`.\n  If a `Math_Context` is used, there is a possibility of a loss of\n  precision.","errors": "","remarks": "? Number Format\n\n  The textual format for a Decimal is defined at\n  https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#BigDecimal-java.lang.String-.\n\n\n? Creating `Decimal`s and Converting to `Decimal`\n\n  When creating a `Decimal` from a literal floating-point value, the\n  preferred method is to express the literal as a string and use\n  `Decimal.from_text`, since this will give a `Decimal` that matches the\n  value precisely.\n\n  To convert a `Float` or `Integer` to a `Decimal`, use its `.to_decimal`\n  method.\n\n  You can also use the convenience method `dec` to convert any `Integer`,\n  `Float`, or `Text` value to a `Decimal`. `dec` does not attach a\n  warning."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Number_Parse_Error", "arguments": {"s": {"lazy": false, "type": "Text", "checked": true}, "mc": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Construct a `Decimal` from a `Text`.","arguments": "- s: The `Text` to construct a `Decimal` from.\n- mc: The `Math_Context` to use to specify precision and `Rounding_Mode`.\n  If a `Math_Context` is used, there is a possibility of a loss of\n  precision.","errors": "","remarks": "? Number Format\n\n  The textual format for a Decimal is defined at\n  https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#BigDecimal-java.lang.String-.\n\n\n? Creating `Decimal`s and Converting to `Decimal`\n\n  When creating a `Decimal` from a literal floating-point value, the\n  preferred method is to express the literal as a string and use\n  `Decimal.from_text`, since this will give a `Decimal` that matches the\n  value precisely.\n\n  To convert a `Float` or `Integer` to a `Decimal`, use its `.to_decimal`\n  method.\n\n  You can also use the convenience method `dec` to convert any `Integer`,\n  `Float`, or `Text` value to a `Decimal`. `dec` does not attach a\n  warning."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from_integer", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"i": {"lazy": false, "type": "Integer", "checked": true}, "mc": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "conversions","icon": "convert","description": "Construct a `Decimal` from an `Integer`.","arguments": "- i: The `Integer` to construct a `Decimal` from.\n- mc: The `Math_Context` to use to specify precision and `Rounding_Mode`.\n  If a `Math_Context` is used, there is a possibility of a loss of\n  precision.","errors": "","remarks": "? Creating `Decimal`s and Converting to `Decimal`\n\n  When creating a `Decimal` from a literal floating-point value, the\n  preferred method is to express the literal as a string and use\n  `Decimal.from_text`, since this will give a `Decimal` that matches the\n  value precisely.\n\n  To convert a `Float` or `Integer` to a `Decimal`, use its `.to_decimal`\n  method.\n\n  You can also use the convenience method `dec` to convert any `Integer`,\n  `Float`, or `Text` value to a `Decimal`. `dec` does not attach a\n  warning."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from_float", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error | Illegal_Argument", "arguments": {"f": {"lazy": false, "type": "Float", "checked": true}, "mc": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}, "explicit": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"group": "conversions","icon": "convert","description": "Construct a `Decimal` from a `Float`.","arguments": "- f: The `Float` to construct a `Decimal` from.\n- mc: The `Math_Context` to use to specify precision and `Rounding_Mode`.\n  If a `Math_Context` is used, there is a possibility of a loss of\n  precision.","errors": "","remarks": "? Precision Loss\n\n  A `Decimal` can represent any `Float` precisely. However, some `Float`\n  literals, such as `0.1`, cannot be represented exactly to infinite\n  precision by a `Float`. For this reason, constructing a `Decimal` from\n  a `Float` always attaches a `Loss_Of_Numeric_Precision` warning to the\n  result.\n\n\n? Creating `Decimal`s and Converting to `Decimal`\n\n  When creating a `Decimal` from a literal floating-point value, the\n  preferred method is to express the literal as a string and use\n  `Decimal.from_text`, since this will give a `Decimal` that matches the\n  value precisely.\n\n  To convert a `Float` or `Integer` to a `Decimal`, use its `.to_decimal`\n  method.\n\n  You can also use the convenience method `dec` to convert any `Integer`,\n  `Float`, or `Text` value to a `Decimal`. `dec` does not attach a\n  warning."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Number_Parse_Error | Illegal_Argument", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}, "format": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": ["from text"],"group": "conversions","icon": "convert","description": "Parses a string into a `Decimal`, returning a `Number_Parse_Error` if the\ntext does not represent a valid `Decimal`.","arguments": "- text: The text to parse into a `Decimal`.\n- locale: The locale that specifies the format to use when parsing.\n- format: The Java-style format to use to parse the string.","examples": "> Example\n  Parse a `Decimal` with no local specifier.\n\n      Decimal.parse \"123456789.87654\"\n      # => 123456789.87654\n\n\n> Example\n  Parse a `Decimal` with the default locale.\n\n      Decimal.parse \"123,456,789.87654\" locale=Locale.default\n      # => 123456789.87654\n\n\n> Example\n  Parse a `Decimal` with the US locale.\n\n      Decimal.parse \"123,456,789.87654\" locale=Locale.us\n      # => 123456789.87654\n\n\n> Example\n  Parse a `Decimal` with the Italy locale.\n\n      Decimal.parse \"123.456.789,87654\" locale=Locale.italy\n      # => 123456789.87654\n\n\n> Example\n  Parse a `Decimal` with an explicit negative number format.\n\n      Decimal.parse \"(123,456,789.654)\" format=\"###,###.##;(###,###.##)\"\n      # => -123456789.654","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["greater than"],"group": "Operators","icon": "operators","description": "Checks if this is greater than that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10 is greater than 7.\n\n      Decimal.new 10 > 7\n      # => True"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["greater than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is greater than or equal to that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10 is greater than or equal to 7.\n\n      Decimal.new 10 >= 7\n      # => True"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["less than"],"group": "Operators","icon": "operators","description": "Checks if this is less than that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10 is less than 7.\n\n      Decimal.new 10 < 7\n      # => False"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["less than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is less than or equal to that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10 is less than or equal to 7.\n\n      Decimal.new 10 <= 7\n      # => False"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}, "math_context": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["plus"],"group": "Operators","icon": "math","description": "Adds a `Decimal` to another `Decimal` or other kind of number. A\n`Math_Context` value can be specified to set the precision and\n`Rounding_Mode`.\n\n\n\nArguments to `add` will undergo automatic conversions such that you\nneed not convert other numeric types to `Decimal` manually.","arguments": "- that: The number to add to this.\n- math_context: Used to optionally specify precision and `Rounding_Mode`.","examples": "> Example\n  Adding 10.22 and 20.33.\n\n      a = Decimal.new \"10.22\"\n      b = Decimal.new \"20.33\"\n      c = a.add b\n      # => Decimal.new 30.55\n\n\n> Example\n  Adding 10.22 and 20.33, rounding to 3 digits of precision (1 decimal\n  place).\n\n      a = Decimal.new \"10.22\"\n      b = Decimal.new \"20.33\"\n      a.add b (Math_Context.new 3)\n      # => Decimal.new 30.5\nTODO: restore checked return type (here and elsewhere) after https://github.com/enso-org/enso/issues/10736"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["plus"],"group": "Operators","icon": "math","description": "Adds a `Decimal` to another `Decimal` or other kind of number.\n\n\n\nArguments to `+` will undergo automatic conversions such that you\nneed not convert other numeric types to `Decimal` manually.","arguments": "- that: The number to add to this.","examples": "> Example\n  Adding 10.22 and 20.33.\n\n      a = Decimal.new \"10.22\"\n      b = Decimal.new \"20.33\"\n      c = a + b\n      # => Decimal.new 30.55"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "subtract", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}, "math_context": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["minus"],"group": "Operators","icon": "math","description": "Subtract a `Decimal` or other kind of number from another `Decimal`, or\nsubtract  a `Decimal` from another kind of number. A `Math_Context` value\ncan be specified to set the precision and `Rounding_Mode`.\n\n\n\nArguments to `subtract` will undergo automatic conversions such that you\nneed not convert other numeric types to `Decimal` manually.","arguments": "- that: The number to subtract from this.\n- math_context: Used to optionally specify precision and `Rounding_Mode`.","examples": "> Example\n  Subtracting 10.22 from 20.33.\n\n      a = Decimal.new \"20.33\"\n      b = Decimal.new \"10.22\"\n      c = a.subtract b\n      # => Decimal.new 10.11\n\n\n> Example\n  Subtracting 10.22 from 20.33, rounding to 3 digits of precision (1\n  decimal place).\n\n      a = Decimal.new \"20.33\"\n      b = Decimal.new \"10.22\"\n      c = a.subtract b (Math_Context.new 3)\n      # => Decimal.new 10.1"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["minus"],"group": "Operators","icon": "math","description": "Subtract a `Decimal` or other kind of number from another `Decimal`, or\nsubtract  a `Decimal` from another kind of number.\n\n\n\nArguments to `-` will undergo automatic conversions such that you\nneed not convert other numeric types to `Decimal` manually.","arguments": "- that: The number to subtract from this.","examples": "> Example\n  Subtracting 10.22 from 20.33.\n\n      a = Decimal.new \"20.33\"\n      b = Decimal.new \"10.22\"\n      c = a - b\n      # => Decimal.new 10.11"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "multiply", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}, "math_context": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["times"],"group": "Operators","icon": "math","description": "Multiplies a `Decimal` by another `Decimal` or other kind of number. A\n`Math_Context` value can be specified to set the precision and\n`Rounding_Mode`.\n\n\n\nArguments to `multiply` will undergo automatic conversions such that you\nneed not convert other numeric types to `Decimal` manually.","arguments": "- that: The number to multiply by this.\n- math_context: Used to optionally specify precision and `Rounding_Mode`.","examples": "> Example\n  Multiplying 10.22 and 20.33.\n\n      a = Decimal.new \"10.22\"\n      b = Decimal.new \"20.33\"\n      c = a.multiply b\n      # => Decimal.new 207.7726\n\n\n> Example\n  Multiplying 10.22 and 20.33, rounding to 4 digits of precision (1\n  decimal place).\n\n      a = Decimal.new \"10.22\"\n      b = Decimal.new \"20.33\"\n      c = a.multiply b (Math_Context.new 4)\n      # => Decimal.new 207.8"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["times"],"group": "Operators","icon": "math","description": "Multiplies a `Decimal` by another `Decimal` or other kind of number.\n\n\n\nArguments to `*` will undergo automatic conversions such that you\nneed not convert other numeric types to `Decimal` manually.","arguments": "- that: The number to multiply by this.","examples": "> Example\n  Multiplying 10.22 and 20.33.\n\n      a = Decimal.new \"10.22\"\n      b = Decimal.new \"20.33\"\n      c = a * b\n      # => Decimal.new 207.7726"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "divide", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}, "math_context": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Operators","icon": "math","description": "Divide a `Decimal` by another `Decimal` or other kind of number, or\ndivide another kind of number by a `Decimal`. A `Math_Context` value can\nbe specified to set the precision and `Rounding_Mode`.\n\n\n\nArguments to `divide` will undergo automatic conversions such that you\nneed not convert other numeric types to `Decimal` manually.","arguments": "- that: The number to divide by this.\n- math_context: Used to optionally specify precision and `Rounding_Mode`.","examples": "> Example\n  Dividing 1065.9378 by 23.34.\n\n      a = Decimal.new \"1065.9378\"\n      b = Decimal.new \"23.34\"\n      c = a.divide b\n      # => Decimal.new 45.67\n\n\n> Example\n  Dividing 1065.9378 by 23.34, rounding to 3 digits of precision (1\n  decimal place).\n\n     a = Decimal.new \"1065.9378\"\n      b = Decimal.new \"23.34\"\n      c = a.divide b (Math_Context.new 3)\n      # => Decimal.new 45.7","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": [],"group": "Operators","icon": "math","description": "Divides a `Decimal` by another `Decimal` or other kind of number, or\ndivides another kind of number by a `Decimal`.\n\n\n\nArguments to `/` will undergo automatic conversions such that you\nneed not convert other numeric types to `Decimal` manually.","arguments": "- that: The number to divide by this.","examples": "> Example\n  Dividing 1065.9378 by 23.34.\n\n      a = Decimal.new \"1065.9378\"\n      b = Decimal.new \"23.34\"\n      c = a / b\n      # => Decimal.new 45.67"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "remainder", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["modulo", "modulus"],"group": "Operators","icon": "math","description": "Computes the remainder when dividing this by that.\n\n\n\nArguments to `remainder` will undergo automatic conversions such that you\nneed not convert other numeric types to `Decimal` manually.","arguments": "- that: The number to divide this by.","examples": "> Example\n  Computing the remainder when dividing 10 by 3 (which is 1).\n\n      remainder = Decimal.new 10 . remainder 3\n      # => 1\n\n\n> Example\n  Computing the remainder of a negative number.\n\n      remainder = Decimal.new -5 . remainder 3\n      # => -2","remarks": "? Negative Arguments\n\n  When the first argument to `remainder` is negative, the result will\n  also be negative."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "%", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["modulo", "modulus", "remainder"],"group": "Operators","icon": "math","description": "Computes the remainder when dividing this by that.\n\n\n\nArguments to `%` will undergo automatic conversions such that you\nneed not convert other numeric types to `Decimal` manually.","arguments": "- that: The number to divide this by.","examples": "> Example\n  Computing the remainder when dividing 10 by 3 (which is 1).\n\n      remainder = Decimal.new 10 % 3\n      # => 1\n\n\n> Example\n  Computing the remainder of a negative number.\n\n      remainder = Decimal.new -5 % 3\n      # => -2","remarks": "? Negative Arguments\n\n  When the first argument to `%` is negative, the result will also be\n  negative."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "div", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": [],"group": "Math","icon": "math","description": "Computes the integer division of this by that.\n\n\n\nInteger division of Decimals rounds down to the nearest integer.\n\nArguments to `div` will undergo automatic conversions such that you\nneed not convert other numeric types to `Decimal` manually.","arguments": "- that: The number to divide this by.","examples": "> Example\n  Dividing 10 by 3 to get 3.\n\n      Decimal.new \"10\" . div (Decimal.new \"3\")\n      # => 3\n\n\n> Example\n  Dividing 10.28 by 3.01 to get 3.\n\n      Decimal.new \"10.28\" . div (Decimal.new \"3.01\")\n      # => 3","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "pow", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"exp": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["power"],"group": "Operators","icon": "math","description": "Compute the result of raising this to the positive integer power `exp`.","arguments": "- exp: The exponent. Must be an integer in the range 0 through\n  999999999 (inclusive).","examples": "> Example\n  Computing 2.25 to the fifth power.\n\n      Decimal.new \"2.25\" . pow (Decimal.new \"5\")\n      # => 57.6650390625","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"exp": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["power"],"group": "Operators","icon": "math","description": "Compute the result of raising this to the positive integer power `exp`.","arguments": "- exp: The exponent. Must be an integer in the range 0 through\n  999999999 (inclusive).","examples": "> Example\n  Computing 2.25 to the fifth power.\n\n      Decimal.new \"2.25\" ^ Decimal.new \"5\"\n      # => 57.6650390625","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "negate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {},"aliases": [],"group": "Operators","icon": "operators","description": "Compute the negation of this.","examples": "> Example\n  Negate 5.1 to get -5.1.\n\n      5.1.negate\n      # => Decimal.new -5.1"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "abs", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {},"aliases": [],"group": "Math","icon": "math","description": "Computes the absolute value of this.\n\nThe absolute value of a positive number is itself, while the absolute\nvalue of a negative number is that number multiplied by -1.","examples": "> Example\n  Compute the absolute value of a `Decimal`.\n\n      Decimal.new \"-12.345\" . abs\n      # => 12.345"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "signum", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Math","icon": "math","description": "Returns the sign of the number.","examples": "> Example\n  Compute the sign of a `Decimal`.\n\n      Decimal.new \"-12.345\" . signum\n      # => -1"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "min", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": [],"group": "Math","icon": "transform4","description": "Returns the smaller value of `self` and `that`.","arguments": "- that: The number to compare `self` against.","examples": "> Example\n  Find the minimum of 12 and 13.\n\n      Decimal.new \"12\" . min (Decimal.new \"13\")\n      # => Decimal.new \"12\""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "max", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": [],"group": "Math","icon": "transform4","description": "Returns the larger value of `self` and `that`.","arguments": "- that: The number to compare `self` against.","examples": "> Example\n  Find the maximum of 12 and 13.\n\n      Decimal.new \"12\" . max (Decimal.new \"13\")\n      # => Decimal.new \"13\""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "to_integer", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this to an `Integer`.\n\nConversion to `Integer` uses truncation: the fractional portion is\ndropped.\n\nIf the conversion resulted in a loss of precision, a\n`Loss_Of_Numeric_Precision` warning is attached.","examples": "> Example\n  Convert `Decimal` 2345.6 to an `Integer`.\n      d = Decimal.new \"2345.6\"\n      d.to_integer\n      # => 2345"},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "to_float", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this to a `Float`.","examples": "> Example\n  Convert `Decimal` 23.45 to a `Float`.\n\n      d = Decimal.new \"23.45\"\n      d.to_float\n      # => 23.45","errors": "","remarks": "? Precision Loss\n\n  While any `Float` can be precisely represented by a `Decimal`, not\n  every `Decimal` can be accurange represented by a `Float`, so this\n  conversion can lose precision. For this reason, converting a\n  `Decimal` to a `Float` always attaches a `Loss_Of_Numeric_Precision`\n  warning to the result.\n\n\n? Representable Values\n\n  If the `Decimal` is outside the representable range of `Float` (which\n  is `(-Double.MAX_VALUE, Double.MAX_VALUE)`, inclusive), `+/-Inf` is\n  returned, and an `Out_Of_Range` warning is attached."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "round", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Rounding","icon": "math","description": "Round to a specified number of decimal places.\n\nBy default, rounding uses \"symmetric round-half-up\", also known as\n\"half-up.\" If use_bankers=True, then it uses \"round-half-even\", also\nknown as \"banker's rounding\".","arguments": "- decimal_places: The number of decimal places to round to. Can be\n  negative, which results in rounding to positive integer powers of 10.\n  Must be between Java `Integer.MIN_VALUE` and `Integer.MAX_VALUE`\n  (-2147483648 and 2147483647) (inclusive).\n- use_bankers: Rounds mid-point to nearest even number.","examples": "> Example\n  Round to the nearest integer.\n\n      Decimal.new \"3.3\" . round\n      # => Decimal.new \"3\"\n\n\n> Example\n  Round to two decimal places.\n\n      Decimal.new \"3.1415\" . round 2\n      # => Decimal.new \"3.14\"\n\n\n> Example\n  Round a very large number.\n\n      Decimal.new \"1234.5678E-50\" . round 53\n      # => Decimal.new \"1234.568E-50\"\n\n\n> Example\n  Use Banker's Rounding.\n\n      Decimal.new \"2.5\" . round use_bankers=True\n      # => 2","errors": "","remarks": "? Negative decimal place counts\n  Rounding to `n` digits can be thought of as \"rounding to the nearest\n  multiple of 10^(-n)\". For negative decimal counts, this results in\n  rounding to the nearest positive integer power of 10."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "ceil", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest `Integer` equal to or above this number.","examples": "> Example\n  Compute the ceiling of 12.34.\n\n      Decimal.new \"12.34\" . ceiling\n      # => Decimal.new \"13\"\n\n\n> Example\n  Compute the ceiling of -12.34.\n\n      Decimal.new \"-12.34\" . ceiling\n      # => Decimal.new \"-12\""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "floor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest `Integer` equal to or below this number.","examples": "> Example\n  Compute the floor of 12.34.\n\n      Decimal.new \"12.34\" . floor\n      # => Decimal.new \"12\"\n\n\n> Example\n  Compute the floor of -12.34.\n\n      Decimal.new \"-12.34\" . floor\n      # => Decimal.new \"13\""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "truncate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["int"],"group": "Rounding","icon": "math","description": "Truncate a number to an `Integer` to by dropping the fractional part.\nThis is equivalent to \"round-toward-zero\".","examples": "> Example\n  Compute the truncation of 12.34\n\n      Decimal.new \"12.34\" . truncate\n      # => Decimal.new \"12\"\n\n\n> Example\n  Compute the truncation of -12.34\n\n      Decimal.new \"-12.34\" . truncate\n      # => Decimal.new \"-12\""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"format": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts a `Decimal` to a string, using the Java `DecimalFormat` formatter.\n\nFor details about the `DecimalFormat` format specifier, see\nhttps://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html.","arguments": "- format: The Java-style formatting specifier.\n- locale: Species the `Locale` to use for locale-specific number\n  formatting.","examples": "> Example\n  Convert a `Decimal` to a string using the default format and locale.\n\n      Decimal.new \"123456789.87654\" . format\n      # => \"123,456,789.87654\"\n\n\n> Example\n  Convert a `Decimal` to a string using a specific locale.\n\n      Decimal.new \"123456789.87654\" . format locale=Locale.italy\n      # => \"123.456.789,87654\"\n\n\n> Example\n  Convert a `Decimal` to a string using a specific format string.\n\n      Decimal.new \"123456789.87654\" . format format=\"#,###.##\"\n      # => 123,456,789.88\""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "precision", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "scale", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "set_scale", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Decimal", "arguments": {"new_scale": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Math","icon": "input_number","description": "Change the scale of a Decimal.\n\nA `Decimal` value is represented internally by a Java `BigInteger` \"unscaled\nvalue\" and a \"scale value\". The numerical value of the `Decimal` is\n`(unscaledValue * 10^(-scale))`. Scale values are maintained automatically by\nthe constructors and numerical operations, but can also be set explicitly.\n\nScale values can allow distinctions between values that would be identical as\n`Float`s. For example, the following values have different internal\nrepresentations:\n\n    a = Decimal.new \"2.0\"\n    b = Decimal.new \"2.00\"\n    a == b\n    # => True\n\nThese two values have different internal representations, but they are still\nconsidered the same value by `==`.","examples": "> Example\n  Set the scale of a `Decimal`\n\n      d = dec \"23.456\" set_scale 4\n      d.internal_representation\n      # => [234560, 6, 4]\n\n\n> Example\n  Get an error when using a scale that is too small.\n  (A scale of 2 is not enough to represent three decimal places.)\n\n      dec \"23.456\" set_scale 2\n      # => Arithmetic_Error","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "unscaled_value", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "internal_representation", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Integer", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Note: the underlying Java `BigDecimal` implementation is not affected by\nlocale."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Note: the underlying Java `BigDecimal` implementation is not affected by\nlocale."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "to_text_without_scientific_notation", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Note: the underlying Java `BigDecimal` implementation is not affected by\nlocale."},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "dec", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error | Number_Parse_Error", "arguments": {"x": {"lazy": false, "type": "Text | Integer | Float", "checked": true}, "mc": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Math","icon": "input_number","description": "Construct a `Decimal` from a `Text`, `Integer` or `Float`.","arguments": "- x: The `Text`, `Integer`, or `Float` to construct a `Decimal` from.\n- mc: The `Math_Context` to use to specify precision and `Rounding_Mode`.\n    If a `Math_Context` is used, there is a possibility of a loss of\n    precision.","errors": "","remarks": "? Number Format\n\n    The textual format for a Decimal is defined at\n    https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#BigDecimal-java.lang.String-."},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "handle_number_format_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "handle_precision_loss", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"original_value": {"lazy": false}, "conversion_result": {"lazy": false, "type": "ConversionResult", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "attach_loss_of_numeric_precision", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"orig": {"lazy": false}, "value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}, "extra_message": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "handle_unsupported_argument_types", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Float", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Float", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "get_big_decimal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": [],"description": "Helper method allowing access to the backing field."},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "from_big_decimal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Create a Decimal from the Java backing field."},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "error_if_from_float", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left": {"lazy": false}, "right": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Dictionary", "arguments": {},"aliases": [],"description": "A key-value store. It is possible to use any type as keys and values and mix\nthem in one Dictionary. Keys are checked for equality based on their hash\ncode and `==` operator, which is both an internal part of Enso. Enso is\ncapable of computing a hash code, and checking for equality any objects that\ncan appear in Enso - primitives, Atoms, values coming from different\nlanguages, etc.\n\nFor keys that are not reflexive, like `Number.nan`,\n[Same Value equality specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality)\nis used. This means that both `Number.nan` and types with comparators that\nviolate reflexivity (e.g. their `compare` method always returns `Nothing`)\ncan be used as keys in the Dictionary.\n\nA single key-value pair is called an *entry*.\n\nIt is possible to pass a Dictionary created in Enso to foreign functions,\nwhere it will be treated as appropriate map structures - in Python that is a\ndictionary, and in JavaScript, it is a `Map`. And likewise, it is possible\nto pass a foreign map into Enso, where it will be treated as a Dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "empty", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "array_new2","description": "Returns an empty dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "singleton", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"icon": "array_new2","description": "Returns a single-element dictionary with the given key and value.\nA Call to `Dictionary.singleton key value` is the same as a call to\n`Dictionary.empty.insert key value`.","arguments": "- key: The key to to use for `value` in the dictionary.\n- value: The value to store under 'key' in the dictionary.","examples": "> Example\n  Create a single element dictionary storing the key \"my_key\" and the\n  value 2.\n\n      example_singleton = Dictionary.singleton \"my_key\" 2"},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "from_keys_and_values", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"keys": {"lazy": false, "type": "Vector", "checked": true}, "values": {"lazy": false, "type": "Vector", "checked": true}, "error_on_duplicates": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": ["dictionary", "lookup table"],"group": "Constants","icon": "array_new2","description": "Builds a dictionary from two Vectors. The first vector contains the keys,\nand the second vector contains the values. The two vectors must be of the\nsame length.","arguments": "- keys: A vector of keys.\n- values: A vector of values.\n- error_on_duplicates: A flag which specifies if duplicate keys on the\n  input vector should result in an error. By default, set to `True`,\n  meaning that if two entries in the vector share the same key, an\n  `Illegal_Argument` error is raised. If set to `False`, the last entry\n  with a given key will be kept."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "from_vector", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"vec": {"lazy": false}, "error_on_duplicates": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": ["dictionary", "lookup table"],"icon": "array_new2","description": "Builds a dictionary from a vector of key-value pairs, with each key-value\npair represented as a 2 element vector.","arguments": "- vec: A vector of key-value pairs (2 element vectors).\n- error_on_duplicates: A flag which specifies if duplicate keys on the\n  input vector should result in an error. By default, set to `True`,\n  meaning that if two entries in the vector share the same key, an\n  `Illegal_Argument` error is raised. If set to `False`, the last entry\n  with a given key will be kept.","examples": "> Example\n  Building a dictionary containing two key-value pairs.\n\n      example_from_vector = Dictionary.from_vector [[\"A\", 1], [\"B\", 2]]"},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Returns True if the Dictionary is empty, i.e. does not have any entries."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Returns True if the Dictionary is not empty, i.e. has at least one entry."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "size", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of entries in this dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of entries in this dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "insert", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "default": "Missing_Argument.throw \"key\""}, "value": {"lazy": false, "default": "Missing_Argument.throw \"value\""}, "no_warning": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Calculations","icon": "row_add","description": "Inserts a key-value mapping into this dictionary, overriding any existing\ninstance of `key` with the new `value`.\n\nNote that since the return type is also a `Dictionary`, multiple `insert`\ncalls can be chained, e.g., `dictionary.insert \"A\" 1 . insert \"B\" 2`.\n\nDue to the limitation of the current implementation, inserts with a\nkey that is already contained in the dictionary, or insert on a\ndictionary instance that is re-used in other computations, have a linear\ntime complexity. For all the other cases, the time complexity of this\nmethod is constant.","arguments": "- key: The key to insert the value for.\n- value: The value to associate with the `key`.","examples": "> Example\n  Insert the value \"seven\" into the dictionary for the key 7.\n\n      import Standard.Examples\n\n      example_insert = Examples.dictionary.insert 7 \"seven\"","errors": ""},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "remove", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "default": "Missing_Argument.throw \"key\""}},"aliases": [],"group": "Selections","icon": "table_clean","description": "Removes an entry specified by the given key from this dictionary, and\nreturns a new dictionary without this entry. Throw `No_Such_Key.Error` if\n`key` is not present.","arguments": "- key: The key to look up in the dictionary.","examples": "> Example\n  Remove key \"A\" from a dictionary\n\n      import Standard.Examples\n\n      Examples.dictionary.remove \"A\""},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets the value associated with `key` in this dictionary, or throws a\n`No_Such_Key.Error` if `key` is not present.\n\nThis method has a constant time complexity.","arguments": "- key: The key to look up in the dictionary.","examples": "> Example\n  Looks up the value for the key \"A\" in a dictionary.\n\n      import Standard.Examples\n\n      example_at = Examples.dictionary.at \"A\""},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets the value associated with `key` in this dictionary, or returns\n`if_missing` if it isn't present.\n\nThis method has a constant time complexity.","arguments": "- key: The key to look up in the dictionary.\n- if_missing: The value to use if the key isn't present.","examples": "> Example\n  Get the value for the key 2 in a dictionary or instead return \"zero\" if it\n  isn't present.\n\n      import Standard.Examples\n\n      example_get = Examples.dictionary.get 2 \"zero\""},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "contains_key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Returns True iff the Dictionary contains the given `key`."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "keys", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_column","description": "Returns an unsorted vector of all the keys in this Dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "values", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_column","description": "Returns an unsorted vector of all the values in this Dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Maps a function over each value in this dictionary.","arguments": "- function: The function to apply to each value in the dictionary, taking\n  a value and returning a value.","examples": "> Example\n  Append \"_word\" to all values in the dictionary.\n\n      import Standard.Examples\n\n      example_map = Examples.dictionary.map (+ \"_word\")"},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "map_with_key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Maps a function over each key-value pair in the dictionary, transforming\nthe value.","arguments": "- function: Function to apply to each key and value in the dictionary,\n  taking a key and a value and returning a value.","examples": "> Example\n  Prepend the keys to the values in the dictionary.\n\n      import Standard.Examples\n\n      example_map_with_key =\n         Examples.dictionary.map_with_key (k -> v -> k.to_text + \"-\" + v)"},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "map_keys", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Maps a function over each key in this dictionary.","arguments": "- function: The function to apply to each key in the dictionary, taking a\n  key and returning a new key.","examples": "> Example\n  Doubling all keys in the dictionary.\n\n      import Standard.Examples\n\n      example_map_keys = Examples.dictionary.map_keys *2"},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "transform", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Transforms the map's keys and values to create a new dictionary.","arguments": "- function: The function used to transform the dictionary, taking a key\n  and a value and returning a pair of `[key, value]`.","examples": "> Example\n  Turn all keys into `Text` and append \"_word\" to the values in the\n  dictionary.\n\n      import Standard.Examples\n\n      example_transform =\n         Examples.dictionary.transform (k -> v -> [k.to_text, v + \"_word\"])","errors": ""},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines the values in the dictionary.","arguments": "- init: The initial value for the fold.\n- function: A binary function to apply to pairs of values.","examples": "> Example\n  Find the length of the longest word in the dictionary.\n\n      import Standard.Examples\n\n      example_fold = Examples.dictionary.fold 0 (l -> r -> l.max r.length)"},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "fold_with_key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines the key-value pairs in the dictionary.","arguments": "- init: The initial value for the fold.\n- function: A function taking the left value, the current key, and the\n  current value, and combining them to yield a single value.","examples": "> Example\n  Glue the values in the dictionary together with the keys.\n\n      import Standard.Examples\n\n      example_fold_with_key =\n         Examples.dictionary.fold_with_key \"\" (l -> k -> v -> l + k.to_text + v)"},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function to each value in the dictionary.\n\n\n\nThis method does not return the results, so it is only useful for performing\ncomputations with side-effects.\n\nIf the function returns a dataflow error, the error is converted to a\npanic and thrown immediately stopping further processing.","arguments": "- function: The function to apply to each value in the dictionary, taking\n  a value and returning anything.","examples": "> Example\n  Printing each value in the dictionary.\n\n      import Standard.Examples\n\n      example_each = Examples.dictionary.each IO.println"},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "each_with_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function to each key-value pair in the dictionary.\n\n\n\nThis method does not return the results, so it is only useful for performing\ncomputations with side-effects.","arguments": "- function: The function to apply to each key-value pair in the\n  dictionary, taking a key and a value and returning anything.","examples": "> Example\n  Printing each key and value in the dictionary.\n\n      import Standard.Examples\n\n      example_each_with_key = Examples.dictionary.each_with_key k->v->\n         IO.println k\n         IO.println v"},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Returns an unsorted vector of key-value pairs (nested 2 element vectors).\n`Dictionary.from_vector` method is an inverse method, so the following\nexpression is true for all dictionaries:\n`Dictionary.from_vector dictionary.to_vector == dictionary`."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a text representation of this Dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "get_builtin", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "if_missing": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Dictionary", "type": "", "name": "key_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"dict": {"lazy": false, "type": "Dictionary", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Dictionary", "type": "", "name": "key_value_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Less", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"than": {"lazy": false, "default": "Missing_Argument.throw \"than\""}},"aliases": [],"description": "Is less than a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Equal_Or_Less", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"than": {"lazy": false, "default": "Missing_Argument.throw \"than\""}},"aliases": [],"description": "Is less than or equal to a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Equal", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"to": {"lazy": false, "default": "Missing_Argument.throw \"to\""}},"aliases": [],"description": "Is equal to a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Equal_Or_Greater", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"than": {"lazy": false, "default": "Missing_Argument.throw \"than\""}},"aliases": [],"description": "Is greater than or equal to a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Greater", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"than": {"lazy": false, "default": "Missing_Argument.throw \"than\""}},"aliases": [],"description": "Is greater than a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Not_Equal", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"to": {"lazy": false, "default": "Missing_Argument.throw \"to\""}},"aliases": [],"description": "Is not equal to a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Between", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"lower": {"lazy": false, "default": "Missing_Argument.throw \"lower\""}, "upper": {"lazy": false, "default": "Missing_Argument.throw \"upper\""}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Is between (inclusive) two values (or columns, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Equal_Ignore_Case", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"to": {"lazy": false, "default": "Missing_Argument.throw \"to\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Is equal to another value, ignoring case (Text only)?","remarks": "? Table Operations\n  It accepts a Text value to check if the value equals to it. In case of\n  Table operations, it can accept another column - then the corresponding\n  values from the source column and the provided column are checked.\n\n\n! Unicode Equality\n  The definition of equality includes Unicode canonicalization. I.e. two\n  texts are equal if they are identical after canonical decomposition.\n  This ensures that different ways of expressing the same character in\n  the underlying binary representation are considered equal."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Starts_With", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"prefix": {"lazy": false, "default": "Missing_Argument.throw \"prefix\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "Case_Sensitivity.Default"}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Does the value start with a prefix (Text only)?","remarks": "? Table Operations\n  It accepts a Text value to check if the value contains it. In case of\n  Table operations, it can accept another column - then the corresponding\n  values from the source column and the provided column are checked."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Ends_With", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"suffix": {"lazy": false, "default": "Missing_Argument.throw \"suffix\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "Case_Sensitivity.Default"}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Does the value end with a suffix (Text only)?","remarks": "? Table Operations\n  It accepts a Text value to check if the value contains it. In case of\n  Table operations, it can accept another column - then the corresponding\n  values from the source column and the provided column are checked."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Contains", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"substring": {"lazy": false, "default": "Missing_Argument.throw \"substring\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "Case_Sensitivity.Default"}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Does the value contain the substring (Text only)?","remarks": "? Table Operations\n  It accepts a Text value to check if the value contains it. In case of\n  Table operations, it can accept another column - then the corresponding\n  values from the source column and the provided column are checked."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_Nothing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is equal to Nothing?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Not_Nothing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is not equal to Nothing?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_Nan", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value a NaN (Number only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Not_Nan", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value not a NaN (Number only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_Infinite", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value infinite (Number only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_Finite", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value finite (Number only)?\nFinite numbers are ones that are not infinite nor NaN."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_True", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value equal to True (Boolean only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_False", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value equal to False (Boolean only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is equal to \"\" or Nothing (Text only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Not_Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is not equal to \"\" and Nothing (Text only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Like", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"pattern": {"lazy": false, "default": "Missing_Argument.throw \"pattern\""}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Does the value match the SQL pattern (Text only)?\n\nThe pattern is interpreted according to the standard SQL convention:\n- the `%` character matches any sequence of characters,\n- the `_` character matches any single character,\n- any other character is matched literally.","remarks": "? Table Operations\n  It accepts a Text value to check if the value contains it. In case of\n  Table operations, it can accept another column - then the corresponding\n  values from the source column and the provided column are checked.\n\n\n! Known Limitations.\n  The Truffle regex engine does not transparently handle normalization.\n  Due to this limitation, Unicode normalization has been disabled for\n  this function, so beware that some equivalent graphemes like 'ś' and\n  's\\u0301' will not be matched."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Regex_Match", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"pattern": {"lazy": false, "default": "Missing_Argument.throw \"pattern\""}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Does the value match the regular expression pattern (Text only)?","remarks": "? Table Operations\n  It accepts a Text value to check if the value contains it. In case of\n  Table operations, it can accept another column - then the corresponding\n  values from the source column and the provided column are checked.\n\n\n! Known Limitations.\n  The Truffle regex engine does not transparently handle normalization.\n  Due to this limitation, Unicode normalization has been disabled for\n  this function, so beware that some equivalent graphemes like 'ś' and\n  's\\u0301' will not be matched."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_In", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"values": {"lazy": false, "default": "[]"}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Is the value contained in `values`?","remarks": "? Table Operations\n  It accepts a `Vector` of values. In case of Table operations, it can\n  also accept another column - then it acts as if `column.to_vector` was\n  passed - i.e. every element of the original table's column is checked\n  if it is contained in the provided column. The columns can have\n  different lengths.\n\n  Using Columns can be particularly useful for Database operations, as\n  uploading a temporary table and using its column for an `Is_In` check\n  will likely be faster than using the vector directly."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "resolve_auto_scoped", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false}},"aliases": [],"description": "Resolves a possibly auto-scoped value to a concrete value."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"include_comparable": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_text": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_boolean": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_nullable": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_numeric": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_date": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_date_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Creates a Single_Choice Widget for Filter_Conditions."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "action", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The action to perform on the matched items."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "to_predicate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Converts a `Filter_Condition` condition into a predicate taking an\nelement and returning a value indicating whether the element should be\naccepted by the filter.\n\nThe predicate can handle `Nothing` values in all cases. However, the\npredicate will raise an error if the value is not of the expected type."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Filter_Condition."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Action", "name": "Keep", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Action", "arguments": {},"aliases": [],"description": "Items matching the filter are kept."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Action", "name": "Remove", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Action", "arguments": {},"aliases": [],"description": "Items matching the filter are removed."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "", "name": "sql_like_to_regex", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_pattern": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Filter_Condition", "type": "", "name": "unify_condition_or_predicate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"condition_or_predicate": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Filter_Condition", "type": "", "name": "unify_condition_predicate_or_element", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Filter_Condition", "type": "", "name": "handle_nothing", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Extends the provided predicate to handle `Nothing` values without error.\nThe new predicate will return `False` for `Nothing`."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hashset", "arguments": {"underlying_dictionary": {"lazy": false, "type": "Dictionary Any Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"vector": {"lazy": false, "type": "Vector", "checked": true}, "error_on_duplicates": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Constructs a new set from a vector.","arguments": "- vector: the vector of elements to add to the set.\n- error_on_duplicates: specifies if duplicate elements in the input\n  should result in an error. Defaults to `False`, meaning that the last\n  occurrence of each duplicated element is retained in the set. If set to\n  `True` it will raise an `Illegal_Argument` if duplicate elements are\n  encountered."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Constructs an empty set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Returns a vector containing all elements of this set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "size", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of elements in this set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of elements in this set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the set is empty."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the set is not empty."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks if this set contains a given value."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "contains_relational", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks if this set contains a given value, treating Nothing as a\nrelational NULL.\n\nIf the argument is non-Nothing and exists in `value`, return true.\n\nIf the argument is non-Nothing and does not exist in `value`, return\nfalse if `value` does not contain a Nothing, or Nothing if `value` does\ncontain a Nothing.\n\nIf the argument is Nothing, return Nothing if `value` is non-empty, or\nfalse if `value` is empty."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "insert", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": ["add"],"group": "Calculations","icon": "row_add","description": "Adds a value to this set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "union", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false, "type": "Hashset", "checked": true}},"aliases": [],"group": "Calculations","icon": "union","description": "Creates a union of the two sets."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "intersection", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false, "type": "Hashset", "checked": true}},"aliases": [],"group": "Calculations","icon": "join","description": "Creates an intersection of the two sets."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "difference", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false, "type": "Hashset", "checked": true}},"aliases": [],"icon": "join","description": "Computes a set difference.\n\nReturns the set that contains all elements of this set that are not in\nthe other set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hashset_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "First", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Select the first `count` items.\n\nSelects no items if `count` is less than or equal to 0.\nSelects all items  if `count` is greater than the length of the input."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "Last", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Select the last `count` characters.\n\nSelects no items if `count` is less than or equal to 0.\nSelects all items  if `count` is greater than the length of the input."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "While", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"predicate": {"lazy": false, "type": "Any -> Boolean", "checked": true, "default": "Missing_Argument.throw \"predicate\""}},"aliases": [],"description": "Select elements from the start while the predicate returns `True`."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "By_Index", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"indexes": {"lazy": false, "type": "Integer | Range | Vector (Integer | Range)", "checked": true, "default": "Missing_Argument.throw \"indexes\""}},"aliases": [],"description": "Selects specific indexes (starting from 0) either as an `Integer` or a\n`Range`.\n\nIf the index or start of the Range is out of bounds, an error is\nreported. If the end of the Range is out of bounds, all items until the\nend of the input are selected.\n\nOnly ranges with positive step and positive indices are supported.\nIndividual integer indices can be negative which allows for indexing\nfrom the end of the collection."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "Sample", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "seed": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"description": "Gets a random sample of entries, without repetitions.\n\nIf `count` is greater than the length of the input, a random permutation\nof all elements from the input is selected."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "Every", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "first": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"description": "Gets every Nth entry.","arguments": "- step: The step between consecutive entries that are included.\n- first: The first entry to include. If it is outside of bounds of the\n  input, an error is raised."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "default_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "It includes all constructors of `Index_Sub_Range` but also `Range`, since\nthe `Index_Sub_Range` type is by default used in sum types containing\n`Range` too."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"count": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Index_Sub_Range."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "resolve_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ranges": {"lazy": false}, "length": {"lazy": false}},"aliases": [],"description": "Resolves a vector of ranges or indices into a vector of ranges that fit\nwithin a sequence."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "normalize_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"descriptors": {"lazy": false}},"aliases": [],"description": "Takes a list of descriptors and returns a new one where ranges with\nnon-unitary step have been replaced with series of ranges covering the same\nset of indices with step equal to 1, and indices have been replaced with\nsingle-element ranges."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "invert_range_selection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ranges": {"lazy": false}, "length": {"lazy": false}, "needs_sorting": {"lazy": false}},"aliases": [],"description": "Inverts the selection determined by the input list of ranges.\n\nThe input ranges are assumed to be normalized (i.e. all of them have step\nequal to 1).","arguments": "- ranges: The list of ranges determining indices which are selected. The\n  result will be a list of ranges containing all the indices which were not\n  originally selected here.\n- length: Length of the related sequence.\n- needs_sorting: Determines if `ranges` need to be sorted and merged or if it\n  can be assumed that they are sorted already."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "sort_and_merge_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ranges": {"lazy": false}},"aliases": [],"description": "Returns a new sorted list of ranges where intersecting ranges have been\nmerged.\n\nEmpty subranges are discarded."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "take_helper", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "at": {"lazy": false}, "single_slice": {"lazy": false}, "slice_ranges": {"lazy": false}, "range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true}},"aliases": [],"description": "A helper that implements taking from an arbitrary collection using a set of\ncallbacks.","arguments": "- length: The length of the collection.\n- at: An accessor returning ith element of the collection. Used only for\n  `While`.\n- single_slice: A two argument function that returns a slice of the\n  collection starting from the index `start` (inclusive) and continuing until\n  the `end` (exclusive). The slice operation should be robust to negative\n  indices - if `start` is less than 0 it should just start slicing from the\n  beginning of the collection. If `end` is less than `start`, an empty\n  collection should be returned. If `end` is greater than `length`, the\n  collection should be sliced until the end of the collection. It should\n  avoid copying and just return the original collection if the whole\n  collection is included in the slice. It should never throw out of bounds\n  errors (these are handled at a higher level), but always return some\n  collection, possibly empty.\n- slice_ranges: A function that takes a vector of ranges and indices and\n  constructs a new collection containing the provided subranges and indices\n  in the provided order. The input ranges do not need to be normalized, so if\n  the method wants to work only with normalized ranges, it must perform\n  normalization on its own.\n- range: The `Index_Sub_Range` to take from the collection."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "drop_helper", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "at": {"lazy": false}, "single_slice": {"lazy": false}, "slice_ranges": {"lazy": false}, "range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true}},"aliases": [],"description": "A helper that implements dropping from an arbitrary collection using a set of\ncallbacks.","arguments": "- length: The length of the collection.\n- at: An accessor returning ith element of the collection. Used only for\n  `While`.\n- single_slice: A two argument function that returns a slice of the\n  collection starting from the index `start` (inclusive) and continuing until\n  the `end` (exclusive). The slice operation should be robust to negative\n  indices - if `start` is less than 0 it should just start slicing from the\n  beginning of the collection. If `end` is less than `start`, an empty\n  collection should be returned. If `end` is greater than `length`, the\n  collection should be sliced until the end of the collection. It should\n  avoid copying and just return the original collection if the whole\n  collection is included in the slice. It should never throw out of bounds\n  errors (these are handled at a higher level), but always return some\n  collection, possibly empty.\n- slice_ranges: A function that takes a vector of ranges and indices and\n  constructs a new collection containing the provided subranges and indices\n  in the provided order. The function may assume that the ranges have been\n  normalized.\n- range: The `Index_Sub_Range` to drop from the collection."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "handle_unmatched_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expected_types": {"lazy": false}, "actual_value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Interval", "type": "Bound", "name": "Inclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bound", "arguments": {"n": {"lazy": false}},"aliases": [],"description": "A bound that includes the value `n`.","arguments": "- n: The value defining the inclusive bound.","examples": "> Example\n  Create a bound that includes the value 2.\n\n      import Standard.Base.Data.Interval.Bound\n\n      example_bound_inclusive = Bound.Inclusive 2"},
{"module": "Standard.Base.Data.Interval", "type": "Bound", "name": "Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bound", "arguments": {"n": {"lazy": false}},"aliases": [],"description": "A bound that excludes the value `n`.","arguments": "- n: The value defining the exclusive bound.","examples": "> Example\n  Create a bound that excludes the value 2.\n\n      import Standard.Base.Data.Interval.Bound\n\n      example_bound_exclusive = Bound.Exclusive 2."},
{"module": "Standard.Base.Data.Interval", "type": "Interval_Type", "name": "Inclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Interval_Type", "arguments": {},"aliases": [],"description": "Both the start and end bounds are included."},
{"module": "Standard.Base.Data.Interval", "type": "Interval_Type", "name": "Start_Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Interval_Type", "arguments": {},"aliases": [],"description": "The start bound is included, but the end bound is excluded."},
{"module": "Standard.Base.Data.Interval", "type": "Interval_Type", "name": "End_Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Interval_Type", "arguments": {},"aliases": [],"description": "The start bound is excluded, but the end bound is included."},
{"module": "Standard.Base.Data.Interval", "type": "Interval_Type", "name": "Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Interval_Type", "arguments": {},"aliases": [],"description": "Both the start and end bounds are excluded."},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "Between", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Interval", "arguments": {"start": {"lazy": false, "type": "Bound", "checked": true}, "end": {"lazy": false, "type": "Bound", "checked": true}},"aliases": [],"description": "A type representing an interval over real numbers.","arguments": "- start: The start of the interval.\n- end: The end of the interval."},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "interval_type": {"lazy": false, "default": "Interval_Type.End_Exclusive"}},"aliases": [],"group": "DateTime","icon": "time","description": "Creates an interval.","arguments": "- start: The start of the interval. (Included by default)\n- end: The end of the interval. (Excluded by default)\n- interval_type: The type of interval to create. (End_Exclusive by default)","examples": "> Example\n  Create the bounds-exclusive range from 0.1 to 0.5.\n\n      import Standard.Base.Data.Interval.Interval\n      import Standard.Base.Data.Interval.Interval_Type\n\n      example_exclusive = Interval.new 0.1 0.5 Interval_Type.Exclusive\n\n> Example\n  Create the start-exclusive range from 1 to 5.\n\n      import Standard.Base.Data.Interval.Interval\n      import Standard.Base.Data.Interval.Interval_Type\n\n      example_start_exclusive = Interval.new 1 5 Interval_Type.Start_Exclusive\n\n> Example\n  Create the end-exclusive range from 1 to 5.\n\n      import Standard.Base.Data.Interval.Interval\n      import Standard.Base.Data.Interval.Interval_Type\n\n      example_end_exclusive = Interval.new 1 5 Interval_Type.End_Exclusive\n\n> Example\n  Create the inclusive range from 0 to 0.\n\n      import Standard.Base.Data.Interval.Interval\n      import Standard.Base.Data.Interval.Interval_Type\n\n      example_inclusive = Interval.new 0 0 Interval_Type.Inclusive"},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks if the interval contains `that`.","arguments": "- that: The item to check if it is contained in the interval.","examples": "> Example\n  Checking if the interval 0.1 to 1 contains 0.33.\n\n      import Standard.Base.Data.Interval\n\n      example_contains = (Interval.new 0.1 1 include_end=True) . contains 0.33"},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Check if this interval is empty.","examples": "> Example\n  Check if the interval from 0 to 0 is empty.\n\n      import Standard.Base.Data.Interval\n\n      example_is_empty = Interval.new 0 0 include_start=False . is_empty"},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Check if this interval is not empty.","examples": "> Example\n  Check if the interval from 0 to 0.001 is not empty.\n\n      import Standard.Base.Data.Interval\n\n      example_not_empty = Interval.new 0 0.001 . not_empty"},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Interval."},
{"module": "Standard.Base.Data.Json", "type": "Json", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Json", "arguments": {},"aliases": [],"description": "Methods for serializing from and to JSON."},
{"module": "Standard.Base.Data.Json", "type": "Json", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"json": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["from text"],"group": "Conversions","icon": "convert","description": "Parse a Text value into a `JS_Object` or an Enso primitive value (like\n`Text`, `Number`, `Boolean`, `Nothing`), or a `Vector` of values.","examples": "> Example\n Parse the text \"[null, null, true, false]\".\n\n     Json.parse \"[null, null, true, false]\""},
{"module": "Standard.Base.Data.Json", "type": "Json", "name": "stringify", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"object": {"lazy": false}},"aliases": [],"description": "Serialize an Object to JSON."},
{"module": "Standard.Base.Data.Json", "type": "Json", "name": "from_pairs", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pairs": {"lazy": false}},"aliases": [],"description": "Convert a Vector of Keys and Values to JSON.\nKeys must be `Text` values."},
{"module": "Standard.Base.Data.Json", "type": "Invalid_JSON", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_JSON", "arguments": {"message": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "Invalid_JSON", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the error to a display representation."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"object_node": {"lazy": false}, "field_array": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object_node": {"lazy": false}},"aliases": [],"description": "Creates a new `JS_Object` from an `ObjectNode`."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "from_pairs", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pairs": {"lazy": false}},"aliases": [],"icon": "braces","description": "Creates a JS_Object from a list of key-value pairs.\nKeys must be `Text` values.\nValues will be recursively converted to JSON serializable as needed."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "contains_key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Returns True iff the objects contains the given `key`."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Get a value for a key of the object, or a default value if that key is not present.","arguments": "- key: The key to get.\n- if_missing: The value to return if the key is not found."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Selections","icon": "parse3","description": "Get a value for a key of the object.\nIf the key is not found, throws a `No_Such_Key` error.","arguments": "- key: The key to get."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "field_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the keys of the object."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Maps a function over each value in this object","arguments": "- function: The function to apply to each value in the map, taking a\n  value and returning a value."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "map_with_key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Maps a function over each field-value pair in the object.","arguments": "- function: The function to apply to each key and value in the map,\n  taking a key and a value and returning a value."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the number of keys in the object."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Returns True if the JS_Object is empty, i.e., does not have any entries."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Returns True if the JS_Object is not empty, i.e., has at least one entry."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert the object to a Vector of Pairs."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the object to a JS_Object."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a Text."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert JS_Object to a friendly string."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_json", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JSON representation."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_default_visualization_data", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Transform the vector into text for displaying as part of its default\nvisualization."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "into", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"target_type": {"lazy": false}},"aliases": [],"group": "Conversions","icon": "convert","description": "Creates an Enso object from the JS_Object."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "set_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false}},"aliases": [],"icon": "edit","description": "Modify a field of a JSON object, returning a new updated object.","arguments": "- key: the name of the field to modify.\n- value: the new value for the field.","examples": "> Example\n  Change the value for 'foo' to 'asdf'.\n\n      obj = JS_Object.from_pairs [[\"foo\", \"bar\"], [\"baz\", \"quux\"]]\n      obj.set_value \"foo\" \"asdf\"\n      # => {\"foo\":\"asdf\",\"baz\":\"quux\"}"},
{"module": "Standard.Base.Data.Json", "type": "JS_Object_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "JS_Object_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"obj1": {"lazy": false}, "obj2": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "JS_Object_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"obj": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "", "name": "read_json_node", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node": {"lazy": false}},"aliases": [],"description": "Read a JsonNode to an Enso type"},
{"module": "Standard.Base.Data.Json", "type": "", "name": "read_json_array", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node": {"lazy": false}},"aliases": [],"description": "Read a JsonNode to a Vector"},
{"module": "Standard.Base.Data.Json", "type": "", "name": "to_json_node", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Convert a value to a JsonNode"},
{"module": "Standard.Base.Data.Json", "type": "", "name": "make_field_name_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"js_object": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make a field name selector"},
{"module": "Standard.Base.Data.Json", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "", "name": "render", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}, "depth": {"lazy": false, "default": "0"}, "max_depth": {"lazy": false, "default": "5"}, "max_length": {"lazy": false, "default": "100"}},"aliases": [],"description": "Render the JS_Object to Text with truncated depth."},
{"module": "Standard.Base.Data.Json", "type": "", "name": "make_enso", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}},"aliases": [],"description": "Internal function ensuring that a Jackson object is presented appropriately to Enso."},
{"module": "Standard.Base.Data.Json", "type": "", "name": "key_value_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.List", "type": "List", "name": "Nil", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "List", "arguments": {},"aliases": [],"description": "The type that indicates the end of a cons list."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "Cons", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "List", "arguments": {"x": {"lazy": false}, "xs": {"lazy": false}},"aliases": [],"description": "A cons cell for a cons list.","arguments": "- x: The element at this position in the list.\n- xs: The rest of the list."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Computes the number of elements in the list.","examples": "> Example\n  Get the length of a two item list.\n\n      import Standard.Examples\n\n      example_length = Examples.list.length","remarks": "! Computational Complexity\n\n  Note that this is a linear operation requiring O(n) time."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the list at a specified index (0-based).","arguments": "- index: The location in the List to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back\n  of the final item, i.e. -1 will correspond to the last element.","examples": "> Example\n  Get the second item by index.\n\n      import Standard.Examples\n\n      example_length = Examples.list.length","remarks": "! Computational Complexity\n\n  Note that this is a linear operation requiring O(n) time."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the list at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.","arguments": "- index: The location in the List to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back\n  of the final item, i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds.","remarks": "! Computational Complexity\n\n  Note that this is a linear operation requiring O(n) time."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "f": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines all the elements of the list, by iteratively applying the\npassed function with next elements of the list.\n\n\n\nIn general, the result of\n    (Cons l0 &lt;| Cons l1 &lt;| ... &lt;| Cons ln) . fold init f\nis the same as\n    f (...(f (f init l0) l1)...) ln","arguments": "- init: The initial value for the fold.\n- f: The binary function used to combine elements of the list.","examples": "> Example\n  In the following example, we'll compute the sum of all elements of a\n  list.\n\n      import Standard.Examples\n\n      example_fold = Examples.list.fold 0 (+)"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "if_empty": {"lazy": true, "default": "Error.throw (Empty_Error.Error List)"}},"aliases": [],"icon": "preparation","description": "Combines all the elements of a non-empty list using a binary operation.\nIf the list is empty, it returns `if_empty`.","arguments": "- function: A binary operation that takes two items and combines them.\n- if_empty: Value returned if the list is empty.","examples": "> Example\n  Compute the sum of all the elements in a list.\n\n      import Standard.Examples\n\n      example_fold = Examples.list.reduce (+)"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether any element of the list matches the given condition.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Check if any element of the list is larger than 5.\n\n      import Standard.Examples\n\n      example_any = Examples.list.any (..Greater than=5)\n\n\n> Example\n  Check if any element of the list is even.\n\n      import Standard.Examples\n\n      example_any = Examples.list.any (x-> x%2 == 0)"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition holds for all elements in this list.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Check if all elements in the list are greater than zero.\n\n      import Standard.Examples\n\n      example_all = Examples.list.all (..Greater than=0)\n\n\n> Example\n  Check if all elements in the list are even.\n\n      import Standard.Examples\n\n      example_all = Examples.list.all (x-> x%2 == 0)"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"elem": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether this list contains a given value as an element.","arguments": "- elem: The element to check if it is in the list.","examples": "> Example\n  Checking if the list contains the number 3.\n\n      import Standard.Examples\n\n      example_contains = Examples.list.contains 3"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this list is empty.","examples": "> Example\n  Checking for emptiness.\n\n      import Standard.Examples\n\n      example_empty = Examples.list.is_empty"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the list is not empty.","examples": "> Example\n  Checking for emptiness.\n\n      import Standard.Examples\n\n      example_not_empty = Examples.list.not_empty"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Selects all elements of this list which satisfy a condition.","arguments": "- filter: The filter to apply to the list. It can either be an instance\n  of `Filter_Condition` or a predicate taking a value and returning a\n  boolean value indicating whether the corresponding element should be\n  kept or not.","examples": "> Example\n  Selecting all elements that are less than 3.\n\n      import Standard.Examples\n\n      example_filter = Examples.list.filter (< 3)\n      example_filter = Examples.list.filter (..Less than=3)"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "partition", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Partitions the list into lists of elements which satisfy a given\ncondition and ones that do not.\n\nReturns a `Pair` whose `first` element is the list of elements satisfying\nthe predicate and the `second` element is a list of elements which did\nnot satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Splitting a list into even and odd elements.\n\n      (Cons 1 (Cons 2 (Cons 3 Nil))).partition (x -> x % 2 == 0) == (Pair (Cons 2 Nil) (Cons 1 (Cons 3 Nil)))"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Applies a function to each element of the list, returning the list of\nresults.","arguments": "- f: The function to apply to each element of the list.","examples": "> Example\n  Add `1` to each element of the list:\n\n      import Standard.Examples\n\n      example_map = Examples.list.map +1"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the list.\n\n\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.\n\nIf the function returns a dataflow error, the error is converted to a\npanic and thrown immediately stopping further processing.","arguments": "- f: The function to apply to each element of the list.","examples": "> Example\n  Print each of the list elements to the standard output.\n\n      import Standard.Examples\n\n      example_each = Examples.list.each IO.println"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the list, returning a list with the same elements, but in the\nopposite order.","examples": "> Example\n  Reversing a small list.\n\n      import Standard.Examples\n\n      example_reverse = Examples.list.reverse"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "drop_start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false}},"aliases": [],"group": "Selections","icon": "parse3","description": "Creates a new list with the first `count` elements at the start of `self`\nremoved.","arguments": "- count: The number of elements to take drop the start of `self`.","examples": "> Example\n  Removing the first element from a list.\n\n      import Standard.Examples\n\n      example_drop_start = Examples.list.drop_start 1"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "take_start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false}},"aliases": [],"group": "Selections","icon": "parse3","description": "Creates a new list consisting of the first `count` elements at the start\nof `self`.","arguments": "- count: The number of elements to take from the start of `self`.","examples": "> Example\n  Obtaining the first 2 elements of a list.\n\n      import Standard.Examples\n\n      example_take_start = Examples.list.take_start 2"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "init", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get all elements from the list except the last.","examples": "> Example\n  Removing the last element of the list to give (Cons 1 Nil).\n\n      import Standard.Examples\n\n      example_init = Examples.list.init"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get the last element of the list.","examples": "> Example\n  Getting the final element of the list.\n\n      import Standard.Examples\n\n      example_last = Examples.list.last"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the first element from the list.","examples": "> Example\n  Getting the first element in the list.\n\n      import Standard.Examples\n\n      example_first = Examples.list.first"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the second element from the list.","examples": "> Example\n  Getting the second element in the list.\n\n      import Standard.Examples\n\n      example_second = Examples.list.second"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "head", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the first element from the list.","examples": "> Example\n  This returns 1.\n\n      import Standard.Examples\n\n      example_head = Examples.list.x"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "tail", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get all elements from the list except the first.","examples": "> Example\n  This returns (Cons 2 Nil).\n\n      import Standard.Examples\n\n      example_tail = Examples.list.tail"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this list to a vector with the same elements."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generates a human-readable text representation of the list."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Returns the first element of the list that satisfies the condition or\nif no elements of the list satisfy the predicate, returns `if_missing`.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the vector.\n- if_missing: Value returned if no element satisfies the predicate.","examples": "> Example\n  Finding a first element of the list that is larger than 2.\n\n      import Standard.Examples\n\n      example_first = Examples.list.find (> 2)"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of the element in the list.\nReturns Nothing if the element is not found.","arguments": "- condition: Either the element to search for, a `Filter_Condition` or a\n  predicate function to test each element.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the list.","examples": "> Example\n  Finding a first element of the vector that is larger than 3.\n\n      [1, 2, 3, 4, 5].find (> 3)"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of the element in the list.\nReturns Nothing if the element is not found.","arguments": "- condition: Either the element to search for, a `Filter_Condition` or a\n  predicate function to test each element.\n- start: The index to start searching backwards from. If the index is\n  negative, it is counted from the end of the list.","examples": "> Example\n  Finding a first element of the vector that is larger than 3.\n\n      [1, 2, 3, 4, 5].find (> 3)"},
{"module": "Standard.Base.Data.List", "type": "", "name": "find_node_from_start", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"list": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "Given a positive index and a list, returns the node."},
{"module": "Standard.Base.Data.List", "type": "", "name": "find_node_from_end", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"list": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "Given a negative index and a list, returns the node that is represented and the index of it."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Locale", "arguments": {"java_locale": {"lazy": false}},"aliases": [],"description": "A type representing a locale.","arguments": "- java_locale: The Java locale representation used internally."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"language": {"lazy": false}, "country": {"lazy": false, "default": "Nothing"}, "variant": {"lazy": false, "default": "Nothing"}},"aliases": [],"icon": "text_input","description": "Construct a new locale.","arguments": "- language: The language tag for the locale.\n- country: The country tag for the locale.\n- variant: The variant for the locale.","examples": "> Example\n  A locale representing en-GB.UTF-8.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_new = Locale.new \"en\" \"GB\" \"UTF-8\""},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "from_java", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"java": {"lazy": false}},"aliases": [],"description": "Convert a java locale to an Enso locale.","arguments": "- java: The java locale value."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "from_language_tag", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tag": {"lazy": false}},"aliases": [],"icon": "convert","description": "Returns the locale specified by the provided IETF BCP47 language tag string.","examples": "> Example\n  Creating the locale en_US.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_from_tag = Locale.from_language_tag \"en_US\"","remarks": "? Language Tag Syntax\n  If the specified language tag contains any ill-formed subtags, the first\n  such subtag and all following subtags are ignored.\n\n  The following conversions are performed:\n  - The language code \"und\" is mapped to language \"\".\n  - The language codes \"he\", \"yi\", and \"id\" are mapped to \"iw\", \"ji\", and\n    \"in\" respectively.\n  - The portion of a private use subtag prefixed by \"lvariant\", if any, is\n    removed and appended to the variant field in the result locale (without\n    case normalization).\n  - When the languageTag argument contains an extlang subtag, the first such\n    subtag is used as the language, and the primary language subtag and other\n    extlang subtags are ignored.\n  - Case is normalized except for variant tags, which are left unchanged.\n    Language is normalized to lower case, script to title case, country to\n    upper case, and extensions to lower case.\n  - If, after processing, the locale would exactly match either ja_JP_JP or\n    th_TH_TH with no extensions, the appropriate extensions are added.\n\n  This implements the 'Language-Tag' production of BCP47, and so supports\n  grandfathered (regular and irregular) as well as private use language tags."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "default", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "The default locale.\n\nThe default locale is a locale that does not specify any language, country,\nor variant and is used as the language/country-neutral setting for locale\nsensitive operations."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "bangladesh", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Bangladesh.","examples": "> Example\n  Get the Bangladeshi locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.bangladesh"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "brazil", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Brazil.","examples": "> Example\n  Get the Brazilian locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.brazil"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "canada_english", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Canada with language English.","examples": "> Example\n  Get the Canadian english locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.canada_english"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "canada_french", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Canada with language French.","examples": "> Example\n  Get the Canadian french locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.canada_french"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "china", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing the PRC.","examples": "> Example\n  Get the PRC locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.china"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "france", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing France.","examples": "> Example\n  Get the French locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.france"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "germany", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Germany.","examples": "> Example\n  Get the German locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.germany"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "india_hindi", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing India with language Hindi.","examples": "> Example\n  Get the Indian hindi locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.india_hindi"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "india_english", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing India with language English.","examples": "> Example\n  Get the Indian english locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.india_english"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "indonesia", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Indonesia.","examples": "> Example\n  Get the Indonesian locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.indonesia"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "italy", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Italy.","examples": "> Example\n  Get the Italian locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.italy"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "japan", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Japan.","examples": "> Example\n  Get the Japanese locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.japan"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "mexico", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Mexico.","examples": "> Example\n  Get the Mexican locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.mexico"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "nigeria", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Nigeria.","examples": "> Example\n  Get the Nigerian locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.nigeria"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "pakistan_urdu", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing paksitan with language Urdu.","examples": "> Example\n  Get the Pakistani urdu locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.pakistan_urdu"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "pakistan_english", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing paksitan with language English.","examples": "> Example\n  Get the Pakistani english locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.pakistan_english"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "poland", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Poland.","examples": "> Example\n  Get the Poland locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.poland"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "russia", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Russia.","examples": "> Example\n  Get the Russian locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.russia"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "south_korea", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing South Korea.","examples": "> Example\n  Get the South Korean locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.south_korea"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "uk", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing the UK.","examples": "> Example\n  Get the british locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.uk"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "us", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing the United States.","examples": "> Example\n  Get the US locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_locale = Locale.us"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Gets the default drop down option for Locale."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "predefined_locale_fields", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "widget_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "language", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Gets the language from the locale.","examples": "> Example\n  Get the language tag from the default locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_language = Locale.default.language"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "country", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Gets the country from the locale.","examples": "> Example\n  Get the country tag from the default locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_country = Locale.default.country"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "variant", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the variant from the locale.","examples": "> Example\n  Get the variant tag from the default locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_variant = Locale.default.variant"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "display_language", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets a representation of the language in the locale that can be shown to\nthe user.","examples": "> Example\n  Get the display language tag from the default locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_display_language = Locale.default.display_language"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "display_country", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets a representation of the country in the locale that can be shown to\nthe user.","examples": "> Example\n  Get the display country tag from the default locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_display_country = Locale.default.display_country"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "display_variant", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets a representation of the variant in the locale that can be shown to\nthe user.","examples": "> Example\n  Get the display variant tag from the default locale.\n\n      import Standard.Base.Data.Locale.Locale\n\n      example_display_variant = Locale.default.display_variant"},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the locale to text."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Locale to a friendly string."},
{"module": "Standard.Base.Data.Map", "type": "Map", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Map", "arguments": {},"aliases": [],"description": "Deprecate place holder for the Map type."},
{"module": "Standard.Base.Data.Map", "type": "Map", "name": "empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "DEPRECATED Use Dictionary.empty instead."},
{"module": "Standard.Base.Data.Map", "type": "Map", "name": "singleton", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "DEPRECATED Use Dictionary.singleton instead."},
{"module": "Standard.Base.Data.Map", "type": "Map", "name": "from_keys_and_values", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"keys": {"lazy": false, "type": "Vector", "checked": true}, "values": {"lazy": false, "type": "Vector", "checked": true}, "error_on_duplicates": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"icon": "convert","description": "DEPRECATED Use Dictionary.from_keys_and_values instead."},
{"module": "Standard.Base.Data.Map", "type": "Map", "name": "from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vec": {"lazy": false}, "error_on_duplicates": {"lazy": false, "default": "True"}},"aliases": [],"icon": "convert","description": "DEPRECATED Use Dictionary.from_vector instead."},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "None", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Maybe", "arguments": {},"aliases": [],"description": "No contained value."},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "Some", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Maybe", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "A value.","arguments": "- value: The contained value in the maybe.","examples": "> Example\n  Construct a some value.\n\n      import Standard.Base.Data.Maybe\n\n      example_some = Maybe.Some \"yes!\""},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "maybe", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"default": {"lazy": true}, "function": {"lazy": false}},"aliases": [],"group": "Metadata","icon": "operators","description": "Applies the provided function to the contained value if it exists,\notherwise returning the provided default value.","arguments": "- default: The value to return if `self` is None. This value is lazy\n  and hence will not execute any provided computation unless it is used.\n- function: The function to execute on the value inside the `Some`, if it\n  is a just.","examples": "> Example\n  Apply a function over a Some value to get 4.\n\n      import Standard.Base.Data.Maybe\n\n      example_maybe = Maybe.Some 2 . maybe 0 *2"},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "is_some", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Check if the maybe value is `Some`.","examples": "> Example\n  Check if `None` is `Some`.\n\n      import Standard.Base.Data.Maybe\n\n      example_is_some = Maybe.Some \"yes!\" . is_some"},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "is_none", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Check if the maybe value is `None`."},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Maybe to a friendly string."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {},"aliases": [],"description": "The root type of the Enso numeric hierarchy.\n\nIf a Number is expected, then the program can provide either a Float or\nan Integer in its place."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "positive_infinity", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "A constant holding the floating-point positive infinity."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "negative_infinity", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "A constant holding the floating-point negative infinity."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "nan", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "A constant holding the floating-point Not-a-Number value."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["add", "plus"],"group": "Operators","icon": "math","description": "Adds two arbitrary numbers.\n\n\n\nAddition in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.","arguments": "- that: The number to add to this.","examples": "> Example\n  Adding 10 and 15.\n\n      10 + 15"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["minus", "subtract"],"group": "Operators","icon": "math","description": "Subtract an arbitrary number from this.","arguments": "- that: The number to subtract from this.","examples": "> Example\n  Subtract 5 from 2.\n\n      2 - 5"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["multiply", "product", "times"],"group": "Operators","icon": "math","description": "Multiply two arbitrary numbers.\n\n\n\nMultiplication in Enso will undergo automatic conversions such that you\nneed not convert between Integer and Float manually.","arguments": "- that: The number to multiply this by.","examples": "> Example\n  Multiplying 3 by 5.\n\n      3 * 5"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["divide"],"group": "Operators","icon": "math","description": "Divides an this by an arbitrary number.\n\n\n\nDivision in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.","arguments": "- that: The number to divide this by.","examples": "> Example\n  Dividing 10 by 4 to get 2.5.\n\n      10 / 4"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["power"],"group": "Operators","icon": "math","description": "Compute the result of raising this to the power that.","arguments": "- that: The exponent.","examples": "> Example\n  Computing 2 cubed.\n\n      2^3"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "asin", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["inverse sine"],"group": "Trigonometry","icon": "math","description": "Computes the inverse of the sine function\n\nSelects a value in the -pi/2 through pi/2 range.","examples": "> Example\n  Calculate the inverse sine of 1.\n\n      1.asin"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "acos", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["inverse cosine"],"group": "Trigonometry","icon": "math","description": "Computes the inverse of the cosine function.\n\nSelects a value in the -pi/2 through pi/2 range.","examples": "> Example\n  Calculate the inverse cosine of 1.\n\n      1.acos"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "atan", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["inverse tangent"],"group": "Trigonometry","icon": "math","description": "Computes the inverse of the tangent function.\n\nSelects a value in the -pi/2 through pi/2 range.","examples": "> Example\n  Calculate the inverse tangent of 1.\n\n      1.atan"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "atan_2", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"y": {"lazy": false}},"aliases": [],"group": "Trigonometry","icon": "math","description": "Computes the argument (angle) in the conversion from cartesian\nto polar coordinates, taking `self` as the x coordinate.\n\n\n\nThe returned angle is in the -pi through pi range.","arguments": "- y: The y coordinate.","examples": "> Example\n  Convert the coordinates 1 and 2 to polar form.\n\n      1.atan_2 2"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "sin", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["sine"],"group": "Trigonometry","icon": "math","description": "Computes the sine function.","examples": "> Example\n  Calculate the sine of 2.\n\n      2.sin"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "cos", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["cosine"],"group": "Trigonometry","icon": "math","description": "Computes the cosine function.","examples": "> Example\n  Calculate the cosine of 2.\n\n      2.cos"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "tan", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["tangent"],"group": "Trigonometry","icon": "math","description": "Computes the tangent function.","examples": "> Example\n  Calculate the tangent of 2.\n\n      2.tan"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "sinh", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Trigonometry","icon": "math","description": "Computes the hyperbolic sine function.","examples": "> Example\n  Calculate the hyperbolic sine of 1.\n\n      1.sinh"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "cosh", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Trigonometry","icon": "math","description": "Computes the hyperbolic cosine function.","examples": "> Example\n  Calcualte the hyperbolic cosine of 1.\n\n      1.cosh"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "tanh", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Trigonometry","icon": "math","description": "Computes the hyperbolic tangent function.","examples": "> Example\n  Calculate the hyperbolic tangent of 1.\n\n      1.tanh"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "exp", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["exponential"],"group": "Math","icon": "math","description": "Computes the exponential function, raising Euler's number `r` to the power of\n`self`.","examples": "> Example\n  Calculate e to the 4th power.\n\n      4.exp"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "ln", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["natural logarithm"],"group": "Math","icon": "math","description": "Computes the natural logarithm function.","examples": "> Example\n  Calculate the natural logarithm of 2.\n\n      2.ln"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "sqrt", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["square root"],"group": "Math","icon": "math","description": "Computes the square root of `self`.","examples": "> Example\n  Calculate the square root of 8.\n\n      8.sqrt"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "log", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"base": {"lazy": false}},"aliases": ["logarithm"],"group": "Math","icon": "math","description": "Computes the `base`-log of `self`.","arguments": "- base: The base for the logarithm.","examples": "> Example\n  Calculate log 2 of 4.\n\n      4.log 2"},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts a numeric value to a string, using the Java DecimalFormat\nformatter.","arguments": "- format: The java-style formatting specifier.","examples": "> Example\n  Convert the value 5000 to a string.\n\n      5000.format \"#,##0\""},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "equals", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean ! Incomparable_Values", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}, "epsilon": {"lazy": false, "default": "0.0:Number"}},"aliases": [],"group": "Logical","icon": "operators","description": "Checks equality of numbers, using an `epsilon` value.","arguments": "- that: The number to check equality against.\n- epsilon: The value by which `self` and `that` can be separated by before\n  counting as not equal.","examples": "> Example\n  Check if 1 is equal to 1.0000001 within 0.001.\n\n      1.equals 1.0000001 epsilon=0.001","errors": ""},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "min", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"group": "Math","icon": "transform4","description": "Returns the smaller value of `self` and `that`.","arguments": "- that: The number to compare `self` against.","examples": "> Example\n  Find the minimum of 2 and 5.\n\n      2.min 5","remarks": "? Math.min or Number.min\n  While we provide the min method on `Number`, we find it more intuitive to\n  write `Math.min a b` rather than `a.min b`. To that end, we recommend using\n  the first style."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "max", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"group": "Math","icon": "transform4","description": "Returns the larger value of `self` and `that`.","arguments": "- that: The number to compare `self` against.","examples": "> Example\n  Find the maximum of 2 and 5.\n\n      2.max 5","remarks": "? Math.max or Number.max\n  While we provide the max method on `Number`, we find it more intuitive to\n  write `Math.max a b` rather than `a.max b`. To that end, we recommend using\n  the first style."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "is_nan", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Math","icon": "metadata","description": "Checks if the given number is the floating-point Not-a-Number value.\n\nThis is needed, because the NaN value will return `False` even when being\ncompared with itself, so `x == Number.nan` would not work."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "is_infinite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Math","icon": "metadata","description": "Checks if the given number is infinite."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "is_finite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Math","icon": "metadata","description": "Checks if the given number is finite, i.e. not infinite nor NaN."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "signum", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Math","icon": "math","description": "Returns the sign of the number."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"description": "Float is the type of float numbers in Enso.","remarks": "? Representation\n  Enso's float numbers are represented as IEEE754 double-precision\n  floating point numbers."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float ! Number_Parse_Error | Illegal_Argument", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "locale": {"lazy": false, "type": "Locale | Nothing", "checked": true, "default": "Nothing"}, "format": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["from text"],"group": "Conversions","icon": "convert","description": "Parses a string into a `Float`, returning a `Number_Parse_Error` if the\ntext does not represent a valid `Float`.","arguments": "- text: The text to parse into a `Float`.\n- locale: The locale that specifies the format to use when parsing.\n- format: The Java-style format to use to parse the string.","examples": "> Example\n  Parse a `Float` with no locale specifier.\n\n      Float.parse \"123456789.87654\"\n      # => 123456789.87654\n\n\n> Example\n  Parse a `Float` with the default locale.\n\n      Float.parse \"123,456,789.87654\" locale=Locale.default\n      # => 123456789.87654\n\n\n> Example\n  Parse a `Float` with the US locale.\n\n      Float.parse \"123,456,789.87654\" locale=Locale.us\n      # => 123456789.87654\n\n\n> Example\n  Parse a `Float` with the Italy locale.\n\n      Float.parse \"123.456.789,87654\" locale=Locale.italy\n      # => 123456789.87654\n\n> Example\n  Parse a `Float` with an explicit negative number format.\n\n      Float.parse \"(123,456,789.654)\" format=\"###,###.##;(###,###.##)\"\n      # => -123456789.654","errors": ""},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "max_value", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "input_number","description": "Maximum representable positive value, from the underlying Java double\ntype.\n\nThe absolute-value-largest representable negative value is `-max_value`."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "min_value", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "input_number","description": "Minimum representable positive value, from the underlying Java double\ntype."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["add", "plus"],"group": "Operators","icon": "math","description": "Adds a float and an arbitrary number.\n\n\n\nAddition in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.","arguments": "- that: The number to add to this.","examples": "> Example\n  Adding 10.1 and 15.\n\n      10.1 + 15"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["minus", "subtract"],"group": "Operators","icon": "math","description": "Subtract an arbitrary number from this.","arguments": "- that: The number to subtract from this.","examples": "> Example\n  Subtract 5 from 2.78.\n\n      2.78 - 5"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["multiply", "product", "times"],"group": "Operators","icon": "math","description": "Multiply a float by an arbitrary number.\n\n\n\nMultiplication in Enso will undergo automatic conversions such that you\nneed not convert between Integer and Float manually.","arguments": "- that: The number to multiply this by.","examples": "> Example\n  Multiplying 3 by 5.27.\n\n      5.27 * 3"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["divide"],"group": "Operators","icon": "math","description": "Divides a float by an arbitrary number.\n\n\n\nDivision in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.","arguments": "- that: The number to divide this by.","examples": "> Example\n  Dividing 10 by 4.5.\n\n      10 / 4.5"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "%", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["modulo", "modulus"],"group": "Operators","icon": "math","description": "Computes the remainder when dividing this by that.\n\n\n\nModulus in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.","arguments": "- that: The number to divide this by.","examples": "> Example\n  Computing the remainder when dividing 3.5 by 2.\n\n      3.5 % 2 == 1.5\n\n\n> Example\n  Computing the fractional part of a number.\n\n      10.5 % 1.0 == 0.5\n\n\n> Example\n  Computing the remainder of a negative number.\n\n      -5 % 3 == -2","remarks": "? Negative Arguments\n\n  When the first argument to `%` is negative, the result will also be\n  negative."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["power"],"group": "Operators","icon": "math","description": "Compute the result of raising this to the power that.","arguments": "- that: The exponent.","examples": "> Example\n  Computing 2.2 cubed.\n\n      2.2^3"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["greater than"],"group": "Operators","icon": "operators","description": "Checks if this is greater than that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10 is greater than 7.3.\n\n      10 > 7.3"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["greater than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is greater than or equal to that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10 is greater than or equal to 7.3.\n\n      10 >= 7.3"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["less than"],"group": "Operators","icon": "operators","description": "Checks if this is less than that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10 is less than 7.3.\n\n      10 < 7.3"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["less than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is less than or equal to that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10.4 is less than or equal to 7.\n\n      10.4 <= 7"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "abs", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"group": "Math","icon": "math","description": "Computes the absolute value of this.\n\nThe absolute value of a positive number is itself, while the absolute\nvalue of a negative number is that number multiplied by -1.","examples": "> Example\n  Computing the absolute value of -10.63.\n\n     -10.63.abs"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "ceil", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest integer equal to or above this number.\n\nThis method provides a means of converting a Float to an Integer.","examples": "> Example\n  Computing the ceiling of 4.736 (which is 5).\n\n      4.736.ceil"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "floor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest integer equal to or below this number.\n\nThis method provides a means of converting a Float to an Integer.","examples": "> Example\n  Computing the floor of 4.323 (which is 4).\n\n      4.323.floor"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "truncate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["int"],"group": "Rounding","icon": "math","description": "Truncate a floating-point number to an integer by dropping the fractional\npart. This is equivalent to \"round-toward-zero\"."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "round", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Rounding","icon": "math","description": "Round to a specified number of decimal places.\n\nBy default, rounding uses \"symmetric round-half-up\", also known as\n\"half-up.\" If use_bankers=True, then it uses \"round-half-even\", also\nknown as \"banker's rounding\".\n\nIf `decimal_places` > 0, `round` returns a `Float`; otherwise, it\nreturns an `Integer`.\n\nIf the argument is `NaN` or `+/-Inf`, an `Arithmetic_Error` error is\nthrown.","arguments": "- decimal_places: The number of decimal places to round to. Can be\n  negative, which results in rounding to positive integer powers of 10.\n  Must be between -15 and 15 (inclusive).\n- use_bankers: Rounds mid-point to nearest even number.","examples": "> Example\n  Round to the nearest integer.\n\n     3.3 . round == 3\n\n\n> Example\n  Round to two decimal places.\n\n     3.1415 . round 2 == 3.14\n\n\n> Example\n  Round to the nearest hundred.\n\n     1234.0 . round -2 == 1200\n\n\n> Example\n  Use Banker's Rounding.\n\n     2.5 . round use_bankers=True == 2","errors": "","remarks": "? Negative decimal place counts\n  Rounding to `n` digits can be thought of as \"rounding to the nearest\n  multiple of 10^(-n)\". For negative decimal counts, this results in\n  rounding to the nearest positive integer power of 10."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "negate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"group": "Operators","icon": "operators","description": "Compute the negation of this.","examples": "> Example\n  Negate 5.1 to get -5.1.\n\n      5.1.negate"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "to_float", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"icon": "convert","description": "Convert this to a float.\n\nThis is a no-op on floats, but is provided for completeness of the Enso\nNumber API.","examples": "> Example\n  Convert 5.0 to a float to get 5.0.\n\n      5.0.to_float"},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "to_decimal", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this to a `Decimal`.","examples": "> Example\n  Convert 12.3 to a Decimal.\n\n      12.3 . to_decimal\n      # => Decimal.new \"12.3\""},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"description": "Integer is the type of integral numbers in Enso. They are of unbounded\nsize and can grow as large as necessary.","remarks": "? Representation\n  For certain operations (such as bitwise logic), the underlying\n  representation of the number matters. Enso Integers are represented as\n  signed 2's complement numbers.\n\n\n? Performance\n  Integers that fit into 64 bits are represented in memory as 64 bits.\n  This means that operations on them achieve excellent performance. Once\n  the integer grows beyond being able to fit in 64 bits, performance will\n  degrade."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Number_Parse_Error", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "radix": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}},"aliases": ["from text"],"group": "Conversions","icon": "convert","description": "Parses a textual representation of an integer into an integer number, returning\na `Number_Parse_Error` if the text does not represent a valid integer.","arguments": "- text: The text to parse into a integer.\n- radix: The number base to use for parsing (defaults to 10). `radix`\n  must be between 2 and 36 (inclusive) -- see https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Character.html#MIN_RADIX.","examples": "> Example\n  Parse the text \"20220216\" into an integer number.\n\n     Integer.parse \"20220216\""},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["add", "plus"],"group": "Operators","icon": "math","description": "Adds an integer and an arbitrary number.\n\n\n\nAddition in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.","arguments": "- that: The number to add to this.","examples": "> Example\n  Adding 10 and 15.\n\n      10 + 15"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["minus", "subtract"],"group": "Operators","icon": "math","description": "Subtract an arbitrary number from this.","arguments": "- that: The number to subtract from this.","examples": "> Example\n  Subtract 5 from 2.\n\n      2 - 5"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["multiply", "product", "times"],"group": "Operators","icon": "math","description": "Multiply an integer by an arbitrary number.\n\n\n\nMultiplication in Enso will undergo automatic conversions such that you\nneed not convert between Integer and Float manually.","arguments": "- that: The number to multiply this by.","examples": "> Example\n  Multiplying 3 by 5.\n\n      3 * 5"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["divide"],"group": "Operators","icon": "math","description": "Divides an integer by an arbitrary number.\n\n\n\nDivision in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.","arguments": "- that: The number to divide this by.","examples": "> Example\n  Dividing 10 by 4 to get 2.5.\n\n      10 / 4"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "%", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["modulo", "modulus"],"group": "Operators","icon": "math","description": "Computes the remainder when dividing this by that.\n\n\n\nModulus in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.\n\nReturns an error if the shift amount exceeds 2^32.","arguments": "- that: The number to divide this by.","examples": "> Example\n  Computing the remainder when dividing 10 by 3 (which is 1).\n\n      10 % 3\n\n\n> Example\n  Computing the remainder of a negative number.\n\n      -5 % 3 == -2","remarks": "? Negative Arguments\n\n  When the first argument to `%` is negative, the result will also be\n  negative."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["power"],"group": "Operators","icon": "math","description": "Compute the result of raising this to the power that.","arguments": "- that: The exponent.","examples": "> Example\n  Computing 2 cubed.\n\n      2^3"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["greater than"],"group": "Operators","icon": "operators","description": "Checks if this is greater than that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10 is greater than 7.\n\n      10 > 7"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["greater than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is greater than or equal to that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10 is greater than or equal to 7.\n\n      10 >= 7"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["less than"],"group": "Operators","icon": "operators","description": "Checks if this is less than that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10 is less than 7.\n\n      10 < 7"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["less than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is less than or equal to that.","arguments": "- that: The number to compare this against.","examples": "> Example\n  Checking if 10 is less than or equal to 7.\n\n      10 <= 7"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "abs", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Math","icon": "math","description": "Computes the absolute value of this.\n\nThe absolute value of a positive number is itself, while the absolute\nvalue of a negative number is that number multiplied by -1.","examples": "> Example\n  Computing the absolute value of -10.\n\n     -10.abs"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "ceil", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest integer above this integer.\n\nThis is a no-op on integers but is provided for completeness of the Enso\nnumber API.","examples": "> Example\n  Computing the ceiling of 4.\n\n      4.ceil"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "div", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Math","icon": "math","description": "Computes the integer division of this by that.\n\n\n\nInteger division rounds down to the nearest integer.\n\nReturns an error if `that` is zero.","arguments": "- that: The number to divide this by.","examples": "> Example\n  Dividing 10 by 3 to get 3.\n\n      10.div 3"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "floor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest integer below this integer.\n\nThis is a no-op on integers but is provided for completeness of the Enso\nnumber API.","examples": "> Example\n  Computing the floor of 4.\n\n      4.floor"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "truncate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["int"],"group": "Rounding","icon": "math","description": "Truncate an `Integer` to an `Integer`, i.e. returns its argument. For\ncompatibility with `Float.truncate`."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "round", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Illegal_Argument", "arguments": {"decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Rounding","icon": "math","description": "Round to a specified number of decimal places.\n\nFor integers, rounding to 0 or more decimal places simply returns the\nargument. For negative decimal places, see below.\n\nBy default, rounding uses \"symmetric round-half-up\", also known as\n\"half-up.\" If use_bankers=True, then it uses \"round-half-even\", also\nknown as \"banker's rounding\".","arguments": "- decimal_places: The number of decimal places to round to. Can be\n  negative, which results in rounding to positive integer powers of 10.\n  Must be between -15 and 15 (inclusive).\n- use_bankers: Rounds mid-point to nearest even number.","examples": "> Example\n  Round an integer (returns the value unchanged).\n\n     3 . round == 3\n\n\n> Example\n  Round to the nearest thousand.\n\n     2511 . round -3 == 3000\n\n\n> Example\n  Round to the nearest hundred, using Banker's Rounding.\n\n     12250 . round -2 use_bankers=True == 12200","errors": "","remarks": "? Negative decimal place counts\n  Rounding to `n` digits can be thought of as \"rounding to the nearest\n  multiple of 10^(-n)\". For negative decimal counts, this results in\n  rounding to the nearest positive integer power of 10."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "negate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Operators","icon": "operators","description": "Compute the negation of this.","examples": "> Example\n  Negate 5 to get -5.\n\n      5.negate"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "to_float", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"icon": "convert","description": "Convert this to a float.","examples": "> Example\n  Convert 5 to a float to get 5.0.\n\n      5.to_float"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "to_decimal", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this to a `Decimal`.","examples": "> Example\n  Convert 12 to a Decimal.\n\n      12 . to_decimal\n      # => Decimal.new \"12\""},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_and", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Computes the bitwise and (conjunction) operation between this and\nthat.\n\n\n\nBitwise and computes the logical conjunction of the corresponding pairs\nof bits in the operands.","arguments": "- that: The number to compute the bitwise conjunction with.","examples": "> Example\n  Computing the bitwise conjunction of 0b01101101 and 0b11110000.\n\n      0b01101101.bit_and 0b11110000"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_not", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Bitwise","icon": "math","description": "Computes the bitewise compliment of this.\n\nThe bitwise compliment negates the value of each bit in the operand.","examples": "> Example\n  Bitwise negation of 0b0110.\n\n      0b0110.bit_not"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_or", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Computes the bitwise or (disjunction) operation between this and\nthat.\n\n\n\nBitwise or computes the logical disjunction of the pairs of corresponding\nbits in the operands.","arguments": "- that: The number to compute the bitwise disjunction with.","examples": "> Example\n  Computing the bitwise disjunction of 0b01101101 and 0b11110000.\n\n      0b01101101.bit_or 0b11110000"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_xor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Computes the bitwise exclusive or between this and that.\n\n\n\nBitwise exclusive or computes the exclusive or of the pairs of\ncorresponding bits in the operands.","arguments": "- that: The number to compute the bitwise exclusive or with.","examples": "> Example\n  Computing the bitwise exclusive or of 0b01101101 and 0b11110000.\n\n      0b01101101.bit_xor 0b11110000"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_shift", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Shifts the bits of this by the amount that.\n\nLeft-shifts fill the new bits with zeroes, while right-shifts perform\nsign extension.\n\nReturns an error if the shift amount exceeds 2^32.","arguments": "- that: The number of bits by which the shift should be performed.\n  Positive numbers perform a left-shift, while negative numbers perform a\n  right-shift.","examples": "> Example\n  Shift the bits of the number 1 left by four bits.\n\n      1.bit_shift 4"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_shift_l", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Performs a bitwise left-shift on the number.\n\nLeft-shifts fill the new bits with zeroes, while right-shifts perform\nsign extension.\n\nReturns an error if the shift amount exceeds 2^32.","arguments": "- that: The number of bits by which the shift should be performed.\n  Positive numbers perform a left-shift, while negative numbers perform a\n  right-shift.","examples": "> Example\n  Shift the bits of the number 1 left by four bits.\n\n      1.bit_shift_l 4"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_shift_r", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Performs a bitwise right-shift on the number.\n\nLeft-shifts fill the new bits with zeroes, while right-shifts perform\nsign extension.\n\nReturns an error if the shift amount exceeds 2^32.","arguments": "- that: The number of bits by which the shift should be performed.\n  Positive numbers perform a right-shift, while negative numbers perform\n  a left-shift.","examples": "> Example\n  Shift the bits of the number 1 right by four bits.\n\n      1.bit_shift_r 4"},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "fits_in_long", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Numbers", "type": "Number_Parse_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Number_Parse_Error", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Numbers", "type": "Number_Parse_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the syntax error."},
{"module": "Standard.Base.Data.Numbers", "type": "Positive_Integer", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Positive_Integer", "arguments": {"integer": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "This constructor should not be used by user code as it can be used to\nbreak the invariants. Instead, this type should only be created by `new`\nor conversions."},
{"module": "Standard.Base.Data.Numbers", "type": "Positive_Integer", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"integer": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Constructor to create a `Positive_Integer` from an `Integer` - checking\nif it satisfies the condition. User code should prefer the\n`Positive_Integer.from` conversion."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numbers", "type": "Positive_Integer", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Allows to create a `Positive_Integer` from an `Integer`.\nIt will throw `Illegal_Argument` if the provided integer is not positive."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Positive_Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numbers", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Positive_Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Ordering", "type": "Comparable", "name": "By", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Comparable", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}, "comparator": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Ordering", "type": "Comparable", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Comparable", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}, "comparator": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Creates new opaque `Comparable` instance for given `value` and\na `Comparator` with two static methods what work on the\ntype `T` of the provided `value`:\n\n```\ntype Comparator T\n    compare : T -> T -> (Ordering|Nothing ! Incomparable_Values)\n    hash : T -> Integer\n```\n\nTypically used inside of `Comparable.from` method definition."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "Less", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Ordering", "arguments": {},"aliases": [],"description": "A representation that the first value orders as less than the second."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "Equal", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Ordering", "arguments": {},"aliases": [],"description": "A representation that the first value orders as equal to the second."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "Greater", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Ordering", "arguments": {},"aliases": [],"description": "A representation that the first value orders as greater than the second."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "compare", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Ordering ! Incomparable_Values", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": [],"icon": "operators","description": "Compares values and returns an `Ordering` representing their order\nor yields an `Incomparable_Values` error when the values aren't\ncomparable."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "hash", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"icon": "metadata","description": "Computes a hash number for a given value"},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "from_sign", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"sign": {"lazy": false}},"aliases": [],"description": "Converts a sign-based representation of ordering to Enso's native ordering.","arguments": "- sign: The number representing the relative ordering of two entities.","examples": "> Example\n  Convert the number 0 to an Enso ordering.\n\n      Ordering.from_sign 0"},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "to_sign", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts the ordering to the signed notion of ordering based on integers.","examples": "> Example\n  Converting equal ordering to a signed number.\n\n      import Standard.Base.Data.Ordering\n\n      example_to_sign = Ordering.Equal.to_sign"},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "and_then", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": true}},"aliases": [],"icon": "order","description": "A lexicographical comparison."},
{"module": "Standard.Base.Data.Ordering", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Ordering", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Ordering", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Pair", "arguments": {"first": {"lazy": false}, "second": {"lazy": false}},"aliases": [],"description": "A simple pair of elements.","arguments": "- first: The first element.\n- second: The second element."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"first": {"lazy": false}, "second": {"lazy": false}},"aliases": [],"icon": "array_new","description": "Create a new Pair from two elements.","arguments": "- first: The first element.\n- second: The second element."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get the last element of the pair.","examples": "> Example\n  The following code returns 4.\n\n      Pair.new 2 4 . last"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fun": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Applies the provided function to both elements of the pair.","examples": "> Example\n  Adding one to two elements of the pair.\n\n  (Pair 1 2).map (+1) == (Pair 2 3)"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the length of the Pair (which is always equal to 2)."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Returns the pair as a Vector."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the pair at a specified index (0-based).","arguments": "- index: The location in the pair to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back\n  of the pair, i.e. -1 will correspond to the last element."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the pair at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.","arguments": "- index: The location in the pair to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back\n  of the pair, i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a predicate holds for at least one element of this pair.","arguments": "- predicate: A function that takes a list element and returns a boolean\n  value that says whether that value satisfies the conditions of the\n  function.","examples": "> Example\n  Checking if any element of the list is larger than 3.\n\n      Pair.new 1 5 . any (> 3)"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a predicate holds for all elements in this pair.","arguments": "- predicate: A function that takes a list element and returns a boolean\n  value that says whether that value satisfies the conditions of the\n  function.","examples": "> Example\n  Check if all elements in the pair are less than zero.\n\n      Pair.new -1 3 . all (< 0)"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"elem": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether this pair contains a given value as an element.","arguments": "- elem: The item to see if it exists in the pair.","examples": "> Example\n  Checking if the vector contains the number 72.\n\n      Pair.new 1 42 . contains 72"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Returns the first element of the pair that satisfies the predicate or\nif no elements satisfy the predicate, returns `if_missing`.","arguments": "- predicate: A function that takes a list element and returns a boolean\n  value that says whether that value satisfies the conditions of the\n  function.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the pair.\n- if_missing: Value returned if no element satisfies the predicate.","examples": "> Example\n  Finding a first element of the pair that is larger than 3.\n\n      Pair.new 1 6 .find (> 3)"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of an element in the pair.\nReturns Nothing if the element is not found.","arguments": "- element: The element to search for or a predicate function to test for\n  each element.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the pair.","examples": "> Example\n  Find the index of an element in a pair.\n\n      Pair.new 1 2 . index_of 2 == 1\n      Pair.new 2 2 . index_of 2 == 0"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of an element in the pair.\nReturns Nothing if the element is not found.","arguments": "- element: The element to search for or a predicate function to test for\n  each element.\n- start: The index to start searching backwards from. If the index is\n  negative, it is counted from the end of the pair.","examples": "> Example\n  Find the last index of an element in a pair.\n\n      Pair.new 2 2 . last_index_of 2 == 1"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines all the elements of the pair, by iteratively applying the\npassed function with next elements of the pair.","arguments": "- init: The initial value for the fold.\n- function: A function taking two elements and combining them.","examples": "> Example\n  Compute the sum of all of the elements in a pair.\n\n      Pair.new 10 20 . fold 0 (+)"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "preparation","description": "Combines all the elements of the pair using a binary operation.","arguments": "- function: A binary operation that takes two items and combines them.","examples": "> Example\n  Compute the sum of all the elements in a Pair.\n\n      Pair.new 10 20 . reduce (+)"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the pair, returning a pair with the same elements, but in\nthe opposite order.","examples": "> Example\n  Reverse a two-element vector.\n\n      Pair.new 1 2 . reverse"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the pair.\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.\n\nIf the function returns a dataflow error, the error is converted to a\npanic and thrown immediately stopping further processing.","arguments": "- function: A function to apply to each element of the pair.","examples": "> Example\n  Print each element in the vector to standard output.\n\n      Pair.new 1 2 . each IO.println"},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Pair."},
{"module": "Standard.Base.Data.Pair", "type": "", "name": "check_start_valid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "function": {"lazy": false}, "max": {"lazy": false, "default": "3"}},"aliases": []},
{"module": "Standard.Base.Data.Pair", "type": "", "name": "pair", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Pair", "arguments": {"first": {"lazy": false}, "second": {"lazy": false}},"aliases": [],"icon": "array_new","description": "Create a new Pair from two elements.","arguments": "- first: The first element.\n- second: The second element."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "Between", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Range", "arguments": {"start": {"lazy": false, "type": "Integer", "checked": true}, "end": {"lazy": false, "type": "Integer", "checked": true}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "A representation of a right-exclusive range of integer values.","arguments": "- start: The left boundary of the range. Its value is included.\n- end: The right boundary of the range. Its value is excluded.\n- step: The step between consecutive elements of the range. It must be\n  non-zero. Defaults to 1."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "end": {"lazy": false, "type": "Integer", "checked": true, "default": "100"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Create a representation of a right-exclusive range of integer values.","arguments": "- start: The left boundary of the range. Its value is included.\n- end: The right boundary of the range. Its value is excluded.\n- step: The step between values. Must be a positive value."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "with_step", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_step": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Calculations","icon": "array_new","description": "Creates a copy of this range with a changed step.","examples": "> Example\n  Create a range of even numbers from 0 to 10 (exclusive).\n\n      0.up_to 10 . with_step 2 . to_vector == [0, 2, 4, 6, 8]\n\n\n> Example\n  Create a a decreasing range of even numbers from 10 to 0 (exclusive).\n\n      10.down_to 0 . with_step 2 . to_vector == [10, 8, 6, 4, 2]"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Returns the first element that is included within the range.\n\nIt will raise `Index_Out_Of_Bounds` if the range is empty."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Returns the second element that is included within the range.\n\nIt will raise `Index_Out_Of_Bounds` if the range has less than two elements."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Returns the last element that is included within the range.\n\nIt will raise `Index_Out_Of_Bounds` if the range is empty."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the number of elements in the range.","examples": "> Example\n  The following range has 100 elements.\n\n     0.up_to 100 . length"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the Range at a specified index (0-based).","arguments": "- index: The location in the Range to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back,\n  i.e. -1 will correspond to the last element.","examples": "> Example\n  Get the second element of a range.\n\n      0.up_to 10 . get 1 == 1\n\n\n> Example\n  Get the last element of a range with step.\n\n     0.up_to 10 . with_step 2 . get -1 == 8"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the Range at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.","arguments": "- index: The location in the Range to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back,\n  i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this range is empty.","examples": "> Example\n  Checking if the range from 0 to 100 is empty.\n\n      0.up_to 100 . is_empty"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this range is not empty.","examples": "> Example\n  Checking if the range from 0 to 100 is not empty.\n\n      0.up_to 100 . not_empty"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Applies a function to each element in the range, producing a vector of\nresults.","arguments": "- function: The function to apply to each integer in the range.","examples": "> Example\n  Create a vector that contains the numbers twice that of the numbers in\n  the range.\n\n      1.up_to 10 . map (*2)"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Filter_Condition | (Integer -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Returns a vector of all elements of this range which satisfy a condition.","arguments": "- filter: The filter to apply to the range. It can either be an instance\n  of `Filter_Condition` or a predicate taking a value and returning a\n  boolean value indicating whether the corresponding element should be\n  kept or not.","examples": "> Example\n  Selecting all elements that are greater than 3.\n\n      (0.up_to 7).filter (> 3)\n      (0.up_to 7).filter (..Greater than=3)"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "partition", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Integer -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Partitions the range into `Vector`s of elements which satisfy a given\ncondition and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of\nelements which did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Splitting a range into even and odd elements.\n\n      (0.up_to 4).partition (x-> x%2 == 0) == (Pair [0, 2] [1, 3])"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function for each element in the range.\n\nThis method does not return the results, so it is only useful for performing\ncomputations with side-effects.\n\nIf the function returns a dataflow error, the error is converted to a\npanic and thrown immediately stopping further processing.","arguments": "- function: The function to apply to each integer in the range.","examples": "> Example\n  To print all the numbers from 1 to 10 use:\n      1.up_to 11 . each IO.println"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "each_propagate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Executes a function for each element in the range. Exits early if the body\nproduces an `Error`."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "each_with_index", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the range.\n\nEssentially acts like `range.to_vector.each_with_index`, but it is more\nefficient.","arguments": "- function: A function to apply that takes two parameters: first the\n  index of a given range element and then the actual range element.","examples": "> Example\n  Print range elements with their indices within the range.\n\n      (10.up_to 13).each_with_index ix-> elem-> IO.println (Pair ix elem) # Will print Pair 0 10, Pair 1 11, Pair 2 12"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines all the elements of the range, by iteratively applying the\npassed function with next elements of the range.\n\n\n\nIn general, the result of\n    Range start end step . fold init f\nis the same as\n    f (...(f (f init start) start+step)...) last","arguments": "- init: The initial value for the fold.\n- function: A binary function taking an item and a number, and returning\n  an item.","examples": "> Example\n  In the following example, we'll compute the sum of all even integers\n  less than 100.\n\n      0.up_to 100 . with_step 2 . fold 0 (+)"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "running_fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the range, by iteratively applying the\npassed function with the next element of the range. After each step the\nvalue is stored resulting in a new Vector of the same size as self.","arguments": "- init: The initial value for the fold.\n- function: A function taking two elements and combining them.","examples": "> Example\n  Compute the running sum of all of the elements in a range.\n\n     (0.up_to 4).running_fold 0 (+)"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Integer -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition is satisfied for all numbers in this range.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Checking that all numbers in the range are greater than 5.\n\n      10.up_to 100 . all (..Greater than=5)\n\n\n> Example\n  Checking that all numbers in the range are even.\n\n      10.up_to 100 . with_step 2 . all (x-> x%2 == 0)"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Integer -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition is satisfied for any number in this range.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Checking that at least one number in the range is greater than 10.\n\n      1.up_to 100 . any (..Greater than=10)\n\n\n> Example\n  Checking that at least one number in the range is even.\n\n      1.up_to 100 . any (x-> x%2 == 0)"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Integer -> Boolean)", "checked": true}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Gets the first element of this range that satisfies a condition.\nIf no element satisfies the condition, returns `if_missing`.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the range.\n- if_missing: Value returned if no element satisfies the predicate.","examples": "> Example\n  Get the first number in the range divisible by 2, 3 and 5.\n\n      1.up_to 100 . find i->(i%2==0 && i%3==0 && i%5==0)\n\n\n> Example\n  Get the first number in the range that is greater than 10.\n\n      1.up_to 100 . find (..Greater than=10)"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks if the range contains the specified value.","examples": "> Example\n  Check if an index is in the range of a Vector\n\n       vec = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n       0.up_to vec.length . contains 3"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of an element in the range.\nReturns Nothing if the element is not found.","arguments": "- condition: Either the element to search for, a `Filter_Condition` or a\n  predicate function to test each element.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the range.","examples": "> Example\n  Find the index of an element in a range.\n\n      0.up_to 100 . index_of 20 == 20\n      0.up_to 100 . with_step 5 . index_of 20 == 4\n      0.up_to 100 . with_step 5 . index_of (>10) == 3"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of an element in the range.\nReturns Nothing if the element is not found.","arguments": "- condition: Either the element to search for, a `Filter_Condition` or a\n  predicate function to test each element.\n- start: The index to start searching backwards from. If the index is\n  negative, it is counted from the end of the range.","examples": "> Example\n  Find the last index of an element in a pair.\n\n      Pair.new 2 2 . last_index_of 2 == 1"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the range, returning a range with the same elements, but in\nthe opposite order.","examples": "> Example\n  Reverse a step 5 from 0 to 23\n\n      Range.new 0 23 . with_step 5 . reverse"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts the range to a vector containing the numbers in the range.","examples": "> Example\n  Getting a vector of the numbers 1 to 5.\n\n      1.up_to 6 . to_vector"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "if_empty": {"lazy": true, "default": "Error.throw (Empty_Error.Error Range)"}},"aliases": [],"icon": "preparation","description": "Combines all the elements of a non-empty range using a binary operation.\nIf the range is empty, returns `if_empty`.","arguments": "- function: A binary operation that takes two integers and combines them.\n- if_empty: Value returned if the range is empty.","examples": "> Example\n  Compute the sum of all the elements in a range.\n\n      0.up_to 10 . reduce (+)"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Range."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation.","examples": "> Example\n  Getting the Enso code of the range 1 until 29.\n\n      1.up_to 29 . pretty\n      ## Returns a Text\n         Range.new 1 29"},
{"module": "Standard.Base.Data.Range", "type": "", "name": "throw_zero_step_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Range", "type": "", "name": "check_start_valid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "range": {"lazy": false}, "function": {"lazy": false}, "include_end": {"lazy": false, "default": "True"}},"aliases": [],"description": "Check inputs are valid for a range"},
{"module": "Standard.Base.Data.Range", "type": "", "name": "find_internal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false}, "start": {"lazy": false}, "predicate": {"lazy": false}},"aliases": [],"description": "Find value and index for a predicate"},
{"module": "Standard.Base.Data.Range", "type": "", "name": "get_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false}, "min": {"lazy": false}, "max": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "Work out the index of a value in a range"},
{"module": "Standard.Base.Data.Range", "type": "", "name": "range_default_filter_condition_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Range", "type": "Vector", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "Linear", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Model", "arguments": {"intercept": {"lazy": false, "type": "Number|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Fit a line (y = A x + B) to the data with an optional fixed intercept."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "Exponential", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Model", "arguments": {"intercept": {"lazy": false, "type": "Number|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Fit a exponential line (y = A exp(B x)) to the data with an optional fixed intercept."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "Logarithmic", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Model", "arguments": {},"aliases": [],"description": "Fit a logarithmic line (y = A log x + B) to the data."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "Power", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Model", "arguments": {},"aliases": [],"description": "Fit a power series (y = A x ^ B) to the data."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "fitted_model_with_r_squared", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}, "a": {"lazy": false}, "b": {"lazy": false}, "known_xs": {"lazy": false}, "known_ys": {"lazy": false}},"aliases": [],"description": "Computes the R Squared value for a model and returns a new instance."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "ln_series", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"xs": {"lazy": false}, "series_name": {"lazy": false, "default": "\"Values\""}},"aliases": [],"description": "Computes the natural log series as long as all values are positive."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Model."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "Linear", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fitted_Model", "arguments": {"slope": {"lazy": false, "type": "Number", "checked": true}, "intercept": {"lazy": false, "type": "Number", "checked": true}, "r_squared": {"lazy": false, "type": "Number", "checked": true, "default": "0.0"}},"aliases": [],"description": "Fitted line (y = slope x + intercept)."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "Exponential", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fitted_Model", "arguments": {"a": {"lazy": false, "type": "Number", "checked": true}, "b": {"lazy": false, "type": "Number", "checked": true}, "r_squared": {"lazy": false, "type": "Number", "checked": true, "default": "0.0"}},"aliases": [],"description": "Fitted exponential line (y = a exp(b x))."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "Logarithmic", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fitted_Model", "arguments": {"a": {"lazy": false, "type": "Number", "checked": true}, "b": {"lazy": false, "type": "Number", "checked": true}, "r_squared": {"lazy": false, "type": "Number", "checked": true, "default": "0.0"}},"aliases": [],"description": "Fitted logarithmic line (y = a log x + b)."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "Power", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fitted_Model", "arguments": {"a": {"lazy": false, "type": "Number", "checked": true}, "b": {"lazy": false, "type": "Number", "checked": true}, "r_squared": {"lazy": false, "type": "Number", "checked": true, "default": "0.0"}},"aliases": [],"description": "Fitted power series (y = a x ^ b)."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Display the fitted line."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Fitted_Model."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "predict", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"group": "Calculations","icon": "robot","description": "Use the model to predict a value."},
{"module": "Standard.Base.Data.Regression", "type": "Fit_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Fit_Error", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "An error thrown when the linear regression cannot be computed.","arguments": "- message: The error message."},
{"module": "Standard.Base.Data.Regression", "type": "Fit_Error", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Regression", "type": "Fit_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the `Fit_Error` to a human-readable representation."},
{"module": "Standard.Base.Data.Regression", "type": "", "name": "fit_least_squares", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"known_xs": {"lazy": false}, "known_ys": {"lazy": false}, "model": {"lazy": false, "default": "Model.Linear"}},"aliases": [],"icon": "robot","description": "Use Least Squares to fit a line to the data."},
{"module": "Standard.Base.Data.Sort_Direction", "type": "Sort_Direction", "name": "Ascending", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Sort_Direction", "arguments": {},"aliases": [],"description": "Elements should be sorted in ascending order.","examples": "> Example\n  Create an ascending order.\n\n      Sort_Direction.Ascending"},
{"module": "Standard.Base.Data.Sort_Direction", "type": "Sort_Direction", "name": "Descending", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Sort_Direction", "arguments": {},"aliases": [],"description": "Elements should be sorted in descending order.","examples": "> Example\n  Create a descending order.\n\n      Sort_Direction.Descending"},
{"module": "Standard.Base.Data.Sort_Direction", "type": "Sort_Direction", "name": "to_sign", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert into the sign of the direction"},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "Average", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rank_Method", "arguments": {},"aliases": [],"description": "Use the mean of all ranks for equal values."},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "Minimum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rank_Method", "arguments": {},"aliases": [],"description": "Use the lowest of all ranks for equal values."},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "Maximum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rank_Method", "arguments": {},"aliases": [],"description": "Use the highest of all ranks for equal values."},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "Dense", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rank_Method", "arguments": {},"aliases": [],"description": "Use same rank value for equal values and next group is the immediate\nfollowing ranking number."},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "Ordinal", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rank_Method", "arguments": {},"aliases": [],"description": "Equal values are assigned the next rank in order that they occur."},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "compute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false}},"aliases": [],"group": "Statistics","icon": "transform4","description": "Assigns a rank to each value of data, dealing with equal values according to the method.","arguments": "- data: Input data to rank."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Count", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "Count the number of non-Nothing and non-NaN values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Minimum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "The minimum value."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Maximum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "The maximum value."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Sum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "Sum the non-Nothing and non-NaN values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Product", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "The product of the non-Nothing and non-NaN values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Mean", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "The sample mean of the values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Variance", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"population": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "The variance of the values.","arguments": "- population: specifies if data is a sample or the population."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Standard_Deviation", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"population": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "The standard deviation of the values.","arguments": "- population: specifies if data is a sample or the population."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Skew", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"population": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "The skewness of the values.","arguments": "- population: specifies if data is a sample or the population."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Kurtosis", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "The sample kurtosis of the values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Covariance", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"series": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Calculate the Covariance between data and series.","arguments": "- series: the series to compute the covariance with."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Pearson", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"series": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Calculate the Pearson Correlation between data and series.","arguments": "- series: the series to compute the correlation with."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Spearman", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"series": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Calculate the Spearman Rank Correlation between data and series.","arguments": "- series: the series to compute the correlation with."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "R_Squared", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"predicted": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Calculate the coefficient of determination between data and predicted\nseries.","arguments": "- predicted: the series to compute the r_squared with."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "bulk_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Bulk widget for Statistic."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "compute", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}, "statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}},"aliases": [],"description": "Compute a single statistic on a vector like object.","arguments": "- data: Vector like object which has a `to_array` method.\n- statistic: Statistic to calculate."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "compute_bulk", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}, "statistics": {"lazy": false, "type": "Vector", "checked": true, "default": "[Statistic.Count, Statistic.Sum]"}},"aliases": [],"description": "Compute a set of statistics on a vector like object.","arguments": "- data: Vector like object which has a `to_array` method.\n- statistics: Set of statistics to calculate."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "running", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}, "statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Sum"}},"aliases": [],"description": "Compute a running statistics on a vector like object.","arguments": "- data: Vector like object which has a `to_array` method.\n- statistics: Set of statistics to calculate."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "running_bulk", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}, "statistics": {"lazy": false, "default": "[Statistic.Count, Statistic.Sum]"}},"aliases": [],"description": "Compute a set running statistics on a vector like object.","arguments": "- data: Vector like object which has a `to_array` method.\n- statistics: Set of statistics to calculate."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "covariance_matrix", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}},"aliases": [],"icon": "math","description": "Calculate a variance-covariance matrix between the input series.","arguments": "- data: The input data sets"},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "pearson_correlation", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}},"aliases": [],"icon": "math","description": "Calculate a Pearson correlation matrix between the input series.","arguments": "- data: The input data sets"},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "spearman_correlation", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}},"aliases": [],"icon": "math","description": "Calculate a Spearman Rank correlation matrix between the input series.","arguments": "- data: The input data sets"},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "rank_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false}, "method": {"lazy": false, "default": "Rank_Method.Average"}},"aliases": [],"description": "Assigns a rank to each value of data, dealing with equal values according to the method.","arguments": "- data: Input data to rank.\n- method: Method used to deal with equal values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the order needed to compute a statistic for a moment based statistic."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Accumulator", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}, "min_max": {"lazy": false, "type": "Boolean", "checked": true}, "minimum": {"lazy": false, "type": "Any", "checked": true}, "maximum": {"lazy": false, "type": "Any", "checked": true}, "moments": {"lazy": false, "type": "Vector|Nothing", "checked": true}, "calc_product": {"lazy": false, "type": "Boolean", "checked": true}, "product": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"min_max": {"lazy": false, "default": "True"}, "moments": {"lazy": false, "default": "0"}, "calc_product": {"lazy": false, "default": "False"}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "perform_comparison", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current": {"lazy": false}, "value": {"lazy": false}, "bound": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "increment", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Add a single value to the accumulator."},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "update_moments", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "compute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statistic": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "variance", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"population": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "skew", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"population": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "kurtosis", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "check_moments", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statistic": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "check_product", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "check_running_support", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statistics": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Check if the statistics are supported for running calculations."},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "wrap_java_call", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "calculate_correlation_statistics", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x_data": {"lazy": false}, "y_data": {"lazy": false}},"aliases": [],"description": "Given two series, get a computed CorrelationStatistics object"},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "calculate_spearman_rank", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x_data": {"lazy": false}, "y_data": {"lazy": false}},"aliases": [],"description": "Given two series, get a compute the Spearman Rank correlation"},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "calculate_correlation_statistics_matrix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}},"aliases": [],"description": "Given a set of series get CorrelationStatistics objects"},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "compute_fold", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current": {"lazy": false}, "value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "check_if_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "empty_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statistic": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "is_valid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Enso's text type.\n\nEnso's text type is natively unicode aware, and will handle arbitrary\ntextual data.","remarks": "? Concatenation\n  Enso's text type uses a rope-based structure under the hood to provide\n  users with efficient concatenation operations."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["count"],"group": "Metadata","icon": "metadata","description": "Computes the number of characters in the text.","examples": "> Example\n   Getting the length of the string \"건반(Korean)\".\n\n       \"건반(Korean)\".length","remarks": "! What is a Character?\n   A character is defined as an Extended Grapheme Cluster, see Unicode\n   Standard Annex 29. This is the smallest unit that still has semantic\n   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["concatenate"],"group": "Operators","icon": "text","description": "Concatenates the text that to the right side of this.","arguments": "- that: The text to concatenate to this.","examples": "> Example\n  Concatenating two texts.\n\n      \"Hello\" + \", world!\""},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "equals_ignore_case", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Logical","icon": "operators","description": "Checks whether `self` is equal to `that`, ignoring the case of the texts.\n\n\n\nTwo texts are considered equal ignoring case if they are of the same length\nand corresponding characters are equal ignoring case.","arguments": "- that: The text to compare `self` for case-insensitive equality with.\n- locale: The locale to use for case-insensitive comparison.","examples": "> Example\n  The string 'É' (i.e. U+00C9, LATIN CAPITAL LETTER E WITH ACUTE) is\n  equal to the string 'é' (i.e. U+00E9, LATIN SMALL LETTER E WITH ACUTE)\n  ignoring case, which is canonically the same as the string 'e\\u0301'\n  (i.e. the letter `e` followed by U+0301, COMBINING ACUTE ACCENT).\n  Therefore:\n\n      (('É' . equals_ignore_case 'é') && ('é' . equals_ignore_case 'e\\u0301')) == True","remarks": "! Unicode Equality\n  The definition of equality includes Unicode canonicalization. I.e. two\n  texts are equal if they are identical after canonical decomposition. This\n  ensures that different ways of expressing the same character in the\n  underlying binary representation are considered equal."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "to_case_insensitive_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED UNSTABLE", "returnType": "", "arguments": {"locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"description": "Unifies the case of all letters in the text, generating a key which can be\nused to perform case-insensitive comparisons."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "compare_to_ignore_case", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}, "locale": {"lazy": false, "default": "Locale.default"}},"aliases": [],"icon": "text","description": "Compare two texts to discover their ordering.","arguments": "- that: The text to order `self` with respect to.","examples": "> Example\n  Checking how \"a\" orders in relation to \"b\".\n\n      \"a\".compare_to_ignore_case \"b\""},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Check if `self` is empty.","examples": "> Example\n  Check if the text \"aaa\" is empty.\n\n      \"aaa\".is_empty","remarks": "! What is Empty?\n  Text is considered to be empty when its length is zero."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Check if `self` is not empty.","examples": "> Example\n  Check if the text \"aaa\" is not empty.\n\n      \"aaa\".not_empty","remarks": "! What is Not Empty?\n  Text is considered to be not empty when its length is greater than zero."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Conversion to Text that overrides the default `to_text` behavior."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "is_normalized", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Checks where this Text is in FCD normalized form.","examples": "> Example\n  Check if the string is normalized\n\n      \"14.95€\".is_normalized"},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "normalize", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"normalization": {"lazy": false, "default": "Normalization.NFD"}},"aliases": ["normalise"],"icon": "convert","description": "Perform Unicode normalization on the string, using the specified method.","arguments": "- normalization: The `Normalization` method to use.","examples": "> Example\n  Normalize a string.\n\n      'aśb'.normalize == 'as\\u0301b'"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": [],"description": "The basic, immutable, vector type.\nA vector allows to store an arbitrary number of elements, in linear memory.\nIt is the recommended data structure for most applications.","examples": "> Example\n  A vector containing the elements `1`, `2`, and `3`, in this order is:\n      [1, 2, 3]\n\n\n> Example\n  A vector containing 50 elements, each being the number `42`, can be\n  created by:\n      Vector.fill length=50 item=42"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"length": {"lazy": false}, "constructor": {"lazy": false}},"aliases": [],"description": "Creates a new vector of the given length, initializing elements using\nthe provided constructor function.\n\n\n\nA vector allows to store an arbitrary number of elements in linear memory. It\nis the recommended data structure for most applications.","arguments": "- length: The length of the vector (>= 0).\n- constructor: A function taking the index in the vector and returning an\n  item for that index in the vector.","examples": "> Example\n  Create a vector containing the numbers 1 through 50.\n      Vector.new 50 (ix -> ix + 1)\n\n\n> Example\n  Create a copy of the given vector (`my_vec`).\n\n      Vector.new my_vec.length (ix -> my_vec.at ix)"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "collect", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"seq": {"lazy": false}, "element": {"lazy": false, "type": "Any -> Any", "checked": true}, "next": {"lazy": false, "type": "Any -> Any", "checked": true}, "limit": {"lazy": false, "type": "Integer | Nothing", "checked": true, "default": "Nothing"}, "stop_at": {"lazy": false, "type": "Any -> Boolean", "checked": true, "default": "_==Nothing"}},"aliases": [],"description": "Collects elements of a sequence into a new vector. Various structures can be\nconverted into vector of elements. This helper methods allows to do so in an\niterative fashion. Enough to describe how to extract value from current item\nand how to advance to next item.","arguments": "- seq: the sequence to process.\n- element: A function taking the `seq` and follow ups and extracting the value to put into the vector\n- next: A function to advance to next _item_ of the sequence\n- limit: maximal number of elements to collect. Defaults to infinity.\n- stop_at: optional function like `(_==List.Nil)` to check for _end of sequence condition_.\n   By default checks for `Nothing` being the terminal element of a collection.","examples": "> Example\n  Turn a list into a vector.\n      Vector.collect (List.Cons 1 <| List.Cons 2 <| List.Nil) .x .xs stop_at=(_==List.Nil)"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "from_array", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"array": {"lazy": false}},"aliases": [],"description": "Converts an array into a vector by copying content of the array.\n\n\n\nA vector allows to store an arbitrary number of elements in linear memory. It\nis the recommended data structure for most applications.","arguments": "- array: The array with content to copy into the new vector."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "unify_vector_or_element", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "A helper method that takes a vector or an array or a single element and\nreturns a vector.\n\nIf it got a vector or array, a vector containing the same elements is\nreturned.\nIf it got a single element, a vector containing this element is returned."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "fill", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "item": {"lazy": false}},"aliases": ["repeat"],"group": "Constants","icon": "data_input","description": "Creates a new vector of the given length, filling the elements with\nthe provided constant.\n\n\n\nA vector allows to store an arbitrary number of elements in linear memory. It\nis the recommended data structure for most applications.","arguments": "- length: The length of the vector (>= 0).\n- item: A value to be placed into each element of the vector.","examples": "> Example\n  Create a vector containing 50 elements, each being the number `42`.\n\n      Vector.fill length=50 item=42"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "build", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Vector", "arguments": {"function": {"lazy": false, "type": "Builder -> Any", "checked": true}, "initial_capacity": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "propagate_warnings": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Creates a new `Vector` by passing a `Builder` to the provided function.\n\nA vector `Builder` is a mutable data structure, that allows for gathering\na number of elements and then converting them into a vector. This is\nparticularly useful when the number of elements is not known upfront.\n\n`.build` creates a new `Builder`, passes it to the provided function,\nwhich can add elements using the `Builder`'s `.append` and\n`.append_vector_range` methods. When the function is done, `.build` then\ncloses the `Builder` and returns the resulting `Vector`.\n\nThe provided function should call `.append` or `.append_vector_range` to\nadd new elements to the `Builder`. The return value of the provided\nfunction is not used, unless it is a dataflow error, in which case the\n`Vector` is not built, and the dataflow error is propagted instead.\n\nA vector allows to store an arbitrary number of elements in linear\nmemory. It is the recommended data structure for most applications.","arguments": "- function: a function taking a `Builder` and adding elements to it.\n- initial_capacity: Initial capacity of the `Builder`; this is for\n  pre-allocation and does not affect the size of the resulting `Vector`.\n- propagate_warnings: If False, do not gather warnings from values\n  added to the builder. Defaults to True.","examples": "> Example\n  Construct a vector using a builder that contains the items 1 to 5.\n\n      Vector.build builder->\n          builder.append 1\n          builder.append 2\n          builder.append 3\n      # => [1, 2, 3]","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "build_multiple", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Vector Vector", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}, "function": {"lazy": false, "type": "Builder -> Any", "checked": true}, "initial_capacity": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "propagate_warnings": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Creates multiple new `Vector`s by passing an array of `Builder`s to the\nprovided function.\n\nA vector `Builder` is a mutable data structure, that allows for gathering\na number of elements and then converting them into a vector. This is\nparticularly useful when the number of elements is not known upfront.\n\n`.build_multiple` creates an array of new `Builder`s, passes it to the\nprovided function, which can add elements to the individual `Builder`s\nusing their `.append` and `.append_vector_range` methods. When the\nfunction is done, `.build_multiple` then closes the `Builder`s and\nreturns an array of the resulting `Vector`s.\n\nThe provided function should call `.append` or `.append_vector_range` to\nadd new elements to the `Builder`s. The return value of the provided\nfunction is not used, unless it is a dataflow error, in which case the\n`Vector`s are not built, and the dataflow error is propagted instead.\n\nA vector allows to store an arbitrary number of elements in linear\nmemory. It is the recommended data structure for most applications.","arguments": "- function: a function taking an array of `Builder`s and adding elements\n  to them.\n- initial_capacity: Initial capacity of the `Builder`s; this is for\n  pre-allocation and does not affect the size of the resulting `Vector`s.","examples": "> Example\n  Construct two vectors using builders that contains the items 1 to 6.\n\n      Vector.build_multiple 2 builders->\n          builder0 = builders.at 0\n          builder0.append 0\n          builder0.append 1\n          builder0.append 2\n          builder1 = builders.at 1\n          builder1.append 3\n          builder1.append 4\n          builder1.append 5\n      # => [[0, 1, 2], [3, 4, 5]]","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "from_polyglot_array", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"array": {"lazy": false}},"aliases": [],"description": "Converts a polyglot value representing an array into a vector.\n\n\n\nThis is useful when wrapping polyglot APIs for further use in Enso.\n\nA vector allows to store an arbitrary number of elements in linear memory. It\nis the recommended data structure for most applications.","arguments": "- arr: The polyglot array value to wrap into a vector."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "to_array", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Copies content of a vector into an Array."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of elements stored in this vector.","examples": "> Example\n  Checking the length of a vector.\n\n      [1, 2, 3, 4].length"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the vector at a specified index (0-based).","arguments": "- index: The location in the vector to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back\n  of the vector, i.e. -1 will correspond to the last element.","examples": "> Example\n  Get the second element of a vector.\n\n      [1, 2, 3].at 1 == 2\n\n\n> Example\n  Get the last element of a vector.\n\n      [1, 2, 3].at -1 == 3"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the vector at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.","arguments": "- index: The location in the vector to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back\n  of the vector, i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the vector, by iteratively applying the\npassed function with next elements of the vector.\n\n\n\nIn general, the result of\n    [l0, l1, ..., ln] . fold init f\nis the same as\n    f (...(f (f init l0) l1)...) ln","arguments": "- init: The initial value for the fold.\n- function: A function taking two elements and combining them.","examples": "> Example\n  Compute the sum of all of the elements in a vector.\n\n      [0, 1, 2] . fold 0 (+)"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "fold_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the vector, by iteratively applying the\npassed function with next elements of the vector.","arguments": "- init: The initial value for the fold.\n- function: A function taking the current value, an index and an item\n  and combining them.","examples": "> Example\n  Compute the sum of all of the elements and indexes in a vector.\n\n      [0, 1, 2] . fold_with_index 0 (s->i->e->s+i+e)"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "running_fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the vector, by iteratively applying the\npassed function with the next element of the vector. After each step the\nvalue is stored resulting in a new vector of the same size as self.","arguments": "- init: The initial value for the fold.\n- function: A function taking two elements and combining them.","examples": "> Example\n  Compute the running sum of all of the elements in a vector\n\n     [1, 2, 3].running_fold 0 (+)"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "if_empty": {"lazy": true, "default": "Error.throw (Empty_Error.Error Vector)"}},"aliases": [],"icon": "column_add","description": "Combines all the elements of a non-empty vector using a binary operation.\nIf the vector is empty, it returns `if_empty`.","arguments": "- function: A binary operation that takes two items and combines them.\n- if_empty: Value returned if the vector is empty.","examples": "> Example\n  Compute the sum of all the elements in a vector.\n\n      [0, 1, 2] . reduce (+)"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Returns the first element of the vector that satisfies the condition or\n`if_missing` if no elements of the vector satisfy it.","arguments": "- condition: A `Filter_Condition` or a function that takes an element and\n  returns a boolean value specifying if it satisfies the condition.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the vector.\n- if_missing: Value returned if no element satisfies the predicate.","examples": "> Example\n  Finding a first element of the vector that is larger than 3.\n\n      [1, 2, 3, 4, 5].find (> 3)"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of an element in the vector.\nReturns Nothing if the element is not found.","arguments": "- condition: Either the element to search for, a `Filter_Condition` or a\n  predicate function to test each element.\n- start: The index to start searching from. If the index is negative, it\n  is counted from the end of the vector.","examples": "> Example\n  Find the index of an element in a vector.\n\n      [1, 2, 3].index_of 2 == 1\n\n\n> Example\n  Find the index of the first palindrome.\n\n      [\"ab\", \"abab\", \"aba\", \"bbb\"].index_of (s-> s == s.reverse) == 2"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of an element in the vector.\nReturns `Nothing` if the element is not found.","arguments": "- condition: Either the element to search for, a `Filter_Condition` or a\n  predicate function to test each element.\n- start: The index to start searching backwards from. If the index is\n  negative, it is counted from the end of the vector.","examples": "> Example\n  Find the last index of an element in a vector.\n\n      [1, 2, 3, 1, 2, 3].last_index_of 2 == 4\n\n\n> Example\n  Find the index of the last palindrome.\n\n      [\"ab\", \"abab\", \"aba\", \"bbb\"].last_index_of (s-> s == s.reverse) == 3"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a predicate holds for at least one element of self vector.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Checking if any element of the vector is larger than 3.\n\n      [1, 2, 3, 4, 5].any (..Greater than=3)\n\n\n> Example\n  Checking if any element of the vector is even.\n\n      [1, 2, 3, 4, 5].any (x-> x%2 == 0)"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition holds for all elements in this vector.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Check if all elements in the vector are less than zero.\n\n      [-1, 1, 5, 8].all (..Less than=0)\n\n\n> Example\n  Check if all elements in the vector are even.\n\n      [-1, 1, 5, 8].all (x-> x%2 == 0)"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"elem": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether this vector contains a given value as an element.","arguments": "- elem: The item to see if it exists in the vector.","examples": "> Example\n  Checking if the vector contains the number 72.\n\n      [1, 383, 72, 301].contains 72"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this vector is empty.","examples": "> Example\n  Checking for emptiness.\n\n      [].is_empty"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this vector is not empty.","examples": "> Example\n  Checking for non-emptiness.\n\n      [1].not_empty"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Selects all elements of this vector which satisfy a condition.","arguments": "- filter: The filter to apply to the vector. It can either be an instance\n  of `Filter_Condition` or a predicate taking a value and returning a\n  boolean value indicating whether the corresponding element should be\n  kept or not.","examples": "> Example\n  Selecting all elements that are greater than 3.\n\n      [1, 2, 3, 4, 5].filter (> 3)\n      [1, 2, 3, 4, 5].filter (..Greater than=3)"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "filter_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"group": "Selections","icon": "preparation","description": "Selects all elements of this vector which satisfy a predicate.","arguments": "- predicate: A function that takes an index and a list element and\n  returns a boolean value that says whether that value should be included\n  in the result.","examples": "> Example\n  Selecting all elements which are equal to their position in the vector.\n\n      [0, 10, 2, 2].filter (==) == [0, 2]"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "partition", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "split","description": "Partitions the vector into `Vector`s of elements which satisfy a given\ncondition and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of elements\nwhich did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input vector.","arguments": "- condition: A `Filter_Condition` or a predicate function to test each\n  element.","examples": "> Example\n  Splitting a vector into elements that start with a prefix.\n\n      [\"a\", \"b\", \"ax\", \"bx\"].partition (..Starts_With \"a\") == (Pair [\"a\", \"ax\"] [\"b\", \"bx\"])\n\n\n> Example\n  Splitting a vector into even and odd elements.\n\n      [1, 2, 3, 4, 5].partition (x -> x % 2 == 0) == (Pair [2, 4] [1, 3, 5])"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "partition_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"icon": "preparation","description": "Partitions the vector into `Vector`s of elements which satisfy a given\npredicate and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of elements\nwhich did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input vector.","arguments": "- predicate: A function that takes an index and an element and returns a\n  boolean value.","examples": "> Example\n  Splitting a vector into elements at even and odd positions.\n\n      [\"a\", \"b\", \"c\", \"d\"].partition_with_index (ix -> _ -> ix % 2 == 0) == (Pair [\"a\", \"c\"] [\"b\", \"d\"])"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "transpose", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "map_row","description": "Swaps the rows and columns of a matrix represented by a vector of vectors.","examples": "> Example\n  Transpose a vector of vectors.\n\n      matrix = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\n      # +---+---+---+\n      # | 0 | 1 | 2 |\n      # +---+---+---+\n      # | 3 | 4 | 5 |\n      # +---+---+---+\n      # | 6 | 7 | 8 |\n      # +---+---+---+\n\n      transposed = [[0, 3, 6], [1, 4, 7], [2, 5, 8]]\n      # +---+---+---+\n      # | 0 | 3 | 6 |\n      # +---+---+---+\n      # | 1 | 4 | 7 |\n      # +---+---+---+\n      # | 2 | 5 | 8 |\n      # +---+---+---+\n\n      matrix.transposed == transposed\n      # => True","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "column_add","description": "Applies a function to each element of the vector, returning the `Vector` of\nresults.","arguments": "- function: A function that takes an element in the vector and returns\n  some transformation of that element.\n- on_problems: Specifies how to handle any problems that arise in\n  `function`.","examples": "> Example\n  Add 1 to each element of the vector.\n\n      [1, 2, 3] . map +1","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "flat_map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "union","description": "Applies a function to each element of the vector, returning the `Vector`\nthat contains all results concatenated.","arguments": "- function: A function that takes an element in the vector, transforms\n  it, and returns a `Vector`.\n- on_problems: Specifies how to handle any problems that arise in\n  `function`.","examples": "> Example\n  Replace each number `n` in the vector with itself repeated n times.\n\n     [0, 1, 2] . flat_map (n -> Vector.fill n n)","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "flatten", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Calculations","icon": "union","description": "Transforms a vector of vectors into a `Vector` of inner elements - removes\none layer of nesting from a stack of nested vectors.","examples": "> Example\n  Flatten a vector of vectors of numbers.\n\n     [[1, 2, 3], [4, 10], [], [0], [0]] . flatten == [1, 2, 3, 4, 10, 0, 0]"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "map_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "column_add","description": "Applies a function to each element of the vector, returning the `Vector`\nof results.\n\n\n\nThe function is called with both the element index as well as the\nelement itself.","arguments": "- function: A function that takes an index and an item and calculates a\n  new value for at that index.\n- on_problems: Specifies how to handle any problems that arise in\n  `function`.","examples": "> Example\n  Sum numbers with their indices in a vector.\n\n      [1, 2, 3].map_with_index (+)","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the vector.\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.\n\nIf the function returns a dataflow error, the error is converted to a\npanic and thrown immediately stopping further processing.","arguments": "- function: A function to apply to each element of the vector.","examples": "> Example\n  Print each element in the vector to standard output.\n\n      [1, 2, 3, 4, 5] . each IO.println"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "each_with_index", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the vector.\n\n\n\nThe function is called with both the element index as well as the\nelement itself.\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.","arguments": "- function: A function to apply that takes an index and an item.","examples": "> Example\n  Print each element in the vector to standard output.\n\n      [1, 2, 3, 4, 5] . each_with_index (ix->elem-> IO.println Pair ix elem)"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the vector, returning a `Vector` with the same elements, but in\nthe opposite order.","examples": "> Example\n  Reverse a two-element vector.\n\n      [1, 2].reverse"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generates a human-readable text representation of the vector."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "short_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"max_entries": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}},"aliases": [],"description": "Generates a human-readable text representation of the vector, keeping its\nlength limited.","arguments": "- max_entries: The maximum number of entries that are displayed. If the\n  vector contains more elements, the number of hidden elements is also\n  displayed.","examples": "> Example\n  Convert a large vector of numbers to a short text.\n\n      (0.up_to 100).to_vector.short_display_text max_entries=2 == \"[0, 1 and 98 more elements]\""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector | Array", "checked": true}},"aliases": ["append", "concatenate", "union"],"group": "Operators","icon": "union","description": "Concatenates two vectors, resulting in a new `Vector`, containing all the\nelements of `self`, followed by all the elements of `that`.","arguments": "- that: The vector to concatenate to the end of `self`.","examples": "> Example\n  Concatenate two single-element vectors.\n\n      [1] + [2]"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "insert", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"at": {"lazy": false, "default": "self.length"}, "item": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Calculations","icon": "row_add","description": "Inserts the given item into the vector at the given index.","arguments": "- at: The index at which to insert the item before.\n  If the index is less than 0, the index will be counted back from the\n  end. If the index is equal to the length of the vector, the item will\n  be appended to the end of the vector.\n- item: The item to insert into the vector.","examples": "> Example\n  Insert 'X' into a vector at different locations:\n\n     ['a', 'b', 'c'].insert 1 'X' == ['a', 'X', 'b', 'c']\n     ['a', 'b', 'c'].insert -1 'X' == ['a', 'b', 'X', 'c']\n     ['a', 'b', 'c'].insert item='X' == ['a', 'b', 'c', 'X']"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "remove", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"at": {"lazy": false, "default": "-1"}},"aliases": [],"group": "Selections","icon": "table_clean","description": "Removes the item at the given index from the vector.","arguments": "- at: The index at which to remove the item.\n  If the index is less than 0, the index will be counted back from the\n  end."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"separator": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- separator (optional): The text to use to join the textual elements of the vector."}, "prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- prefix (optional): The prefix to add at the beginning."}, "suffix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- suffix (optional): The suffix to add at the end."}},"aliases": [],"group": "Calculations","icon": "join","description": "When `self` is a vector of text values, concatenates all the values by\ninterspersing them with `separator`.","arguments": "- separator (optional): The text to use to join the textual elements of the vector.\n- prefix (optional): The prefix to add at the beginning.\n- suffix (optional): The suffix to add at the end.","examples": "> Example\n  Join the elements of the vector together as a string.\n\n      [\"foo\", \"bar\", \"baz\"].join \", \""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "slice", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": [],"description": "Creates a new vector with the skipping elements until `start` and then\ncontinuing until `end` index.","arguments": "- start: The index of the first element to include.\n- end: The index to stop slicing at.","examples": "> Example\n  Remove the first 2 elements then continue until index 5 from the vector.\n\n      [1, 2, 3, 4, 5, 6, 7, 8].slice 2 5 == [3, 4, 5]"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Selections","icon": "parse3","description": "Creates a new `Vector` with only the specified range of elements from the\ninput, removing any elements outside the range.","arguments": "- range: The section of the this vector to return.\n  If an `Index_Sub_Range`, then the selection is interpreted following\n  the rules of that type.\n  If a `Range`, the selection is specified by two indices, from and to."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Selections","icon": "parse3","description": "Creates a new `Vector`, removing any elements from the specified range.","arguments": "- range: The section of the this vector to return.\n  If an `Index_Sub_Range`, then the selection is interpreted following\n  the rules of that type.\n  If a `Range`, the selection is specified by two indices, from and to."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}, "function": {"lazy": false, "default": "[_,_]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": ["combine", "join by row position", "merge"],"group": "Calculations","icon": "join2-1","description": "Performs a pair-wise operation passed in `function` on consecutive\nelements of `self` and `that`.\n\n\n\nThe result of this function is a `Vector` of length being the shorter of\n`self` and `that`, containing results of calling `function`.","arguments": "- that: The vector to zip with `self`.\n- function: The function used to combine pairwise elements of `self` and\n  `that`.\n- on_problems: Specifies how to handle any problems that arise in\n  `function`.","examples": "> Example\n  Calculate the pairwise sum of two vectors.\n\n      [1, 2, 3].zip [4, 5, 6] (+)\n\n\n> Example\n  When the `function` is not provided, it defaults to creating a pair\n  of both elements.\n\n      [1, 2, 3].zip [4, 5, 6] == [[1, 4], [2, 5], [3, 6]]","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "pad", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "elem": {"lazy": false}},"aliases": [],"group": "Calculations","icon": "union","description": "Extend `self` vector to the length of `n` appending elements `elem` to\nthe end.\n\n\n\nIf the new length `n` is less than existing length, `self` vector is\nreturned.","arguments": "- n: The length to pad `self` out to.\n- elem: The element to fill the new padded slots with.","examples": "> Example\n  Extending vector to the length of 5\n\n      [1, 2, 3].pad 5 0 == [1, 2, 3, 0, 0]\n\n\n> Example\n  Extending vector to the length of 5\n\n      [1, 2, 3, 4, 5].pad 5 0 == [1, 2, 3, 4, 5]"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the first element from the vector, or an `Index_Out_Of_Bounds` if the vector\nis empty.","examples": "> Example\n  The following code returns 1.\n\n      [1, 2, 3, 4].first"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get the last element of the vector, or an `Index_Out_Of_Bounds` if the vector is\nempty.","examples": "> Example\n  The following code returns 4.\n\n      [1, 2, 3, 4].last"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the second element from the vector, or a `Index_Out_Of_Bounds` if the\nvector doesn't have a second element.\n\nUseful when tuples are implemented as vectors.","examples": "> Example\n  The following code returns 2.\n\n      [1, 2, 3, 4].second"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"order": {"lazy": false, "default": "Sort_Direction.Ascending"}, "on": {"lazy": false, "default": "Nothing"}, "by": {"lazy": false, "default": "Nothing"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Ignore"}},"aliases": ["order_by"],"group": "Calculations","icon": "order","description": "Sort the vector.\n\n\n\nBy default, elements are sorted in ascending order.\n\nThis is a stable sort, meaning that items that compare the same will not\nhave their order changed by the sorting process.","arguments": "- order: The order in which the vector elements are sorted.\n- on: A projection from the element type to the value of that element\n  being sorted on. If set to `Nothing` (the default),\n  identity function will be used.\n- by: A function that compares the result of applying `on` to two\n  elements, returning an an `Ordering` if the two elements are comparable\n  or `Nothing` if they are not. If set to `Nothing` (the default argument),\n  `Ordering.compare _ _` method will be used.\n- on_problems: A `Problem_Behavior` specifying what should happen if two\n  incomparable values are encountered.","examples": "> Example\n  Sorting a vector of numbers.\n\n      [5, 2, 3, 45, 15].sort == [2, 3, 5, 15, 45]\n\n\n> Example\n  Sorting a vector of `Pair`s on the first element, descending.\n\n      [Pair 1 2, Pair -1 8].sort Sort_Direction.Descending (_.first)\n\n\n> Example\n  Sorting a vector with elements with different comparators. Values `1`\n  and `My_Type` have different comparators. `1` will be sorted before `My_Type`\n  because it has the default comparator.\n\n      [My_Type.Value 'hello', 1].sort == [1, My_Type.Value 'hello']","remarks": "! Computational Complexity\n  The complexities for this sort are:\n  - *Worst-Case Time:* `O(n * log n)`\n  - *Best-Case Time:* `O(n)`\n  - *Average Time:* `O(n * log n)`\n  - *Worst-Case Space:* `O(n)` additional\n\n\n? Incomparable values\n  Incomparable values are either values with different comparators or with\n  the same comparator returning `Nothing` from its `compare` method.\n  See the documentation of the `Ordering` module for more info.\n\n\n? Implementation Note\n  The sort implementation is based upon an adaptive, iterative mergesort\n  that requires far fewer than `n * log(n)` comparisons when the vector\n  is partially sorted. When the vector is randomly ordered, the\n  performance is equivalent to a standard mergesort.\n\n\n? Multiple comparators\n  Elements with different comparators are incomparable by definition.\n  This case is handled by first grouping the `self` vector into groups\n  with the same comparator, recursively sorting these groups, and then\n  merging them back together. The order of the sorted groups in the\n  resulting vector is based on the order of fully qualified names of\n  the comparators in the `self` vector, with the exception of the group\n  for the default comparator, which is always the first group.\n\n  Additionally, an `Incomparable_Values` dataflow error will be returned\n  if the `on_problems` parameter is set to `Report_Error`, or a warning\n  attached if the `on_problems` parameter is set to `Report_Warning` in\n  case of encountering incomparable values.\n\n  It takes equal advantage of ascending and descending runs in the array,\n  making it much simpler to merge two or more sorted arrays: simply\n  concatenate them and sort."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "distinct", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on": {"lazy": false, "default": "x-\u003ex"}},"aliases": ["deduplicate", "unique"],"group": "Selections","icon": "preparation","description": "Keeps only unique elements within the vector, removing any duplicates.\n\n\n\nThe returned unique elements are kept in the same order as they appeared\nin the input.\n\nOut of multiple equivalent (equal up to the `on` projection) elements,\nalways the one appearing first in the input is kept.","arguments": "- on: A projection from the element type to the value of that element\n      which determines the uniqueness criteria.","examples": "> Example\n  Removing repeating entries.\n\n      [1, 3, 1, 2, 2, 1] . distinct == [1, 3, 2]\n\n\n> Example\n  Keeping only pairs whose first elements are unique.\n\n      [Pair 1 \"a\", Pair 2 \"b\", Pair 1 \"c\"] . distinct (on = _.first) == [Pair 1 \"a\", Pair 2 \"b\"]"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "duplicates", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on": {"lazy": false, "default": "x-\u003ex"}},"aliases": ["duplicates"],"group": "Selections","icon": "preparation","description": "Returns only non-unique elements within the vector.\n\n\n\nThe returned duplicate elements are kept in the same order as the\nfirst duplicate appeared in the input.","arguments": "- on: A projection from the element type to the value of that element\n      which determines the uniqueness criteria.","examples": "> Example\n  Removing unique entries.\n\n      [1, 3, 1, 2, 2, 1] . duplicates == [1, 1, 2, 2, 1]"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Returns the vector as a `Vector`."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "to_list", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Converts the vector to a list with the same elements."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Builder", "arguments": {"elements_java_builder": {"lazy": false}, "warnings_java_builder": {"lazy": false}, "propagate_warnings": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "A builder type for Enso vectors.\n\n\n\nA vector builder is a mutable data structure, that allows to gather a\nnumber of elements and then convert them to a vector. This is\nparticularly useful when the number of elements is not known upfront.\n\nThere are two ways to create and use a `Builder`: `Builder.new`\nand `Vector.build`. `.build` is the preferred approach.\n- `Builder.new`: creates a new `Builder`, which you have to\n  \"close\" with `.to_vector` at the end to get your newly-created\n  `Vector`.\n- `Vector.build`: takes a function which uses the `Builder`, and\n  automatically \"closes\" and returns the newly-created `Vector`.","arguments": "- elements_java_builder: The accumulator for the new vector.\n- warnings_java_builder: The accumulator for `Warning`s that were\n  attached to values added to the builder.\n- propagate_warnings: If False, do not gather warnings from values\n  added to the builder. Defaults to True.","examples": "> Example\n  Append three items.\n\n      Vector.build builder->\n          builder.append 1\n          builder.append 2\n          builder.append 3\n      # => [1, 2, 3]","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Builder", "arguments": {"capacity": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "propagate_warnings": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Creates a new vector builder instance.\n\n`Vector.build` is the preferred way to build `Vector`s.\n\nA vector `Builder` is a mutable data structure, that allows for gathering\na number of elements and then converting them into a vector. This is\nparticularly useful when the number of elements is not known upfront.\n\nA vector allows to store an arbitrary number of elements in linear\nmemory. It is the recommended data structure for most applications.\n\nThe `Vector.build` method is preferred over direct use of `Builder.new`,\nsince it automatically closes and returns the finished `Vector`. The\n`Builder.new` approach requires the caller to explicitly call `to_vector`\nat the end, which can be more flexible within imperative code.","arguments": "- capacity: Initial capacity of the Vector.Builder\n- propagate_warnings: If False, do not gather warnings from values\n  added to the builder. Defaults to True.","examples": "> Example\n  Construct a vector using a builder that contains the items 1 to 5.\n\n      builder = Builder.new 5\n      do_build start stop =\n          builder.append start\n          if start >= stop then Nothing else\n              @Tail_Call do_build start+1 stop\n      do_build 1 5\n      builder.to_vector\n      # => [1, 2, 3, 4]"},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "append", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing ! Error", "arguments": {"item": {"lazy": false, "type": "Any ! Error", "checked": true}},"aliases": [],"icon": "join","description": "Appends a new element into this builder.","arguments": "- item: The item to append to the vector builder.","examples": "> Example\n  Append three items.\n\n      Vector.build builder->\n          builder.append 1\n          builder.append 2\n          builder.append 3\n      # => [1, 2, 3]","remarks": "? Appending Dataflow Errors\n\n  If a dataflow error is added to the builder, the result depends on\n  whether the `Builder` is being used from `.build` or created directly\n  with `new`.\n\n  - When using `.build`: The dataflow error is re-thrown by the containing\n    invocation of `Vector.build`.  The error is not added to the builder.\n\n  - When using `Builder.new` directly : The dataflow error is wrapped in\n    a `Wrapped_Dataflow_Error` and thrown as a `Panic`. The error is not\n    added to the builder."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "append_vector_range", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing ! Error", "arguments": {"vector": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "end": {"lazy": false, "default": "vector.length"}},"aliases": [],"icon": "join","description": "Appends a part of a given vector to this builder, propagating any errors\nthat the provided elements could have contained.","arguments": "- vector: The vector from which the elements are sourced.\n- start: The start index of the range to append.\n- end: The end index (the first index after the last element to be\n  appended) of the range to be appended.","examples": "> Example\n  Append a vector.\n\n     Vector.build builder->\n         builder.append_vector_range [1, 2]\n     # => [1, 2]\n\n\n> Example\n  Append a part of a vector.\n\n      Vector.build builder->\n          builder.append_vector_range [20, 30, 40, 50] 1 3\n      # => [30, 40]","remarks": "? Appending Dataflow Errors\n\n  If a dataflow error is added to the builder, the result depends on\n  whether the `Builder` is being used from `.build` or created directly\n  with `new`.\n\n  - When using `.build`: The dataflow error is re-thrown by the containing\n    invocation of `Vector.build`.  The error is not added to the builder.\n\n  - When using `Builder.new` directly : The dataflow error is wrapped in\n    a `Wrapped_Dataflow_Error` and thrown as a `Panic`. The error is not\n    added to the builder."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "add_warnings", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Save any attached warnings in self.warnings_java_builder."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "unsafe_append", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"item": {"lazy": false}},"aliases": [],"description": "Appends a new element into this builder.","arguments": "- item: The item to append to the vector builder.","remarks": "? Propagating Dataflow Errors\n\n  Since this is an imperative operation which returns Nothing, if the\n  item to be appended contained a dataflow error, the operation will fail\n  and unless its result is inspected, the error can very easily be\n  ignored. To avoid this, prefer to use the `append` operation which will\n  ensure that dataflow errors are propagated, and not added to the\n  `Builder`.`"},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the vector builder at a specified index (0-based).","arguments": "- index: The location in the vector to get the element from. The index is\n  also allowed be negative, then the elements are indexed from the back\n  of the vector, i.e. -1 will correspond to the last element."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the first element from the vector, or an `Index_Out_Of_Bounds` if the vector\nis empty.","examples": "> Example\n  The following code returns 1.\n\n      [1, 2, 3, 4].first"},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get the last element of the vector, or an `Index_Out_Of_Bounds` if the vector is\nempty.","examples": "> Example\n  The following code returns 4.\n\n      [1, 2, 3, 4].last"},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the current length of the builder."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this builder is empty."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this builder is not empty."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a predicate holds for at least one element of this builder.","arguments": "- condition: A `Filter_Condition` or a function that takes a vector\n  element and returns a boolean value that says whether that value\n  satisfies a condition."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Clones the builder into a Vector."},
{"module": "Standard.Base.Data.Vector", "type": "Map_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Map_Error", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true}, "inner_error": {"lazy": false}},"aliases": [],"description": "Creates a new `Map_Error` from the given index and underlying error."},
{"module": "Standard.Base.Data.Vector", "type": "Map_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Vector", "type": "No_Wrap", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Wrap", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Vector", "type": "Wrapped_Error", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Map_Error", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "XML_Document", "arguments": {"java_document": {"lazy": false, "type": "Document", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "from_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}},"aliases": [],"icon": "data_input","description": "Read an XML document from a file.\nIf there is an error reading the file, `File_Error` is thrown.\nIf there is a parsing error, `XML_Error.Parse_Error` is thrown.","arguments": "- file: the `File` to read the XML document from.","examples": "> Example\n  Read an XML document in 'doc.xml'.\n\n      file = enso_project.data / \"doc.xml\"\n      doc = XML_Document.from_file test_file"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "from_stream", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}},"aliases": [],"icon": "data_input","description": "Read an XML document from an input stream.\nIf there is a parsing error, `XML_Error.Parse_Error` is thrown.","arguments": "- input_stream: the input stream to read the XML document from.","examples": "> Example\n  Read an XML document from an input_stream.\n\n      doc = XML_Document.from_stream input_stream"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "from_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"xml_string": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Conversions","icon": "convert","description": "Read an XML document from a string.\nIf there is a parsing error, `XML_Error.Parse_Error` is thrown.","arguments": "- xml_string: The string to read the XML document from.","examples": "> Example\n  Read an XML document from an string.\n\n      xml_string = \"<foo></foo>\"\n      doc = XML_Document.from_text xml_string"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"doc": {"lazy": false, "type": "Document", "checked": true}},"aliases": [],"description": "Wrap Java's Document to XML_Document"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "root_element", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the root element of the document.","examples": "> Example\n  Get the root element of a document.\n\n      doc = XML_Document.from_file file\n      root = doc.root_element"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the tag of the root XML element of the document.","examples": "> Example\n  Get the tag of an XML document's root element.\n\n      XML_Document.from_text '<foo>hello</foo>' . name\n      # => \"foo\""},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\".\""}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets a child element of an XML document.","arguments": "- key: If an `Integer`, returns the element at position `at` in its list\n  of children. If `Text`, then if starts with `\"@\"`, returns the\n  attribute with the given name otherwise returns the first child element\n  with the given name.","examples": "> Example\n  Get the first child of the document (the root element).\n\n      XML_Document.from_text '<foo><baz>hello</baz></foo>' . get 0\n      # => XML_Document.from_text \"<foo><baz>hello</baz></foo>\" . root_element\n\n\n> Example\n  Get the child of the document (the root element) by name.\n\n      root = XML_Document.from_text '<foo bar=\"one\">hello</foo>' . get \"foo\"\n      # => XML_Document.from_text \"<foo><baz>hello</baz></foo>\" . root_element"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "get_child_element", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\".\""}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets the child element of the inner XML Element","arguments": "- key: If an `Integer`, returns the element at position `at` in its list\n  of children. If `Text`, then if starts with `\"@\"`, returns the\n  attribute with the given name otherwise returns the first child element\n  with the given name."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\".\""}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets a child or attribute of an XML document.","arguments": "- key: If an `Integer`, returns the element at position `at` in its list\n  of children. If a `Text`, treats `key` starts with `\"@\"`, returns the\n  attribute with the given name otherwise returns the first child element\n  with the given name.\n- if_missing: The value returned if the key does not exist.","examples": "> Example\n  Get the first child of the document (the root element).\n\n      XML_Document.from_text '<foo><baz>hello</baz></foo>' . at 0\n      # => XML_Document.from_text \"<foo><baz>hello</baz></foo>\" . root_element\n\n\n> Example\n  Get the child of the document (the root element) by name.\n\n      root = XML_Document.from_text '<foo bar=\"one\">hello</foo>' . get \"foo\"\n      # => XML_Document.from_text \"<foo><baz>hello</baz></foo>\" . root_element"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "outer_xml", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the raw XML of the document.","examples": "> Example\n  Get the outer XML of the document.\n\n      XML_Document.from_text '<foo>hello</foo>' . outer_xml\n      # => '<foo>hello</foo>'"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "inner_xml", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the raw XML of the document.","examples": "> Example\n  Get the inner XML of the document.\n\n      XML_Document.from_text '<foo><bar>hello</bar></foo>' . inner_xml\n      # => '<foo><bar>hello</bar></foo>'"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "Existing_File_Behavior.Backup"}, "include_xml_declaration": {"lazy": false, "type": "Boolean", "checked": true, "default": "Boolean.True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["export", "output", "save", "to_file"],"group": "Output","icon": "data_output","description": "Writes (or appends) the xml to the specified file using the supplied\nencoding. The behavior specified in the `existing_file` parameter will be\nused if the file exists.\n\nAppending will probably not work as expected for XML documents, as it will\nappend after the root element, which is not valid XML.\n\n\n\nIf a character cannot be converted to a byte, an `Encoding_Error` is raised.\nIf `on_problems` is set to `Report_Warning` or `Ignore`, it is replaced with\na substitute (either '�' (if Unicode) or '?' depending on the encoding).\nOtherwise, the process is aborted.\nIf the path to the parent location cannot be found or the filename is\ninvalid, a `File_Error.Not_Found` is raised.\nIf another error occurs, such as access denied, an `File_Error.IO_Error` is\nraised.\nOtherwise, the file is created with the encoded xlm written to it.\n\nThe method returns a `File` object for the written file.","arguments": "- path: The path to the target file.\n- encoding: The encoding to use when writing the file.\n- on_existing_file: Specifies how to proceed if the file already exists.\n- include_xml_declaration: Specifies whether to include the XML declaration\n  in the output. (e.g. `<?xml version=\"1.0\" encoding=\"UTF-8\"?>`)\n- on_problems: Specifies how to handle any encountered problems.","remarks": "? Dry Run\n\n    If writing to Output context is not enabled (such as in \"Design\" mode),\n    then this function will write to a temporary file. This temporary file will\n    be automatically deleted on exit of the Enso process.\n\n    This allows for building the workflow without affecting the real files."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "children", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "array_new","description": "Gets the child elements of an XML document.","examples": "> Example\n      XML_Document.from_text '<foo><baz>hello</baz></foo>' . children\n      # => [XML_Element'<foo><baz>hello</baz></foo>']"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "child_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the number children of an XML document.\n\n`child_count` only counts child elements and child text nodes that are\nnot 100% whitespace. Other node types, such as comments, are not included\nin the count.","examples": "> Example\n  Get the number of children of an document.\n\n      XML_Document.from_text '<foo> <bar>hello</bar> <bar>hello2</bar>< </foo>' . child_count\n      # => 1"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "child_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "text","description": "Gets the unique set of child names of an XML document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "attribute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "if_missing": {"lazy": true, "default": "Error.throw (No_Such_Key.Error self name)"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Get an attribute of an XML document.","arguments": "- name: The name of the attribute to get.\n- if_missing: The value returned if the attribute does not exist."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "attribute_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets a set of the attributes of an XML document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "attributes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "array_new","description": "Gets a Dictionary containing of the attributes of an XML document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "metadata","description": "Gets the text (non-markup) contents of the element and its descendants,\nif any."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "get_xpath", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Get elements denoted by the given XPath key.","arguments": "- key: The XPath string to use to search for elements.","examples": "> Example\n  Get an element by xpath.\n\n      root = XML_Document.from_file test_file\n      root.get_xpath \"/class/teacher[1]/firstname\"\n      # => [XML_Document.from_text \"<firstname>Alice</firstname>\" . root_element]"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "get_children_by_tag_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tag_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Gets child elements matching a given tag name.","arguments": "- tag_name: The tag name to search for."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "get_descendants_by_tag_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tag_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Gets descendant elements matching a given tag name.\nThis searches through all descendants of the node, not just immediate children.","arguments": "- tag_name: The tag name to search for.","examples": "> Example\n      XML_Document.from_text '<foo> <baz>hello</baz> <bar>and</bar> <baz>goodbye</baz> </foo>' . root_element . get_descendants_by_tag_name \"baz\"\n      # => [XML_Document.from_text \"<baz>hello</baz>\" . root_element, XML_Document.from_text \"<baz>goodbye</baz>\" . root_element]"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this XML_Document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this XML_Document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "to_default_visualization_data", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Transform the XML document into text for displaying as part of its\ndefault visualization."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "XML_Element", "arguments": {"java_element": {"lazy": false, "type": "Element", "checked": true}, "children_cache": {"lazy": true, "type": "Vector (XML_Element | Text)", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_element": {"lazy": false}},"aliases": [],"description": "Build a new XML_Element, populating the lazy `children_cache` field."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the tag of an XML element.","examples": "> Example\n  Get the tag of an XML element.\n\n      XML_Document.from_text '<foo>hello</foo>' . root_element . name\n      # => \"foo\""},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\".\""}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets a child of an XML element.","arguments": "- key: If an `Integer`, returns the element at position `at` in its list\n  of children. If a `Text`, if `key` starts with `\"@\"`, returns the\n  attribute with the given name otherwise returns the first child element\n  with the given name.\n- if_missing: The value returned if the key does not exist.","examples": "> Example\n    XML_Document.from_text '<foo><baz>hello</baz></foo>' . root_element . get 0\n    # => XML_Document.from_text \"<baz>hello</baz>\" . root_element\n\n\n> Example\n  Get a tag attribute.\n\n      root = XML_Document.from_text '<foo bar=\"one\">hello</foo>' . root_element . get \"@bar\"\n      # => \"one\""},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\".\""}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets a child or attribute of an XML element.","arguments": "- key: If an `Integer`, returns the element at position `at` in its list\n  of children. If a `Text`, if `key` starts with `\"@\"`, returns the\n  attribute with the given name otherwise returns the first child element\n  with the given name.","examples": "> Example\n  Get a nested tag:\n\n      XML_Document.from_text '<foo><baz>hello</baz></foo>' . root_element . at 0\n      # => XML_Document.from_text \"<baz>hello</baz>\" . root_element\n\n\n> Example\n  Get a tag attribute.\n\n      root = XML_Document.from_text '<foo bar=\"one\">hello</foo>' . root_element\n      root.at \"@bar\"\n      # => \"one\""},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "children", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "array_new","description": "Gets the child elements of an XML element.\n\n`children` only returns child elements and child text nodes that are not\n100% whitespace. Other node types, such as comments, are not included.","examples": "> Example\n      XML_Document.from_text '<foo><baz>hello</baz></foo>' . root_element . children\n      # => [XML_Document.from_text \"<baz>hello</baz>\"]"},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "child_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the number children of an XML element.\n\n`child_count` only counts child elements and child text nodes that are\nnot 100% whitespace. Other node types, such as comments, are not included\nin the count.","examples": "> Example\n  Get the number of children of an element.\n\n      XML_Document.from_text '<foo> <bar>hello</bar> <bar>hello2</bar>< </foo>' . root_element . child_count\n      # => 2"},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "child_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "text","description": "Gets the unique set of child names of an XML element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "attribute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "if_missing": {"lazy": true, "default": "Error.throw (No_Such_Key.Error self name)"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Get an attribute of an XML element.","arguments": "- name: The name of the attribute to get.\n- if_missing: The value returned if the attribute does not exist.","examples": "> Example\n  Get an attribute of an element.\n\n      root = XML_Document.from_text '<foo bar=\"one\">hello</foo>' . root_element\n      root.attribute \"bar\"\n      # => \"one\""},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "attribute_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets a set of the attributes of an XML element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "attributes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "array_new","description": "Gets a Dictionary containing of the attributes of an XML element.","examples": "> Example\n    XML_Document.from_text '<foo bar=\"one\">hello</foo>' . root_element . attributes\n    # => Dictionary.from_vector [[\"bar\", \"one\"]]"},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "metadata","description": "Gets the text (non-markup) contents of the element and its descendants,\nif any.","examples": "> Example\n  Get the text content of an element.\n\n      XML_Document.from_text '<foo>hello</foo>' . root_element . text\n      # => \"hello\""},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "outer_xml", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the raw XML of the element (including tag, attributes and contents).","examples": "> Example\n  Get the outer XML of an element.\n\n      XML_Document.from_text '<foo>hello</foo>' . root_element . outer_xml\n      # => '<foo>hello</foo>'"},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "inner_xml", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the raw XML of the contents of the element, not including the\noutermost tag and attributes.","examples": "> Example\n  Get the inner XML of an element.\n\n      XML_Document.from_text '<foo><bar>hello</bar></foo>' . root_element . inner_xml\n      # => '<bar>hello</bar>'"},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "Existing_File_Behavior.Backup"}, "include_xml_declaration": {"lazy": false, "type": "Boolean", "checked": true, "default": "Boolean.True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["export", "output", "save", "to_file"],"group": "Output","icon": "data_output","description": "Writes (or appends) the xml to the specified file using the supplied\nencoding. The behavior specified in the `existing_file` parameter will be\nused if the file exists.\n\nAppending will probably not work as expected for XML documents, as it will\nappend after the root element, which is not valid XML.\n\n\n\nIf a character cannot be converted to a byte, an `Encoding_Error` is raised.\nIf `on_problems` is set to `Report_Warning` or `Ignore`, it is replaced with\na substitute (either '�' (if Unicode) or '?' depending on the encoding).\nOtherwise, the process is aborted.\nIf the path to the parent location cannot be found or the filename is\ninvalid, a `File_Error.Not_Found` is raised.\nIf another error occurs, such as access denied, an `File_Error.IO_Error` is\nraised.\nOtherwise, the file is created with the encoded xlm written to it.\n\nThe method returns a `File` object for the written file.","arguments": "- path: The path to the target file.\n- encoding: The encoding to use when writing the file.\n- on_existing_file: Specifies how to proceed if the file already exists.\n- include_xml_declaration: Specifies whether to include the XML declaration\n  in the output. (e.g. `<?xml version=\"1.0\" encoding=\"UTF-8\"?>`)\n- on_problems: Specifies how to handle any encountered problems.","remarks": "? Dry Run\n\n    If writing to Output context is not enabled (such as in \"Design\" mode),\n    then this function will write to a temporary file. This temporary file will\n    be automatically deleted on exit of the Enso process.\n\n    This allows for building the workflow without affecting the real files."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "get_xpath", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Get elements denoted by the given XPath key.","arguments": "- key: The XPath string to use to search for elements.","examples": "> Example\n  Get an element by xpath.\n\n      root = XML_Document.from_file test_file . root_element\n      root.get_xpath \"/class/teacher[1]/firstname\"\n      # => [XML_Document.from_text \"<firstname>Alice</firstname>\" . root_element]"},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "get_children_by_tag_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tag_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Gets child elements matching a given tag name.","arguments": "- tag_name: The tag name to search for."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "get_descendants_by_tag_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tag_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Gets descendant elements matching a given tag name.\nThis searches through all descendants of the node, not just immediate children.","arguments": "- tag_name: The tag name to search for.","examples": "> Example\n      XML_Document.from_text '<foo> <baz>hello</baz> <bar>and</bar> <baz>goodbye</baz> </foo>' . root_element . get_descendants_by_tag_name \"baz\"\n      # => [XML_Document.from_text \"<baz>hello</baz>\" . root_element, XML_Document.from_text \"<baz>goodbye</baz>\" . root_element]"},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this XML_Element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this XML_Element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "to_default_visualization_data", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"nested": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "as_js_object": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Transform the vector into text for displaying as part of its default\nvisualization."},
{"module": "Standard.Base.Data.XML", "type": "XML_Error", "name": "Parse_Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "XML_Error", "arguments": {"line_number": {"lazy": false, "type": "Integer", "checked": true}, "column_number": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "An error that indicates that the XML data could not be parsed.","arguments": "- line_number: the line on which the parse failed.\n- column_number: the column at which the parse failed."},
{"module": "Standard.Base.Data.XML", "type": "XML_Error", "name": "Other", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "XML_Error", "arguments": {"error": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Any other XML-related Java exception."},
{"module": "Standard.Base.Data.XML", "type": "XML_Error", "name": "handle_java_exceptions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Utility method for running an action with Java exceptions mapping."},
{"module": "Standard.Base.Data.XML", "type": "XML_Error", "name": "wrap_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"exception": {"lazy": false, "type": "JException", "checked": true}},"aliases": [],"description": "Converts a Java `Exception` into its Enso counterpart."},
{"module": "Standard.Base.Data.XML", "type": "XML_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the XML_Error to a human-readable format."},
{"module": "Standard.Base.Data.XML", "type": "", "name": "only_wanted_nodes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node_list": {"lazy": false, "type": "NodeList", "checked": true}},"aliases": [],"description": "Filter out unwanted nodes.\nWanted nodes are:\n- Elements\n- Text (if not completely whitespace)\n- Attribute values (which only arise in the case of XPath keys)"},
{"module": "Standard.Base.Data.XML", "type": "", "name": "build_child_list", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_element": {"lazy": false}},"aliases": [],"description": "Build the child list, filtering out unwanted child nodes."},
{"module": "Standard.Base.Data.XML", "type": "", "name": "child_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node": {"lazy": false, "type": "XML_Element | XML_Document", "checked": true}},"aliases": [],"description": "Create the element selector for an XML document or element."},
{"module": "Standard.Base.Data.XML", "type": "", "name": "write_impl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node": {"lazy": false, "type": "Node", "checked": true}, "path": {"lazy": false, "type": "Writable_File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "Existing_File_Behavior.Backup"}, "include_xml_declaration": {"lazy": false, "type": "Boolean", "checked": true, "default": "Boolean.True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "write an XML document or element to a file."},
{"module": "Standard.Base.Enso_Cloud.Internal.Audit_Log", "type": "Audit_Log", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Audit_Log", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Audit_Log", "type": "Audit_Log", "name": "report_event", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing", "arguments": {"event_type": {"lazy": false, "type": "Text", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}, "metadata": {"lazy": false, "type": "JS_Object", "checked": true, "default": "JS_Object.from_pairs []"}, "async": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Reports an event to the audit log.\nThe event is submitted asynchronously.","arguments": "- event_type: The type of the event.\n- message: The message associated with the event.\n- metadata: Additional metadata to include with the event.\n  Note that it should be a JS object and it should _not_ contain fields\n  that are restricted. These fields are added to the metadata\n  automatically.\n- async: Whether to submit the event asynchronously.\n  Defaults to True.\n  If `async` is True, the operation returns immediately. There is no way\n  to know if the log message was successfully submitted.\n  If `async` is False, the operation blocks until the log message is\n  successfully submitted, and will raise a panic if submitting fails.","remarks": "? Restricted Fields\n\n  The following fields are added by the system and should not be included\n  in the provided metadata:\n  - `type`\n  - `operation`\n  - `localTimestamp`\n  - `projectName`\n  - `projectSessionId`"},
{"module": "Standard.Base.Enso_Cloud.Internal.Audit_Log", "type": "Audit_Log_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Audit_Log_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}, "cause": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Audit_Log", "type": "Audit_Log_Error", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Service", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Authentication_Service", "arguments": {"auth_data": {"lazy": false, "type": "Ref Authentication_Data", "checked": true}},"aliases": [],"description": "TODO: We cannot mark this constructor as `private` until we change token tests in `Enso_Cloud_Spec` to run with `--disable-private-check`."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Service", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Authentication_Service", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Service", "name": "get_access_token", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Service", "name": "force_refresh", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing", "arguments": {},"aliases": [],"description": "Refreshes the access token using the refresh token, regardless of its freshness."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Data", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Authentication_Data", "arguments": {"access_token": {"lazy": false, "type": "Text", "checked": true}, "expire_at": {"lazy": false, "type": "Date_Time", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Data", "name": "read_from_credentials", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Authentication_Data", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Refresh_Token_Data", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Refresh_Token_Data", "arguments": {"client_id": {"lazy": false, "type": "Text", "checked": true}, "refresh_url": {"lazy": false, "type": "Text", "checked": true}, "refresh_token": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Refresh_Token_Data", "name": "read_from_credentials", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Refresh_Token_Data", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Refresh_Token_Data", "name": "fetch_new_access_token", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Authentication_Data", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "get_access_token", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns an access token for the current user, that should be valid for\nat least 2 more minutes.\n\nIf the current token is expired or <2m from expiration, it will be refreshed\nand a new one will be returned. Because of that, this method may make network\nrequests."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "refresh_access_token", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Forcibly refreshes the access token."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "credentials_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "instantiate_authentication_service", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The method called from Java that creates a new instance of the service, to be\nstored in the global state."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "token_early_refresh_period", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The amount of time before the token expiration that we pro-actively refresh\nit to reduce the chance of it expiring during a request."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "is_refresh_token_expired", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"status": {"lazy": false}, "message": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "file_get_required_string_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"json": {"lazy": false}, "prefix": {"lazy": false}, "field_name": {"lazy": false}},"aliases": [],"description": "A sibling to `get_required_field`.\nThis one raises `Illegal_State` error, because it is dealing with local files and not cloud responses."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_File_Data_Link", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}, "format_json": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_File_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "as_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_File", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "as_writable_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_File", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Data_Link_With_Input_Stream", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Data_Link_With_Output_Stream", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Writable_Data_Link", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "File_Like_Data_Link", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "Tag", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Tag", "arguments": {"value": {"lazy": false, "type": "Text", "checked": true}, "id": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "We are not including the color, as we are not using it yet.\nOnce needed, it should be added."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "upload_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_File", "arguments": {"local_file": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "Enso_File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "generic_create_asset", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"destination": {"lazy": false, "type": "Enso_File", "checked": true}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true}, "create_action": {"lazy": false, "type": "Existing_Enso_Asset -> (Existing_Enso_Asset | Nothing) -> Dictionary -> Any", "checked": true}},"aliases": [],"description": "A helper function that gathers the common logic for checking existence of\na created asset and its parent directory.\n\nThe `create_action` function is called with the existing asset for the parent\ndirectory and for the file, if it already exists, or `Nothing` otherwise, and\nwith a mapping of error handlers that may be added to the request."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "perform_upload", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "Enso_File", "checked": true}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true}, "generate_request_body_and_result": {"lazy": true}},"aliases": [],"description": "`generate_request_body_and_result` should return a pair,\nwhere the first element is the file to be uploaded and the second element is the result to be returned.\nIt is executed lazily, only after all pre-conditions are successfully met."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "_send_chunk_with_retries", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false}, "request_body": {"lazy": false}, "attempt": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "create_directory_with_parents", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset", "arguments": {"target": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": [],"description": "Creates a directory at the given path, also creating parent directories if needed."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "create_datalink_from_stream_action", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "Enso_File", "checked": true}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true}, "stream_action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "update_asset_description", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"asset": {"lazy": false, "type": "Enso_File", "checked": true}, "description": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "update_asset_labels", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"asset": {"lazy": false, "type": "Enso_File", "checked": true}, "new_labels": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "create_tag", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "color": {"lazy": false, "type": "Color", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "list_tags", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Tag", "arguments": {},"aliases": [],"description": "Returns a list of known tags."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "random_tag_color", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Color", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "does_tag_exist", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "create_tags_if_not_exist", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Write_Strategy", "type": "", "name": "instance", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "In the Enso_File, we use the Overwrite strategy for Backup.\nThat is because, the Cloud keeps versions of the file by itself,\nso there is no need to duplicate its work on our own - just overwriting the\nfile still ensures we have a backup."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Write_Strategy", "type": "", "name": "create_dry_run_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "copy_original": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Write_Strategy", "type": "", "name": "remote_write_with_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "existing_file_behavior": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Write_Strategy", "type": "", "name": "copy_from_local", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "Enso_File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Path", "arguments": {"path_segments": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Path", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "root", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "delimiter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "protocol_prefix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "is_root", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "parent", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Path", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Path", "arguments": {"subpath": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "is_descendant_of", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"other": {"lazy": false, "type": "Enso_Path", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "", "name": "normalize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"segments": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset", "arguments": {"title": {"lazy": false, "type": "Text", "checked": true}, "id": {"lazy": false, "type": "Text", "checked": true}, "asset_type": {"lazy": false, "type": "Enso_Asset_Type", "checked": true}, "metadata": {"lazy": false, "type": "Asset_Metadata|Nothing", "checked": true}},"aliases": [],"description": "Represents an existing asset within the Enso cloud.\n\nThe metadata represents additional information about the asset.\nIt is stored if it was available in a response. It may not be present for\nentries saved in cache after an upload operation that does not return metadata."},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "get_asset_reference_for", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset ! File_Error", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}, "want_metadata": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Fetches the basic information about an existing file from the Cloud.\nIt will fail if the file does not exist.","arguments": "- file: The file to fetch the information for.\n- want_metadata: Whether to require metadata for the file.\n  If set to True, a cached entry without metadata will not be considered\n  and a full fetch will be performed."},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "resolve_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}, "if_not_found": {"lazy": true}},"aliases": [],"description": "Resolves a path to an existing asset in the cloud."},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "from_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset", "arguments": {"json": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}, "title": {"lazy": false, "type": "Text", "checked": true}, "metadata": {"lazy": false, "type": "Asset_Metadata | Nothing", "checked": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "internal_uri", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Target URI for the api"},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "asset_uri", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "get_file_description", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"want_presinged_url": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Fetches the basic information about a file from the Cloud endpoint.","arguments": "- want_presigned_url: Whether to request presigned URL in the response.\n  The cloud does not include the presigned URL in the response by default. \n  It should only be asked for when needed."},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "list_directory", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Asset_Metadata", "arguments": {"modified_at": {"lazy": false, "type": "Date_Time", "checked": true}, "description": {"lazy": false, "type": "Text|Nothing", "checked": true}, "labels": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Metadata", "name": "from_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Asset_Metadata", "arguments": {"json": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Asset_Cache", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "asset_prefix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "asset_key", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "invalidate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "invalidate_subtree", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "invalidate_all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "update", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}, "asset": {"lazy": false, "type": "Existing_Enso_Asset", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "", "name": "asset_type_from_id", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "", "name": "fetch_asset_reference", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset ! File_Error", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}, "want_metadata": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Returns the cached reference or fetches it from the cloud."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "cloud_root_uri", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "authorization_header", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Construct the authorization header for the request"},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "assets_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for listing folders"},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "directory_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for listing folders."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "files_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for file details metadata."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "projects_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for project information."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "secrets_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for Secrets API."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "datalinks_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for DataLinks API."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "tags_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for managing labels."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "flush_caches", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Flushes all cloud caches, including the authentication data\n(so the next request will re-read the credentials file)."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "http_request_as_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any ! Enso_Cloud_Error", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "url": {"lazy": false, "type": "URI", "checked": true}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}, "additional_headers": {"lazy": false, "type": "Vector", "checked": true, "default": "[]"}, "error_handlers": {"lazy": false, "type": "Dictionary Text (Any -> Any)", "checked": true, "default": "Dictionary.empty"}, "retries": {"lazy": false, "type": "Integer", "checked": true, "default": "3"}},"aliases": [],"description": "Performs a standard request to the Enso Cloud API,\nparsing the result as JSON."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "http_request", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Response ! Enso_Cloud_Error", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "url": {"lazy": false, "type": "URI", "checked": true}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}, "additional_headers": {"lazy": false, "type": "Vector", "checked": true, "default": "[]"}, "error_handlers": {"lazy": false, "type": "Dictionary Text (Any -> Any)", "checked": true, "default": "Dictionary.empty"}, "retries": {"lazy": false, "type": "Integer", "checked": true, "default": "3"}},"aliases": [],"description": "Performs a standard request to the Enso Cloud API,\nreturning a raw response on success, but handling the error responses.\n\nThis method has built-in retry mechanism that may retry the request if it\nfailed due to a network error or access token expiration.\n\nCustom error handlers can be provided as a mapping from error codes\n(defined in the cloud project) to functions that take the full JSON payload\nand return a custom error."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "get_cached", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "action": {"lazy": true}, "cache_duration": {"lazy": false, "type": "Duration | Nothing", "checked": true, "default": "Duration.new seconds=60"}},"aliases": [],"description": "Returns the cached value for the given key, or computes it using the given\naction and caches it for future use.\nIf `cache_duration` is set to `Nothing`, then the cache is always skipped."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "invalidate_cache", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Invalidates the cache entry for the given key."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "invalidate_caches_with_prefix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Invalidates all cache entries that share a common prefix."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "set_cached", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false}, "cache_duration": {"lazy": false, "type": "Duration | Nothing", "checked": true, "default": "Duration.new seconds=60"}},"aliases": [],"description": "If `cache_duration` is set to `Nothing`, then this action does not do anything."},
{"module": "Standard.Base.Enso_Cloud.Cloud_Caching_Settings", "type": "", "name": "set_file_cache_ttl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED UNSTABLE", "returnType": "", "arguments": {"duration": {"lazy": false, "type": "Duration | Nothing", "checked": true}},"aliases": [],"description": "Sets for how long is Enso Cloud file information cached without checking for\nexternal updates.\n\nThe default TTL is 60 seconds.\n\nSide effects from this Enso workflow will invalidate the cache immediately,\nbut any external operations (done from other Enso instances) will not be\nvisible until a cached value expires. Thus if the workflow is expected to\nco-operate with other workflows, it may be useful to decrease the cache TTL\nor disable it completely by passing `Nothing`.\n\nNote that completely disabling the caching will affect performance, as some\ngeneric operations may perform multiple cloud requests.\n\nChanging the TTL invalidates all existing cache entries, because their\nexpiration time was calculated using the old TTL."},
{"module": "Standard.Base.Enso_Cloud.Cloud_Caching_Settings", "type": "", "name": "get_file_cache_ttl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Duration | Nothing", "arguments": {},"aliases": [],"description": "Returns the current file cache TTL."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Data_Link", "arguments": {},"aliases": [],"description": "Helper methods allowing to manipulate the raw configuration of data links."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "read_config", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "JS_Object", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Reads the raw configuration data of a data-link."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "write_config", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}, "config": {"lazy": false, "type": "JS_Object", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "skip_validation": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Writes a data-link configuration to a file.","arguments": "- file: The file to write the configuration to.\n- config: The configuration to write to the file.\n- replace_existing: A flag specifying if the operation should replace an\n  existing file. By default, the operation will fail if the file already\n  exists.\n- skip_validation: A flag that allows to skip validation. By default,\n  before writing the config we try to parse it to ensure that it\n  represents a valid data-link. In some cases (e.g. testing), we may want\n  to skip that."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "validate_config", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Nothing ! Missing_Data_Link_Library | Illegal_State", "arguments": {"config": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Checks if the config represents a valid data-link.\n\nIf the library providing the data-link is not imported, this function\nwill fail with `Missing_Data_Link_Library`, even if the config would be\nvalid."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "copy", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Any ! File_Error", "arguments": {"source": {"lazy": false, "type": "File_Like", "checked": true}, "target": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Copies the data-link configuration from one place to another.\n\nThe operation does not follow the data links, but copies the\nconfiguration between the provided files.","arguments": "- source: The file to copy the configuration from.\n- target: The file to copy the configuration to.\n- replace_existing: A flag specifying if the operation should replace an\n  existing file. By default, the operation will fail if the file already\n  exists."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "move", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Any ! File_Error", "arguments": {"source": {"lazy": false, "type": "File_Like", "checked": true}, "target": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Moves the data-link configuration from one place to another.\n\nThe operation does not follow the data links, but copies the\nconfiguration between the provided files.","arguments": "- source: The file to move the configuration from. It will be deleted.\n- target: The file to move the configuration to.\n- replace_existing: A flag specifying if the operation should replace an\n  existing file. By default, the operation will fail if the file already\n  exists."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "read_raw_config", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Reads the raw configuration data of a data-link, as plain text.\n\nThis is should mostly be used for testing, `read_config` is preferred for normal use.","arguments": "- file: The file to read the configuration from."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "write_raw_config", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}, "raw_content": {"lazy": false, "type": "Text", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Writes raw data as the data-link configuration.\n\nThis is should mostly be used for testing, `write_config` is preferred for normal use.","arguments": "- file: The file to write the configuration to.\n- raw_content: The raw data to write to the file.\n- replace_existing: A flag specifying if the operation should replace an\n  existing file. By default, the operation will fail if the file already\n  exists."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "is_data_link_from_metadata", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"file_metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Checks if the given entity is a data link, based on its metadata (content type and file name).","remarks": "! Files\n  For regular files, it is preferred to use the `is_data_link_file` method,\n  as it can rely on custom logic that may be more efficient and more\n  precise (e.g. correctly distinguishing links from directories with unexpected name suffix)."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "is_data_link_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"file": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Checks if the given file represents a data link."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "is_data_link_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if the given file name ends with the `.datalink` suffix associated with data links.\nThis is a necessary but not sufficient condition for a file to be a data link,\nvarious file systems may impose additional constraints."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link_From_File", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_From_File", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link_From_File", "name": "is_data_link", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Checks if the given file is a data-link."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link_From_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Files may sometimes be converted to File_Like.\nIf they implement `Data_Link_From_File`, we want to inherit that implementation."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Input_Stream", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_With_Input_Stream", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Input_Stream", "name": "find", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}, "if_not_supported": {"lazy": false, "default": "Error.throw (Illegal_Argument.Error \"The \"+(data_link_name data_link_instance)+\" cannot be opened as a stream.\")"}},"aliases": [],"description": "Creates a `Data_Link_With_Input_Stream` from a data link instance, if\nthat data link supports streaming. If it does not, an error is thrown."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Input_Stream", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": [],"description": "Opens the data pointed at by the data link as a raw stream."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Output_Stream", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_With_Output_Stream", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Output_Stream", "name": "find", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}, "if_not_supported": {"lazy": false, "default": "Error.throw (Illegal_Argument.Error \"The \"+(data_link_name data_link_instance)+\" does not support writing raw data to it.\")"}},"aliases": [],"description": "Creates a `Data_Link_With_Output_Stream` from a data link instance, if\nthat data link supports streaming. If it does not, an error is thrown."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Output_Stream", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": [],"description": "Opens the data pointed at by the data link as a raw stream."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Writable_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_Data_Link", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Writable_Data_Link", "name": "find", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}, "if_not_supported": {"lazy": false, "default": "Error.throw (Illegal_Argument.Error \"The \"+(data_link_name data_link_instance)+\" does not support writing.\")"}},"aliases": [],"description": "Creates a `Writable_Data_Link` from a data link instance, if that data\nlink supports writing. If it does not, an error is thrown."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Writable_Data_Link", "name": "as_writable_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_File", "arguments": {},"aliases": [],"description": "Returns the `Writable_File` instance for the target of the data link."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "File_Like_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Like_Data_Link", "arguments": {"underlying": {"lazy": false}, "as_file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "File_Like_Data_Link", "name": "find", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}, "if_not_supported": {"lazy": false, "default": "Error.throw (Illegal_Argument.Error \"The \"+(data_link_name data_link_instance)+\" is not a link to a file object.\")"}},"aliases": [],"description": "Creates a `Writable_Data_Link` from a data link instance, if that data\nlink supports writing. If it does not, an error is thrown."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "Data_Link_Source_Metadata", "name": "Cloud_Asset", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Data_Link_Source_Metadata", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A data link coming from Enso Cloud."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "Data_Link_Source_Metadata", "name": "Unknown", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Data_Link_Source_Metadata", "arguments": {},"aliases": [],"description": "No information is available about the source."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "data_link_encoding", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "All data-link config files should be saved with UTF-8 encoding."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "data_link_content_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "data_link_extension", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "interpret_json_as_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"json": {"lazy": false}, "source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true, "default": "..Unknown"}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "read_and_interpret_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "interpret_existing_asset_as_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"asset": {"lazy": false, "type": "Existing_Enso_Asset", "checked": true}},"aliases": [],"description": "This method should only be called on an asset that is known to be a data link."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "read_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}, "format": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "read_data_link_as_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}, "open_options": {"lazy": false, "type": "Vector", "checked": true}, "f": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "write_data_link_as_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}, "open_options": {"lazy": false, "type": "Vector", "checked": true}, "f": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "interpret_data_link_target_as_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "interpret_data_link_target_as_file_or_nothing", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any | Nothing", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "interpret_data_link_as_writable_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_File", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "save_data_link_to_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}, "target_file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "parse_secure_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text | Enso_Secret", "arguments": {"json": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "secure_value_to_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object | Text", "arguments": {"value": {"lazy": false, "type": "Text | Enso_Secret", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "parse_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any ! Illegal_State", "arguments": {"json": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "data_link_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}},"aliases": [],"description": "Returns a human readable name of the data link type, based on its type."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "disallow_links_in_copy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false}, "target": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "disallow_links_in_move", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false}, "target": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "store_as_secret", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Secret", "arguments": {"base_location": {"lazy": false, "type": "Enso_File", "checked": true}, "name_hint": {"lazy": false, "type": "Text", "checked": true}, "secure_value": {"lazy": false, "type": "Text|Enso_Secret", "checked": true}},"aliases": [],"description": "Takes a secure value (either a Text or Enso_Secret) and returns a secret representation of it.\n\nIf given an existing secret, it will be returned as-is.\nHowever, if given a plain text, it will create a new secret in the provided directory.\n\nBecause it may be creating new secret, this should only be run within an enabled Output context."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "save_password_for_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Secret", "arguments": {"data_link_location": {"lazy": false, "type": "Enso_File", "checked": true}, "secure_value": {"lazy": false, "type": "Text|Enso_Secret", "checked": true}, "name_hint": {"lazy": false, "type": "Text", "checked": true, "default": "\"password\""}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "is_directory", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "check_file_directly": {"lazy": true}},"aliases": [],"description": "Common logic for checking if the target of a datalink is a directory or falling back to a direct check."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "is_regular_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "check_file_directly": {"lazy": true}},"aliases": [],"description": "Common logic for checking if the target of a datalink is a regular file or falling back to a direct check."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_File", "arguments": {"enso_path": {"lazy": false, "type": "Enso_Path", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "data_input","description": "Resolves an `enso://` path and returns the corresponding `Enso_File`\ninstance.","arguments": "- path: The `enso://` path to a file or directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "home", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File", "arguments": {},"aliases": [],"icon": "folder","description": "Represents the current user's home directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "root", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "folder","description": "Represents the root folder of the organization.","remarks": "? Organization Root Directory\n\n  The organization root directory cannot be directly written into.\n  You should put your files and projects in a subdirectory dedicated to a\n  given user or team in the `Users` or `Teams` subdirectories within it."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "current_working_directory", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "folder","description": "Represents the current working directory.\n\nIf the workflow is running on the Cloud, this will be the directory\ncontaining the current project.\n\nIf the workflow is running locally, this will default to the root\ndirectory."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "cloud_project_parent_directory", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The parent directory containing the currently open project if in the\nCloud, or `Nothing` if running locally."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "create_label", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "color": {"lazy": false, "type": "Color", "checked": true}},"aliases": [],"group": "EnsoCloud","icon": "data_output","description": "Creates a new label with the given name and color.","arguments": "- name: The name of the label to create.\n- color: The color of the label to create."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "asset_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the folder or file exists.","remarks": "? Data Links\n  If the file is a data link, this checks if the data link itself exists. \n  It does not tell anything about existence of the data link target."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "size", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the size of a file in bytes.","remarks": "? Data Links\n  If the file is a data link that points to a file, the size of the \n  target file will be returned."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "creation_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Time", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the creation time of a file.","remarks": "? Data Links\n  If the file is a data link, this returns the creation time of the data \n  link."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "last_modified_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Time", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the last modified time of a file.","remarks": "? Data Links\n  If the file is a data link, this returns the modification time of the \n  data link."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "description", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the description associated with the file in Enso Cloud.\n\nBy default, the description is empty. It can be set in the Dashboard, or\nusing the `set_description` method."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "set_description", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File", "arguments": {"description": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Metadata","icon": "data_output","description": "Sets the description associated with the file in Enso Cloud.","arguments": "- description: The new description to set.","returns": "- The file on which it was called."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "labels", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the labels associated with the file in Enso Cloud."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "add_label", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Metadata","icon": "data_output","description": "Adds a label to the file in Enso Cloud.\n\nIf the label with the given name did not exist before, it is created with\na random color associated with it. If you want to set a specific color,\nuse `Enso_File.create_label` before calling this method.","arguments": "- label: The name of the label to add to the file.","returns": "- The file on which it was called.","remarks": "? Race Conditions\n\n  Adding labels is not atomic. If two processes are modifying labels of\n  the same asset at the same time, some changes may be lost."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "remove_label", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Metadata","icon": "data_output","description": "Removes a label from the file in Enso Cloud.","arguments": "- label: The name of the label to remove from the file.","returns": "- A boolean value indicating if the file had the label before the operation.","remarks": "? Race Conditions\n\n  Removing labels is not atomic. If two processes are modifying labels of\n  the same asset at the same time, some changes may be lost."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "set_labels", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File", "arguments": {"labels": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"group": "Metadata","icon": "data_output","description": "Sets the set of labels associated with the file in Enso Cloud.\nAny other labels than the ones provided are removed from the file.\n\nIf any of the provided labels did not exist before, it is created with\na random color associated with it. If you want to set a specific color,\nuse `Enso_File.create_label` before calling this method.","arguments": "- labels: The new set of labels to associate with the file.","returns": "- The file on which it was called."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "is_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if this is a folder.","remarks": "? Data Links\n  If the file is a data link, this checks whether the target of the data \n  link is a directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "is_regular_file", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if this is a regular file.","remarks": "? Data Links\n  If the file is a data link, this checks whether the target of the data \n  link is a regular file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "is_data_link", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "parent", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "folder","description": "Finds the parent Enso_File for this file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "path", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the path of this file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "is_descendant_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"other": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if `self` is a descendant of `other`."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this S3_File."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new output stream for this file and runs the specified action\non it.\n\nThe created stream is automatically closed when `action` returns (even\nif it returns exceptionally).","arguments": "- open_options: A vector of `File_Access` objects determining how to open\n  the stream. These options set the access properties of the stream.\n- action: A function that operates on the output stream and returns some\n  value. The value is returned from this method."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new input stream for this file and runs the specified action\non it.\n\n\n\nThe created stream is automatically closed when `action` returns (even\nif it returns exceptionally).","arguments": "- open_options: A vector of `File_Access` objects determining how to open\n  the stream. These options set the access properties of the stream.\n- action: A function that operates on the input stream and returns some\n  value. The value is returned from this method."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["import", "load", "open"],"group": "Input","icon": "data_input","description": "Read a file using the specified file format","arguments": "- format: A `File_Format` object used to read file into memory.\n  If `Auto_Detect` is specified; the provided file determines the specific\n  type and configures it appropriately. If there is no matching type then\n  a `File_Error.Unsupported_Type` error is returned.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function.\n  By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "read_bytes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["load bytes", "open bytes"],"icon": "data_input","description": "Reads all bytes in this file into a byte vector."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "read_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load text", "open text"],"icon": "data_input","description": "Reads the whole file into a `Text`, with specified encoding.","arguments": "- encoding: The text encoding to decode the file with. Defaults to UTF-8.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function.\n  By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the name of this file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "extension", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the extension of the file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "list", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_filter": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Input","icon": "data_input","description": "Lists assets contained in this directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "create_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Output","icon": "folder_add","description": "Creates the directory represented by this file if it did not exist.\n\nIt also creates parent directories if they did not exist."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "delete", "methodType": "method", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Output","icon": "trash","description": "Deletes the file or directory.","arguments": "- recursive: If the target is a non-empty directory, it will only be\n  removed if this is set to `True`. Defaults to `False`, meaning that the\n  operation will fail if the directory is not empty. This option has no\n  effect for files or data links.","remarks": "? Data Links\n  If the file is a data link, this will delete the link itself, not\n  affecting its target."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "delete_if_exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Deletes the file if it had existed.","arguments": "- recursive: If the target is a non-empty directory, it will only be\n  removed if this is set to `True`. Defaults to `False`, meaning that the\n  operation will fail if the directory is not empty. This option has no\n  effect for files or data links."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "copy_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Copies the file to the specified destination.","arguments": "- destination: the destination to move the file to.\n- replace_existing: specifies if the operation should proceed if the\n  destination file already exists. Defaults to `False`."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "move_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Moves the file to the specified destination.","arguments": "- destination: the destination to move the file to.\n- replace_existing: specifies if the operation should proceed if the\n  destination file already exists. Defaults to `False`."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File | Any ! Not_Found", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Operators","icon": "folder","description": "Resolves a file or directory within this directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "resolve_single_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"part": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An internal helper method that resolves a single part (subpath) of a path,\nused by `Path_Resolver`."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Returns the text representation of the file descriptor."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the file descriptor to a JSON object."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "Project", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": [],"description": "Represents an Enso project."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "File", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": [],"description": "Represents an file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "Directory", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": [],"description": "Represents a folder."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "Secret", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": [],"description": "Represents a secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "Data_Link", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": [],"description": "Represents a connection to another data source."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "", "name": "list_assets", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Existing_Enso_Asset", "arguments": {"parent": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "File_Format_Metadata", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "File_Like", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Writable_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Data_Link_From_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Secret", "arguments": {"internal_name": {"lazy": false, "type": "Text", "checked": true}, "id": {"lazy": false, "type": "Text", "checked": true}, "internal_path": {"lazy": false, "type": "Enso_Path", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "create", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Text", "checked": true}, "parent": {"lazy": false, "type": "Enso_File | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "EnsoCloud","icon": "edit","description": "Create a new secret.","arguments": "- name: The name of the secret\n- value: The value of the secret\n- parent: The parent folder for the secret. If `Nothing` then it will be\n  created in the current working directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "list", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"parent": {"lazy": false, "type": "Enso_File | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "EnsoCloud","icon": "key","description": "Gets a list of all the secrets in the folder.","arguments": "- folder: The folder to get the secrets from. If `Nothing` then will get\n  the secrets from the current working directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "get", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "parent": {"lazy": false, "type": "Enso_File | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "EnsoCloud","icon": "key","suggested": 6,"description": "Get a Secret if it exists.","arguments": "- name: The name of the secret, or an `enso://` path.\n- parent: The parent folder for the secret, if resolving by name.\n  If `Nothing` then will search in the current working directory.\n  If an `enso://` path is provided, the parent argument is not considered\n  and must be `Nothing`."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "resolve_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Secret ! Not_Found", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "exists", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "parent": {"lazy": false, "type": "Enso_File | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "EnsoCloud","icon": "metadata","description": "Checks if a Secret exists.","arguments": "- name: The name of the secret\n- parent: The parent folder for the secret. If `Nothing` then will check\n  in the current working directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The name of the secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "path", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The path of the secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "delete", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Output","icon": "trash","description": "Deletes a secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "update_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_value": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Output","icon": "edit","description": "Updates the value of a secret.","arguments": "- new_value: The new value of the secret","remarks": "! Secret Caching\n  Note that secret values are cached, so the update may not be visible in\n  other workflows unless they are restarted. You can also use the\n  `Enso_User.flush_caches` function to flush the caches."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a text representation of the secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a display text representation of the secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the secret to a JSON object."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret_Error", "name": "Access_Denied", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Secret_Error", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "Plain_Text", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Derived_Secret_Value", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "Secret_Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Derived_Secret_Value", "arguments": {"secret": {"lazy": false, "type": "Enso_Secret", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "Concat", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Derived_Secret_Value", "arguments": {"left": {"lazy": false, "type": "Derived_Secret_Value", "checked": true}, "right": {"lazy": false, "type": "Derived_Secret_Value", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "Base_64_Encode", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Derived_Secret_Value", "arguments": {"value": {"lazy": false, "type": "Derived_Secret_Value", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "+", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false, "type": "Derived_Secret_Value", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "to_plain_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts to a plain text value, if the value contains no secrets.\nIf the value contains secrets, it raises an error."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "simplify", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "If this value does not contains any secrets, it will be simplified to a\nplain Text value, otherwise it will be returned as is."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_Secret", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "", "name": "as_hideable_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "", "name": "secret_resource_uri", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"secret": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "", "name": "secret_asset_uri", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"secret": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "User", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_User", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "email": {"lazy": false, "type": "Text", "checked": true}, "id": {"lazy": false, "type": "Text", "checked": true}, "is_enabled": {"lazy": false, "type": "Boolean", "checked": true}, "root_directory_id": {"lazy": false, "type": "Text", "checked": true}, "organization_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Represents a user within Enso Cloud.","arguments": "- name: The user's name.\n- email: The user's email address.\n- id: The user's unique ID.\n- is_enabled: Whether the user is enabled.\n- root_directory_id: The ID of the user's root directory.\n- organization_name: The name of the organization the user belongs to.\n  If it is missing, it is set to the user's name."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "current", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_User", "arguments": {},"aliases": [],"icon": "people","description": "Fetch the current user."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "is_logged_in", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Checks if the user is logged in."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "list", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "people","description": "Lists all known users."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "flush_caches", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "trash","description": "Flushes all cloud caches.\nFor example, it will flush cached secrets, ensuring that new values will\nbe fetched the next time the secrets are accessed."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Return a string representation of this user."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this user."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Not_Logged_In", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Not_Logged_In", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Not_Logged_In", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Cloud_Session_Expired", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Cloud_Session_Expired", "arguments": {"underlying_error": {"lazy": false}},"aliases": [],"description": "The `underlying_error` is not shown in the error message, but is saved for debugging purposes."},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Cloud_Session_Expired", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Enso_Cloud_Error", "name": "Unexpected_Service_Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Cloud_Error", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}, "status_code": {"lazy": false, "type": "HTTP_Status_Code", "checked": true}, "payload": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An unhandled error response from Enso Cloud."},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Enso_Cloud_Error", "name": "Invalid_Response_Payload", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Cloud_Error", "arguments": {"cause": {"lazy": false, "type": "Text | Any", "checked": true}},"aliases": [],"description": "An error response from Enso Cloud that could not be parsed."},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Enso_Cloud_Error", "name": "Unauthorized", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Cloud_Error", "arguments": {},"aliases": [],"description": "An error response from Enso Cloud indicating that the provided user data is invalid."},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Enso_Cloud_Error", "name": "Connection_Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Cloud_Error", "arguments": {"cause": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "An error indicating issues with connecting to Enso Cloud."},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Enso_Cloud_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Missing_Data_Link_Library", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Missing_Data_Link_Library", "arguments": {"library_name": {"lazy": false, "type": "Text", "checked": true}, "data_link_type": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Missing_Data_Link_Library", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Public_Utils", "type": "", "name": "get_required_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "js_object": {"lazy": false}, "show_value": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_type": {"lazy": false, "default": "Any"}},"aliases": [],"description": "A helper that extracts a required field from a response and handles\nunexpected response structure.","arguments": "- key: The key of the field to extract.\n- js_object: The JSON object to extract the field from.\n- show_value: Whether to include the value of the field in the error message.\n  It is usually better to include it, but in cases like handling of access\n  tokens, it may be better to just include the type of the field.\n- expected_type: The type that the field is expected to be."},
{"module": "Standard.Base.Enso_Cloud.Public_Utils", "type": "", "name": "get_optional_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "js_object": {"lazy": false}, "if_missing": {"lazy": true, "default": "Nothing"}, "show_value": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_type": {"lazy": false, "default": "Any"}},"aliases": [],"description": "A helper that extracts an optional field from a response and handles\nunexpected response structure.\n\nThis method treats the field missing or being set to `null` as the same.","arguments": "- key: The key of the field to extract.\n- js_object: The JSON object to extract the field from.\n- if_missing: The value to return if the field is missing or `null`.\n- show_value: Whether to include the value of the field in the error message.\n  It is usually better to include it, but in cases like handling of access\n  tokens, it may be better to just include the type of the field.\n- expected_type: The type that the field is expected to be.\n  The type of `if_missing` is not checked against `expected_type`."},
{"module": "Standard.Base.Enso_Cloud.Public_Utils", "type": "", "name": "cloud_http_request_for_test", "methodType": "static", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"method": {"lazy": false}, "url_suffix": {"lazy": false}},"aliases": [],"description": "Re-exports parts of the functionality of `http_request_as_json` function that\nis needed in tests.\nIt should not be used anywhere else and may be removed in the near future."},
{"module": "Standard.Base.Errors.Common", "type": "Not_Found", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Not_Found", "arguments": {},"aliases": [],"description": "An error indicating that no value was found."},
{"module": "Standard.Base.Errors.Common", "type": "Index_Out_Of_Bounds", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "Index_Out_Of_Bounds", "arguments": {"index": {"lazy": false}, "length": {"lazy": false}},"aliases": [],"description": "An error indicating that a requested index was out of bounds of a collection.","arguments": "- index: The requested index.\n- length: The length of the collection."},
{"module": "Standard.Base.Errors.Common", "type": "Index_Out_Of_Bounds", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints an index out of bounds error."},
{"module": "Standard.Base.Errors.Common", "type": "Syntax_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Syntax_Error", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "The runtime representation of a syntax error.","arguments": "- message: A description of the erroneous syntax."},
{"module": "Standard.Base.Errors.Common", "type": "Syntax_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Syntax_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Type_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Type_Error", "arguments": {"expected": {"lazy": false}, "actual": {"lazy": false}, "comment": {"lazy": false}},"aliases": [],"description": "The runtime representation of a type error.","arguments": "- expected: The expected type at the error location.\n- actual: The actual type at the error location.\n- comment: Description of the value that was being checked,\n  e.g. function argument, result or an arbitrary expression."},
{"module": "Standard.Base.Errors.Common", "type": "Type_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Type_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Type_Error", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Render the error as text."},
{"module": "Standard.Base.Errors.Common", "type": "Compile_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Compile_Error", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "The runtime representation of a compilation error.","arguments": "- message: A description of the erroneous state."},
{"module": "Standard.Base.Errors.Common", "type": "Compile_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Compile_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Assertion_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Assertion_Error", "arguments": {"message": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Assertion_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Assertion_Error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Inexhaustive_Pattern_Match", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Inexhaustive_Pattern_Match", "arguments": {"scrutinee": {"lazy": false}},"aliases": [],"description": "The error thrown when a there is no pattern to match on the scrutinee.","arguments": "- scrutinee: The scrutinee that failed to match."},
{"module": "Standard.Base.Errors.Common", "type": "Inexhaustive_Pattern_Match", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Inexhaustive_Pattern_Match error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Arity_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Arity_Error", "arguments": {"expected_min": {"lazy": false}, "expected_max": {"lazy": false}, "actual": {"lazy": false}},"aliases": [],"description": "The error thrown when the number of arguments provided to an operation\ndoes not match the expected number of arguments.","arguments": "- expected_min: the minimum expected number of arguments.\n- expected_max: the maximum expected number of arguments.\n- actual: the actual number of arguments passed."},
{"module": "Standard.Base.Errors.Common", "type": "Arity_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Arity_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Uninitialized_State", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Uninitialized_State", "arguments": {"key": {"lazy": false}},"aliases": [],"description": "The error thrown when the program attempts to read from a state slot that has\nnot yet been initialized.","arguments": "- key: The key for the state slot that was not initialized."},
{"module": "Standard.Base.Errors.Common", "type": "Uninitialized_State", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Uninitialized_State error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Method", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Method", "arguments": {"target": {"lazy": false}, "symbol": {"lazy": false}},"aliases": [],"description": "The error thrown when the specified symbol does not exist as a method on\nthe target.","arguments": "- target: The target on which the attempted method call was performed.\n- symbol: The symbol that was attempted to be called on target."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Method", "name": "method_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the method name of the method that could not be found.","examples": "> Example\n  Getting the method name from a no such method error.\n\n      import Standard.Examples\n\n      example_method_name =\n          error = Examples.no_such_method\n          error.method_name"},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Method", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the No_Such_Method error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Field", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Field", "arguments": {"value": {"lazy": false}, "field_name": {"lazy": false}},"aliases": [],"description": "The error thrown when the specified symbol does not exist as a field on\nthe value.","arguments": "- target: The target on which the field was accessed.\n- field_name: The name of the field that was being accessed."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Field", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the No_Such_Method error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Module_Not_In_Package_Error", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Module_Not_In_Package_Error", "arguments": {},"aliases": [],"description": "An error that occurs when the enso_project function is called in a file\nthat is not part of a project."},
{"module": "Standard.Base.Errors.Common", "type": "Module_Not_In_Package_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Module_Not_In_Package_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Arithmetic_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Arithmetic_Error", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "An error for when an erroneous arithmetic computation takes place.","arguments": "- message: A description of the error condition."},
{"module": "Standard.Base.Errors.Common", "type": "Arithmetic_Error", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Capture a Java `ArithmeticException` and convert it to an Enso dataflow error - `Arithmetic_Error.Error`."},
{"module": "Standard.Base.Errors.Common", "type": "Arithmetic_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Arithmetic_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Incomparable_Values", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Incomparable_Values", "arguments": {"left": {"lazy": false}, "right": {"lazy": false}},"aliases": [],"description": "An error that indicates that the two values are not comparable.","arguments": "- left: The left value (first operand).\n- right: The right value (second operand)."},
{"module": "Standard.Base.Errors.Common", "type": "Incomparable_Values", "name": "handle_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": true}},"aliases": [],"description": "Catches possible errors from comparing values and throws an\n`Incomparable_Values` if any occur."},
{"module": "Standard.Base.Errors.Common", "type": "Incomparable_Values", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Incomparable_Values error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Invalid_Array_Index", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Array_Index", "arguments": {"array": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "An error that occurs when a program requests a read from an array index\nthat is out of bounds in the array.","arguments": "- array: The array in which the index was requested.\n- index: The index that was out of bounds."},
{"module": "Standard.Base.Errors.Common", "type": "Invalid_Array_Index", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Invalid_Array_Index error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Not_Invokable", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Not_Invokable", "arguments": {"target": {"lazy": false}, "cause": {"lazy": false}},"aliases": [],"description": "An error that occurs when an object is used as a function in a function\ncall, but it cannot be called.","arguments": "- target: The called object.\n- cause: Additional information about what may have caused the error."},
{"module": "Standard.Base.Errors.Common", "type": "Not_Invokable", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Not_Invokable error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Argument", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Argument", "arguments": {"argument_name": {"lazy": false}},"aliases": [],"description": "Indicates that an argument was passed by name, but the function being\ncalled did not take any argument that matched that name.","arguments": "- argument_name: The name of the argument that was not found."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Argument", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the No_Such_Argument error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Private_Access", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Private_Access", "arguments": {"this_project_name": {"lazy": false, "type": "Text | Nothing", "checked": true}, "target_project_name": {"lazy": false, "type": "Text | Nothing", "checked": true}, "target_method_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An error that occurs when a private (project-private) method is called from a different\nproject.","arguments": "- this_project_name: Optional qualified name of the current (caller) project.\n- target_project_name: Optional qualified name name of the project of callee.\n- target_method_name: The name of the target method call that is project-private and thus cannot be called."},
{"module": "Standard.Base.Errors.Common", "type": "Private_Access", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Private_Access error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Unsupported_Argument_Types", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unsupported_Argument_Types", "arguments": {"arguments": {"lazy": false}, "message": {"lazy": false}},"aliases": [],"description": "An error that occurs when arguments used in a function call are invalid\ntypes for the function.","arguments": "- arguments: The passed arguments.\n- message: A detailed message."},
{"module": "Standard.Base.Errors.Common", "type": "Unsupported_Argument_Types", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Unsupported_Argument_Types error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Module_Does_Not_Exist", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Module_Does_Not_Exist", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "An error that occurs when the specified module cannot be found.","arguments": "- name: The module searched for."},
{"module": "Standard.Base.Errors.Common", "type": "Module_Does_Not_Exist", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Module_Does_Not_Exist error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Invalid_Conversion_Target", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Conversion_Target", "arguments": {"target": {"lazy": false}},"aliases": [],"description": "An error that occurs when the specified value cannot be converted to a given type.","arguments": "- target: the type trying to be converted to."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Conversion", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Conversion", "arguments": {"target": {"lazy": false}, "that": {"lazy": false}, "conversion": {"lazy": false}},"aliases": [],"description": "An error that occurs when the conversion from one type to another does not exist.","arguments": "- target: the type trying to be converted to.\n- that: the value to be converted.\n- conversion: the conversion that was attempted."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Conversion", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the No_Such_Conversion error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "No_Conversion_Currying", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Conversion_Currying", "arguments": {"has_this": {"lazy": false}, "has_that": {"lazy": false}, "conversion": {"lazy": false}},"aliases": [],"description": "An error that occurs when an attempt is made to curry a conversion function.","arguments": "- has_this: true, when `this` argument is present\n- has_that: true, when `that` argument is present\n- conversion: the conversion that was attempted."},
{"module": "Standard.Base.Errors.Common", "type": "No_Conversion_Currying", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the No_Conversion_Currying error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Forbidden_Operation", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Forbidden_Operation", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "An error that occurs when the action is not allowed to perform the\noperation in the given context.","arguments": "- message: message describing the operation that was not allowed."},
{"module": "Standard.Base.Errors.Common", "type": "Forbidden_Operation", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Forbidden_Operation error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Dry_Run_Operation", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dry_Run_Operation", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "A warning that the operation has only been performed in a test mode.","arguments": "- message: The message to be displayed."},
{"module": "Standard.Base.Errors.Common", "type": "Dry_Run_Operation", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Dry_Run_Operation to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Memory", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Out_Of_Memory", "arguments": {"operation": {"lazy": false}},"aliases": [],"description": "An error when Enso run's out of memory"},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Memory", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"operation": {"lazy": false}, "function": {"lazy": true}},"aliases": [],"description": "Catches possible `OutOfMemoryError` and throws an `Out_Of_Memory` error."},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Memory", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Out_Of_Memory to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Missing_Argument", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Missing_Argument", "arguments": {"argument_name": {"lazy": false, "type": "Text", "checked": true}, "function_name": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "call_location": {"lazy": false, "type": "Source_Location | Nothing", "checked": true, "default": "Nothing"}, "message": {"lazy": false, "type": "Text", "checked": true, "default": "\"Provide a value for the argument `\" + argument_name + \"`.\""}},"aliases": [],"description": "Indicates that an expression cannot be evaluated because somewhere within\nit, a function does not have all required arguments provided."},
{"module": "Standard.Base.Errors.Common", "type": "Missing_Argument", "name": "throw", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"argument_name": {"lazy": false, "type": "Text", "checked": true}, "message_override": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Throws an error saying that a required argument has not been provided."},
{"module": "Standard.Base.Errors.Common", "type": "Missing_Argument", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Additional_Warnings", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Additional_Warnings", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Additional_Warnings", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Common", "type": "Loss_Of_Numeric_Precision", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Loss_Of_Numeric_Precision", "arguments": {"original_value": {"lazy": false}, "new_value": {"lazy": false}},"aliases": [],"description": "Indicates that a numeric conversion of a value has lost precision."},
{"module": "Standard.Base.Errors.Common", "type": "Loss_Of_Numeric_Precision", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Common", "type": "Loss_Of_Numeric_Precision", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Range", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Out_Of_Range", "arguments": {"value": {"lazy": false}, "message": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Range", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Range", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Response_Too_Large", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Response_Too_Large", "arguments": {"actual_size": {"lazy": false, "type": "Integer|Nothing", "checked": true}, "limit": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Response_Too_Large", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Convert the Java exception to an Enso dataflow error."},
{"module": "Standard.Base.Errors.Common", "type": "Response_Too_Large", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Common", "type": "Response_Too_Large", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Floating_Point_Equality", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Floating_Point_Equality", "arguments": {"location": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Represents a general floating-point equality error, such as a direct comparison."},
{"module": "Standard.Base.Errors.Common", "type": "Floating_Point_Equality", "name": "Used_As_Dictionary_Key", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Floating_Point_Equality", "arguments": {"value": {"lazy": false, "type": "Float", "checked": true}},"aliases": [],"description": "Represents the use of a floating-point value as a `Dictionary` key."},
{"module": "Standard.Base.Errors.Common", "type": "Floating_Point_Equality", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Common", "type": "Floating_Point_Equality", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Failed_To_Load", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Failed_To_Load", "arguments": {"path": {"lazy": false}, "cause": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Failed_To_Load", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Deprecated", "type": "Deprecated", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Deprecated", "arguments": {"type_name": {"lazy": false, "type": "Text", "checked": true}, "method_name": {"lazy": false, "type": "Text", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": []},
{"module": "Standard.Base.Errors.Deprecated", "type": "Deprecated", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the Deprecated warning."},
{"module": "Standard.Base.Errors.Empty_Error", "type": "Empty_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Empty_Error", "arguments": {"collection": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Errors.Empty_Error", "type": "Empty_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the empty error."},
{"module": "Standard.Base.Errors.Encoding_Error", "type": "Encoding_Error", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Encoding_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "One or more byte sequences were not decodable using the Encoding."},
{"module": "Standard.Base.Errors.Encoding_Error", "type": "Encoding_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the encoding error."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Not_Found", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "An error that indicates that the requested file does not exist.","arguments": "- file: The file that doesn't exist."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Already_Exists", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Indicates that a destination file already exists."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Access_Denied", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Indicates that the user did not have the permission to complete the\nrequested operation on the given file."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "IO_Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like | Nothing", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A generic IO error.","arguments": "- file: The file that couldn't be read.\n- message: The message for the error."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Directory_Not_Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Indicates that the given directory was not empty, but `recursive` was not\nset to `True`."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Not_A_Directory", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Indicates that the given path was expected to be a directory, but it is not.\nRaised for example when creating a new file or directory inside of a path\nthat is a regular file."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Unsupported_Type", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Indicates that the given file's type is not supported."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Unsupported_Output_Type", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"format": {"lazy": false, "type": "File_Format | File_Like | Any", "checked": true}, "data_type": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Indicates that the given type cannot be serialized to the provided file\nformat."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Corrupted_Format", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like | Nothing", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}, "cause": {"lazy": false, "type": "Any | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Indicates that the given file is corrupted, i.e. the data it contains\nis not in the expected format."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "handle_java_exceptions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File | Nothing", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Utility method for running an action with Java exceptions mapping."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "access_denied", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Raises an error indicating that the user does not have permission to\naccess the file in a given way."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "wrap_io_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File | Nothing", "checked": true}, "io_exception": {"lazy": false}},"aliases": [],"description": "Converts a Java `IOException` into its Enso counterpart."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the File error to a human-readable format."},
{"module": "Standard.Base.Errors.Illegal_Argument", "type": "Illegal_Argument", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "Illegal_Argument", "arguments": {"message": {"lazy": false}, "cause": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "A generic error that indicates that the provided argument is not valid\nfor the operation.","arguments": "- message: the error message explaining why the argument is illegal.\n- cause: (optional) another error that is the cause of this one."},
{"module": "Standard.Base.Errors.Illegal_Argument", "type": "Illegal_Argument", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Capture a Java `IllegalArgumentException` and convert it to an Enso dataflow error - `Illegal_Argument.Error`."},
{"module": "Standard.Base.Errors.Illegal_Argument", "type": "Illegal_Argument", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the encoding error."},
{"module": "Standard.Base.Errors.Illegal_State", "type": "Illegal_State", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "Illegal_State", "arguments": {"message": {"lazy": false}, "cause": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "A generic error that indicates that a given operation cannot be performed\nin some specific conditions.","arguments": "- message: the error message explaining why the operation cannot be\n  performed.\n- cause: (optional) another error that is the cause of this one."},
{"module": "Standard.Base.Errors.Illegal_State", "type": "Illegal_State", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Capture a Java `IllegalStateException` and convert it to an Enso dataflow error - `Illegal_State.Error`."},
{"module": "Standard.Base.Errors.Illegal_State", "type": "Illegal_State", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the encoding error."},
{"module": "Standard.Base.Errors.No_Such_Key", "type": "No_Such_Key", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "No_Such_Key", "arguments": {"object": {"lazy": false}, "key": {"lazy": false}},"aliases": [],"description": "An error for getting a missing value from a map.","arguments": "- object: The object that was being accessed.\n- key: The key that was asked for."},
{"module": "Standard.Base.Errors.No_Such_Key", "type": "No_Such_Key", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the error into a human-readable representation."},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "Ignore", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Problem_Behavior", "arguments": {},"aliases": [],"description": "Ignore the problem and attempt to complete the operation"},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "Report_Warning", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Problem_Behavior", "arguments": {},"aliases": [],"description": "Report the problem as a warning and attempt to complete the operation"},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "Report_Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Problem_Behavior", "arguments": {},"aliases": [],"description": "Report the problem as a dataflow error and abort the operation"},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "attach_problem_after", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"decorated_value": {"lazy": false}, "problem": {"lazy": false}},"aliases": [],"description": "Attaches a problem to the given value according to the expected problem\nbehavior.\n\nIf the problem behavior is set to Ignore, the value is returned as-is.\nIf it is set to Report_Warning, the value is returned with the problem\nattached as a warning.\nIf it is set to Report_Error, the problem is returned in the form of a\ndataflow error. If the value already contained any dataflow error, that\nerror takes precedence."},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "attach_problem_before", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"problem": {"lazy": false}, "decorated_value": {"lazy": true}},"aliases": [],"description": "Attaches a problem to the given value according to the expected problem\nbehavior.\n\nIf the problem behavior is set to Ignore, the value is returned as-is.\nIf it is set to Report_Warning, the value is returned with the problem\nattached as a warning.\nIf it is set to Report_Error, the problem is returned in the form of\na dataflow error."},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "attach_problems_before", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"problems": {"lazy": false}, "decorated_value": {"lazy": true}},"aliases": [],"description": "Attaches problems to the given value according to the expected problem\nbehavior.\n\nIf the problem behavior is set to Ignore, the value is returned as-is.\nIf it is set to Report_Warning, the value is returned with the problems\nattached as warnings.\nIf it is set to Report_Error, the first problem is returned in the form\nof a dataflow error. The problem takes precedence over any errors that\nmay have been contained in the value - in this case the `decorated_value`\nis not computed at all.","examples": "> Example\n  Perform pre-flight checks and then compute the actual result only if needed.\n\n      problems = preflight_checks\n      problem_behavior.attach_problems_before problems <|\n          expensive_computation"},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "attach_problems_after", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"decorated_value": {"lazy": false}, "problems": {"lazy": false}},"aliases": [],"description": "Attaches problems to the given value according to the expected problem\nbehavior.\n\nIf the problem behavior is set to Ignore, the value is returned as-is.\nIf it is set to Report_Warning, the value is returned with the problems\nattached as warnings.\nIf it is set to Report_Error, the first problem is returned in the form\nof a dataflow error. If the value already contained any dataflow error,\nthat error takes precedence.","examples": "> Example\n  First compute a result and then, only if the computation has succeeded,\n  perform any postprocessing checks which may raise warnings/errors.\n\n      result = compute_result\n      problem_behavior.attach_problems_after result <|\n          perform_post_process_checks_and_return_problems"},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "handle_errors", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"result": {"lazy": false}, "fallback": {"lazy": true}, "error_type": {"lazy": false, "default": "Any"}},"aliases": [],"description": "A helper method that will handle any errors contained within the result\naccording to the current problem behavior settings. If the `result` does\nnot contain an error, it is returned as-is. Otherwise, if the problem\nbehavior is `Report_Error`, the error will be passed as-is. If it is\n`Report_Warning`, the error is turned into a warning, and the fallback\nvalue is returned with that error attached to it as a warning. If it is\n`Ignore`, the fallback value is returned and the error is discarded.\n\nThe `error_type` parameter can be overridden to catch only some types of\nerrors. By default `Any` error is caught."},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "escalate_warnings", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Checks any warnings reported by the `action` and reports them according\nto this problem behavior - they may be kept as-is, ignored or escalated\nto errors.\n\nIf the `action` itself yields a dataflow error, that error is passed\nas-is, regardless of the problem behavior settings."},
{"module": "Standard.Base.Errors.Time_Error", "type": "Time_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "Time_Error", "arguments": {"error_message": {"lazy": false}, "cause": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "An error produced while working with time- and date-related methods.","arguments": "- error_message: The message for the error.\n- cause: An optional exception that caused this error (usually a Java Exception)."},
{"module": "Standard.Base.Errors.Time_Error", "type": "Time_Error", "name": "epoch_start", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Time_Error", "type": "Time_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the time error."},
{"module": "Standard.Base.Errors.Unimplemented", "type": "Unimplemented", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "Unimplemented", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "A type used to represent that something has not yet been implemented.","arguments": "- message: The message describing what implementation is missing."},
{"module": "Standard.Base.Errors.Unimplemented", "type": "Unimplemented", "name": "throw", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"message": {"lazy": false, "default": "\"\""}},"aliases": [],"description": "A function that can be used to indicate that something hasn't been\nimplemented yet.","arguments": "- message: A description of what implementation is missing.","examples": "> Example\n  Throwing an error to show that something is unimplemented.\n\n      import Standard.Base.Errors.Common as Errors\n\n      example_unimplemented = Errors.Unimplemented.throw"},
{"module": "Standard.Base.Errors.Unimplemented", "type": "Unimplemented", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the unimplemented error to a human-readable error message."},
{"module": "Standard.Base.Errors.Wrapped_Error", "type": "Wrapped_Error", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Wrapped_Error", "arguments": {"wrapping_error": {"lazy": false}, "inner_error": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Errors.Wrapped_Error", "type": "Wrapped_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Analyzer", "arguments": {"nodes": {"lazy": false, "type": "Vector (Common_Nodes | Standard_Date_Patterns | ISO_Week_Year_Patterns | Time_Patterns | Time_Zone_Patterns)", "checked": true}, "flattened": {"lazy": true}},"aliases": [],"arguments": "- nodes: The raw list of nodes as returned from the parser.\n- flattened: The list of nodes after flattening the optional sections and\n  removing literals - so it just contains raw patterns."},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"nodes": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "has_required", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Checks if the given node is contained as one of the nodes, ignoring the optional ones."},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "validate_after_parsing", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"continuation": {"lazy": true}},"aliases": [],"description": "Runs basic validations that can happen on construction of the formatter, regardless of the context."},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "get_parsing_only_warnings", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Prepares a list of warnings that are only reported when parsing using the\nformatter."},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "check_possible_m_mismatches", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "check_possible_seconds_aliasing", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "has_24h", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "has_12h", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "has_am_pm", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "check_24h_and_am_pm_collision", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "check_missing_am_pm_in_hour_parse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "has_day_and_month_but_not_year", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "check_missing_year_in_date_parse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter", "type": "", "name": "interpret", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false}, "nodes": {"lazy": false}, "prepare_defaults": {"lazy": false, "default": "True"}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter", "type": "", "name": "get_field_for", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter", "type": "", "name": "append_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"builder": {"lazy": false}, "field": {"lazy": false}, "representation": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter", "type": "", "name": "text_representation_to_java_style", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"representation": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Text_Representation", "name": "Short_Form", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text_Representation", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Text_Representation", "name": "Long_Form", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text_Representation", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Numeric_Representation", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Numeric_Representation", "arguments": {"digits": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Two_Digit_Year_Representation", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Two_Digit_Year_Representation", "arguments": {"max_year": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Common_Nodes", "name": "Literal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Common_Nodes", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Common_Nodes", "name": "Optional_Section", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Common_Nodes", "arguments": {"inner_nodes": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Standard_Date_Patterns", "name": "Year", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Standard_Date_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation | Two_Digit_Year_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Standard_Date_Patterns", "name": "Quarter", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Standard_Date_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Standard_Date_Patterns", "name": "Month", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Standard_Date_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation | Text_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Standard_Date_Patterns", "name": "Day_Of_Month", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Standard_Date_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Standard_Date_Patterns", "name": "Day_Of_Week", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Standard_Date_Patterns", "arguments": {"representation": {"lazy": false, "type": "Text_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "ISO_Week_Year_Patterns", "name": "Week_Based_Year", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "ISO_Week_Year_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation | Two_Digit_Year_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "ISO_Week_Year_Patterns", "name": "Week_Of_Year", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "ISO_Week_Year_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "ISO_Week_Year_Patterns", "name": "Day_Of_Week", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "ISO_Week_Year_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation | Text_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Patterns", "name": "Hour", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}, "is_24h": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Patterns", "name": "AM_PM", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Patterns", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Patterns", "name": "Minute", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Patterns", "name": "Second", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Patterns", "name": "Fraction_Of_Second", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Zone_Patterns", "name": "Time_Zone_Name", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Zone_Patterns", "arguments": {"representation": {"lazy": false, "type": "Text_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Zone_Patterns", "name": "Time_Zone_ID", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Zone_Patterns", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Zone_Patterns", "name": "Time_Zone_Offset", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Zone_Patterns", "arguments": {"pattern": {"lazy": false, "type": "Text", "checked": true}, "zero": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Zone_Patterns", "name": "Time_Zone_Localized_Offset", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Zone_Patterns", "arguments": {"representation": {"lazy": false, "type": "Text_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser_Mode", "name": "Simple", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Parser_Mode", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser_Mode", "name": "ISO_Week_Year", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Parser_Mode", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser_Mode", "name": "pattern_format_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Parser", "arguments": {"tokens": {"lazy": false, "type": "Vector (Format_Token | Nothing)", "checked": true}, "position": {"lazy": false, "type": "Ref Integer", "checked": true}, "mode": {"lazy": false, "type": "Parser_Mode", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tokens": {"lazy": false}, "mode": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "run", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "parse_common_token", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"token": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "fail_invalid_pattern", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"character": {"lazy": false}, "count": {"lazy": false}, "extra_message": {"lazy": false, "default": "\"\""}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "consume_token", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "consume_curly_parameter_if_exists", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the next token is a curly brace parameter.\nIf it is, it is consumed and its value (as Text) is returned.\nOtherwise, returns Nothing and does not move the cursor."},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "resolve_year_representation", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "parse_simple_date_pattern", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"character": {"lazy": false}, "count": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "parse_iso_week_year_pattern", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"character": {"lazy": false}, "count": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "parse_time_or_timezone_pattern", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"character": {"lazy": false}, "count": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "", "name": "default_max_year", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "", "name": "parse_simple_date_pattern", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tokens": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "", "name": "parse_iso_week_year_pattern", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tokens": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Format_Token", "name": "Pattern", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Format_Token", "arguments": {"character": {"lazy": false, "type": "Text", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "A format pattern described by a single character and count."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Format_Token", "name": "Literal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Format_Token", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A literal text string."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Format_Token", "name": "Optional_Section_Start", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Format_Token", "arguments": {},"aliases": [],"description": "Indicates beginning of an optional section."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Format_Token", "name": "Optional_Section_End", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Format_Token", "arguments": {},"aliases": [],"description": "Indicates end of an optional section."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Format_Token", "name": "Curly_Section", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Format_Token", "arguments": {"inner_text": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A special parameter in curly braces.\n\nCurrently only used to customize base year for `yy`, i.e. `yy{2099}`."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Tokenizer", "arguments": {"original_text": {"lazy": false, "type": "Text", "checked": true}, "chars": {"lazy": false, "type": "Vector Text", "checked": true}, "tokens_builder": {"lazy": false, "type": "Builder Format_Token", "checked": true}, "optional_nesting": {"lazy": false, "type": "Ref Integer", "checked": true}},"aliases": [],"description": "A helper type to hold the state of the tokenizer.\nNormally, we could keep these in the closure, inside of a method.\nBut our 3 parse methods need to be able to call each other, and mutual\nrecursion of variables defined inside of a method is not supported in\nEnso. So to achieve the mutual recursion, we instead define these as\nmember methods."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"builder": {"lazy": false}, "text": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "tokenize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "finalize_token", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current_token": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "is_in_optional", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if we are inside of an optional section."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "enter_optional_section", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "exit_optional_section", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "parse_normal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"position": {"lazy": false}, "current_token": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "parse_quoted", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"position": {"lazy": false}, "text_accumulator": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "parse_curly", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"position": {"lazy": false}, "text_accumulator": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "new_array_proxy_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "at": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "new_vector_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"capacity": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"array_like": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "at", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"array_like": {"lazy": false}, "index": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "vector_to_array", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"array_like": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "flatten", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"array_like": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "insert_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "at": {"lazy": false}, "items": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "remove_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "at": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "slice", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "start": {"lazy": false}, "end": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "vector_from_function", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "constructor": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "Construct a Vector by mapping a function over 0..length-1.","errors": ""},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "slice_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "ranges": {"lazy": false}},"aliases": [],"description": "Creates a new vector where for each range, a corresponding section of the\nsource vector is added to the result.\n\nAssumes that the ranges have been already bounds-checked (for example by\npassing them through `resolve_ranges`)."},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "slice_many_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "ranges": {"lazy": false}},"aliases": [],"description": "See `slice_ranges`."},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "check_start_valid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "length": {"lazy": false}, "function": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "sort", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "order": {"lazy": false}, "on": {"lazy": false}, "by": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "on_problems_to_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Returns a mapping of Problem_Behavior constructors to an integer.\nUsed for sending the number to Java, rather than sending the atom."},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "distinct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "on": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "duplicates", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "on": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "take", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "range": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "drop", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "range": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "get", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "index": {"lazy": false}, "if_missing": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "insert", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "at": {"lazy": false}, "item": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "remove", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "at": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "index_of", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}, "start": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "last_index_of", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}, "start": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "any", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "plus", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "that": {"lazy": false, "type": "Vector | Array", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "find", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}, "start": {"lazy": false}, "if_missing": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "transpose", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vec_of_vecs": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "function": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "map_with_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "function": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "flat_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "function": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "fold", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "init": {"lazy": false}, "function": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "fold_with_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "init": {"lazy": false}, "function": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "reduce", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "function": {"lazy": false}, "if_empty": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "running_fold", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "init": {"lazy": false}, "function": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "pad", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "n": {"lazy": false}, "elem": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "each", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "f": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "each_with_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "f": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "reverse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "to_list", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "short_display_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "max_entries": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "join", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "separator": {"lazy": false}, "prefix": {"lazy": false}, "suffix": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "partition", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "partition_with_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "predicate": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "filter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "filter": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "filter_with_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "predicate": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "check_same_length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Check that all vectors have the same length and return an informative message\nif they don't.\n\nCompares all vectors to the first one and reports the first one that differs."},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Context_Helpers", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context_Helpers", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Context_Helpers", "name": "is_enabled", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"c": {"lazy": false}, "env": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Context_Helpers", "name": "with_enabled_context_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"context": {"lazy": false}, "environment": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Context_Helpers", "name": "with_disabled_context_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"context": {"lazy": false}, "environment": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Context_Helpers", "name": "current_execution_environment", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Integer", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Context", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Data_Read_Helpers", "type": "", "name": "looks_like_uri", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Data_Read_Helpers", "type": "", "name": "fetch_following_data_links", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "type": "Vector", "checked": true, "default": "[]"}, "format": {"lazy": false}, "cache_policy": {"lazy": false, "type": "Cache_Policy", "checked": true, "default": "..Default"}},"aliases": [],"description": "A common implementation for fetching a resource and decoding it,\nfollowing encountered data links."},
{"module": "Standard.Base.Internal.Data_Read_Helpers", "type": "", "name": "decode_http_response_following_data_links", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"response": {"lazy": false}, "format": {"lazy": false}},"aliases": [],"description": "Decodes a HTTP response, handling data link access."},
{"module": "Standard.Base.Internal.Data_Read_Helpers", "type": "", "name": "format_widget_with_raw_response", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Data_Read_Helpers", "type": "", "name": "handle_legacy_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"method_name": {"lazy": false, "type": "Text", "checked": true}, "new_argument_name": {"lazy": false, "type": "Text", "checked": true}, "format": {"lazy": false}},"aliases": [],"description": "A helper method that handles the old-style invocation of `Data.fetch` and `Data.post`.\nBefore the introduction of the `format` parameter, these methods had a\n`try_auto_parse_result` parameter taking a Boolean at the same position.\nTo ensure old code relying on positional arguments still works, we have special handling for the Boolean case.\nThis 'migration' will not work unfortunately if the argument was named."},
{"module": "Standard.Base.Internal.Error_Builtins", "type": "Error", "name": "catch_primitive", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"handler": {"lazy": false}},"aliases": [],"description": "Executes the provided handler on a dataflow error, or executes as\nidentity on a non-error value.","arguments": "- handler: The function to call on this if it is an error value."},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "Stream_Utils", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "File_Utils", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "CompareException", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "ObjectComparator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "CaseFoldedString", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "Text_Utils", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "BreakIterator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "Exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "RuntimeException", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Instrumentor", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Instrumentor", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Instrumentor", "name": "on_enter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"fn": {"lazy": false, "type": "Text -> Any | Nothing", "checked": true}},"aliases": [],"description": "Registers callback to be executed at the begining of node/expression\nexecution. The callback `fn` gets UUID of the node/expression that is\nbeing executed and can return `Nothing` to continue regular execution\nor anything else to skip the execution and just return given value.","arguments": "- fn: The callback function accepting UUID."},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Instrumentor", "name": "on_return", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"fn": {"lazy": false, "type": "Text -> Any -> Nothing", "checked": true}, "expression": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Registers callback to be executed when a node/expression evaluation\nis over. The callback `fn` gets UUID and the computed value (or value\nof `expression` if specified). Usually\nthe value is _cached_ and returned from `on_enter` callback next time\nthe same expression is evaluated.","arguments": "- fn: The callback function accepting UUID and computed value\n- expression: Expression to evaluate on_return - by default Nothing -\n  e.g. to provide the return value of the function","examples": "> Example\n  Specify `expression` to _\"inline evaluate\"_ it.\n     see_a_b uuid:Text ~result =\n       if uuid == \"expected-uuid\" then\n         IO.println \"evalutated to \"+result.to_text\n\n     Meta.meta .fn . instrument . on_return fn=see_a_b expression=\"a+b\" . activate"},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Instrumentor", "name": "on_call", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"fn": {"lazy": false, "type": "Text -> Function -> Vector Any -> Any | Nothing", "checked": true}},"aliases": [],"description": "Registers callback to be executed when a node/expression representing function is about to be called.\nThe callback `fn` shall accept three arguments. The UUID to identify the expression, the function to be\ninvoked and the arguments to pass to the function. The callback can return `Nothing`\n(in such case the function gets executed with provided arguments) or some other value,\nwhich is then returned instead of calling the function.","arguments": "- fn: The callback function accepting UUID and function value"},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Instrumentor", "name": "activate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Activates configured instrumentor. Returns managed resource to\ndeactivate the instrumentor later.","arguments": "- value: The value of the atom in the meta representation."},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Meta.Unresolved_Symbol", "name": "instrument", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Instrumentor", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Starts building an instrumentation for a given node"},
{"module": "Standard.Base.Internal.IO_Helpers", "type": "", "name": "println", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": false}, "ends_with": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_atom_constructor_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_atom_fields_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_type_constructors_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"typ": {"lazy": false}, "factory": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_type_methods_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"typ": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_polyglot_language_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "create_unresolved_symbol_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "symbol": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_unresolved_symbol_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"symbol": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_constructor_fields_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom_constructor": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_constructor_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom_constructor": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "new_atom_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}, "fields": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "atom_with_hole_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"factory": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "is_same_object_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_1": {"lazy": false}, "value_2": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "is_a_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "typ": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "type_of_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_annotation_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target": {"lazy": false}, "method": {"lazy": false}, "parameter_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "find_atom_constructor_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_kind_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "simple_type_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_qualified_type_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_short_type_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"typ": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_constructor_declaring_type_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "instrumentor_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op": {"lazy": false}, "args": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "find_type_by_qualified_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"fqn": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_plus", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_minus", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_times", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_divide", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_mod", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_pow", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_and", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_or", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_xor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_shift", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_shift_r", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_not", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_abs", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_ceil", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_floor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_negate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_to_float", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_greater", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_greater_equal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_less", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_less_equal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "round_integer_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "radix": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_plus", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_minus", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_times", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_divide", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_mod", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_pow", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_abs", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_ceil", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_floor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_negate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_greater", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_greater_equal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_less", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_less_equal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_truncate_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "round_float_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Default_Comparator", "arguments": {},"aliases": [],"description": "Default implementation of a _comparator_."},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "hash_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "less_than_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left": {"lazy": false}, "right": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "hash_callback", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom": {"lazy": false}},"aliases": [],"description": "Called as a callback from internal engine code for an atom with a custom\ncomparator. It is assumed that the given atom has a custom comparator, that is\na comparator different than `Default_Comparator`."},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "compare_callback", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "A callback allowing to compare two atoms with a custom comparator."},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Positive_Integer_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Positive_Integer_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Positive_Integer_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Positive_Integer", "checked": true}, "y": {"lazy": false, "type": "Positive_Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Positive_Integer_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Positive_Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Ordering_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ordering_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Ordering_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Ordering", "checked": true}, "y": {"lazy": false, "type": "Ordering", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Ordering_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Ordering", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "", "name": "assert_same_comparators", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the comparators for the given objects are both of the same type. If so,\nproceeds with the given action, and if not, throws `Incomparable_Values` error."},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "", "name": "compare_with_comparators", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ordering ! Incomparable_Values", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Path_Helpers", "type": "", "name": "normalize_segments", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector ! Illegal_Argument", "arguments": {"segments": {"lazy": false, "type": "Vector", "checked": true}, "get_name": {"lazy": false, "type": "Any -> Text", "checked": true}},"aliases": [],"description": "A helper that gathers the common logic of normalizing the `..` and `.`\nentries in paths.\n\nIt raises `Illegal_Argument` if the `..` entries try to go above the root of\nthe path."},
{"module": "Standard.Base.Internal.Path_Helpers", "type": "", "name": "resolve_many_parts", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_file": {"lazy": false, "type": "Any", "checked": true}, "subpath": {"lazy": false, "type": "Text", "checked": true}, "windows_delimiter": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "The method splits the `subpath` into parts based on the `/` delimiter and\napplies each part iteratively using the `resolve_single_part` method on the\nfile objects.\n\nEach delimiter is applied together with the file part preceding it (if any),\nso call `resolve_many_parts f \"/a/b/c\"` translates into\n`f.resolve_single_part \"/\" . resolve_single_part \"a/\" . resolve_single_part \"b/\" . resolve_single_part \"c\"`.\nKeeping the delimiter is needed for some systems to be able to distinguish\ndirectories from regular files (e.g. S3)."},
{"module": "Standard.Base.Internal.Path_Helpers", "type": "", "name": "split_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Text", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}, "windows_delimiter": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Splits the given path into parts based on the delimiter."},
{"module": "Standard.Base.Internal.Polyglot_Helpers", "type": "", "name": "handle_polyglot_dataflow_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "round_max_long", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The largest smallInteger (Long) that integer round can handle. Above 14\ndigits, it is possible that the underlying long, converted to double in the\nrounding process, would lose precision in the least significant bits.\n(See https://en.wikipedia.org/wiki/Double-precision_floating-point_format.)"},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "round_min_long", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The largest smallInteger (Long) that integer round can handle. Above 14\ndigits, it is possible that the underlying long, converted to double in the\nrounding process, would lose precision in the least significant bits.\n(See https://en.wikipedia.org/wiki/Double-precision_floating-point_format.)"},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "check_round_input", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Restrict allowed range of input to rounding methods."},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "round_min_decimal_places", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The smallest allowed value for the `decimal_places` argument to `round`"},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "round_max_decimal_places", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The largest allowed value for the `decimal_places` argument to `round`"},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "check_decimal_places", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Restrict rounding decimal_places parameter."},
{"module": "Standard.Base.Internal.Runtime_Helpers", "type": "", "name": "primitive_get_stack_trace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a raw representation of the current execution stack trace.\nYou probably want `Runtime.get_stack_trace` instead."},
{"module": "Standard.Base.Internal.Runtime_Helpers", "type": "", "name": "gc", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Runtime_Helpers", "type": "", "name": "assertions_enabled", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Runtime_Helpers", "type": "", "name": "no_inline", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Runtime_Helpers", "type": "", "name": "no_inline_with_arg", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "arg": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Telemetry", "type": "", "name": "log", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {"logger_name": {"lazy": false, "type": "Text", "checked": true}, "msg": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Schedules a single telemetry message for sending.","arguments": "- logger_name: Name of the (telemetry) logger\n- msg: Message. Must be of format `<msg>: <args>`, where `<args>` has\n  `<argname>=<argvalue>` mapping separated by `,`, for example\n  \"my message: arg1=1, arg2=2\".\n  See org.enso.logging.service.logback.telemetry.LogFormatter\n- args: Arguments passed to the LoggingEvent object"},
{"module": "Standard.Base.Internal.Telemetry", "type": "", "name": "_root_logger_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Project_Description", "arguments": {"prim_root_file": {"lazy": false}, "ns": {"lazy": false, "type": "Text", "checked": true}, "n": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A representation of an Enso project.","arguments": "- prim_root_file: The primitive root file of the project.\n- prim_config: The primitive config of the project."},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"module": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Returns the Enso project description for the given module. If no module is\ngiven, returns the description of the project that the engine was executed\nwith, i.e., the project that contains the `main` method, or throws\n`Module_Not_In_Package_Error` if there is no such project, e.g., when\nexecuting a single file.","arguments": "- module: An optional module for which the Enso project description\n  will be fetched. If `Nothing`, the current project description will\n  be fetched.","examples": "> Example\n  Get the project description for the project that contains the `main`\n  method.\n\n      Project_Description.new\n\n\n> Example\n  Get the project description for the `Standard.Visualizations` project.\n\n      Project_Description.new Standard.Visualizations\n\n\n> Example\n  Get the project description for the `Standard.Base` project from the\n  `Vector` module.\n\n      Project_Description.new Standard.Base.Data.Vector"},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "enso_project_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"module": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "root", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "folder","description": "Returns the root directory of the project.","examples": "> Example\n  Get the root directory of the project.\n\n      enso_project.root"},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "data", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Input","icon": "folder","description": "Returns the root data directory of the project.","examples": "> Example\n  Get the data directory of the project.\n\n      enso_project.data"},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the name of the project.","examples": "> Example\n  Get the name of the project.\n\n      enso_project.name"},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "namespace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the namespace of the project.","examples": "> Example\n  Get the namespace of the project.\n\n      enso_project.namespace"},
{"module": "Standard.Base.Meta.Enso_Project", "type": "", "name": "enso_project", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "enso_icon","description": "Returns the Enso project description for the project that the engine was\nexecuted with, i.e., the project that contains the `main` method, or\nthrows `Module_Not_In_Package_Error` if executing a single file.","examples": "> Example\n  Get the project description for the project that contains the `main`\n  method.\n\n      enso_project"},
{"module": "Standard.Base.Network.HTTP.Internal.HTTP_Fetch_Data_Link", "type": "HTTP_Fetch_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "HTTP_Fetch_Data_Link", "arguments": {"request": {"lazy": false, "type": "Request", "checked": true}, "format_json": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Internal.HTTP_Fetch_Data_Link", "type": "HTTP_Fetch_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "HTTP_Fetch_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Internal.HTTP_Fetch_Data_Link", "type": "HTTP_Fetch_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Internal.HTTP_Fetch_Data_Link", "type": "HTTP_Fetch_Data_Link", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Internal.HTTP_Fetch_Data_Link", "type": "Data_Link_With_Input_Stream", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "HTTP_Fetch_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Cache_Policy", "type": "Cache_Policy", "name": "Default", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Cache_Policy", "arguments": {},"aliases": [],"description": "Use the default policy for the HTTP method of the request."},
{"module": "Standard.Base.Network.HTTP.Cache_Policy", "type": "Cache_Policy", "name": "Use_Cache", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Cache_Policy", "arguments": {},"aliases": [],"description": "Use the response cache."},
{"module": "Standard.Base.Network.HTTP.Cache_Policy", "type": "Cache_Policy", "name": "No_Cache", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Cache_Policy", "arguments": {},"aliases": [],"description": "Don't use the response cache."},
{"module": "Standard.Base.Network.HTTP.Cache_Policy", "type": "Cache_Policy", "name": "should_use_cache", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"request": {"lazy": false, "type": "Request", "checked": true}},"aliases": [],"description": "Default to using the cache for GET requests, unless explicitly disabled"},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Header", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Text|Enso_Secret|Derived_Secret_Value", "checked": true}},"aliases": [],"description": "A type representing a header.","arguments": "- name: The header name.\n- value: The header value."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "unify_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"headers": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Normalize a vector of `Header`, `Pair`s or `Vector`s into a vector of\n`Header` values."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}},"aliases": ["build a header"],"icon": "text_input","description": "Create a new Header.","arguments": "- name: The name of the header.\n- value: The value for the header.","examples": "> Example\n  Create a new header called \"My_Header\".\n\n      import Standard.Base.Network.HTTP.Header.Header\n\n      example_new = Header.new \"My_Header\" \"my header's value\""},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "accept", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"icon": "text_input","description": "Create an \"Accept\" header.","arguments": "- value: The value for the accept header.","examples": "> Example\n  Create an accept header.\n\n      import Standard.Base.Network.HTTP.Header.Header\n\n      example_accept = Header.accept \"my_field\""},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "accept_all", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text_input","description": "Create a header that accepts all (`\"*/*\"`).","examples": "> Example\n  Create an accept all header.\n\n      import Standard.Base.Network.HTTP.Header.Header\n\n      example_accept_all = Header.accept_all"},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "authorization", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}},"aliases": ["build an auth header"],"icon": "text_input","description": "Create an \"Authorization\" header.","arguments": "- value: The value for the authorization header.","examples": "> Example\n  Create an auth header containing \"foo\".\n\n      import Standard.Base.Network.HTTP.Header.Header\n\n      example_auth = Header.authorization \"foo\""},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "authorization_basic", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"user": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}, "pass": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}},"aliases": [],"icon": "text_input","description": "Create HTTP basic auth header.","arguments": "- user: The username.\n- pass: The password.","examples": "> Example\n  Create basic auth header.\n\n      import Standard.Base.Network.HTTP.Header.Header\n\n      example_auth_basic = Header.authorization_basic \"user\" \"pass\""},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "authorization_bearer", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"token": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}},"aliases": [],"icon": "text_input","description": "Create bearer token auth header.","arguments": "- token: The token."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "content_type", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false, "type": "Text", "checked": true}, "encoding": {"lazy": false, "type": "Encoding | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"icon": "text_input","description": "Create \"Content-Type\" header.","arguments": "- value: The value for the content type header.\n- encoding: The `Encoding` to use as the `charset` in the content-type\n  value. If encoding is `Nothing`, then the `charset` is not added to the\n  header valye.","examples": "> Example\n  Create a content type header containing \"my_type\".\n\n      import Standard.Base.Network.HTTP.Header.Header\n\n      example_content_type = Header.content_type \"my_type\""},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "application_json", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text_input","description": "Header \"Content-Type: application/json\".","examples": "> Example\n  Create a header with content type \"application/json\".\n\n      import Standard.Base.Network.HTTP.Header.Header\n\n      example_app_json = Header.application_json"},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "application_octet_stream", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text_input","description": "Header \"Content-Type: application/octet-stream\".","examples": "> Example\n  Create a header with content type \"application/octet-stream\".\n\n      import Standard.Base.Network.HTTP.Header.Header\n\n      example_app_octet = Header.application_octet_stream"},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "application_x_www_form_urlencoded", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text_input","description": "Header \"Content-Type: application/x-www-form-urlencoded\".","examples": "> Example\n  Create a header with content type \"application/x-www-form-urlencoded\".\n\n      import Standard.Base.Network.HTTP.Header.Header\n\n      example_app_x_www = Header.application_x_www_form_urlencoded"},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "multipart_form_data", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"boundary": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"icon": "text_input","description": "Header \"Content-Type: multipart/form-data\".","arguments": "- boundary: The text that delimits boundaries between the parts of the form.","examples": "> Example\n  Create a header with content type \"multipart/form-data\".\n\n      import Standard.Base.Network.HTTP.Header.Header\n\n      example_multipart = Header.multipart_form_data"},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "text_plain", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text_input","description": "Header \"Content-Type: text/plain\".","examples": "> Example\n  Create a header with the content type \"text/plain\".\n\n      import Standard.Base.Network.HTTP.Header.Header\n\n      example_header_text_plain = Header.text_plain"},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "content_type_header_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the name for content_type"},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Header."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "to_java_pair", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Header_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Header", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "", "name": "content_type_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.HTTP_Error", "type": "HTTP_Error", "name": "IO_Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Error", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A generic IO error.","arguments": "- uri: The uri that couldn't be read.\n- message: The message for the error."},
{"module": "Standard.Base.Network.HTTP.HTTP_Error", "type": "HTTP_Error", "name": "Status_Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Error", "arguments": {"status_code": {"lazy": false, "type": "HTTP_Status_Code", "checked": true}, "message": {"lazy": false, "type": "Text|Nothing", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}},"aliases": [],"description": "An error indicating that a non-200 status code was returned.","arguments": "- status_code: The status code that was returned.\n- message: The message for the error, if it was able to be read.\n- uri: The uri that couldn't be read."},
{"module": "Standard.Base.Network.HTTP.HTTP_Error", "type": "HTTP_Error", "name": "handle_java_exceptions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Utility method for running an action with Java exceptions mapping."},
{"module": "Standard.Base.Network.HTTP.HTTP_Error", "type": "HTTP_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the HTTP_Error to a human-readable format."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Options", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"OPTIONS\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Get", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"GET\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Head", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"HEAD\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Post", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"POST\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Put", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"PUT\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Patch", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"PATCH\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Delete", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"DELETE\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Trace", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"TRACE\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Connect", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"CONNECT\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Custom", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {"verb": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Custom unsupported HTTP method."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "default_fetch_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Widget for get operations"},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "default_post_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Widget for get operations"},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "to_http_method_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a Text of the HTTP method name."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Converts from Text to an HTTP_Method."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Status_Code", "arguments": {"code": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "An HTTP status code.","arguments": "- code: The numeric representation of the code."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "continue", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "100 Continue."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "switching_protocols", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "101 Switching Protocols."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "ok", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "200 OK."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "created", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "201 Created."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "accepted", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "202 Accepted."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "non_authoritative_information", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "203 Non-Authoritative Information."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "no_content", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "204 No Content."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "reset_content", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "205 Reset Content."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "partial_content", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "206 Partial Content."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "multiple_choices", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "300 Multiple Choices."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "moved_permanently", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "301 Moved Permanently."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "found", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "302 Found."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "see_other", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "303 See Other."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "not_modified", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "304 Not Modified."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "use_proxy", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "305 Use Proxy."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "temporary_redirect", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "307 Temporary Redirect."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "bad_request", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "400 Bad Request."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "unauthorized", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "401 Unauthorized."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "payment_required", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "402 Payment Required."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "forbidden", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "403 Forbidden."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "not_found", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "404 Not Found."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "method_not_allowed", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "405 Method Not Allowed."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "not_acceptable", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "406 Not Acceptable."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "proxy_authentication_required", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "407 Proxy Authentication Required."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "request_timeout", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "408 Request Timeout."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "conflict", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "409 Conflict."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "gone", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "410 Gone."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "length_required", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "411 Length Required."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "precondition_failed", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "412 Precondition Failed."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "request_entity_too_large", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "413 Request Entity Too Large."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "request_uri_too_long", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "414 Request-URI Too Long."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "unsupported_media_type", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "415 Unsupported Media Type."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "requested_range_not_satisfiable", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "416 Requested Range Not Satisfiable."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "expectation_failed", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "417 Expectation Failed."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "internal_server_error", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "500 Internal Server Error."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "not_implemented", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "501 Not Implemented."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "bad_gateway", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "502 Bad Gateway."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "service_unavailable", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "503 Service Unavailable."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "gateway_timeout", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "504 Gateway Timeout"},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "http_version_not_supported", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "505 HTTP Version Not Supported."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "is_success", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "Does the status code represent a successful response?"},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this HTTP_Status_Code."},
{"module": "Standard.Base.Network.HTTP.HTTP_Version", "type": "HTTP_Version", "name": "HTTP_1_1", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Version", "arguments": {},"aliases": [],"description": "Use HTTP version 1.1."},
{"module": "Standard.Base.Network.HTTP.HTTP_Version", "type": "HTTP_Version", "name": "HTTP_2", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Version", "arguments": {},"aliases": [],"description": "Use HTTP version 2."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Request", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}, "headers": {"lazy": false, "type": "Vector", "checked": true}, "body": {"lazy": false, "type": "Request_Body", "checked": true}},"aliases": [],"description": "A type representing an HTTP request.","arguments": "- method: The HTTP method represented by the request.\n- uri: The URI for the request.\n- headers: A vector containing headers for the request.\n- body: The body of the request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "url": {"lazy": false, "type": "URI", "checked": true}, "headers": {"lazy": false, "type": "Vector Header", "checked": true, "default": "[]"}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}},"aliases": [],"icon": "data_download","description": "Create new HTTP request.","arguments": "- method: The HTTP method represented by the request.\n- url: The address for the request.\n- headers: A vector containing headers for the request.\n- body: The body of the request.","examples": "> Example\n  Create a new post request with no headers and no body.\n\n      import Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method\n      import Standard.Base.Network.HTTP.Request.Request\n      import Standard.Base.Network.URI.URI\n\n      example_new = Request.new Method.Post (URI.parse \"http://example.com\")"},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "options", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": [],"icon": "find","description": "Create an Options request.","examples": "> Example\n  Create a new options request.\n\n      import Standard.Base.Network.HTTP.Request.Request\n      import Standard.Base.Network.URI.URI\n\n      example_options = Request.options (URI.parse \"http://example.com\")"},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "get", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": [],"icon": "data_input","description": "Create a Get request.","arguments": "- url: The address for the request.\n- headers: A vector containing headers for the request.","examples": "> Example\n  Create a new get request.\n\n      import Standard.Base.Network.HTTP.Request.Request\n      import Standard.Base.Network.URI.URI\n\n      example_get = Request.get (URI.parse \"http://example.com\")"},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "head", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": [],"icon": "data_input","description": "Create a Head request.","arguments": "- url: The address for the request.\n- headers: A vector containing headers for the request.","examples": "> Example\n  Create a new head request.\n\n      import Standard.Base.Network.HTTP.Request.Request\n      import Standard.Base.Network.URI.URI\n\n      example_head = Request.head (URI.parse \"http://example.com\")"},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "post", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "body": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": ["http post", "upload"],"icon": "data_upload","description": "Create a Post request.","arguments": "- url: The address for the request.\n- body: The body for the request.\n- headers: A vector containing headers for the request.","examples": "> Example\n  Create a new post request.\n\n      import Standard.Base.Network.HTTP.Request.Request\n      import Standard.Base.Network.Request_Body.Request_Body\n      import Standard.Base.Network.URI.URI\n\n      example_post = Request.post (URI.parse \"http://example.com\") Request_Body.Empty"},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "put", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "body": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": [],"icon": "data_upload","description": "Create a Put request.","arguments": "- url: The address for the request.\n- body: The body for the request.\n- headers: A vector containing headers for the request.","examples": "> Example\n  Create a new put request.\n\n      import Standard.Base.Network.HTTP.Request.Request\n      import Standard.Base.Network.HTTP.Request_Body.Request_Body\n      import Standard.Base.Network.URI.URI\n\n      example_put = Request.put (URI.parse \"http://example.com\") Request_Body.Empty"},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "delete", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": [],"icon": "trash","description": "Create a Delete request.","arguments": "- url: The address for the request.\n- headers: A vector containing headers for the request.","examples": "> Example\n  Create a new delete request.\n\n      import Standard.Base.Network.HTTP.Request.Request\n      import Standard.Base.Network.URI.URI\n\n      example_delete = Request.delete (URI.parse \"http://example.com\")"},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "with_header", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "val": {"lazy": false}},"aliases": [],"icon": "edit","description": "Sets the header for the request.","arguments": "- key: The name for the header in this request.\n- val: The value for the header in this request.","examples": "> Example\n  Create a request and add a new header to it.\n\n      import Standard.Base.Network.HTTP.Request.Request\n\n      example_with_header = Request.delete.with_header \"Foo\" \"bar\""},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "with_headers", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_headers": {"lazy": false}},"aliases": [],"icon": "edit","description": "Sets the headers in the request.","arguments": "- new_headers: A vector of headers to put in the request. If `self` has\n  any headers they will be replaced with new_headers.","examples": "> Example\n  Create a request and unset all the headers.\n\n      import Standard.Base.Network.HTTP.Request.Request\n\n      example_with_headers = Request.delete.with_headers []"},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "with_body", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_body": {"lazy": false}},"aliases": [],"icon": "edit","description": "Set the body for the request.","arguments": "- new_body: The body to insert into the request.","examples": "> Example\n  Unsetting the body in a post request.\n\n     import Standard.Base.Network.HTTP.Request.Request\n     import Standard.Base.Network.HTTP.Request_Body.Request_Body\n     import Standard.Base.Network.URI.URI\n\n     example_with_body =\n         Request.post (URI.parse \"http://example.com\") Request_Body.Empty |> _.with_body Request_Body.Empty"},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "with_json", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"json_body": {"lazy": false}},"aliases": [],"icon": "edit","description": "Set the body text in the request encoded as \"application/json\".","arguments": "- json_body: The body to add to the request. It must be textual JSON.","examples": "> Example\n  Setting the body in a post request to some JSON.\n\n     import Standard.Base.Network.HTTP.Request.Request\n     import Standard.Base.Network.HTTP.Request_Body.Request_Body\n     import Standard.Base.Network.URI.URI\n\n     example_with_json =\n         Request.post (URI.parse \"http://example.com\") Request_Body.Empty |> _.with_json '{ \"a\": \"b\" }'"},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "with_form", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"parts": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Set body as vector of parts encoded as \"application/x-www-form-urlencoded\".","arguments": "- parts: The parts of the form, or a form itself.","examples": "> Example\n  Create a delete request with an empty form.\n\n      import Standard.Base.Network.HTTP.Request.Request\n      import Standard.Base.Network.URI.URI\n\n      example_delete =\n         Request.delete (URI.parse \"http://example.com\") . with_form []"},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Text", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Request_Body", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "encoding": {"lazy": false, "type": "Encoding|Nothing", "checked": true, "default": "Nothing"}, "content_type": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Request body with text.","arguments": "- text: The plain text in the request body.\n- encoding: the text encoding to send as a Content-Encoding header\n- content_type: the content_type to send as a Content-Type header"},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Json", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Request_Body", "arguments": {"x": {"lazy": false, "type": "Any", "checked": true, "default": "Missing_Argument.throw \"x\""}},"aliases": [],"description": "Request body with an object to be sent as JSON.","arguments": "- x: The object to convert to JSON using `.to_json`."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Binary", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Request_Body", "arguments": {"file": {"lazy": false, "type": "File", "checked": true, "default": "Missing_Argument.throw \"file\""}},"aliases": [],"description": "Request body with an object to be sent as a binary file.","arguments": "- file: The file to send."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Byte_Array", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Request_Body", "arguments": {"bytes": {"lazy": false}},"aliases": [],"description": "Raw bytes array to be sent as binary data.\nThis is mostly used for internal purposes."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Form_Data", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Request_Body", "arguments": {"form_data": {"lazy": false, "type": "Dictionary", "checked": true, "default": "Missing_Argument.throw \"form_data\""}, "url_encoded": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Request body with form data.","arguments": "- form_data: the form fields (text or file) to be sent\n- url_encoded: if true, use a URL-encoded form; otherwise, use a\n  multi-part encoding."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Request_Body", "arguments": {},"aliases": [],"description": "Empty request body; used for GET"},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "default_content_type_header", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "For `Request_Body.Form_Data url_encoded=False`, this returns `Nothing`,\nbecause the content type must include a content boundary."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "", "name": "make_all_with_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "", "name": "dictionary_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Response", "arguments": {"internal_http_response": {"lazy": false, "type": "Enso_Http_Response", "checked": true}, "body_object": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "A type representing an HTTP response.","arguments": "- internal_http_response: The internal representation of the HTTP\n  response.\n- body_object: The body of the response. If nothing will be read from the\n  internal_http_response. Allows for materialization."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_http_response": {"lazy": false, "type": "EnsoHttpResponse", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "with_materialized_body", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a new Response with the body materialized."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "uri", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the uri for the response."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "headers", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the response headers.\n\nIt returns a vector of Header objects and not a mapping, because the\nresponse may contain multiple headers with the same name.","examples": "> Example\n  Getting the headers from a response.\n  Note: This example will make a network request.\n\n      import Standard.Examples\n\n      example_headers = Examples.get_response.headers\n\n\n> Example\n  Creating a mapping from the headers, throwing an error if there are duplicates.\n  Note: This example will make a network request.\n\n      import Standard.Examples\n\n      example_headers = Dictionary.from_vector error_on_duplicates=True (Examples.get_response.headers.map h-> [h.name, h.value])"},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "content_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the response content type."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "content_length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the response content length in bytes.\nThis method uses the `Content-Length` header, and does not read the body.\nIf the header is not present will return Nothing."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "body", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Get the response body.","examples": "> Example\n  Getting the body from a response.\n  Note: This example will make a network request.\n\n      import Standard.Examples\n\n      example_body = Examples.get_response.body"},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "code", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the response status code.","examples": "> Example\n  Getting the code from a response.\n  Note: This example will make a network request.\n\n      import Standard.Examples\n\n      example_code = Examples.get_response.code"},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "decode", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "if_unsupported": {"lazy": true, "default": "Error.throw (File_Error.Unsupported_Type (resolve_file_metadata_for_response self))"}},"aliases": ["parse"],"group": "Conversions","icon": "data_input","description": "Uses the format to decode the body.\nIf using `Auto_Detect`, the content-type will be used to determine the\nformat. If the format cannot be detected automatically, `if_unsupported`\nis returned."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "decode_as_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding | Infer", "checked": true, "default": "Infer"}},"aliases": ["parse as text"],"group": "Conversions","icon": "data_input","description": "Decodes the body to a Text value.","arguments": "- encoding: The encoding to use. If not specified, the encoding is\n  inferred from response headers. If that fails, UTF-8 is used as the\n  fallback."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "decode_as_json", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding | Infer", "checked": true, "default": "Infer"}},"aliases": ["parse as json", "parse json"],"group": "Conversions","icon": "data_input","description": "Decodes the body as JSON.","arguments": "- encoding: The encoding to use. If not specified, the encoding is\n  inferred from response headers. If that fails, UTF-8 is used as the\n  fallback.","examples": "> Example\n  Convert a response from JSON.\n\n      import Standard.Examples\n\n      example_to_text = Data.fetch Examples.geo_data_url . decode_as_json"},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}, "on_existing_file": {"lazy": false, "default": "Existing_File_Behavior.Backup"}},"aliases": ["export", "output", "save", "to_file"],"group": "Output","icon": "data_download","description": "Write response body to a File.","arguments": "- file: The file to write the body to.\n- on_existing_file: Specifies how to proceed if the file already exists.","examples": "> Example\n  Write the contents of the request body to a scratch file on disk. The\n  file will be created if it does not exist, and will be overwritten if\n  it does.\n\n      import Standard.Examples\n\n      example_write =\n         Data.fetch Examples.geo_data_url . write Examples.scratch_file"},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this Response.","examples": "> Example\n  Convert a response to JS_Object.\n  Note: This example will make a network request.\n\n      import Standard.Examples\n\n      example_to_json = Examples.get_response.to_js_object"},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "get_header", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Enso_Http_Response", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Http_Response", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true}, "headers": {"lazy": false, "type": "HttpHeaders", "checked": true}, "body": {"lazy": false, "type": "Input_Stream", "checked": true}, "status_code": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Enso_Http_Response", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Http_Response", "arguments": {"java_response": {"lazy": false, "type": "EnsoHttpResponse", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "", "name": "resolve_file_metadata_for_response", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"response": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "", "name": "filename_from_content_disposition", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"content_disposition": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "Raw_Stream", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Response_Body", "arguments": {"raw_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}},"aliases": [],"description": "For internal use only. Should be materialised before returning to an end\nuser."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "Materialized_Stream", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Response_Body", "arguments": {"restartable_stream": {"lazy": false, "type": "Restartable_Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_stream": {"lazy": false}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}},"aliases": [],"description": "Create a Response_Body.","arguments": "- stream: The body of the response as an InputStream.\n- metadata: File format metadata associated with the response.\n- uri: The URI of the response."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "with_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "materialize", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Materializes the stream into either a byte array or a temporary file and\nreturn a new Response_Body."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "decode", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "if_unsupported": {"lazy": true, "default": "Error.throw (File_Error.Unsupported_Type self.metadata)"}},"aliases": ["parse"],"group": "Input","icon": "convert","description": "Uses the format to decode the body.\nIf using `Auto_Detect`, the content-type will be used to determine the\nformat.","arguments": "- format: The format to use to decode the body.\n- if_unsupported: Specifies how to proceed if `Auto_Detect` was selected\n  but the format could not be determined."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "decode_as_bytes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["bytes"],"group": "Input","icon": "convert","description": "Read the body as a byte array."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "decode_as_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding | Infer", "checked": true, "default": "Infer"}},"aliases": ["parse as text"],"group": "Conversions","icon": "data_input","description": "Decodes the body to a Text value.","arguments": "- encoding: The encoding to use. If not specified, the encoding is\n  inferred from response headers. If that fails, UTF-8 is used as the\n  fallback."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "decode_as_json", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding | Infer", "checked": true, "default": "Infer"}},"aliases": ["parse as json", "parse json"],"group": "Conversions","icon": "data_input","description": "Decodes the body as JSON.","arguments": "- encoding: The encoding to use. If not specified, the encoding is\n  inferred from response headers. If that fails, UTF-8 is used as the\n  fallback.","examples": "> Example\n  Convert a response from JSON.\n\n      import Standard.Examples\n\n      example_to_text = Examples.get_geo_data.decode_as_json"},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "content_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The content type of the response."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert response body to Text."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}, "on_existing_file": {"lazy": false, "default": "Existing_File_Behavior.Backup"}},"aliases": ["export", "output", "save", "to_file"],"group": "Output","icon": "data_output","description": "Write response body to a File.","arguments": "- file: The file to write the body to.\n- on_existing_file: Specifies how to proceed if the file already exists.","examples": "> Example\n  Write the contents of the request body to a scratch file on disk. The\n  file will be created if it does not exist, and will be overwritten if\n  it does.\n\n      import Standard.Examples\n\n      example_write =\n         Examples.get_geo_data.write Examples.scratch_file"},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "", "name": "maximum_body_in_memory", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "How large a response body can be before it is written to a temporary file."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "", "name": "can_decode", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"type": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "", "name": "decode_format_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Selector for decoding from the web."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "", "name": "delete_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Utility method for closing primitive Java streams. Provided to avoid\naccidental scope capture with `Managed_Resource` finalizers."},
{"module": "Standard.Base.Network.Extensions", "type": "Text", "name": "to_uri", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["parse_uri", "uri from text"],"group": "Conversions","icon": "convert","description": "Convert Text to a URI.\n\nThrows a `Syntax_Error` when `self` cannot be parsed as a URI.","examples": "> Example\n  Parse URI text.\n\n      import Standard.Base.Network.URI.Extensions\n\n      example_parse = \"http://example.com\".to_uri"},
{"module": "Standard.Base.Network.Extensions", "type": "URI", "name": "fetch", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "default": "[]"}, "format": {"lazy": false, "default": "Auto_Detect"}},"aliases": ["download", "http get"],"group": "Input","icon": "data_input","description": "Fetches from the URI and returns the response, parsing the body if the\ncontent-type is recognised. Returns an  error if the status code does not\nrepresent a successful response.","arguments": "- method: The HTTP method to use. Must be one of `HTTP_Method.Get`,\n  `HTTP_Method.Head`, `HTTP_Method.Delete`, `HTTP_Method.Options`.\n  Defaults to `HTTP_Method.Get`.\n- headers: The headers to send with the request. Defaults to an empty vector.\n- format: The format to use for interpreting the response.\n  Defaults to `Auto_Detect`. If `Raw_Response` is selected or if the format\n  cannot be determined automatically, a raw HTTP `Response` will be returned."},
{"module": "Standard.Base.Network.Extensions", "type": "URI", "name": "post", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Post"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "response_format": {"lazy": false, "default": "Auto_Detect"}},"aliases": ["http post", "upload"],"group": "Output","icon": "data_upload","description": "Writes the provided data to the provided URI. Returns the response,\nparsing the body if the content-type is recognised. Returns an  error if the\nstatus code does not represent a successful response.","arguments": "- body: The data to write. See `Supported Body Types` below.\n- method: The HTTP method to use. Must be one of `HTTP_Method.Post`,\n  `HTTP_Method.Put`, `HTTP_Method.Patch`. Defaults to `HTTP_Method.Post`.\n- headers: The headers to send with the request. Defaults to an empty vector.\n- response_format: The format to use for interpreting the response.\n  Defaults to `Auto_Detect`. If `Raw_Response` is selected or if the format\n  cannot be determined automatically, a raw HTTP `Response` will be returned.","remarks": "! Specifying Content Types\n\n  If the `body` parameter specifies an explicit content type, then it is an\n  error to also specify additional `Content-Type` headers in the `headers`\n  parameter. (It is not an error to specify multiple `Content-Type` values in\n  `headers`, however.)\n\n\n! Supported Body Types\n\n  - Request_Body.Text: Sends a text string, with optional encoding and content\n    type.\n  - Request_Body.Json: Sends an Enso object, after converting it to JSON.\n  - Request_Body.Binary: Sends a file.\n  - Request_Body.Form_Data: Sends a form encoded as key/value pairs. The keys\n    must be `Text`, and the values must be `Text` or `File`.\n  - Request_Body.Empty: Sends an empty body.\n\n  Additionally, the following types are allowed as the `body` parameter:\n\n  - Text: shorthand for `Request_Body.Text that_text`.\n  - File: shorthand for `Request_Body.Binary that_file`.\n  - Any other Enso object: shorthand for `Request_Body.Json that_object`."},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "HTTP", "arguments": {"timeout": {"lazy": false}, "follow_redirects": {"lazy": false, "type": "Boolean", "checked": true}, "proxy": {"lazy": false, "type": "Proxy", "checked": true}, "version": {"lazy": false, "type": "HTTP_Version", "checked": true}, "custom_ssl_context": {"lazy": false}, "hash_method": {"lazy": false, "default": "Nothing"}, "make_client": {"lazy": false, "default": "internal_http_client"}},"aliases": [],"description": "An HTTP client.","arguments": "- timeout: The length of time the client will wait for responses.\n- follow_redirects: Whether or not the client should follow redirects.\n- proxy: The proxy that the client should use, if any.\n- version: The HTTP version supported by the client.\n- custom_ssl_context: A custom SSL context to use for requests, or\n  Nothing if the default should be used. For most use cases, it is\n  recommended to use the default.\n- hash_method: The hash method to use for body hashing.\n- make_client: Creates the Java HTTPClient."},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "fetch", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI | Text", "checked": true}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "cache_policy": {"lazy": false, "type": "Cache_Policy", "checked": true, "default": "..Default"}},"aliases": [],"description": "Static helper for get-like methods","remarks": "! Response caching\n\n  See `Data.fetch` for information about response caching."},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "post", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI | Text", "checked": true}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "Request_Body.Empty"}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "HTTP_Method.Post"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}},"aliases": [],"description": "Static helper for post-like methods"},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"timeout": {"lazy": false, "type": "Duration", "checked": true, "default": "Duration.new seconds=10"}, "follow_redirects": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "proxy": {"lazy": false, "type": "Proxy", "checked": true, "default": "..System"}, "version": {"lazy": false, "type": "HTTP_Version", "checked": true, "default": "..HTTP_2"}},"aliases": [],"description": "Create a new instance of the HTTP client.","arguments": "- timeout: The length of time the client will wait for responses.\n- follow_redirects: Whether or not the client should follow redirects.\n- proxy: The proxy that the client should use, if any.\n- version: The HTTP version supported by the client.","examples": "> Example\n  Create an HTTP client with default settings.\n      HTTP.new\n\n\n> Example\n  Create an HTTP client with extended timeout.\n      HTTP.new timeout=(Duration.new seconds=30)\n\n\n> Example\n  Create an HTTP client with extended timeout and proxy settings.\n\n      import Standard.Base.Data.Time.Duration.Duration\n      import Standard.Base.Network.HTTP.HTTP\n      import Standard.Base.Network.Proxy.Proxy\n\n      example_new =\n         HTTP.new (timeout = (Duration.new seconds=30)) (proxy = Proxy.Address \"example.com\" 8080)"},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "clear_response_cache", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {},"aliases": ["flush"],"icon": "temp","description": "Clear the HTTP request cache.","examples": "> Example\n  Clear the HTTP response cache.\n\n      import Standard.Base.Network.HTTP\n\n      HTTP.clear_response_cache"},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "request", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"req": {"lazy": false}, "error_on_failure_code": {"lazy": false, "default": "True"}, "cache_policy": {"lazy": false, "type": "Cache_Policy", "checked": true, "default": "..Default"}},"aliases": [],"icon": "data_download","description": "Sends a request using the HTTP client.\nThe response body will contain a raw Input_Stream which can be read once.\nPlease note, this must be closed after use (either directly or via the\nhelpers on Response_Body).","arguments": "- req: The HTTP request to send using `self` HTTP client.\n- error_on_failure_code: Whether or not to throw an error if the response\n  code is not a success code.","remarks": "! Response caching\n\n  See `Data.fetch` for information about response caching."},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "set_custom_ssl_context", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"ssl_context": {"lazy": false}},"aliases": [],"description": "Create a copy of the HTTP client with a custom SSL context."},
{"module": "Standard.Base.Network.HTTP", "type": "Resolved_Body", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Resolved_Body", "arguments": {"publisher": {"lazy": false, "type": "BodyPublisher", "checked": true}, "boundary": {"lazy": false, "type": "Text|Nothing", "checked": true}, "hash": {"lazy": false, "type": "Text|Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP", "type": "Request_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Request_Error", "arguments": {"error_type": {"lazy": false}, "message": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP", "type": "Request_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert a request error to a human-readable form."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_resolve_headers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"req": {"lazy": false}},"aliases": [],"description": "If either encoding or content type is specified in the Request_Body, that is used as the content type header.\nIf encoding is specified without content type, \"text/plain\" is used as the content type.\nIt is an error to specify the content type in both the request body and the header list.\nIf the body is not Request_Body.Empty, and no content type is specified, a default is used.\nNot explicitly private as allows direct testing."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_resolve_body", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"body": {"lazy": false, "type": "Request_Body", "checked": true}, "hash_function": {"lazy": false}},"aliases": [],"description": "Generate body publisher, optional form content boundary and optionally hash from the body"},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_resolve_form_body", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"form_data": {"lazy": false, "type": "Dictionary Text (Text | File)", "checked": true}, "url_encoded": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "hash_function": {"lazy": false}},"aliases": [],"description": "Build a BodyPublisher from the given form data.\nThe pair's second value is a content boundary in the case of a `multipart/form-data` form; otherwise, Nothing"},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "if_fetch_method", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "action": {"lazy": true}, "if_not": {"lazy": true, "default": "Error.throw (Illegal_Argument.Error (\"Unsupported method \" + method.to_display_text))"}},"aliases": []},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "if_post_method", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "action": {"lazy": true}, "if_not": {"lazy": true, "default": "Error.throw (Illegal_Argument.Error (\"Unsupported method \" + method.to_display_text))"}},"aliases": []},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "with_hash_and_client", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false}, "hash_method": {"lazy": false}, "make_client": {"lazy": false}},"aliases": [],"description": "Build a custom HTTP with hash function and make_client function."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "internal_http_client", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false}, "hash": {"lazy": false}},"aliases": [],"description": "Build a Java HttpClient with the given settings."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_get_timeout", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false, "type": "HTTP", "checked": true}},"aliases": [],"description": "Access the HTTP's timeout (for testing purposes)."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_get_follow_redirects", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false, "type": "HTTP", "checked": true}},"aliases": [],"description": "Access the HTTP's follow_redirects (for testing purposes)."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_get_proxy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false, "type": "HTTP", "checked": true}},"aliases": [],"description": "Access the HTTP's proxy (for testing purposes)."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_get_version", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false, "type": "HTTP", "checked": true}},"aliases": [],"description": "Access the HTTP's version (for testing purposes)."},
{"module": "Standard.Base.Network.Proxy", "type": "Proxy", "name": "None", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Proxy", "arguments": {},"aliases": [],"description": "The proxy is disabled."},
{"module": "Standard.Base.Network.Proxy", "type": "Proxy", "name": "System", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Proxy", "arguments": {},"aliases": [],"description": "Use the system proxy settings."},
{"module": "Standard.Base.Network.Proxy", "type": "Proxy", "name": "Address", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Proxy", "arguments": {"proxy_host": {"lazy": false, "type": "Text", "checked": true}, "proxy_port": {"lazy": false, "type": "Integer", "checked": true, "default": "80"}},"aliases": [],"description": "Use the provided proxy server.","arguments": "- host: The host address for the proxy.\n- port: The port number for the proxy server on `host`.","examples": "> Example\n  Create a new proxy running on localhost at port 80080.\n\n      import Standard.Base.Network.Proxy.Proxy\n\n      example_new = Proxy.Address \"localhost\" 80800"},
{"module": "Standard.Base.Network.Reload_Sentinel", "type": "Reload_Sentinel", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Reload_Sentinel", "arguments": {"mr": {"lazy": false, "type": "Managed_Resource", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.Reload_Sentinel", "type": "Reload_Sentinel", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Reload_Sentinel", "arguments": {},"aliases": [],"description": "Create a new reload sentinel."},
{"module": "Standard.Base.Network.Reload_Sentinel", "type": "Reload_Sentinel", "name": "has_reload_occurred", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Check if a reload has occurred."},
{"module": "Standard.Base.Network.Reload_Sentinel", "type": "", "name": "simulate_reload_test_only", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"reload_sentinel": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.Reload_Sentinel", "type": "", "name": "create_reload_sentinel", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "URI", "arguments": {"internal_uri": {"lazy": false, "type": "Java_URI", "checked": true}, "additional_query_parameters": {"lazy": false, "type": "Vector (Pair Text (Text | Enso_Secret))", "checked": true}},"aliases": [],"description": "Represents a Uniform Resource Identifier (URI) reference.","arguments": "- internal_builder: A Java URI that contains parsed URI data.\n- additional_query_parameters: A list of query parameters to add to the URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["get uri"],"group": "Conversions","icon": "convert","description": "Parse a URI from text.\nIf the input text is not a valid URI, this function will separate the\nquery string and encode it. If it still cannot be parsed, it will throw\na `Syntax_Error`.","arguments": "- uri: The text to parse as a URI.","examples": "> Example\n  Parse URI text.\n\n      import Standard.Base.Network.URI.URI\n\n      example_parse = URI.parse \"http://example.com\""},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "scheme", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the scheme part of this URI.","examples": "> Example\n  Return the scheme from the URI.\n\n      import Standard.Examples\n\n      example_scheme = Examples.uri.scheme"},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "user_info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the user info part of this URI.","examples": "> Example\n  Return the user info part of the URI.\n\n      import Standard.Examples\n\n      example_user_info = Examples.uri.user_info"},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "host", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the host part of this URI.","examples": "> Example\n  Return the host portion of the URI.\n\n      import Standard.Examples\n\n      example_host = Examples.uri.host"},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "authority", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the authority (user info and host) part of this URI.","examples": "> Example\n  Return the authority portion of the URI.\n\n      import Standard.Examples\n\n      example_authority = Examples.uri.authority"},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "port", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the port part of this URI.","examples": "> Example\n  Return the port portion of the URI\n\n      import Standard.Examples\n\n      example_port = Examples.uri.port"},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "path", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the path part of this URI.","examples": "> Example\n  Return the path portion of the URI.\n\n      import Standard.Examples\n\n      example_path = Examples.uri.path"},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"segment": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Operators","icon": "folder","description": "Extends the path of this URI with an additional segment.","arguments": "- segment: The segment to add to the path.\n  The `segment` may contain multiple segments separated by `/` characters.\n  Any other characters that are not normally permitted in a URI will be\n  percent-encoded."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the query part of this URI.","examples": "> Example\n  Return the query portion of the URI.\n\n      import Standard.Examples\n\n      example_query = Examples.uri.query"},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "add_query_argument", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Text | Enso_Secret", "checked": true}},"aliases": [],"group": "Calculations","icon": "edit","description": "Adds a query parameter to the URI.","arguments": "- key: The key of the query parameter.\n- value: The value of the query parameter."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "reset_query_arguments", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Calculations","icon": "trash","description": "Removes any query parameters within the URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "fragment", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the fragment part of this URI.","examples": "> Example\n  Return the fragment portion of the URI.\n\n      import Standard.Examples\n\n      example_fragment = Examples.uri.fragment"},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "raw_user_info", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get the unescaped user info part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "raw_authority", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get the unescaped authority part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "raw_path", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get the unescaped path part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "raw_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get the unescaped query part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "raw_fragment", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get the unescaped fragment part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert this URI to text."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this URI.","examples": "> Example\n  Convert a URI to a JS_Object.\n\n      import Standard.Base.Network.URI.URI\n      import Standard.Examples\n\n      example_to_json = Examples.uri.to_js_object"},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "to_java_representation", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a Java representation that can be used to render this URL with\nsecrets hidden or processed by trusted operations."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "to_java_uri", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert this to a raw Java URI."},
{"module": "Standard.Base.Network.URI", "type": "URI_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "URI_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "URI_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "URI_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "Invalid_Query_String", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Query_String", "arguments": {"query_string": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "Invalid_Query_String", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "", "name": "handle_resolve_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "URI", "checked": true}},"aliases": []},
{"module": "Standard.Base.Runtime.Debug", "type": "", "name": "breakpoint", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Places a breakpoint in the program's execution, dropping the user into an\ninteractive debugging REPL.\n\nFrom the REPL, the user is able to manipulate both the program state and\nits execution in an interactive fashion.","examples": "> Example\n  Dropping into a debugging REPL during execution.\n\n     Standard.Base.Runtime.Debug.breakpoint"},
{"module": "Standard.Base.Runtime.Debug", "type": "", "name": "eval", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"expression": {"lazy": false}},"aliases": [],"description": "Evaluates the provided Enso code in the caller frame.","arguments": "- expression: The enso code to evaluate.","examples": "> Example\n  Evaluating the expression 1 + 1 and assigning it to a value.\n\n      result = Debug.eval \"1 + 1\"","remarks": "? Scoping\n  The fact that expression is evaluated in the caller frame means that\n  it has access to variables in the scope enclosing the call to\n  Debug.eval."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Managed_Resource", "arguments": {},"aliases": [],"description": "A managed resource is a special type of resource that is subject to\nautomated cleanup when it is no longer in use.\n\nThis API is intended for use by developers to provide easy-to-use\nabstractions, and is not expected to be used by end-users."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "bracket", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"constructor": {"lazy": true}, "destructor": {"lazy": true}, "action": {"lazy": true}},"aliases": [],"description": "Acquires a resource, performs an action on it, and destroys it safely,\neven in the presence of panics.","arguments": "- constructor: The computation responsible for acquiring the resource.\n- destructor: The computation responsible for destroying the resource\n  once it is done being used.\n- action: The computation to perform on the acquired resource."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "register", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"resource": {"lazy": false}, "function": {"lazy": false}, "system_finalization_allowed": {"lazy": false, "default": "False"}},"aliases": [],"description": "Registers a resource with the resource manager to be cleaned up using\nfunction once it is no longer in use. The optional `system_finalization_allowed`\nflag allow the system to explicitly call `finalize` on the resource\nwhen _\"needed\"_. The definition is intentionally vague, but\ncurrently the IDE performs such a call when user requests a _\"reload\"_ -\ne.g. using `Managed_Resource.register cache cleanup_fn True` is useful\nfor creating user managed caches.","arguments": "- resource: The resource to register.\n- function: The action to be executed on resource to clean it up when\n  it is no longer in use.\n- system_finalization_allowed: is the system allowed to call `finalize`\n  on the resource when \"needed\"","returns": "A `Managed_Resource` object that can be used to access the resource.","remarks": "! Multiple `Managed_Resource`s for the same resource\n\n  Using the same underlying resource with multiple managed resource\n  instances is an error and will result in an `Illegal_Argument` panic.\n\n\n! Values Eligible to be `Managed_Resource`s\n\n  Truly atomic values (`Integer`, `Boolean` and `Float`) cannot be\n  managed resources."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "finalize", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Forces finalization of a managed resource using the registered finalizer,\neven if the resource is still reachable."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "with", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Executes the provided action on the resource managed by the managed\nresource object. The action is invoked with the managed resource only if\nit has not yet been finalized. If the resource has already been finalized\nthen `Error` with `Uninitialized_State` payload is passed into the\naction instead of the resource.","arguments": "- action: The action that will be applied to the resource managed by\n  the `Managed_Resource` (or to `Uninitialized_State` error).","returns": "Value returned from the `action`"},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "take", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Takes the value held by the managed resource and unregisters the\nfinalization step for this resource, effectively removing it from the\nmanaged resources system."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "has_been_finalized", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Returns true iff the resource has been collected by the engine, false\notherwise. If `with` throws any other error, it is propagated."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "", "name": "register_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"r": {"lazy": false}, "fn": {"lazy": false}, "sys": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "", "name": "with_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"r": {"lazy": false}, "fn": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "", "name": "_handle_double_registration", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Catch a double-registration panic and re-raise it as an `Illegal_Argument`."},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Ref", "arguments": {},"aliases": [],"description": "A mutable reference type."},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Creates a new reference containing the provided value.","arguments": "- value: The value to be contained in the ref.","examples": "> Example\n  Creating a new reference containing the value 7.\n\n      Ref.new 7"},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the contents of this mutable reference ref.","examples": "> Example\n  Getting the contents of a reference.\n\n      (Ref.new 0) . get"},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "put", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_value": {"lazy": false}},"aliases": [],"icon": "edit","description": "Puts a new value into this reference, returning the old value.","arguments": "- new_value: The new value to store in this ref.","examples": "> Example\n  Storing the value 10 in a reference.\n\n      (Ref.new 0) . put 10"},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "modify", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fun": {"lazy": false}},"aliases": [],"group": "Calculations","icon": "edit","description": "Gets the contents of this mutable reference, transform it using the\nprovided function, and put the new value into the reference.\n\nReturns the original value.","arguments": "- fun: the function to transform the value in the ref","examples": "> Example\n  Increment the integer stored in a ref, and receive the old value.\n\n   (Ref.new 10) . modify (_+1)\n   # => 10"},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "with_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_value": {"lazy": false, "type": "Any", "checked": true}, "action": {"lazy": true, "type": "Any", "checked": true}},"aliases": [],"group": "Calculations","icon": "edit","description": "Temporarily change the value of this mutable reference during the\nexecution of an action.\n\nReturns the value of the action.","arguments": "- new_value: the value to set during the execution of the action\n- action: the action to execute with the modified value set","examples": "> Example\n  Execute an action with a temporarily incremented value.\n\n      r = Ref.new 10\n      r.with_value 11 <|\n          r.get == 11  # True\n      r.get == 10  # True"},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "with_modification", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"modifier": {"lazy": false, "type": "Any -> Any", "checked": true}, "action": {"lazy": true, "type": "Any", "checked": true}},"aliases": [],"group": "Calculations","icon": "edit","description": "Temporarily change the value of this mutable reference during the\nexecution of an action, using a modification function.\n\nReturns the value of the action.","arguments": "- modifier: the function used to modify the value during the execution of\n  the action\n- action: the action to execute with the modified value set","examples": "> Example\n  Execute an action with a temporarily incremented value.\n\n      r = Ref.new 10\n      r.with_modification (_+1) <|\n          r.get == 11  # True\n      r.get == 10  # True"},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Source_Location", "arguments": {"prim_location": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the location."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "start_line", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the 1-based line index of the start of this code range."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "end_line", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the 1-based line index of the end of this code range."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "start_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the 1-based column index of the start of this code range."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "end_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the 1-based column index of the end of this code range."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "formatted_coordinates", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Returns a pretty-printed location (file and line info)."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "file", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Return the source file corresponding to this location."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Runtime.State", "type": "", "name": "run", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"key": {"lazy": false}, "local_state": {"lazy": false}, "computation": {"lazy": true}},"aliases": [],"description": "Executes a stateful computation in a local state environment.","arguments": "- key: The key to associate your local_state with in the environment.\n  Use types as keys.\n- local_state: The value to associate with key.\n- computation: The computation to execute in the local state\n  environment.","examples": "> Example\n  Print a value from the state.\n      import Standard.Base.Runtime.State\n\n      State.run Integer 0 <| IO.println (State.get Integer)"},
{"module": "Standard.Base.Runtime.State", "type": "", "name": "get", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"key": {"lazy": false}},"aliases": [],"description": "Returns the current value for the provided key contained in the monadic\nstate.\n\n\n\nReturns an uninitialized state error if the user tries to read from an\nuninitialized slot.","arguments": "- key: The key into the state to get the associated value for.","examples": "> Example\n  Get the value of state for a key.\n      import Standard.Base.Runtime.State\n\n      State.get Float"},
{"module": "Standard.Base.Runtime.State", "type": "", "name": "put", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"key": {"lazy": false}, "new_state": {"lazy": false}},"aliases": [],"description": "Associates a new_state with the provided key in the runtime's monadic\nstate, returning the provided state.\n\n\n\nReturns an uninitialized state error if the user tries to put into an\nuninitialized slot.","arguments": "- key: The key with which to associate the new state.\n- new_state: The new state to store.","examples": "> Example\n  Store a new value in the state for a given key.\n      import Standard.Base.Runtime.State\n\n      State.put Text 2821"},
{"module": "Standard.Base.Runtime.Thread", "type": "", "name": "with_interrupt_handler", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}, "interrupt_handler": {"lazy": true}},"aliases": [],"description": "Executes an action with a handler for the executing thread being\ninterrupted.","arguments": "- action: The action to execute.\n- interrupt_handler: The code to be executed if the thread is\n  interrupted.","examples": "> Example\n  Die on thread interrupts.\n\n      Thread.with_interrupt_handler (1 + 1) <| IO.println \"I died!\""},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "From_Bytes", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"bytes": {"lazy": false}},"aliases": [],"description": "`bytes` may be a Vector or a raw `byte[]` array (convertible to vector, but no annotation to avoid conversions)."},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "From_Existing_File", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "From_Temporary_File", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"temporary_file": {"lazy": false, "type": "Temporary_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "make", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "extend_lifetime": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "with_fresh_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"action": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": [],"description": "Runs the provided action with a fresh input stream pointing to the\nbeginning of the data represented by this stream.\n\nThis method may be called multiple times, allowing multiple 'rounds' of\nprocessing."},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "", "name": "max_in_memory_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Maximum size for a stream to be held in memory.\nIf the amount of data exceeds this limit, it will be stored in a temporary file."},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "", "name": "cache_generic_input_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Temporary_File", "arguments": {"file_resource_reference": {"lazy": false, "type": "Ref (Nothing | Managed_Resource File)", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "default": "\"temp\""}, "suffix": {"lazy": false, "default": "\".tmp\""}},"aliases": [],"description": "Creates a new empty `Temporary_File`."},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "from_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false}},"aliases": [],"description": "Materializes the provided `Input_Stream` into a `Temporary_File`.\nIt will work the same regardless of whether the output context is enabled."},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "from_stream_light", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false}},"aliases": [],"description": "Materializes the provided `Input_Stream` into a `Temporary_File`.\nIf the stream is already backed by a temporary or regular file, that file is returned."},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "with_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "unsafe_get", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the raw file reference.\nNote that the underlying file may be deleted at any time, once `self` is\nunreachable - so this method has to be used with extra care."},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "dispose", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Deletes the temporary file, invalidating the reference."},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "access_resource", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "", "name": "cleanup_tmp_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Like", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "path", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Returns the file's path."},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Returns the file's name."},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "parent", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Like", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Format_Metadata", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "If a conversion to `File_Format_Metadata` is needed, we delegate to the underlying file.\nEvery `File_Like` should be able to provide its file format metadata."},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "File_Write_Strategy", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Write_Strategy", "arguments": {"write_overwriting": {"lazy": false}, "write_appending": {"lazy": false}, "write_raising_error": {"lazy": false}, "write_backing_up": {"lazy": false}, "create_dry_run_file": {"lazy": false}, "write_with_local_file": {"lazy": false}, "copy_from_local": {"lazy": false}},"aliases": [],"description": "Each of the `write_` strategies takes the file as the first argument,\n`Existing_File_Behavior` as second argument, and an action taking an\n`Output_Stream` as the third argument and should run this action against\nthe output stream opened for the file and return its result.\n\nThe `create_dry_run_file` takes a destination file and a boolean flag\nstating if it needs to copy the original file as part of preparation. It\nshould return a dry run counterpart that is associated with it. It may\nraise an error if dry runs are not supported on a given backend. Note\nthat currently there is no mechanism for managing cleanup of the dry run\nfiles, so they only should be created if a 'temporary directory' is\navailable.\n\nThe `write_with_local_file` action takes the file, the\n`Existing_File_Behavior` and an action.\nA remote file is downloaded to a temporary file and the provided action\nis called with that local temporary file. Then that file is uploaded to\nreplace the remote file.\n\nThe `copy_from_local` action creates the file on a given backend from a\nlocal file. It can be used to implement more efficient upload strategies\nthan ones based on just writing to an output stream.\nThe default `generic_copy` implementation can always be used here."},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "File_Write_Strategy", "name": "write", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": [],"description": "Writes to a file according to the provided existing file behaviour.\nThis variant does not handle dry run logic.\nIt will most likely fail at `with_output_stream` if the output context is\nnot enabled. It may be used if the caller has custom handling for dry run\nand calls this method within `Context.Output.with_enabled`.","remarks": "? Return Value\n\n  By convention, the `write` operations return the file that has been\n  written to. The `Writable_File` wrappers may replace the return value\n  with a proxy file, when writing e.g. to a data link."},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "File_Write_Strategy", "name": "write_handling_dry_run", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "action": {"lazy": false, "type": "Any -> Output_Stream -> Any", "checked": true}},"aliases": [],"description": "Writes to a file, executing a default dry-run logic if the Output Context\nis disabled.\n\nThe `action` is called with the effective file (original destination file\nor its dry run counterpart) and an output stream to that file.","remarks": "? Return Value\n\n  By convention, the `write` operations return the file that has been\n  written to. The `Writable_File` wrappers may replace the return value\n  with a proxy file, when writing e.g. to a data link."},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "Dry_Run_File_Settings", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dry_Run_File_Settings", "arguments": {"existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "copy_original": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"arguments": "- existing_file_behavior: Specifies how to treat an existing dry run file.\n  Usually, `Overwrite` is used regardless of the original setting.\n  The exception is `Append`, which usually requires to copy the original\n  file first to keep the state consistent.\n- copy_original: Specifies whether to copy the original file to the dry\n  run file before writing. If the file is not copied, contents from a\n  previous dry run may still be there, so any options other than\n  `Overwrite` may be risky."},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "default_overwrite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "default_append", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "default_raise_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "generic_remote_write_with_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}, "existing_file_behavior": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "dry_run_behavior", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dry_Run_File_Settings", "arguments": {"file": {"lazy": false}, "behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "generic_copy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false}, "destination": {"lazy": false, "type": "Writable_File", "checked": true}, "replace_existing": {"lazy": false}},"aliases": [],"description": "Generic `copy` implementation between two backends.\nThe files only need to support `with_input_stream` and `with_output_stream`."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_File", "arguments": {"file": {"lazy": false}, "write_strategy": {"lazy": false, "type": "File_Write_Strategy", "checked": true}, "file_for_return": {"lazy": false, "default": "file"}},"aliases": [],"arguments": "- file: the underlying file that can be written to.\n- write_strategy: the strategy defining how to write to the file.\n- file_for_return: the file instance that will be returned by write\n  operations. This is usually the same as `file`, but when writing\n  through a proxy (e.g. data link), the `file` will resolve to a target\n  file, but we want the operations to still return the original proxy\n  object, hence a distinction is needed."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "exists", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "copy_to", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "replace_existing": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "write", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "write_handling_dry_run", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "action": {"lazy": false, "type": "Any -> Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "is_local", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "write_requiring_local_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "action": {"lazy": false, "type": "File -> Any", "checked": true}},"aliases": [],"description": "This helper method may be used if the logic for writing the file requires a local filesystem file\n(e.g. using some external libraries that prefer to work with a Java File).\nIt downloads a remote file to a local temporary location, runs the action\nand then uploads the resulting file back to the remote backend."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "copy_from_local", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Writes a local file to this `Writable_File` destination.\nThis is used by `File.copy_to` and `File.move_to` to possibly implement\nthe upload more efficiently (avoiding duplicated temporary files)."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "replace_resulting_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file_to_be_returned": {"lazy": false}},"aliases": [],"description": "Checks the returned file, and if `self.file` is to be returned it is\nreplaced with `self.file_for_return`.\n\nThis ensures correct behaviour in case of proxies (e.g. data links). If\nthe original file is supposed to be returned, it is replaced with the\nproxy. If another file is returned (e.g. due to dry-run), then it is\nreturned without changes."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "with_overridden_return", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file_for_return": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "File_Format_Metadata", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "If a conversion to `File_Format_Metadata` is needed, we delegate to the underlying file.\nEvery `Writable_File` should be able to provide its file format metadata."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "File_Like", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "If a conversion to `File_Like` is needed, we delegate to the underlying file."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Data_Link_Access", "type": "Data_Link_Access", "name": "No_Follow", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_Access", "arguments": {},"aliases": [],"description": "The setting that requests from the operation to not follow the data-link,\nbut instead read the raw data-link configuration directly.\n\nThis can be used when working with data-links programmatically.\n\nIf the option is provided for a file that is not a data-link, it is\nignored."},
{"module": "Standard.Base.System.File.Existing_File_Behavior", "type": "Existing_File_Behavior", "name": "Overwrite", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Existing_File_Behavior", "arguments": {},"aliases": [],"description": "Replace the existing file in-place, with the new file.\n\nNote: There is a risk of data loss if a failure occurs during the write\noperation."},
{"module": "Standard.Base.System.File.Existing_File_Behavior", "type": "Existing_File_Behavior", "name": "Backup", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Existing_File_Behavior", "arguments": {},"aliases": [],"description": "Creates a backup of the existing file (by appending a `.bak` suffix to\nthe name) before replacing it with the new contents.\n\nNote: This requires sufficient storage to have two copies of the file.\n      If an existing `.bak` file exists, it will be replaced."},
{"module": "Standard.Base.System.File.Existing_File_Behavior", "type": "Existing_File_Behavior", "name": "Append", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Existing_File_Behavior", "arguments": {},"aliases": [],"description": "Appends data to the existing file."},
{"module": "Standard.Base.System.File.Existing_File_Behavior", "type": "Existing_File_Behavior", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Existing_File_Behavior", "arguments": {},"aliases": [],"description": "If the file already exists, a `File_Error.Already_Exists` error is\nraised."},
{"module": "Standard.Base.System.File.Existing_File_Behavior", "type": "Existing_File_Behavior", "name": "widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"include_overwrite": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_backup": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_append": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_error": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": []},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Append", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "If the file is opened for `Write` access then bytes will be written to\nthe end of the file rather than the beginning."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Create", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Create a new file if it does not exist."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Create_New", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Create a new file, failing if the file already exists."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Delete_On_Close", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Delete the underlying file on closing the stream."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Dsync", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Requires that every update to the file's content be written\nsynchronously to the underlying storage device."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Read", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Open for read access."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Sparse", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Sparse file."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Sync", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Requires that every update to the file's content or metadata be written\nsynchronously to the underlying storage device."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Truncate_Existing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "If the file already exists and is opened for `Write` access,\nthe original contents will be removed."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Write", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Open file for write access."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "ensure_only_allowed_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"operation_name": {"lazy": false, "type": "Text", "checked": true}, "allowed_options": {"lazy": false, "type": "Vector", "checked": true}, "got_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert this object into a representation understandable by the JVM."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "Permission", "name": "Read", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Permission", "arguments": {},"aliases": [],"description": "Permission for read access for a given entity."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "Permission", "name": "Write", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Permission", "arguments": {},"aliases": [],"description": "Permission for write access for a given entity."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "Permission", "name": "Execute", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Permission", "arguments": {},"aliases": [],"description": "Permission for execute access for a given entity."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Permissions", "arguments": {"owner": {"lazy": false, "type": "Vector Permission", "checked": true}, "group": {"lazy": false, "type": "Vector Permission", "checked": true}, "others": {"lazy": false, "type": "Vector Permission", "checked": true}},"aliases": [],"description": "Access permissions for a file."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "from_java_set", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"permissions": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Converts a Java `Set` of Java `PosixFilePermission` to `File_Permissions`."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the Enso atom to its Java enum counterpart."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "owner_read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be read by the owner."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "owner_write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be written by the owner."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "owner_execute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be executed by the owner."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "group_read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be read by the group."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "group_write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be written by the group."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "group_execute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be executed by the group."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "others_read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be read by others."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "others_write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be written by others."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "others_execute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be executed by others."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this File_Permissions."},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "Internal_Write_Operation_Panicked", "name": "Panic", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Write_Operation_Panicked", "arguments": {"cause": {"lazy": false, "type": "Caught_Panic", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "Internal_Write_Operation_Errored", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Write_Operation_Errored", "arguments": {"cause": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "instance", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "create_dry_run_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "copy_original": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "copy_local_from_local", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "moving_backup", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": [],"description": "A `Backup` strategy that does the following:\n1. If the file does not exist, we write to it.\n2. If the file exists, write to a temporary file.\n  i. If the write fails, do nothing more. The original file is kept intact.\n  ii. If the write succeeds, we move the original file to a backup location,\n      and then move the temporary new file to the target location.\n\nThis strategy assumes that the `move` operation on a single filesystem is\ncheap (it is a rename), and is optimized for that case."},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "write_file_backing_up_old_one", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "write_with_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "existing_file_behavior": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "catch_already_exists", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"handler": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "recover_io_and_not_found", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.System.File.Write_Extensions", "type": "Text", "name": "write", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "Existing_File_Behavior.Backup"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["export", "output", "save", "to_file"],"group": "Output","icon": "data_output","description": "Writes (or appends) the text to the specified file using the supplied\nencoding. The behavior specified in the `existing_file` parameter will be\nused if the file exists.\n\n\n\nIf a character cannot be converted to a byte, an `Encoding_Error` is raised.\nIf `on_problems` is set to `Report_Warning` or `Ignore`, it is replaced with\na substitute (either '�' (if Unicode) or '?' depending on the encoding).\nOtherwise, the process is aborted.\nIf the path to the parent location cannot be found or the filename is\ninvalid, a `File_Error.Not_Found` is raised.\nIf another error occurs, such as access denied, an `File_Error.IO_Error` is\nraised.\nOtherwise, the file is created with the encoded text written to it.\n\nThe method returns a `File` object for the written file.","arguments": "- path: The path to the target file.\n- encoding: The encoding to use when writing the file.\n- on_existing_file: Specifies how to proceed if the file already exists.\n- on_problems: Specifies how to handle any encountered problems.","remarks": "? Dry Run\n\n  If writing to Output context is not enabled (such as in \"Design\" mode),\n  then this function will write to a temporary file. This temporary file will\n  be automatically deleted on exit of the Enso process.\n\n  This allows for building the workflow without affecting the real files."},
{"module": "Standard.Base.System.File.Write_Extensions", "type": "Vector", "name": "write_bytes", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "Existing_File_Behavior.Backup"}},"aliases": [],"icon": "data_output","description": "Writes (or appends) the Vector of bytes into the specified file. The behavior\nspecified in the `existing_file` parameter will be used if the file exists.\n\n\n\nIf the Vector contains any item which is not a `Byte`, an\n`Illegal_Argument` will be raised. Enso follows the Java convention,\nthat a `Byte` is between -128 and 127.\nIf the path to the parent location cannot be found or the filename is\ninvalid, a `File_Not_Found` is raised.\nIf another error occurs, such as access denied, an `File_Error.IO_Error` is\nraised.\nOtherwise, the file is created with the encoded text written to it.\n\nThe method returns a `File` object for the written file.","arguments": "- path: The path to the target file.\n- on_existing_file: Specifies how to proceed if the file already exists.","examples": "> Example\n  Write the UTF-8 bytes of the text \"$£§€¢\" to a file.\n\n      import Standard.Examples\n\n      [36, -62, -93, -62, -89, -30, -126, -84, -62, -94].write_bytes Examples.scratch_file\n\n\n> Example\n  Append the UTF-8 bytes of the text \"$£§€¢\" to a file.\n\n      import Standard.Examples\n\n      [36, -62, -93, -62, -89, -30, -126, -84, -62, -94].write_bytes Examples.scratch_file.write_bytes Examples.scratch_file Existing_File_Behavior.Append"},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "get_cwd", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets a file corresponding to the current working directory of the\nprogram."},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "get_file", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false}},"aliases": [],"description": "The builtin that returns a File instance for a given path."},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "is_directory_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "is_regular_file_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "resolve_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "part": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "create_directory_builtin", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Creates the directory represented by this file if it did not exist."},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "copy_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false}, "target": {"lazy": false}, "options": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "delete_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "recursive": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "move_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false}, "target": {"lazy": false}, "options": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "size_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "creation_time_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "last_modified_time_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "posix_permissions_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "read_last_bytes_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "n": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "output_stream_builtin", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "options": {"lazy": false}},"aliases": [],"description": "Creates a new output stream for this file. Recommended to use\n`File.with_output_stream` instead, which does resource management.","arguments": "- options: A vector of `File_Access` objects determining how to open\n  the stream. These options set the access properties of the stream."},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "input_stream_builtin", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "options": {"lazy": false}},"aliases": [],"description": "Creates a new input stream for this file. Recommended to use\n`File.with_input_stream` instead, which does resource management.","arguments": "- options: A vector of `StandardOpenOption` polyglot objects\n  determining how to open the stream. These options set the access\n  properties of the stream."},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "UTF_8", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unicode_BOM", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "UTF_16_LE", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unicode_BOM", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "UTF_16_BE", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unicode_BOM", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "as_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "corresponding_encoding", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Encoding", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "run", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "allow_usage_in_background_threads": {"lazy": false, "type": "Boolean", "checked": true}, "continuation": {"lazy": false, "type": "ReportingStreamDecoder -> Any", "checked": true}},"aliases": [],"description": "Builds the `ReportingStreamDecoder`, consuming the `Input_Stream`.\nIt will do any necessary encoding detection, as determined by the `Encoding`"},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "decode_bytes_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"bytes": {"lazy": false}, "encoding": {"lazy": false, "type": "Encoding", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "resolve_encoding", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true}, "buffered_input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "problem_aggregator": {"lazy": false, "type": "DecodingProblemAggregator", "checked": true}, "continuation": {"lazy": false, "type": "Encoding -> Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "detect_default_encoding", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"buffered_input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "problem_aggregator": {"lazy": false, "type": "DecodingProblemAggregator", "checked": true}, "continuation": {"lazy": false, "type": "Encoding -> Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "verify_unicode_encoding", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true}, "expected_bom": {"lazy": false, "type": "Unicode_BOM", "checked": true}, "buffered_input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "problem_aggregator": {"lazy": false, "type": "DecodingProblemAggregator", "checked": true}, "continuation": {"lazy": false, "type": "Encoding -> Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "detect_bom", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unicode_BOM | Nothing", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Process.Exit_Code", "type": "Exit_Code", "name": "Success", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Exit_Code", "arguments": {},"aliases": [],"description": "The process exited with a success."},
{"module": "Standard.Base.System.Process.Exit_Code", "type": "Exit_Code", "name": "Failure", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Exit_Code", "arguments": {"code": {"lazy": false}},"aliases": [],"description": "The process exited with a failure.","arguments": "- code: The exit code for the failure."},
{"module": "Standard.Base.System.Process.Exit_Code", "type": "Exit_Code", "name": "from_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"code": {"lazy": false}},"aliases": [],"description": "Create exit code from a number.","arguments": "- code: The exit code you want to create.","examples": "> Example\n  Create a failure exit code.\n\n      import Standard.Base.System.Process.Exit_Code.Exit_Code\n\n      example_from_number = Exit_Code.from_number 1"},
{"module": "Standard.Base.System.Process.Exit_Code", "type": "Exit_Code", "name": "to_number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert exit code to a number.","examples": "> Example\n  Convert a success code to a corresponding number.\n\n      import Standard.Base.System.Process.Exit_Code.Exit_Code\n\n      example_to_number = Exit_Code.Success.to_number"},
{"module": "Standard.Base.System.Process.Exit_Code", "type": "Exit_Code", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Exit_Code."},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Builder", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Process_Builder", "arguments": {"command": {"lazy": false}, "arguments": {"lazy": false}, "stdin": {"lazy": false}},"aliases": [],"description": "A builder object that is used to create operating system processes.","arguments": "- command: The command to execute on the system.\n- arguments: The arguments to pass to `command`. These must be text.\n- stdin: Any content to pass to the standard input for `command`.","remarks": "? Creating a Builder\n  We recommend that you use this type with its builder interface. Start\n  by creating a `Builder \"command\"` and then call functions on it to\n  set arguments and standard output. It results in much clearer code."},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Builder", "name": "set_arguments", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"icon": "edit","description": "Sets the arguments that should be passed to the created process.","arguments": "- arguments: The arguments to pass to the process.","examples": "> Example\n  Set the arguments to the process using a builder.\n\n      import Standard.Base.System.Process\n\n      example_set_args =\n          builder = Process.new_builder \"echo\"\n          builder.set_arguments [\"hello, world!\"]"},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Builder", "name": "set_stdin", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"stdin": {"lazy": false}},"aliases": [],"icon": "edit","description": "Sets the text that will be used to feed standard input to the created\nprocess.","arguments": "- stdin: The standard input contents to pass to the process.","examples": "> Example\n  Set the standard input to a process using a builder.\n\n      import Standard.Base.System.Process\n\n      example_set_args =\n          builder = Process.new_builder \"echo\"\n          builder.set_stdin \"hello, world!\""},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Builder", "name": "create", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"redirect_out_err": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "system","description": "Create a process using a builder returning the result of execution.","arguments": "- redirect_out_err: Redirect stdout/stderr to `Process_Result`.","examples": "> Example\n  Execute the process contained in the builder.\n\n      import Standard.Base.System.Process\n\n      example_create =\n          builder = Process.new_builder \"echo\"\n          with_args = builder.set_arguments [\"hello, world!\"]\n          with_args.create"},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Result", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Process_Result", "arguments": {"exit_code": {"lazy": false, "type": "Exit_Code", "checked": true}, "stdout": {"lazy": false, "type": "Text", "checked": true}, "stderr": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Result", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Process_Result."},
{"module": "Standard.Base.System.Environment", "type": "", "name": "get", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": ["read environment"],"icon": "system","description": "Returns a value of a specified environment variable or Nothing if such\nvariable is not defined.","arguments": "- key: The name of the environment variable to look up.\n- if_missing: The default fallback value.","examples": "> Example\n  Look up the value of the `PATH` environment variable.\n\n      import Standard.Base.System.Environment\n\n      example_get = Environment.get \"PATH\""},
{"module": "Standard.Base.System.File", "type": "File", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File", "arguments": {},"aliases": [],"description": "Represents a file or folder on the filesystem."},
{"module": "Standard.Base.System.File", "type": "File", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false}},"aliases": ["new file"],"group": "File","icon": "data_input","description": "Creates a new file object, pointing to the given path.\n\nRelative paths are resolved relative to the directory containing the\ncurrently running workflow. Thus, if the workflow is running in the Cloud,\nthe relative paths will be resolved to Cloud files.","arguments": "- path: The path to the file that you want to create, or a file itself. The\n  latter is a no-op.","examples": "> Example\n  Create a new file pointing to the `data.csv` file in the project directory.\n\n      import Standard.Base.System.File.File\n      import Standard.Examples\n\n      example_new = File.new Examples.csv_path"},
{"module": "Standard.Base.System.File", "type": "File", "name": "create_temporary_file", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "default": "\"temp\""}, "suffix": {"lazy": false, "default": "\".tmp\""}},"aliases": [],"icon": "folder_add","description": "Creates a temporary file which will be deleted when Enso exits."},
{"module": "Standard.Base.System.File", "type": "File", "name": "current_directory", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["current directory"],"icon": "metadata","description": "Returns the current working directory (CWD) of the current program.","examples": "> Example\n  Get the program's current working directory.\n\n      import Standard.Base.System.File.File\n\n      example_cwd = File.current_directory"},
{"module": "Standard.Base.System.File", "type": "File", "name": "home", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["home directory"],"icon": "folder","description": "Returns the home directory of the current user.","examples": "> Example\n  Get the current user's home directory.\n\n      import Standard.Base.System.File.File\n\n      example_home = File.home"},
{"module": "Standard.Base.System.File", "type": "File", "name": "create_dry_run_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"copy_original": {"lazy": false, "default": "False"}},"aliases": [],"description": "Create a dry run temporary file which will be deleted when Enso exits.\n\nThe same temporary file is returned for paths that point to the same\nlocation (not accounting for symlinks).\n\nIf this file is a temporary file that was generated by\n`create_dry_run_file` on another file, it is returned as-is.","arguments": "- copy_original: If `True`, the created dry run file is 'synchronized'\n  with the original file - the file is copied to the temporary file, or\n  if the original file does not exist - it is ensured that the temporary\n  file also does not exist. If `False`, no actions are taken."},
{"module": "Standard.Base.System.File", "type": "File", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new output stream for this file and runs the specified action\non it.\n\nThe created stream is automatically closed when `action` returns (even\nif it returns exceptionally).","arguments": "- open_options: A vector of `File_Access` objects determining how to open\n  the stream. These options set the access properties of the stream.\n- action: A function that operates on the output stream and returns some\n  value. The value is returned from this method.","examples": "> Example\n  Perform an action on an output stream with the file open for writing.\n\n      import Standard.Base.System.File.File_Access.File_Access\n      import Standard.Examples\n\n      example_with_stream =\n          file = Examples.scratch_file\n          action = stream -> stream.write_bytes \"hello\".utf_8\n          file.with_output_stream [File_Access.Create, File_Access.Write] action"},
{"module": "Standard.Base.System.File", "type": "File", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new input stream for this file and runs the specified action\non it.\n\n\n\nThe created stream is automatically closed when `action` returns (even\nif it returns exceptionally).","arguments": "- open_options: A vector of `File_Access` objects determining how to open\n  the stream. These options set the access properties of the stream.\n- action: A function that operates on the input stream and returns some\n  value. The value is returned from this method.","examples": "> Example\n  Perform an action on an input stream with the file open for reading.\n\n      import Standard.Base.System.File.File_Access.File_Access\n      import Standard.Examples\n\n      example_with_stream =\n          file = Examples.csv\n          action = stream -> stream.read_all_bytes\n          file.with_input_stream [File_Access.Create, File_Access.Read] action"},
{"module": "Standard.Base.System.File", "type": "File", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["import", "load", "open"],"group": "Input","icon": "data_input","description": "Read a file using the specified file format","arguments": "- format: A `File_Format` object used to read file into memory.\n  If `Auto_Detect` is specified; the provided file determines the specific\n  type and configures it appropriately. If there is no matching type then\n  a `File_Error.Unsupported_Type` error is returned.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function.\n  By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.","examples": "> Example\n  Read the first sheet of an XLSX from disk and convert it into a table.\n\n      from Standard.Table import all\n      import Standard.Examples\n\n      example_xlsx_to_table = Examples.xlsx.read\n\n\n> Example\n  Read the sheet named `Dates` from an XLS and convert it to a table.\n\n      from Standard.Table import all\n      import Standard.Examples\n\n      example_xls_to_table = Examples.xls.read (..Sheet 'Dates')"},
{"module": "Standard.Base.System.File", "type": "File", "name": "read_bytes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["load bytes", "open bytes"],"icon": "data_input","description": "Reads all bytes in this file into a byte vector.","examples": "> Example\n  Read all of the bytes in the file.\n\n      import Standard.Examples\n\n      example_read_bytes = Examples.csv.read_bytes"},
{"module": "Standard.Base.System.File", "type": "File", "name": "read_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load text", "open text"],"icon": "data_input","description": "Reads the whole file into a `Text`, with specified encoding.","arguments": "- encoding: The text encoding to decode the file with. Defaults to UTF-8.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function.\n  By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.","examples": "> Example\n  Read the contents of the file.\n\n      import Standard.Examples\n\n      example_read = Examples.csv.read"},
{"module": "Standard.Base.System.File", "type": "File", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"subpath": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Operators","icon": "folder","description": "Join two path segments together.","arguments": "- subpath: The path to join to the path of `self`.","examples": "> Example\n  Concatenate two file path segments.\n\n      import Standard.Examples\n\n      example_append = Examples.data_dir / \"scratch_file\""},
{"module": "Standard.Base.System.File", "type": "File", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"subpaths": {"lazy": false}},"aliases": [],"group": "Calculations","icon": "folder","description": "Join two or more path segments together, normalizing the `..` and `.` subpaths.","arguments": "- subpaths: The path segment or segments to join to the path of `self`.","examples": "> Example\n  Concatenate two file path segments.\n\n      import Standard.Examples\n\n      example_append = Examples.data_dir.join \"scratch_file\"\n\n\n> Example\n  Concatenate multiple file path segments and normalizes the result.\n\n      import Standard.Examples\n\n      example_append = Examples.data_dir.join [\"2022\", \"10\", \"31\", \"scratch_file\"]"},
{"module": "Standard.Base.System.File", "type": "File", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"subpath": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Internal method kept for compatibility, we should probably prefer `/` as\nit is used across all of our file systems."},
{"module": "Standard.Base.System.File", "type": "File", "name": "resolve_single_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"part": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An internal helper method that resolves a single part (subpath) of a path."},
{"module": "Standard.Base.System.File", "type": "File", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the file descriptor to a JS_Object.","examples": "> Example\n  Convert a file to a JS_Object.\n\n      import Standard.Examples\n\n      example_to_json = Examples.csv.to_js_object"},
{"module": "Standard.Base.System.File", "type": "File", "name": "exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks whether the file exists.","examples": "> Example\n  Check if a file exists.\n\n      import Standard.Examples\n\n      example_exists = Examples.csv.exists","remarks": "? Data Links\n  If the file is a data link, this checks if the data link itself exists. \n  It does not tell anything about existence of the data link target."},
{"module": "Standard.Base.System.File", "type": "File", "name": "size", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the size of a file in bytes.","examples": "> Example\n  Gets the size of a file.\n\n      import Standard.Examples\n\n      example_exists = Examples.csv.size","remarks": "? Data Links\n  If the file is a data link that points to a file, the size of the \n  target file will be returned."},
{"module": "Standard.Base.System.File", "type": "File", "name": "starts_with", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"parent": {"lazy": false}},"aliases": [],"group": "Text","icon": "preparation","description": "Checks whether the file is within another path.","arguments": "- parent: The path to check if self is contained within.","examples": "> Example\n  Check if a file is within another path.\n\n      is_within = File.new \"foo/bar\" . starts_with (File.new \"foo\")\n      is_not_within = File.new \"foo/bar\" . starts_with (File.new \"f\")"},
{"module": "Standard.Base.System.File", "type": "File", "name": "creation_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the creation time of a file.","examples": "> Example\n  Gets the creation time of a file.\n\n      import Standard.Examples\n\n      example_exists = Examples.csv.creation_time","remarks": "? Data Links\n  If the file is a data link, this returns the creation time of the data \n  link."},
{"module": "Standard.Base.System.File", "type": "File", "name": "last_modified_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the last modified time of a file.","examples": "> Example\n  Gets the last modified time of a file.\n\n      import Standard.Examples\n\n      example_exists = Examples.csv.last_modified_time","remarks": "? Data Links\n  If the file is a data link, this returns the modification time of the \n  data link."},
{"module": "Standard.Base.System.File", "type": "File", "name": "posix_permissions", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the POSIX permissions associated with the file.","examples": "> Example\n  Check if the file is readable by the user's group.\n\n      import Standard.Examples\n\n      example_permissions = Examples.csv.posix_permissions.group_read","remarks": "? Data Links\n  If the file is a data link, this returns the permissions of the link, \n  not the target."},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks whether the file exists and is a directory.","examples": "> Example\n  Check if a file is a directory.\n\n      import Standard.Examples\n\n      example_is_directory = Examples.csv.is_directory","remarks": "? Data Links\n  If the file is a data link, this checks whether the target of the data \n  link is a directory."},
{"module": "Standard.Base.System.File", "type": "File", "name": "create_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Output","icon": "folder_add","description": "Creates the directory represented by this file if it did not exist.\n\nIt also creates parent directories if they did not exist.","examples": "> Example\n  Create a directory on the file system.\n\n      import Standard.Examples\n\n      example_is_directory =\n         (Examples.data_dir / \"my_directory\") . create_directory"},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_regular_file", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks whether the file exists and is a regular file.","examples": "> Example\n  Check if a file is regular.\n\n      import Standard.Examples\n\n      example_is_regular_file = Examples.csv.is_regular_file","remarks": "? Regular Files\n  A regular file is one that does not have any special meaning to the\n  operating system. Examples of files that are not regular are pipes, \n  devices, sockets and directories.\n\n\n? Data Links\n  If the file is a data link, this checks whether the target of the data \n  link is a regular file."},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_data_link", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_writable", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks whether it the file can be written to.","remarks": "? Read-only Files\n  If a file is read-only, it may still be possible to move or delete it,\n  depending on the permissions associated with its parent directory.\n\n\n? Data Links\n  If the file is a data link, this checks if the link itself is \n  modifiable."},
{"module": "Standard.Base.System.File", "type": "File", "name": "parent", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Resolves the parent filesystem node of this file.\n\nThe root directory has no parent, so this method will return `Nothing`.\nIf the file is a relative path, the parent will be resolved relative to\nthe current working directory.","examples": "> Example\n  Get the parent file of a file.\n\n      import Standard.Examples\n\n      example_parent = Examples.csv.parent"},
{"module": "Standard.Base.System.File", "type": "File", "name": "path", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the path of this file.","examples": "> Example\n  Get the path from a file.\n\n      import Standard.Examples\n\n      example_path = Examples.csv.path"},
{"module": "Standard.Base.System.File", "type": "File", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the name of this file.","examples": "> Example\n  Get the name from a file.\n\n      import Standard.Examples\n\n      example_name = Examples.csv.name"},
{"module": "Standard.Base.System.File", "type": "File", "name": "extension", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the extension of the file.","examples": "> Example\n  Get the extension of a file.\n\n      import Standard.Examples\n\n      Examples.csv.extension == \".csv\""},
{"module": "Standard.Base.System.File", "type": "File", "name": "absolute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Converts this file to an equivalent file represented with an absolute\npath.","examples": "> Example\n  Convert a file to an equivalent absolute path.\n\n      import Standard.Examples\n\n      example_absolute = Examples.csv.absolute"},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_absolute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Checks is this file's path is absolute.","examples": "> Example\n  Check if a file is represented by an absolute path.\n\n      import Standard.Examples\n\n      example_is_absolute = Examples.csv.is_absolute"},
{"module": "Standard.Base.System.File", "type": "File", "name": "normalize", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Normalizes the filepath.","examples": "> Example\n  Normalize a file path.\n\n      import Standard.Examples\n\n      example_normalize = Examples.csv.normalize"},
{"module": "Standard.Base.System.File", "type": "File", "name": "delete", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing ! File_Error", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Deletes the file.","arguments": "- recursive: If the target is a non-empty directory, it will only be\n  removed if this is set to `True`. Defaults to `False`, meaning that the\n  operation will fail if the directory is not empty. This option has no\n  effect for files, data links or symlinks.","examples": "> Example\n  Create a file and then delete it.\n\n      import Standard.Examples\n\n      example_delete =\n          file = Examples.data_dir / \"my_file\"\n          file.write_text \"hello\"\n          file.delete","remarks": "? Data Links\n  If the file is a data link, this will delete the link itself, not\n  affecting its target."},
{"module": "Standard.Base.System.File", "type": "File", "name": "copy_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Copies the file to the specified destination.","arguments": "- destination: the destination to move the file to.\n- replace_existing: specifies if the operation should proceed if the\n  destination file already exists. Defaults to `False`."},
{"module": "Standard.Base.System.File", "type": "File", "name": "move_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Moves the file to the specified destination.","arguments": "- destination: the destination to move the file to.\n- replace_existing: specifies if the operation should proceed if the\n  destination file already exists. Defaults to `False`."},
{"module": "Standard.Base.System.File", "type": "File", "name": "delete_if_exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Deletes the file if it exists on disk.","arguments": "- recursive: If the target is a non-empty directory, it will only be\n  removed if this is set to `True`. Defaults to `False`, meaning that the\n  operation will fail if the directory is not empty. This option has no\n  effect for files, data links or symlinks.","examples": "> Example\n  Delete a file if it exists on disk.\n\n      import Standard.Examples\n\n      example_del_if_exists = Examples.scratch_file.delete_if_exists"},
{"module": "Standard.Base.System.File", "type": "File", "name": "read_first_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}},"aliases": [],"description": "Reads first `n` bytes from the file (or less if the file is too small)\nand returns a vector of bytes."},
{"module": "Standard.Base.System.File", "type": "File", "name": "read_last_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}},"aliases": [],"description": "Reads last `n` bytes from the file (or less if the file is too small) and\nreturns a vector of bytes."},
{"module": "Standard.Base.System.File", "type": "File", "name": "list", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_filter": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Input","icon": "data_input","description": "Lists files contained in the directory denoted by this file.\n\n\n\nThe `name_filter` can contain the following special characters:\n- `\"?\"` - which matches a single filename character (so it will not match\n  a `\"/\"`).\n- `\"*\"` - which matches any number of characters, but again does not\n  cross directories.\n- `\"**\"` - which matches any number of characters and can cross\n  directories.\n- `\"\\\"` - can be used to escape the characters with special meaning; to\n  get a single backslash, you need to specify it twice; you also need to\n  keep in mind that the interpolating string literal also uses `\"\\\"` as\n  an escape sequence, so you need to type `'\\\\\\\\'` to get a single\n  backslash for the glob pattern, unless you use the raw strings, where\n  you only need to escape once: `\"\\\\\"`.\n- Brackets can be used to match exactly one character from some set of\n  characters. For example `\"[xy]\"` matches `\"x\"` or `\"y\"`. Character\n  ranges can also be specified: `\"[a-z]\"` matches any character from\n  `\"a\"` to `\"z\"`. An exclamation mark can be used to negate the match,\n  i.e. `\"[!xz]\"` will match any characters except for `\"x\"` and `\"z\"`.\n  Moreover the ranges and single characters can be used together, so for\n  example `\"[a-cxy]\"` will match `\"a\"`, `\"b\"`, `\"c\"`, `\"x\"` or `\"y\"`.\n  Within the brackets, the special characters `\"*\"`, `\"?\"` and `\"\\\"`\n  stand for themselves instead of their special meanings.\n- Braces allow to specify multiple patterns (separated with a comma), one\n  of which must be matched. For example: `\"{abc,x*}\"` will match either\n  the name `\"abc\"` or any name starting with `\"x\"`. The groups cannot be\n  nested.\n\nIf `recursive` is set to True and a `name_filter` does not contain `**`,\nit will be automatically prefixed with `**/` to allow matching files in\nsubdirectories.","arguments": "- name_filter: A glob pattern that can be used to filter the returned\n  files. If it is not specified, all files are returned.\n- recursive: Specifies whether the returned list of files should include\n  also files from the subdirectories. If set to `False` (the default),\n  only the immediate children of the listed directory are considered.","examples": "> Example\n  List all files with \".md\" or \".txt\" extension in the example directory\n  and any of its subdirectories.\n\n      import Standard.Examples\n\n      example_list_md_files =\n          Examples.data_dir.list name_filter=\"**.{txt,md}\" recursive=True"},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_descendant_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if `self` is a descendant of `other`."},
{"module": "Standard.Base.System.File", "type": "File", "name": "relativize", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"child": {"lazy": false}},"aliases": [],"icon": "convert","description": "Transforms `child` to a relative path with respect to `self`."},
{"module": "Standard.Base.System.File", "type": "File", "name": "list_immediate_children", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Utility function that lists immediate children of a directory."},
{"module": "Standard.Base.System.File", "type": "File", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Return the path that this file represents."},
{"module": "Standard.Base.System.File", "type": "File", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this File."},
{"module": "Standard.Base.System.File", "type": "", "name": "file_types", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File", "type": "", "name": "list_descendants", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Utility function that returns all descendants of the provided file, including\nthat file itself. If the file is not a directory, a list containing only\nitself is returned."},
{"module": "Standard.Base.System.File", "type": "", "name": "resolve_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Resolves the given path to a corresponding file location.\n\nIf the provided path is relative, the behaviour depends on the context:\n- if the project is running in the Cloud, the path is resolved to a Cloud file,\n  relative to the project's location.\n- if running locally, the path is resolved to a local file, relative to the\n  current working directory.\n\nThe method also does some extra processing to ensure that if the path\ncontains any data links, they will be correctly resolved. We cannot just\ndirectly construct the path from text - we instead find its root\n(or base directory if relative) and rely on the `/` operator to resolve all\nthe parts, allowing the data link logic to kick in."},
{"module": "Standard.Base.System.File", "type": "", "name": "get_child_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "", "name": "find_extension_from_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Convert from a Text to a File."},
{"module": "Standard.Base.System.File", "type": "", "name": "file_as_java", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "File_Like", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "Writable_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "Data_Link_From_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "", "name": "_local_file_copy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "", "name": "_local_file_move", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "", "name": "handle_invalid_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": true}, "action": {"lazy": true}},"aliases": [],"description": "On some filesystems some paths may be invalid,\nwe want to catch the Java exception and turn it into an Enso error."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "Reader", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_By_Line", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true}, "limit_lines": {"lazy": false, "type": "Integer|Nothing", "checked": true}, "filter_func": {"lazy": false}, "row_map": {"lazy": false}, "file_end": {"lazy": false, "default": "file.size"}},"aliases": [],"description": "Creates a new File_By_Line object.","arguments": "- file: The file to read.\n- encoding: The encoding to use when reading the file (defaults to UTF 8).\n- limit_lines: The number of lines to read (defaults to all lines).\n- filter_func: The filter to apply to each line (defaults to no filter).\n- row_map: The row map to use (defaults to a new row map).\n- file_end: The end of the file in bytes."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "offset": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"icon": "data_input","description": "Creates a new File_By_Line object.","arguments": "- file: The file to read.\n- encoding: The encoding to use when reading the file (defaults to UTF 8).\n- offset: The position within the file to read from (defaults to first byte)."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"line": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Reads a specific line from the file.","arguments": "- line: The line to read (0 indexed)."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Reads the first line"},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Reads the first line"},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Counts the number of lines in the file."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Returns the lines in the file as a vector."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "each", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "parse3","description": "Performs an action on each line.","arguments": "- function: The action to perform on each line."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "each_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "parse3","description": "Performs an action on each line.\n\n\n\nThe function is called with both the element index as well as the\nelement itself.","arguments": "- function: A function to apply that takes an index and an item."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Transforms each line in the file and returns the result as a vector.","arguments": "- action: The action to perform on each line."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "map_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Transforms each line in the file and returns the result as a vector.","arguments": "- action: The action to perform on each line."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "skip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"lines": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Selections","icon": "select_row","description": "Skips the specified number of lines.","arguments": "- lines: The number of lines to skip."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "limit", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"lines": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Selections","icon": "parse3","description": "Limits a file to a specific number of lines.","arguments": "- lines: The number of lines to limit the file to."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"group": "Selections","icon": "preparation","description": "Filters the file by a predicate.","arguments": "- predicate: The predicate to filter by."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "row_positions", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Exports the row_map"},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "java_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the Java_File for the backing file."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "charset", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the encoding as a Java Charset."},
{"module": "Standard.Base.System.File_By_Line", "type": "", "name": "read_line", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_By_Line", "checked": true}, "line": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "default": {"lazy": true, "default": "Nothing"}},"aliases": [],"description": "Reads a specific line from the file."},
{"module": "Standard.Base.System.File_By_Line", "type": "", "name": "for_each_lines", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_By_Line", "checked": true}, "start_at": {"lazy": false, "type": "Integer", "checked": true}, "end_at": {"lazy": false, "type": "Integer|Nothing", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Performs an action on each line in the file."},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Auto_Detect", "arguments": {},"aliases": [],"description": "Automatically detects the file format based on the file extension or mime-type."},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "get_reading_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Finds a matching format for reading the file.\n\nIt assumes that `file` already exists."},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "get_writing_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Finds a matching format for reading the file.\n\nIt may not assume that the `file` exists, so it must only rely on the\nfile path (extension in particular), but not the contents."},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": [],"description": "Returns the union of name patterns of all currently loaded formats,\nsince `Auto_Detect` should be able to read any of the loaded formats."},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Format", "arguments": {},"aliases": [],"description": "Interface for all file formats."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Gets all the currently available file formats.\n\nThe available file formats are ones provided by libraries which are\nimported within the current project. Importing an new library may cause\nmore entries to show up on this list."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A static method on each format that returns a vector of options that can\nbe displayed in format selectors that allow choosing this file format.\n\nA single format instance can provide multiple options to choose, or none\nat all."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": [],"description": "A static method on each format that returns a vector of name pattern\noptions that can be displayed in the `name_filter_widget`."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "all_known_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Text", "arguments": {},"aliases": [],"description": "Returns a list of all name patterns of all known file formats."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "name_filter_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": [],"description": "Builds a widget intended to be used for `name_filter` of `File.list` and\nits siblings that allows to filter file names by file format."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "Plain_Text", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Plain_Text_Format", "arguments": {"encoding": {"lazy": false, "type": "Encoding | Infer", "checked": true, "default": "Infer"}},"aliases": [],"description": "A file format for plain text files with the specified encoding.","arguments": "- encoding: The encoding to use.\n  If the encoding is set to `Infer`, it will be inferred from metadata if\n  available, falling back to the default encoding (UTF-8 with\n  Windows-1252 fallback). For writing, UTF-8 is used as default, unless\n  overridden."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "resolve_encoding", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bytes", "arguments": {},"aliases": [],"description": "A file format for reading or writing files as a sequence of bytes."},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "JSON_Format", "arguments": {},"aliases": [],"description": "A file format for reading and writing files as JSON."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Base.System.File_Format", "type": "Infer", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Infer", "arguments": {},"aliases": [],"description": "A setting to infer the default behaviour of some option."},
{"module": "Standard.Base.System.File_Format", "type": "File_Name_Pattern", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Name_Pattern", "arguments": {"display_name": {"lazy": false, "type": "Text", "checked": true}, "patterns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "Represents a single file pattern entry.\nIt may still contain multiple patterns that are related to a single type\nof file.\n\nEach pattern should comply with the format expected by `name_filter` in\n`File.list`, however, the patterns should not use the `{a,b}` syntax,\nas it will be used by the `File_Format` to merge patterns and nesting it\nwould not be allowed."},
{"module": "Standard.Base.System.File_Format", "type": "", "name": "format_types", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "", "name": "get_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"callback": {"lazy": false}},"aliases": [],"description": "Gets the first format not returning Nothing from the callback"},
{"module": "Standard.Base.System.File_Format", "type": "", "name": "_combine_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"patterns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "Combines a set of file name patterns into a single pattern that will match any of them.\nIt is compatible with the `name_filter` format of `File.list`."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "", "name": "parse_boolean_with_infer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean | Infer", "arguments": {"field_name": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Boolean | Text | Nothing", "checked": true}},"aliases": [],"description": "A helper for parsing the JSON representation of `Boolean | Infer`.\nIt defaults to `Infer` if the value was `Nothing`."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Format_Metadata", "arguments": {"path": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}, "name": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}, "extension": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}, "read_first_bytes": {"lazy": false, "type": "Integer -> Nothing | Vector Integer", "checked": true, "default": "_-\u003eNothing"}, "content_type": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"arguments": "- path: the path or the URI of the file.\n- name: the name of the file.\n- extension: the extension of the file.\n- read_first_bytes: a function that reads the first bytes of the file.\n- content_type: the content type of the file."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "no_information", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An instance that contains no information at all."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "interpret_content_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A helper method that encapsulates the common logic of trying to interpret\nthe content type."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "guess_extension", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Uses the provided extension or if it is not present, tries to guess one\nbased on the filename."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "Content_Type_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Content_Type_Metadata", "arguments": {"segments": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "Content_Type_Metadata", "name": "base_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "Content_Type_Metadata", "name": "find_segment", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Finds for a segment that starts with the given prefix."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "Content_Type_Metadata", "name": "raw_charset", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the name of the charset as reported by the content type."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "Content_Type_Metadata", "name": "encoding", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns an `Encoding` instance that represents the charset as reported by\nthe content type.\n\nIt may so happen that `raw_charset` returns a non-Nothing value, but the\ncharset is not recognized. In that case this function will return\n`Nothing`."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Input_Stream", "arguments": {"stream_resource": {"lazy": false}, "error_handler": {"lazy": false}, "associated_source": {"lazy": false, "type": "Nothing | File | Temporary_File | Vector | Array", "checked": true}},"aliases": [],"description": "An input stream, allowing for interactive reading of contents.","arguments": "- stream_resource: The internal resource that represents the underlying\n  stream.\n- error_handler: An error handler for IOExceptions thrown when reading.\n- associated_source: The source associated with this stream, if any.\n  It can be used to cheaply convert this stream into a `Restartable_Input_Stream`."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"java_stream": {"lazy": false}, "error_handler": {"lazy": false}, "associated_source": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Given a Java InputStream, wraps as a Managed_Resource and returns a new\nInput_Stream."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "from_bytes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Input_Stream", "arguments": {"bytes": {"lazy": false}},"aliases": [],"description": "Creates a new input stream from a vector of bytes."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "read_all_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Reads all the bytes in this stream into a vector of bytes."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "read_n_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Reads up to the provided number of bytes from the stream.\n\nMakes a best-effort to read as many bytes as provided, however fewer\nbytes may be read, if end of stream is encountered.\n\nThe length of the returned vector is the same as the number of bytes\nread.","arguments": "- n: The number of bytes to read from the stream."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "skip_n_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "It may throw an error if not enough bytes are available."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "read_byte", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Reads the next byte from the stream.\n\nThe returned value is an integer in the range 0-255 representing the\nnext byte of input, or -1 if end of stream is reached."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "close", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Closes this stream.\n\nEven though Streams are closed automatically upon garbage collection, it\nis still advised to close streams manually if they are not used within\na bracket pattern."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "with_java_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Exposes operations on the underlying Java input stream.\n\nUseful when integrating with polyglot functions requiring an\n`InputStream` as an argument.","arguments": "- f: Applies a function over the internal java stream."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "with_stream_decoder", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Runs an action with a `ReportingStreamDecoder` decoding data from the\ninput stream with the specified encoding."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "as_restartable_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"extend_lifetime": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Converts this stream into a restartable stream.\n\nThe conversion tries to be efficient, avoiding reading the stream if it\nis simply backed by a file or byte array.\nThis stream is invalidated after the conversion.","arguments": "- extend_lifetime: This option is only applicable if the source stream\n  was backed by a file. If set to `True`, a new temporary file will be\n  created, to untie the lifetime of the returned stream from the backing\n  file. If set to `False`, the returned stream will be valid only as long\n  as the original backing file, but the operation will be more efficient\n  - so it is preferred if the caller can guarantee the lifetime of such\n  backing file."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "is_peekable", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "as_peekable_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Input_Stream", "arguments": {},"aliases": [],"description": "Converts this stream into a stream that can be peeked.\nThis is useful when some application needs to look ahead in the stream,\nbut then needs to pass it further with the same state.\n\nThe peeked bytes are cached in memory, so this should only be used for\nsmall amounts of data. If more data has to be processed more than once,\n`as_restartable_stream` is preferred.\n\nThe current stream may be invalidated after the conversion, and it should\nno longer be used - only the returned stream should be used."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "peek_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Integer", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Peeks up to the provided number of bytes from the stream.\n\nMakes a best-effort to read as many bytes as provided, however fewer\nbytes may be read, if end of stream is encountered.\n\nThe length of the returned vector is the same as the number of bytes\nread.\n\nNo bytes are consumed from the stream - a next read or peek\noperation will see the same contents as before this call.\n\nThis operation is only allowed if `is_peekable` returns `True`.","arguments": "- n: The number of bytes to read from the stream."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "write_to_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "Reads the contents of this stream into a given file."},
{"module": "Standard.Base.System.Input_Stream", "type": "", "name": "close_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false}},"aliases": [],"description": "Utility method for closing primitive Java streams. Provided to avoid\naccidental scope capture with `Managed_Resource` finalizers."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Output_Stream", "arguments": {"stream_resource": {"lazy": false}, "error_handler": {"lazy": false}},"aliases": [],"description": "An output stream, allowing for interactive writing of contents.","arguments": "- stream_resource: The internal resource that represents the underlying\n  stream.\n- error_handler: An error handler for IOExceptions thrown when writing."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"java_stream": {"lazy": false}, "error_handler": {"lazy": false}},"aliases": [],"description": "Given a Java OutputStream, wraps as a Managed_Resource and returns a new\nOutput_Stream."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "with_memory_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Pair Vector Any", "arguments": {"action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": [],"description": "Runs a given action with an output stream that writes to an in-memory\nbyte array.\nThis method can be used when the data will fit in memory and there is no\nreason to use a backing file.\n\nThe method returns a pair of values: the byte array that was written to\nand the return value of the `action` is discarded.","arguments": "- action: A callback to run with the in-memory output stream."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "write_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"contents": {"lazy": false}},"aliases": [],"description": "Writes a vector of bytes in this stream at the current position.","arguments": "- contents: A vector of bytes to write."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "write_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}},"aliases": [],"description": "Writes an Input_Stream into this stream at the current position.","arguments": "- input_stream: An Input_Stream to write to this stream."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "close", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Closes this stream.\n\nEven though Streams are closed automatically upon garbage collection, it\nis still advised to close streams manually if they are not used within\na bracket pattern."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "with_java_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Exposes operations on the underlying Java output stream.\n\nUseful when integrating with polyglot functions requiring an\n`OutputStream` as an argument.","arguments": "- f: Applies a function over the internal java stream."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "with_stream_encoder", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Runs an action with a `ReportingStreamEncoder` encoding data to the\noutput stream with the specified encoding."},
{"module": "Standard.Base.System.Platform", "type": "OS", "name": "Linux", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "OS", "arguments": {},"aliases": [],"description": "The Linux operating system."},
{"module": "Standard.Base.System.Platform", "type": "OS", "name": "Mac_OS", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "OS", "arguments": {},"aliases": [],"description": "The macOS operating system."},
{"module": "Standard.Base.System.Platform", "type": "OS", "name": "Windows", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "OS", "arguments": {},"aliases": [],"description": "The Windows operating system."},
{"module": "Standard.Base.System.Platform", "type": "OS", "name": "Unknown", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "OS", "arguments": {},"aliases": [],"description": "An unknown operating system."},
{"module": "Standard.Base.System.Platform", "type": "", "name": "os", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "system","description": "Return the type of operating system.","examples": "> Example\n  Return the OS type:\n\n      import Standard.Base.System.Platform\n\n      example_os = Platform.os"},
{"module": "Standard.Base.System.Platform", "type": "", "name": "is_unix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Check if the operating system is UNIX."},
{"module": "Standard.Base.System.Platform", "type": "", "name": "from_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"os": {"lazy": false}},"aliases": [],"description": "Create an Os object from text."},
{"module": "Standard.Base.System.Process", "type": "", "name": "run", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"command": {"lazy": false, "type": "Text", "checked": true}, "arguments": {"lazy": false, "default": "[]"}, "stdin": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "redirect_out_err": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["run a command"],"group": "System","icon": "system","description": "Call a command with a list of arguments.","arguments": "- command: The command to execute.\n- arguments: The arguments to pass to `command`.\n- stdin: Any content to pass to the standard input for `command`.\n- redirect_out_err: Redirect stdout/stderr to `Process_Result`.","examples": "> Example\n  Call the \"echo\" command.\n\n      import Standard.Base.System.Platform\n      import Standard.Base.System.Process\n\n      example_run = case Platform.os of\n          Platform.OS.Windows -> Process.run \"PowerShell\" [\"-Command\", \"exit 42\"]\n          _ -> Process.run \"bash\" [\"-c\", \"exit 42\"]"},
{"module": "Standard.Base.System.Process", "type": "", "name": "new_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"command": {"lazy": false}, "arguments": {"lazy": false, "default": "[]"}, "stdin": {"lazy": false, "default": "\"\""}},"aliases": [],"description": "Create a new process builder.","arguments": "- command: The command to execute on the system.\n- arguments: The arguments to pass to `command`. These must be text.\n- stdin: Any content to pass to the standard input for `command`.\n- redirect_out_err: Redirect stdout/stderr to `Process_Result`.","examples": "> Example\n  Create a new builder for a command \"echo\".\n\n      import Standard.Base.System.Process\n\n      example_new_builder = Process.new_builder \"echo\""},
{"module": "Standard.Base.Any", "type": "Any", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {},"aliases": [],"description": "Any is the universal top-type, with all other types being subsumed by it.\n\nIf a value of type Any is expected in a given location, _any value_ can\nbe used in that position."},
{"module": "Standard.Base.Any", "type": "Any", "name": "to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"target_type": {"lazy": false}},"aliases": [],"group": "Conversions","icon": "convert","description": "Generic conversion of an arbitrary Enso value to requested type.\nDelegates to appropriate `.from` conversion method, if it exists.\nIf such method doesn't exist, `No_Such_Conversion` panic is raised.","arguments": "- target_type: the requested type.","examples": "> Example\n  Following code defines conversion of a `Complex` type to a `Number`\n  by computing absolute distance from `0`. The code yields `5.0`:\n\n      type Complex\n          Value re:Number im:Number\n\n      Number.from (that:Complex) = that.re*that.re+that.im*that.im . sqrt\n\n      Complex.Value 3 4 . to Number\n\n\n> Example\n  `.from` conversion methods may have additional arguments\n  with default values. Thus the conversion from `Complex` to\n  `Number` may take additional argument:\n\n      type Complex\n          Value re:Number im:Number\n\n      Number.from (that:Complex) = that.re*that.re+that.im*that.im . sqrt\n\n      Complex.Value 3 4 . to Number\n\n      type Complex\n          Value re:Number im:Number\n\n      Number.from (that:Complex) (ignore_im:Boolean=False) = case ignore_im of\n          False -> that.re*that.re+that.im*that.im . sqrt\n          True -> that.re\n\n      yields_3 = Complex.Value 3 4 . to Number ignore_im=True\n      yields_5 = Complex.Value 3 4 . to Number ignore_im=False\n      default5 = Complex.Value 3 4 . to Number"},
{"module": "Standard.Base.Any", "type": "Any", "name": "to_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "text","description": "Generic conversion of an arbitrary Enso value to a corresponding textual\nrepresentation.","examples": "> Example\n  Getting a textual representation of the number 7.\n\n      7.to_text"},
{"module": "Standard.Base.Any", "type": "Any", "name": "pretty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation.","examples": "> Example\n  Getting the Enso code of the number 7.\n\n      7.pretty\n      ## Returns a Text\n         7\n\n\n> Example\n  Getting the Enso code of the text Hello World!.\n\n      \"Hello World!\".pretty\n      ## Returns a Text\n         'Hello World!'"},
{"module": "Standard.Base.Any", "type": "Any", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generic conversion of an arbitrary Enso value to a corresponding short\nhuman-readable representation.","examples": "> Example\n  Getting a short human-readable textual representation of the number 7.\n\n      7.to_display_text"},
{"module": "Standard.Base.Any", "type": "Any", "name": "==", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["equals"],"group": "Operators","icon": "operators","description": "Checks if `self` is equal to `that`.\n\n\n\nTwo values are considered to be equal in Enso when they obey the following\nrecursive properties:\n- At each level, they have the same structure.\n- The value of each field in `self` is equal (by this definition) to the\n  corresponding field in `that`.","arguments": "- that: The object to compare `self` with.","examples": "> Example\n  The string 'é' (i.e. the character U+00E9, LATIN SMALL LETTER E WITH ACUTE)\n  is canonically the same as the string 'e\\u0301' (i.e. the letter `e`\n  followed by U+0301, COMBINING ACUTE ACCENT). Therefore:\n\n      ('é' == 'e\\u0301') == True\n\n\n> Example\n  Checking if the variable `a` is equal to `147`.\n\n      from Standard.Base import all\n\n      example_equality =\n          a = 7 * 21\n          a == 147","remarks": "! Implementing Your Own Equality\n  Equality in Enso is defined to allow comparison of any two values\n  (universal equality), no matter if they are not directly comparable. When\n  implementing equality for your own types, keep in mind that it needs to\n  work with any Enso value as the `that` argument.\n\n\n! Unicode Equality\n  The definition of equality includes Unicode canonicalization. I.e. two\n  texts are equal if they are identical after canonical decomposition. This\n  ensures that different ways of expressing the same character in the\n  underlying binary representation are considered equal.\n\n\n? Generic Equality and Performance\n  While the generic equality provided here will work for _all_ values in\n  Enso, its performance may often be suboptimal. Many types can implement\n  their own equality operations that will be more efficient than these."},
{"module": "Standard.Base.Any", "type": "Any", "name": "!=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["not equals"],"group": "Operators","icon": "operators","description": "Checks if `self` is not equal to `that`.","arguments": "- that: The object to compare `self` against.","examples": "> Example\n  Checking if the variable `a` is not equal to `147`.\n\n      from Standard.Base import all\n\n      example_inequality =\n          a = 7 * 21\n          a != 147","remarks": "! Implementing Your Own Inequality\n  We recommend that you do not implement your own inequality, instead relying\n  on the default definition given here. If you do, please ensure that you\n  satisfy universal equality, as described in the documentation for `Any.==`."},
{"module": "Standard.Base.Any", "type": "Any", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["greater than"],"group": "Operators","icon": "operators","description": "Checks if `self` is greater than `that`.\n\n\n\nTo be comparable, a custom object must have an associated comparator\nwhich will return `Ordering.Less/Greater` for unequal values. Otherwise,\nthis will raise `Incomparable_Values` error. See `Ordering.enso` for\ninformation how comparators work.","arguments": "- that: The value to compare `self` against.","examples": "> Example\n  Checking if the variable `a` is greater than `147`.\n\n      from Standard.Base import all\n\n      example_greater =\n          a = 7 * 28\n          a > 147"},
{"module": "Standard.Base.Any", "type": "Any", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["greater than or equal"],"group": "Operators","icon": "operators","description": "Checks if `self` is greater than or equal to `that`.","arguments": "- that: The value to compare `self` against.","examples": "> Example\n  Checking if the variable `a` is greater than or equal to `147`.\n\n      from Standard.Base import all\n\n      example_greater_eq =\n          a = 6 * 21\n          a >= 147","remarks": "! Implementing Greater Than or Equal\n  While it is often possible to implement a more efficient version of this\n  operation for complex types, care must be taken to ensure that your\n  implementation is semantically equivalent to the disjunction of the\n  greater than and equal to operations."},
{"module": "Standard.Base.Any", "type": "Any", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["less than"],"group": "Operators","icon": "operators","description": "Checks if `self` is less than `that`.\n\n\n\nTo be comparable, a custom object must have an associated comparator\nwhich will return `Ordering.Less/Greater` for unequal values. Otherwise,\nthis will raise `Incomparable_Values` error. See `Ordering.enso` for\ninformation how comparators work.","arguments": "- that: The value to compare `self` against.","examples": "> Example\n  Checking if the variable `a` is less than `147`.\n\n      from Standard.Base import all\n\n      example_less =\n          a = 7 * 21\n          a < 147"},
{"module": "Standard.Base.Any", "type": "Any", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["less than or equal"],"group": "Operators","icon": "operators","description": "Checks if `self` is less than or equal to `that`.\n\n\n\nTo have `<=` defined, a type must define both `<` and `==`.","arguments": "- that: The value to compare `self` against.","examples": "> Example\n  Checking if the variable `a` is less than or equal to `147`.\n\n      from Standard.Base import all\n\n      example_less_eq =\n          a = 7 * 21\n          a < 147","remarks": "! Implementing Less Than or Equal\n  While it is often possible to implement a more efficient version of this\n  operation for complex types, care must be taken to ensure that your\n  implementation is semantically equivalent to the disjunction of the\n  less than than and equal to operations."},
{"module": "Standard.Base.Any", "type": "Any", "name": "is_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the type is an instance of `Nothing`.\n\nNothing in Enso is used as a universal value to indicate the lack of presence\nof a value. This function is primarily useful in the IDE.","examples": "> Example\n  Checking if the value 1 is nothing.\n\n      1.is_nothing"},
{"module": "Standard.Base.Any", "type": "Any", "name": "if_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "If `self` is Nothing then returns `other`.","examples": "> Example\n  If the value \"Hello\" is nothing return \"\".\n\n      \"Hello\".if_nothing \"\""},
{"module": "Standard.Base.Any", "type": "Any", "name": "if_not_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "If `self` is Nothing then returns Nothing, otherwise returns the result\nof running the provided `action`.","examples": "> Example\n  Transform a value only if it is not nothing.\n\n      my_result.if_not_nothing <| my_result + 1"},
{"module": "Standard.Base.Any", "type": "Any", "name": "catch", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"error_type": {"lazy": false, "default": "Any"}, "handler": {"lazy": false, "default": "x-\u003ex"}},"aliases": [],"group": "Errors","icon": "error","description": "Executes the provided handler on an error, or returns the value unchanged.","arguments": "- error_type: The type of error to handle. Defaults to `Any` to handle\n  all errors.\n- handler: The function to call on this if it is an error value of a\n  matching type. By default this is identity.","examples": "> Example\n  Catching an `Illegal_Argument` and returning its message.\n\n      from Standard.Base import all\n\n      example_catch =\n          error = Error.throw (Illegal_Argument.Error \"My message\")\n          error.catch Illegal_Argument (err -> err.message)\n\n\n> Example\n  Catching any dataflow error and turning it into a regular value.\n\n      from Standard.Base import all\n\n      example_catch =\n          error = Error.throw 42\n          error.catch == 42"},
{"module": "Standard.Base.Any", "type": "Any", "name": "catch_primitive", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"handler": {"lazy": false}},"aliases": [],"description": "Executes the provided handler on a dataflow error, or executes as\nidentity on a non-error value.","arguments": "- handler: The function to call on this if it is an error value."},
{"module": "Standard.Base.Any", "type": "Any", "name": "map_error", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": true}},"aliases": [],"icon": "column_add","description": "Transforms an error.\n\n\n\nIf `self` is a non-error value it is returned unchanged. However, if `self`\nis an error, the error is transformed using the provided function.","arguments": "- f: The function used to transform the error.","examples": "> Example\n  Transforming an error value to provide more information.\n\n      from Standard.Base import all\n      from Standard.Examples import Example_Error_Type\n\n      example_map_error =\n         my_dictionary = Dictionary.empty\n         error = my_dictionary.at \"x\"\n         error.map_error (_ -> Example_Error_Type \"x is missing\")"},
{"module": "Standard.Base.Any", "type": "Any", "name": "is_error", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Errors","icon": "error","description": "Checks if `self` is an error.","examples": "> Example\n  Checking if the provided value is an error.\n\n      1.is_error"},
{"module": "Standard.Base.Any", "type": "Any", "name": "if_not_error", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"other": {"lazy": true}},"aliases": [],"description": "Returns the provided `other` value, unless `self` is an error.\n\n\n\nThe primary application of this function is to introduce a dataflow\ndependency between two otherwise unrelated operations. Very useful if one\nof the operations is performing a side-effect.\n\nAside from ensuring that any dataflow errors are propagated, the result\nwill also inherit any warnings attached to any of the two inputs.","arguments": "- other: The value to return if `self` is not an error.","examples": "> Example\n  Writing to a file and returning the file object if all went well, or an\n  error if it failed.\n\n      file.write \"foo\" . if_not_error file"},
{"module": "Standard.Base.Any", "type": "Any", "name": "map_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Applies the provided function to `self` unless `self` is `Nothing`, which is\nreturned unchanged.","arguments": "- f: The function to apply to `self` if `self` is not `Nothing`.","examples": "> Example\n  Applying a function over a value 10.\n\n      10.map_nothing *2"},
{"module": "Standard.Base.Any", "type": "Any", "name": "|>", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": true}},"aliases": [],"group": "Operators","description": "Applies the function on the right hand side to the argument on the left.","arguments": "- function: The function to apply to `self`.","examples": "> Example\n  Applying multiple functions in a pipeline to compute a number and transform\n  it to text.\n\n      1 |> (* 2) |> (/ 100) |> .to_text","remarks": "? `|>` or `.`?\n  The eagle-eyed reader will notice that the operator dot (`.`) is very\n  similar to the operator `|>`. In Enso, with the variable precedence of\n  operators, this makes perfect sense. In general, we recommend using `.`.\n  However, there are some contexts where variable precedence might be unclear\n  or confusing, or where the function being applied is not a method. In these\n  contexts we recommend using `|>`."},
{"module": "Standard.Base.Any", "type": "Any", "name": "has_warnings", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"group": "Errors","icon": "metadata","description": "Checks if any warnings (either all or of a specified type) are attached to the value.","arguments": "- warning_type: The type to check if attached to the value. Defaults to any warning."},
{"module": "Standard.Base.Any", "type": "Any", "name": "remove_warnings", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"group": "Errors","icon": "warning","description": "Remove the warnings (either all or of a specified type) attached to the value.","arguments": "- warning_type: The type to remove if attached to the value. Defaults to all warnings."},
{"module": "Standard.Base.Any", "type": "Any", "name": "throw_on_warning", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"group": "Errors","icon": "error","description": "Throws the first matching warning (either all or of a specified type) as a data flow error.","arguments": "- warning_type: The type to throw if attached to the value. Defaults to all warnings."},
{"module": "Standard.Base.Data", "type": "Raw_Response", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Raw_Response", "arguments": {},"aliases": [],"description": "If the `format` is set to `Raw_Response`, a raw HTTP `Response` is returned\nthat can be then processed further manually."},
{"module": "Standard.Base.Data", "type": "Raw_Response", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data", "type": "", "name": "read", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "default": "Missing_Argument.throw \"path\""}, "format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load", "open"],"group": "File","icon": "data_input","suggested": 1,"description": "Reads a file into Enso.\nUses the specified file format to parse the file into an Enso type. If not\nspecified will use the file's extension to determine the file format.","arguments": "- path: The path to the file to read. If the path is a URI, then the data\n  will be fetched if from a supported protocol.\n- format: A `File_Format` object used to read file into memory.\n  If `Auto_Detect` is specified; the provided file determines the specific\n  type and configures it appropriately. If there is no matching type then\n  a `File_Error.Unsupported_Type` error is returned.\n  You can use `File_Format.all` to get a list of currently loaded\n  formats.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function.\n  By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.","examples": "> Example\n  Read the first sheet of an XLSX from disk and convert it into a table.\n\n      from Standard.Table import all\n      import Standard.Examples\n\n      example_xlsx_to_table = Data.read Examples.xlsx\n\n\n> Example\n  Read the sheet named `Dates` from an XLS and convert it to a table.\n\n      from Standard.Table import all\n      import Standard.Examples\n\n      example_xls_to_table = Data.read Examples.xls (..Sheet 'Dates')","remarks": "! Request Caching\n\n  Responses to HTTP data requests are cached, and additional requests for the\n  same resources will use the cache, saving a round-trip call to the remote\n  server. Two resources are considered the same if the URIs and request\n  headers are the same. Header order does not affect sameness.\n\n  The cache respects the \"max-age\" and \"Age\" response headers; see\n  `Data.fetch` for more details.\n\n  The cached values are retained as long as the project remains open. Closing\n  a project will clear the cache."},
{"module": "Standard.Base.Data", "type": "", "name": "read_many", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"paths": {"lazy": false, "type": "Many_Files_List", "checked": true, "default": "Missing_Argument.throw \"paths\""}, "format": {"lazy": false, "default": "Auto_Detect"}, "return": {"lazy": false, "default": "..As_Merged_Table"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load", "open"],"group": "File","icon": "data_input","suggested": 2,"description": "Reads a a list of files into Enso.","arguments": "- paths: A list of files to load. It can be a Vector, Column or Table of\n  files, paths or URIs to fetch. If a Table is provided, it must either\n  contain a single column or a column called `path` (case insensitive).\n- format: A `File_Format` object used to read files into memory.\n  If `Auto_Detect` is specified; each file determines the specific\n  type and configures it appropriately. If there is no matching type then\n  a `File_Error.Unsupported_Type` error is returned.\n- return: Specifies the shape of the data to return.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function.\n  By default, if one of the files fails to load, a warning is issued and the\n  entry for that file becomes `Nothing`, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error on the\n  first failing file.\n  If set to `Ignore`, the operation proceeds without errors or warnings,\n  replacing files that fail to load with `Nothing`.","examples": "> Example\n  Read all CSV files from a directory into a single merged table.\n\n      from Standard.Table import all\n      import Standard.Examples\n\n      files = Data.list name_filter=\"*.csv\"\n      example_csv_dir_to_table = Data.read_many files","remarks": "! Request Caching\n\n  Responses to HTTP data requests are cached, and additional requests for the\n  same resources will use the cache, saving a round-trip call to the remote\n  server. Two resources are considered the same if the URIs and request\n  headers are the same. Header order does not affect sameness.\n\n  The cache respects the \"max-age\" and \"Age\" response headers; see\n  `Data.fetch` for more details.\n\n  The cached values are retained as long as the project remains open. Closing\n  a project will clear the cache."},
{"module": "Standard.Base.Data", "type": "", "name": "read_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "default": "Missing_Argument.throw \"path\""}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load text", "open text"],"icon": "data_input","description": "Open and read the file at the provided `path`.","arguments": "- path: The path of the file to open and read the contents of. It will\n  accept a textual path or a file.\n- encoding: The text encoding to decode the file with. Defaults to UTF-8.\n- on_problems: Specifies the behavior when a problem occurs during the\n  function.\n  By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.","examples": "> Example\n  Read the `data.csv` file in the project directory's `data` directory. You\n  will need to create the file `data.csv` manually in that directory.\n\n      import Standard.Base.Data\n      import Standard.Examples\n\n      example_read = Data.read_text Examples.csv_path"},
{"module": "Standard.Base.Data", "type": "", "name": "list", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"directory": {"lazy": false, "default": "enso_project.root"}, "name_filter": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "File","icon": "data_input","suggested": 3,"description": "Lists files contained in the provided directory.","arguments": "- directory: A path or `File` object to get the contents of.\n- name_filter: A glob pattern that can be used to filter the returned files.\n  If it is not specified, all files are returned.\n- recursive: Specifies whether the returned list of files should include also\n  files from the subdirectories. If set to `False` (the default), only the\n  immediate children of the listed directory are considered.","examples": "> Example\n  List all files with `.md` extension in the example directory and any of its\n  subdirectories.\n\n      import Standard.Examples\n\n      example_list_files =","remarks": "? Name Filter Rules\n\nThe `name_filter` can contain the following special characters:\n- `\"?\"` - which matches a single filename character (so it will not match a\n  `\"/\"`).\n- `\"*\"` - which matches any number of characters, but again does not cross\n  directories.\n- `\"**\"` - which matches any number of characters and can cross directories.\n- `\"\\\"` - can be used to escape the characters with special meaning; to get a\n  single backslash, you need to specify it twice; you also need to keep in\n  mind that the interpolating string literal also uses `\"\\\"` as an escape\n  sequence, so you need to type `'\\\\\\\\'` to get a single backslash for the\n  glob pattern, unless you use the raw strings, where you only need to escape\n  once: `\"\\\\\"`.\n- Brackets can be used to match exactly one character from some set of\n  characters. For example `\"[xy]\"` matches `\"x\"` or `\"y\"`. Character ranges\n  can also be specified: `\"[a-z]\"` matches any character from `\"a\"` to `\"z\"`.\n  An exclamation mark can be used to negate the match, i.e. `\"[!xz]\"` will\n  match any characters except for `\"x\"` and `\"z\"`. Moreover the ranges and\n  single characters can be used together, so for example `\"[a-cxy]\"` will\n  match `\"a\"`, `\"b\"`, `\"c\"`, `\"x\"` or `\"y\"`. Within the brackets, the special\n  characters `\"*\"`, `\"?\"` and `\"\\\"` stand for themselves instead of their\n  special meanings.\n- Braces allow to specify multiple patterns (separated with a comma), one of\n  which must be matched. For example: `\"{abc,x*}\"` will match either the name\n  `\"abc\"` or any name starting with `\"x\"`. The groups cannot be nested.\n\nKeep in mind that if `recursive` is set to True and a `name_filter` is used,\nthe function will return files from subdirectories only if the set\n`name_filter` allows crossing directories. So even with `recursive=True` a\nfilter `\"*.txt\"` will only return files that are immediate children of the\nlisted directory, to list files recursively you need to use a filter like\n`\"**.txt\"` or `\"*/*\"` (which will match only files that are exactly one\ndirectory down from the listed directory) or no filter at all."},
{"module": "Standard.Base.Data", "type": "", "name": "fetch", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI | Text", "checked": true, "default": "Missing_Argument.throw \"uri\""}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "format": {"lazy": false, "default": "Auto_Detect"}, "cache_policy": {"lazy": false, "type": "Cache_Policy", "checked": true, "default": "..Default"}},"aliases": ["download", "http get"],"group": "Web","icon": "data_download","suggested": 4,"description": "Fetches from the provided URI and returns the response, parsing the body if\nthe content-type is recognised. Returns an  error if the status code does not\nrepresent a successful response.","arguments": "- uri: The URI to fetch.\n- method: The HTTP method to use. Must be one of `HTTP_Method.Get`,\n  `HTTP_Method.Head`, `HTTP_Method.Delete`, `HTTP_Method.Options`.\n  Defaults to `HTTP_Method.Get`.\n- headers: The headers to send with the request. Defaults to an empty vector.\n- format: The format to use for interpreting the response.\n  Defaults to `Auto_Detect`. If `Raw_Response` is selected or if the format\n  cannot be determined automatically, a raw HTTP `Response` will be returned.","examples": "> Example\n  Read from an HTTP endpoint.\n\n      import Standard.Base.Data\n      response = Data.fetch URL\n\n\n> Example\n  Read from an HTTP endpoint and write the results to a file.\n\n      import Standard.Base.Data\n      file = enso_project.data / \"spreadsheet.xls\"\n      Data.fetch URL . body . write file","remarks": "! Request Caching\n\n  Responses to HTTP data requests are cached, and additional requests for the\n  same resources will use the cache, saving a round-trip call to the remote\n  server. Two resources are considered the same if the URIs and request\n  headers are the same. Header order does not affect sameness.\n\n  The cached values are retained as long as the project remains open. Closing\n  a project will clear the cache.\n\n  The cache respects the \"max-age\" and \"Age\" response headers received from\n  remote servers. These headers are used to determine if the cached value is\n  fresh or stale. If it is stale, the cached value is removed and a request\n  is made again to the remote servers.\n\n  The following limits are imposed on values stored in the cache:\n  - Single file limit: a single file can be no more than 10M.\n  - Total cache size limit: the entire cache can be no more than 10G.\n\n  For data responses over the single file limit, you can use `Data.download`\n  to download the file locally. Download sizes are not constrained by either\n  limit.\n\n  If the entire cache goes over the total cache size limit, the\n  least-recently-used entries are removed."},
{"module": "Standard.Base.Data", "type": "", "name": "post", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI | Text", "checked": true, "default": "Missing_Argument.throw \"uri\""}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Post"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "response_format": {"lazy": false, "default": "Auto_Detect"}},"aliases": ["http post", "upload"],"group": "Web","icon": "data_upload","description": "Writes the provided data to the provided URI. Returns the response,\nparsing the body if the content-type is recognised. Returns an  error if the\nstatus code does not represent a successful response.","arguments": "- uri: The URI to fetch.\n- body: The data to write. See `Supported Body Types` below.\n- method: The HTTP method to use. Must be one of `HTTP_Method.Post`,\n  `HTTP_Method.Put`, `HTTP_Method.Patch`. Defaults to `HTTP_Method.Post`.\n- headers: The headers to send with the request. Defaults to an empty vector.\n- response_format: The format to use for interpreting the response.\n  Defaults to `Auto_Detect`. If `Raw_Response` is selected or if the format\n  cannot be determined automatically, a raw HTTP `Response` will be returned.","examples": "> Example\n  Write a text string to an HTTP endpoint.\n\n      import Standard.Base.Data\n      response = Data.post url_post (Request_Body.Text \"hello world\")\n\n\n> Example\n  Write JSON to an HTTP endpoint.\n\n      import Standard.Base.Data\n      json = Json.parse '{\"a\": \"asdf\", \"b\": 123}'\n      response = Data.post url_post json\n\n\n> Example\n  Write an Enso object to an HTTP endpoint.\n\n      import Standard.Base.Data\n      response = Data.post url_post (My_Type.Value 12)\n\n\n> Example\n  Write a text string to an HTTP endpoint, with a specific text encoding.\n\n      import Standard.Base.Data\n      body = Request_Body.Text 'Hello World!' encoding=Encoding.utf_16_le\n      response = Data.post url_post body\n\n\n> Example\n  Write a text string to an HTTP endpoint, with a specific content type.\n\n      import Standard.Base.Data\n      body = Request_Body.Text 'a,b,c\\n' content_type=\"text/csv\"\n      response = Data.post url_post body\n\n\n> Example\n  Write the contents of a file to an HTTP endpoint.\n\n      import Standard.Base.Data\n      test_file = enso_project.data / \"sample.png\"\n      response = Data.post url_post (Request_Body.Binary test_file)\n\n\n> Example\n  Write a multipart form to an HTTP endpoint.\n\n      import Standard.Base.Data\n      test_file = enso_project.data / \"sample.png\"\n      form_data = Dictionary.from_vector [[\"key\", \"val\"], [\"a_file\", test_file]]\n      response = Data.post url_post (Request_Body.Form_Data form_data)\n\n\n> Example\n  Write a URL-encoded form to an HTTP endpoint.\n\n      import Standard.Base.Data\n      test_file = enso_project.data / \"sample.txt\"\n      form_data = Dictionary.from_vector [[\"key\", \"val\"], [\"a_file\", test_file]]\n      response = Data.post url_post (Request_Body.Form_Data form_data url_encoded=True)","remarks": "! Supported Body Types\n\n  - Request_Body.Text: Sends a text string, with optional encoding and content\n    type.\n  - Request_Body.Json: Sends an Enso object, after converting it to JSON.\n  - Request_Body.Binary: Sends a file.\n  - Request_Body.Form_Data: Sends a form encoded as key/value pairs. The keys\n    must be `Text`, and the values must be `Text` or `File`.\n  - Request_Body.Empty: Sends an empty body.\n\n  Additionally, the following types are allowed as the `body` parameter:\n\n  - Text: shorthand for `Request_Body.Text that_text`.\n  - File: shorthand for `Request_Body.Binary that_file`.\n  - Any other Enso object: shorthand for `Request_Body.Json that_object`.\n\n\n! Specifying Content Types\n\n  If the `body` parameter specifies an explicit content type, then it is an\n  error to also specify additional `Content-Type` headers in the `headers`\n  parameter. (It is not an error to specify multiple `Content-Type` values in\n  `headers`, however.)\n\n\n! Default Content Types\n\n  The following specifies the default content type for each `Request_Body`\n  type.\n\n  - Request_Body.Text: `text/plain`\n  - Request_Body.Json: `application/json`\n  - Request_Body.Binary: `application/octet-stream`\n  - Request_Body.Form_Data:\n        If `url_encoded` is True: `application/x-www-form-urlencoded`\n        If `url_encoded` is False: `multipart/form-data`\n  - Request_Body.Empty: No content type is sent\n  - Text: `text/plain`\n  - File: `application/octet-stream`\n  - Any other Enso object: `application/json`\n\n\n! Specifying Text Encodings\n\n  Text encoding can be specified in the `encoding` parameter to the\n  `Request_Body.Text` constructor. This value will be added to the\n  `Content-Type` header.\n\n  If a value for `encoding` is specified, but no value for `content_type` is\n  specified, then `\"text/plain\"` is used as the content type."},
{"module": "Standard.Base.Data", "type": "", "name": "download", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI | Text", "checked": true, "default": "Missing_Argument.throw \"uri\""}, "file": {"lazy": false, "type": "Writable_File", "checked": true}, "replace_existing": {"lazy": false, "type": "Download_Mode", "checked": true, "default": "..If_Not_Exists"}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}},"aliases": [],"group": "Web","icon": "data_download","description": "Fetches from the provided URI and if successful writes to the file. Returns\nan error if the status code does not represent a successful response.","arguments": "- uri: The URI to fetch.\n- file: The file to write the response to.\n- replace_existing: Determines when `download` should proceed with the\n  download, if the destination file already exists. (If the destination file\n  does not exist, the download always proceeds).\n  Options include:\n      - `If_Not_Exists`: Download the file if it does not already exist on\n        disk. (The default.)\n      - `If_Older_Than age`: Download the file if the existing file is older\n        than the specified age.\n      - `Always`: Always download.\n- method: The HTTP method to use. Must be one of `HTTP_Method.Get`,\n  `HTTP_Method.Head`, `HTTP_Method.Delete`, `HTTP_Method.Options`.\n  Defaults to `HTTP_Method.Get`.\n- headers: The headers to send with the request. Defaults to an empty vector."},
{"module": "Standard.Base.Error", "type": "Error", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Error", "arguments": {},"aliases": [],"description": "A type representing dataflow errors.\n\nA dataflow error in Enso is one that behaves like a standard value, and\nhence represents erroneous states in a way that exists _within_ standard\ncontrol flow.","remarks": "? Dataflow Errors or Panics\n  Whilst a Panic is useful for unrecoverable situations, most Enso APIs\n  are designed to use dataflow errors instead. As they exist within the\n  normal program control flow, they are able to be represented on the\n  Enso graph."},
{"module": "Standard.Base.Error", "type": "Error", "name": "throw", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"payload": {"lazy": false}},"aliases": [],"description": "Creates a new dataflow error containing the provided payload.","arguments": "- payload: The contents of the dataflow error to be created.","examples": "> Example\n  Throw a dataflow error containing the text \"Oops\".\n\n      Error.throw \"Oops\""},
{"module": "Standard.Base.Error", "type": "Error", "name": "unwrap", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error_value": {"lazy": false}},"aliases": [],"description": "Remove all wrapping errors, returning the inner error. If the argument is\nnot a wrapping error, it is returned unchanged."},
{"module": "Standard.Base.Error", "type": "Error", "name": "get_stack_trace_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a textual representation of the stack trace attached to an error."},
{"module": "Standard.Base.Error", "type": "Error", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts an error to a corresponding textual representation.","examples": "> Example\n  Converting a thrown error to text.\n\n      Error.throw \"foo\" . to_text"},
{"module": "Standard.Base.Error", "type": "Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a human-readable text representing this error."},
{"module": "Standard.Base.Error", "type": "Error", "name": "catch", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"error_type": {"lazy": false, "default": "Any"}, "handler": {"lazy": false, "default": "x-\u003ex"}},"aliases": [],"group": "Errors","icon": "error","description": "Executes the provided handler on an error, or returns the value unchanged.","arguments": "- error_type: The type of error to handle. Defaults to `Any` to handle\n  all errors.\n- handler: The function to call on this if it is an error value of a\n  matching type. By default this is identity.","examples": "> Example\n  Catching an `Illegal_Argument` and returning its message.\n\n      from Standard.Base import all\n\n      example_catch =\n          error = Error.throw (Illegal_Argument.Error \"My message\")\n          error.catch Illegal_Argument (err -> err.message)\n\n\n> Example\n  Catching any dataflow error and turning it into a regular value.\n\n      from Standard.Base import all\n\n      example_catch =\n          error = Error.throw 42\n          error.catch == 42\n\n\n> Example\n  Catch a wrapped error in various ways.\n\n      map_fun a = if a == 30 then Error.throw (Some_Error.Error a) else a+1\n\n      # Catch an error as the inner error\n      [10, 20, 30, 40] . map map_fun . catch Some_Error\n      # => (Some_Error.Error 30)\n\n      # Catch an error as the outer error\n      [10, 20, 30, 40] . map map_fun . catch Map_Error\n      # => (Map_Error.Error 2 (Some_Error.Error 30))\n\n      # Catch an error without specifying an error type\n      [10, 20, 30, 40] . map map_fun . catch\n      # => (Map_Error.Error 2 (Some_Error.Error 30))","remarks": "! Wrapped Errors\n\n  A wrapped error is one that has been wrapped inside another error. For\n  example, an error thrown in a `Vector.map operation` at index 3 would\n  look like this:\n\n      `(Map_Error.Error 3 (Some_Error.Error \"an error occurred\"))`\n\n   A wrapped error can be caught either as as the inner error, or as the\n   outer error, by using the `error_type` parameter. If it is caught as\n   the inner error, the outer wrapping error is removed. If\n   `error_wrapper` is unspecified or `Any`, the error is caught as the\n   outer error.\n\n   A wrapping error must implement a conversion to `Wrapped_Error` to be\n   treated properly as a wrapping error."},
{"module": "Standard.Base.Error", "type": "Error", "name": "map_error", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Transforms an error.\n\n\n\nIf `self` is a non-error value it is returned unchanged. However, if `self`\nis an error, the error is transformed using the provided function","arguments": "- f: The function used to transform the error.","examples": "> Example\n  Transforming an error value.\n\n      import Standard.Examples\n\n      example_map_error =\n          map = Examples.map\n          map.at 10 . map_error (_ -> \"The element 10 was not found.\")"},
{"module": "Standard.Base.Error", "type": "Error", "name": "stack_trace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Errors","icon": "metadata","description": "Returns the attached stack trace of the error.\n\nThe ordering of the resulting vector is such that the top stack frame is the\nfirst element."},
{"module": "Standard.Base.Error", "type": "Error", "name": "is_error", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Errors","icon": "error","description": "Checks if `self` is an error.","examples": "> Example\n  Checking if the value 1 is an error.\n\n      1.is_error"},
{"module": "Standard.Base.Error", "type": "Error", "name": "if_not_error", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"other": {"lazy": true}},"aliases": [],"description": "Returns the provided `other` value, unless `self` is an error.\n\n\n\nThe primary application of this function is to introduce a dataflow\ndependency between two otherwise unrelated operations. Very useful if one\nof the operations is performing a side-effect.\n\nAside from ensuring that any dataflow errors are propagated, the result\nwill also inherit any warnings attached to any of the two inputs.","arguments": "- other: The value to return if `self` is not an error.","examples": "> Example\n  Writing to a file and returning the file object if all went well, or an\n  error if it failed.\n\n      file.write \"foo\" . if_not_error file"},
{"module": "Standard.Base.Error", "type": "", "name": "look_for_wrapped_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error_type": {"lazy": false, "default": "Any"}, "error_value": {"lazy": false}},"aliases": [],"description": "Unwrap a wrapped error 0 or more times until the specified type is found.\nReturns None if it is not found."},
{"module": "Standard.Base.Function", "type": "Function", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Function", "arguments": {},"aliases": [],"description": "A function is any type that represents a not-yet evaluated computation.\n\nMethods are represented as functions with dynamic dispatch semantics on\nthe this argument."},
{"module": "Standard.Base.Function", "type": "Function", "name": "<|", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": true}},"aliases": [],"group": "Operators","icon": "operators","description": "Applies the function `self` to the provided argument.","arguments": "- argument: The argument to apply `self` to.","examples": "> Example\n  Applying a function to a block.\n\n      (x -> x + 1) <|\n         y = 1 ^ 3\n         3 + y","remarks": "? Piping Blocks to Functions\n  This construction is particularly useful for passing a block as an argument\n  to a function. This means that you can compute more sophisticated values\n  in-line, as shown in the example below."},
{"module": "Standard.Base.Function", "type": "Function", "name": "<<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"that": {"lazy": true}},"aliases": [],"group": "Operators","icon": "operators","description": "Composes two functions together, for `f << g` creating the function\ncomposition `f ∘ g` (equivalent to `x -> f (g x)`).","arguments": "- that: The function to compose with `self`.","examples": "> Example\n  Multiply by 2 and then add 1 as a function applied to 2.\n\n      (+1 << *2) 2"},
{"module": "Standard.Base.Function", "type": "Function", "name": ">>", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"that": {"lazy": true}},"aliases": [],"group": "Operators","icon": "operators","description": "Composes two functions together in the forward direction, for `f >> g`\ncreating the function composition `g ∘ f` (equivalent to `x -> g (f (x))`).","arguments": "- that: The function to compose with `self`.","examples": "> Example\n  Add one and then multiply by two as a function applied to 2.\n\n      (+1 >> *2) 2"},
{"module": "Standard.Base.Function", "type": "", "name": "identity", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"icon": "braces","description": "An identity function which returns the provided argument.","arguments": "- x: the value to return.","examples": "> Example\n  Create a function always returning the provided argument and apply it to 5.\n\n      five = Function.identity 5"},
{"module": "Standard.Base.Function", "type": "", "name": "flip", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "comment": "- f function that takes two arguments"}},"aliases": [],"icon": "braces","description": "Flips the first two arguments of a function. Returns function that\ntakes two arguments, but in opposite order.","arguments": "- f function that takes two arguments","examples": "> Example\n  Create a function that concatenates two strings in reverse order and print the result.\n\n    # Prints 'helloworld'\n    IO.println <| Function.flip (+) \"world\" \"hello\""},
{"module": "Standard.Base.Function", "type": "", "name": "const", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "comment": "- x constant value to return"}, "f": {"lazy": true}},"aliases": [],"icon": "braces","description": "Creates a function which drops its input and returns the provided value instead.\nThe expression const a is the same as \\_ -> a.","arguments": "- x constant value to return","examples": "> Example\n\n    IO.println <| [1, 2, 3].map (Function.const 7) # Prints '[7, 7, 7]'"},
{"module": "Standard.Base.Function", "type": "", "name": "curry", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "comment": "- f function accepting pair of values"}},"aliases": [],"icon": "braces","description": "Converts a single-argument function accepting a pair of elements into a multi-argument one.","arguments": "- f function accepting pair of values"},
{"module": "Standard.Base.Function", "type": "", "name": "uncurry", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "comment": "- f function accepting multiple arguments"}},"aliases": [],"icon": "braces","description": "Converts a multi-argument function into a single-argument one accepting a pair of elements.","arguments": "- f function accepting multiple arguments"},
{"module": "Standard.Base.IO", "type": "", "name": "print_err", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Prints the provided message to standard error.","arguments": "- message: The message to print. It will have to_text called on it to\n  generate a textual representation that is then printed.","examples": "> Example\n  Print the message \"Oh no!\" to standard error.\n\n      IO.print_err \"Oh no!\""},
{"module": "Standard.Base.IO", "type": "", "name": "println", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Prints the provided message to standard output.","arguments": "- message: The message to print. It will have to_text called on it to\n  generate a textual representation that is then printed.","examples": "> Example\n  Print the message \"Oh yes!\" to standard output.\n\n      IO.println \"Oh yes!\""},
{"module": "Standard.Base.IO", "type": "", "name": "print", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Prints the provided message to standard output without adding a new line at the end.","arguments": "- message: The message to print. It will have to_text called on it to\n  generate a textual representation that is then printed.","examples": "> Example\n  Print the message \"Oh yes!\" to standard output using `print` and then `println`.\n\n      IO.print \"Oh \"\n      IO.println \"yes!\""},
{"module": "Standard.Base.IO", "type": "", "name": "readln", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Reads a line from standard input.","examples": "> Example\n  Read a line from standard input.\n\n      IO.readln"},
{"module": "Standard.Base.Logging", "type": "Progress", "name": "Running", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Progress", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "max": {"lazy": false, "type": "Integer", "checked": true}, "logger": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Logging", "type": "Progress", "name": "run", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "up_to": {"lazy": false, "type": "Integer", "checked": true}, "action": {"lazy": false, "type": "Progress->Any", "checked": true}},"aliases": [],"description": "Performs provided `action` while reporting its progress.\n\nThe `action` is a function that takes a `Progress` handle\nand uses its methods to report progress of the computation.\nThe value returned from `action` is returned from this\nmethod.","arguments": "- label: Overall description of the action\n- up_to: how _\"long\"_ - e.g. how many steps the action is expected to take. \n    It has to be at least one or higher.\n- action: function performing the computation while reporting its `Progress`"},
{"module": "Standard.Base.Logging", "type": "Progress", "name": "advance", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Progress", "arguments": {"amount": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Reports progress of the computation.\n\nAdds provided `amount` to the already\naccumulated work towards `up_to` value provided when creating this `Progress`.","arguments": "- amount: value to add to the progress. Must be >= 0","returns": "The self value."},
{"module": "Standard.Base.Logging", "type": "Progress", "name": "log", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Progress", "arguments": {"detail": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Provides additional human readable detail of the status of the computation.","arguments": "- info: textual description of what's going on","returns": "The self value."},
{"module": "Standard.Base.Logging", "type": "Progress", "name": "to_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Simple name of the progress"},
{"module": "Standard.Base.Logging", "type": "Log_Level", "name": "Finest", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Log_Level", "arguments": {},"aliases": [],"description": "Finest (Trace) level log message."},
{"module": "Standard.Base.Logging", "type": "Log_Level", "name": "Fine", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Log_Level", "arguments": {},"aliases": [],"description": "Fine (Debug) level log message."},
{"module": "Standard.Base.Logging", "type": "Log_Level", "name": "Info", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Log_Level", "arguments": {},"aliases": [],"description": "Info level log message."},
{"module": "Standard.Base.Logging", "type": "Log_Level", "name": "Warning", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Log_Level", "arguments": {},"aliases": [],"description": "Warning level log message."},
{"module": "Standard.Base.Logging", "type": "Log_Level", "name": "Severe", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Log_Level", "arguments": {},"aliases": [],"description": "Severe level log message."},
{"module": "Standard.Base.Logging", "type": "Any", "name": "log_message", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": true, "type": "Text", "checked": true}, "level": {"lazy": false, "type": "Log_Level", "checked": true, "default": "Log_Level.Info"}},"aliases": [],"description": "Log a message.\nThis function needs to be enabled by importing `Standard.Base.Logging` using\n`from Standard.Base.Logging import all`."},
{"module": "Standard.Base.Logging", "type": "", "name": "log_impl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"logger": {"lazy": false}, "message": {"lazy": true}, "level": {"lazy": false}, "args": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Math", "type": "", "name": "pi", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "The mathematical constant pi, equal to the ratio of a circle circumference\nto its diameter.","examples": "> Example\n  Calculating the area of a circle.\n\n      circle_area r = 2 * Math.pi * r^2"},
{"module": "Standard.Base.Math", "type": "", "name": "e", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "The mathematical constant e, the base of the natural logarithm.","examples": "> Example\n  Calculating the natural logarithm of 3.\n\n      3.log Math.e"},
{"module": "Standard.Base.Math", "type": "", "name": "min", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": [],"group": "Math","description": "Returns the smaller value of `a` and `b`.","arguments": "- a: The first number.\n- b: The second number.","examples": "> Example\n  Calculate the smallest number out of 1 and 2.\n\n      Math.min 1 2","remarks": "? Math.min or Number.min\n  While we provide the min method on `Number`, we find it more intuitive to\n  write `Math.min a b` rather than `a.min b`. To that end, we recommend using\n  the first style."},
{"module": "Standard.Base.Math", "type": "", "name": "max", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": [],"group": "Math","description": "Returns the larger value of `a` and `b`.","arguments": "- a: The first number.\n- b: The second number.","examples": "> Example\n  Calculate the largest number out of 1 and 2.\n\n      Math.max 1 2","remarks": "? Math.max or Number.max\n  While we provide the max method on `Number`, we find it more intuitive to\n  write `Math.max a b` rather than `a.max b`. To that end, we recommend using\n  the first style."},
{"module": "Standard.Base.Meta", "type": "Type", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Type", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Type", "name": "find", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Type ! Not_Found", "arguments": {"qualified_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "find","description": "Finds type specified by fully qualified name. Searches\nall the types known to the system by transitive closure\nof import statements in executing modules.","arguments": "- qualified_name: fully qualified name."},
{"module": "Standard.Base.Meta", "type": "Type", "name": "constructors", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Vector Constructor", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns a vector of `Meta.Constructor` for this type"},
{"module": "Standard.Base.Meta", "type": "Type", "name": "methods", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Vector", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns a vector of method names that can be invoked\non instances of this type.","examples": "> Example\n  All instance methods to invoke on `Integer` as\n  `(v:Integer) v.method_name...`:\n\n      Meta.meta Integer . methods\n\n\n> Example\n  All static methods to invoke on `Integer` as\n  `Integer.method_name...`:\n\n     Meta.meta (Meta.type_of Integer) . methods","remarks": "? Static Methods\n\n  To obtain list of _static methods_ on a given type\n  use `Meta.type_of`."},
{"module": "Standard.Base.Meta", "type": "Type", "name": "qualified_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the fully qualified name of the type."},
{"module": "Standard.Base.Meta", "type": "Type", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the short name of the type."},
{"module": "Standard.Base.Meta", "type": "Atom", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Atom", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Atom", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Obtains the real atom value"},
{"module": "Standard.Base.Meta", "type": "Atom", "name": "fields", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Vector Any", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns a vector of field values of the given atom."},
{"module": "Standard.Base.Meta", "type": "Atom", "name": "constructor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Constructor", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns a constructor value of the given atom."},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Constructor", "arguments": {"impl": {"lazy": false, "type": "Function", "checked": true}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Function", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Obtains the qualified accessor function of the constructor"},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "fields", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Vector Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns a vector of field names defined by a constructor."},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the name of a constructor."},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "new", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"fields": {"lazy": false, "type": "Vector|Array", "checked": true}},"aliases": [],"icon": "braces","description": "Creates a new atom of the given constructor.","arguments": "- fields: A vector of arguments to pass to the constructor when creating the\n  new atom."},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "declaring_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Type", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the type that this constructor is a part of."},
{"module": "Standard.Base.Meta", "type": "Primitive", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Primitive", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Primitive", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the (primitive) value wrapped by this type"},
{"module": "Standard.Base.Meta", "type": "Unresolved_Symbol", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unresolved_Symbol", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Unresolved_Symbol", "name": "value", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the raw unresolved symbol"},
{"module": "Standard.Base.Meta", "type": "Unresolved_Symbol", "name": "rename", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Unresolved_Symbol", "arguments": {"new_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Returns a new unresolved symbol with its name changed to the provided\nargument.","arguments": "- new_name: The new name for the unresolved symbol."},
{"module": "Standard.Base.Meta", "type": "Unresolved_Symbol", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the name of an unresolved symbol."},
{"module": "Standard.Base.Meta", "type": "Error", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Error", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Error", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Obtains the actual value of the error"},
{"module": "Standard.Base.Meta", "type": "Polyglot", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Polyglot", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Polyglot", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Obtains the actual polyglot value"},
{"module": "Standard.Base.Meta", "type": "Polyglot", "name": "get_language", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Language", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the language with which a polyglot value is associated."},
{"module": "Standard.Base.Meta", "type": "Language", "name": "Java", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Language", "arguments": {},"aliases": [],"description": "The Java language."},
{"module": "Standard.Base.Meta", "type": "Language", "name": "Unknown", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Language", "arguments": {},"aliases": [],"description": "An unknown language."},
{"module": "Standard.Base.Meta", "type": "Any", "name": "is_same_object_as", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {"value": {"lazy": false}},"aliases": [],"icon": "metadata","description": "Checks whether `self` represents the same underlying reference as `value`.","arguments": "- value_1: The first value.\n- value_2: The second value."},
{"module": "Standard.Base.Meta", "type": "Any", "name": "is_a", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {"typ": {"lazy": false}},"aliases": [],"icon": "metadata","description": "Checks if `self` is an instance of `typ`.","arguments": "- typ: The type to check `self` against."},
{"module": "Standard.Base.Meta", "type": "Base_Error", "name": "is_a", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {"typ": {"lazy": false}},"aliases": [],"icon": "metadata","description": "Checks if `self` is an instance of `typ`.","arguments": "- typ: The type to check `self` against."},
{"module": "Standard.Base.Meta", "type": "", "name": "atom_with_hole", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"factory": {"lazy": false}},"aliases": [],"description": "Constructs a new atom with a \"hole\". Returns an object with `value` and\n`fill` properties. Value contains the created atom and `fill` holds a\nfunction to \"fill the hole\" later.\n\nThere can be only one hole in the atom, i.e., only one field of the atom\nreturned by the `value` method should be a hole. If this condition is\nviolated, a Panic error with `Uninitialized_State` payload is thrown.","arguments": "- factory: a function that takes the \"hole\" element and returns newly created atom","examples": "> Example\n  Create a Pair that has a hole in its first element.\n      atom_with_hole = Meta.atom_with_hole (e-> Pair.Value e 2)\n      atom_with_hole.value.first.to_text == \"Meta.atom_with_hole\"\n      atom_with_hole.fill 1\n      atom_with_hole.value.first.to_text == \"1\""},
{"module": "Standard.Base.Meta", "type": "", "name": "meta", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Atom | Constructor | Primitive | Polyglot | Unresolved_Symbol | Error | Type", "arguments": {"value": {"lazy": true}},"aliases": [],"description": "Returns a meta-representation of a given runtime entity.","arguments": "- value: The runtime entity to get the meta representation of."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_same_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {"value_1": {"lazy": false}, "value_2": {"lazy": false}},"aliases": [],"description": "Checks whether two objects are represented by the same underlying reference.","arguments": "- value_1: The first value.\n- value_2: The second value."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_a", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {"value": {"lazy": false}, "typ": {"lazy": false}},"aliases": [],"description": "Checks if `value` is an instance of `typ`.","arguments": "- value: The value to check for being an instance of `typ`.\n- typ: The type to check `self` against."},
{"module": "Standard.Base.Meta", "type": "", "name": "type_of", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Returns the type of the given value.","arguments": "- value: The value to get the type of."},
{"module": "Standard.Base.Meta", "type": "", "name": "get_annotation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"target": {"lazy": false}, "method": {"lazy": false}, "parameter_name": {"lazy": false}},"aliases": [],"description": "Given a type object, method name and a parameter name, return the associated annotation if it exists.","arguments": "- target: The value or type to get the attribute from.\n- method: The symbol representing method or constructor to get the attribute for.\n- parameter_name: The name of the parameter to get the attribute for."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_atom_constructor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value": {"lazy": true}},"aliases": [],"description": "Checks if the provided value is an atom constructor.","arguments": "- value: The value to check."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_atom", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks if the provided value is an atom.","arguments": "- value: The value to check."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks if the provided value is a runtime error.","arguments": "- value: The value to check."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks if the provided value is a type.","arguments": "- value: The value to check."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_polyglot", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks if the provided value is a polyglot value.","arguments": "- value: The value to check."},
{"module": "Standard.Base.Meta", "type": "Type", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Converts any value to its `Meta.Type`. Useful for querying various\ntype properties like `.name` or `.qualified_name`.","arguments": "- value: the value to get the type of"},
{"module": "Standard.Base.Metadata", "type": "Display", "name": "Always", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Display", "arguments": {},"aliases": [],"description": "Parameter is always shown on the collapsed view."},
{"module": "Standard.Base.Metadata", "type": "Display", "name": "When_Modified", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Display", "arguments": {},"aliases": [],"description": "Parameter is shown on the collapsed view if not the default value."},
{"module": "Standard.Base.Metadata", "type": "Display", "name": "Expanded_Only", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Display", "arguments": {},"aliases": [],"description": "Parameter is only shown on the expanded view."},
{"module": "Standard.Base.Metadata", "type": "File_Action", "name": "Open", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Action", "arguments": {},"aliases": [],"description": "The File or Folder is for reading from."},
{"module": "Standard.Base.Metadata", "type": "File_Action", "name": "Save", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Action", "arguments": {},"aliases": [],"description": "The File or Folder is for writing to."},
{"module": "Standard.Base.Metadata", "type": "Choice", "name": "Option", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Choice", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Text | Vector Choice", "checked": true, "default": "label"}, "parameters": {"lazy": false, "type": "Vector (Pair Text Widget)", "checked": true, "default": "[]"}, "icon": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Describes an entry in a Single_Choice or Multiple_Choice widget.","arguments": "- label: The text to display for the entry.\n- value: The code to insert for the entry. By default, the `label` is used.\n- parameters: A list of parameters for the arguments for the `value`.\n  This provides the structure needed for nested widgets.\n- icon: The icon to display for the entry. By default, no icon is used."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Single_Choice", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"values": {"lazy": false, "type": "Vector Choice", "checked": true}, "label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}, "allow_custom": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Describes a single value widget (dropdown).","arguments": "- values: A list of choices to display.\n- label: The placeholder text value.\n  By default, the parameter name is used.\n- display: The display mode for the parameter.\n- allow_custom: Allow the user to enter a value not in the list?"},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Vector_Editor", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"item_editor": {"lazy": false, "type": "Widget", "checked": true}, "item_default": {"lazy": false, "type": "Text", "checked": true}, "label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}},"aliases": [],"description": "Describes a list editor widget producing a Vector.\nItems can be dragged around to change the order, or dragged out to be deleted from the Vector.","arguments": "- item_editor: The widget to use for editing the items.\n- item_default: The default value for new items inserted when the user clicks the `+` button.\n- label: The placeholder text value.\n  By default, the parameter name is used.\n- display: The display mode for the parameter."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Multiple_Choice", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"values": {"lazy": false, "type": "Vector Choice", "checked": true}, "label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}, "quote_values": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Describes a multi value widget."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Code_Input", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}},"aliases": [],"description": "Describe a code parameter."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Boolean_Input", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}},"aliases": [],"description": "Describe a boolean parameter."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Numeric_Input", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}, "minimum": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}, "maximum": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}, "step": {"lazy": false, "type": "Number", "checked": true, "default": "1"}, "decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "allow_outside": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Describe a numeric parameter."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Text_Input", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}, "quote_values": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "suggestions": {"lazy": false, "type": "Vector Text", "checked": true, "default": "[]"}},"aliases": [],"description": "Describes a text widget."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Folder_Browse", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}},"aliases": [],"description": "Describes a folder chooser."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "File_Browse", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"existing_only": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}, "action": {"lazy": false, "type": "File_Action", "checked": true, "default": "File_Action.Open"}, "file_types": {"lazy": false, "type": "Vector Pair", "checked": true, "default": "[Pair.new \"All Files\" \"*.*\"]"}},"aliases": [],"description": "Describes a file chooser."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Override the to_js_object and don't include Nothing."},
{"module": "Standard.Base.Metadata", "type": "", "name": "make_single_choice", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"values": {"lazy": false, "type": "Vector", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Base.Nothing", "type": "Nothing", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {},"aliases": [],"description": "The type that has only a singleton value. Nothing in Enso is used as an\nuniversal value to indicate the lack of presence of a value.\n\nIt is often used alongside a value of type a to provide a Maybe or\nOption abstraction."},
{"module": "Standard.Base.Nothing", "type": "Nothing", "name": "is_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the type is an instance of `Nothing`.","examples": "> Example\n  Checking if the value 1 is nothing.\n\n      1.is_nothing"},
{"module": "Standard.Base.Nothing", "type": "Nothing", "name": "if_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "If this is Nothing then returns `function`.","examples": "> Example\n  If the value \"Hello\" is nothing return \"\".\n\n      \"Hello\".if_nothing \"\""},
{"module": "Standard.Base.Nothing", "type": "Nothing", "name": "if_not_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "If `self` is Nothing then returns Nothing, otherwise returns the result\nof running the provided `action`.","examples": "> Example\n  Transform a value only if it is not nothing.\n\n      my_result.if_not_nothing <| my_result + 1"},
{"module": "Standard.Base.Nothing", "type": "Nothing", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Get a value for the key of the object.\nAs `Nothing` has no keys, returns `if_missing`.","arguments": "- key: The key to get.\n- if_missing: The value to return if the key is not found."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Panic", "arguments": {},"aliases": [],"description": "A panic is an error condition that is based _outside_ of the normal\nprogram control flow.\n\nPanics \"bubble up\" through the program until they reach either an\ninvocation of Panic.recover Any or the program's main method. An unhandled\npanic in main will terminate the program.","remarks": "? Dataflow Errors or Panics\n  Panics are designed to be used for unrecoverable situations that need\n  to be handled through non-linear control flow mechanisms."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "throw", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"payload": {"lazy": false}},"aliases": [],"description": "Throws a new panic with the provided payload.","arguments": "- payload: The contents of the panic to be thrown. If the payload is a\n  `Caught_Panic` or a raw Java exception, instead of throwing a new panic\n  with it as a payload, the original exception is rethrown, preserving\n  its stacktrace.","examples": "> Example\n  Throwing a panic containing the text \"Oh no!\".\n\n      Panic.throw \"Oh no!\"\n\n\n> Example\n  Use together with `Panic.catch` to catch only specific types of errors\n  and rethrow any others, without affecting their stacktraces.\n\n      Panic.catch Any (Panic.throw \"foo\") caught_panic-> case caught_panic.payload of\n          Illegal_Argument.Error message _ -> \"Illegal arguments were provided: \"+message\n          other_panic -> Panic.throw other_panic"},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "primitive_get_attached_stack_trace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"throwable": {"lazy": false}},"aliases": [],"description": "Returns a raw representation of the stack trace attached to the provided\nthrowable. It can be a dataflow error, a panic or a native Java exception.\nYou probably want `Panic.get_attached_stack_trace` instead."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "get_attached_stack_trace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Returns the attached stack trace of the given throwable. Can be used to get\nan Enso friendly stack trace from native Java exceptions.\n\nThe ordering of the resulting vector is such that the top stack frame is the\nfirst element."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "rethrow", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Takes any value, and if it is a dataflow error, throws it as a Panic,\notherwise, returns the original value unchanged.","arguments": "- value: The value to rethrow any errors on as a panic.","examples": "> Example\n  Rethrowing a dataflow error as a panic.\n\n      import Standard.Examples\n\n      example_rethrow = Panic.rethrow Examples.throw_error"},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "catch", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"panic_type": {"lazy": false}, "action": {"lazy": true}, "handler": {"lazy": false}},"aliases": [],"icon": "panic","description": "Executes the provided action and if a panic matching the provided type was\nthrown, calls the provided callback.\n\nIf action executes successfully, the result of `Panic.catch` is the result of\nthat action. Otherwise, if a matching panic is thrown from within the action,\nthe result is obtained by calling the provided handler callback. Any\nnon-matching panics are forwarded without changes.","arguments": "- panic_type: The expected panic type. It can either be an Enso type or a\n  Java class.\n- action: The code to execute that potentially panics.\n- handler: The callback to handle the panics. The callback will be provided\n  with a `Caught_Panic` instance encapsulating the `payload` of the caught\n  panic and its stacktrace.","examples": "> Example\n  Handling a specific type of panic.\n\n      Panic.catch Illegal_Argument (Panic.throw (Illegal_Argument.Error \"Oh no!\" Nothing)) error->\n          \"Caught an `Illegal_Argument`: \"+error.payload.message\n\n\n> Example\n  Handling any panic.\n\n      Panic.catch Any (Panic.throw (Illegal_Argument.Error \"Oh no!\" Nothing)) error->\n          \"Caught some panic!\"\n\n\n> Example\n  Convert a string to an integer, catching the Java `NumberFormatException`\n  and converting it to a more Enso-friendly dataflow error.\n\n      polyglot java import java.lang.Long\n      polyglot java import java.lang.NumberFormatException\n      parse str =\n          Panic.catch NumberFormatException (Long.parseLong str) caught_panic->\n              Error.throw (Illegal_Argument.Error \"The provided string is not a valid number: \"+caught_panic.payload.getMessage)"},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "with_finalizer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"finalizer": {"lazy": true}, "action": {"lazy": true}},"aliases": [],"description": "Runs the provided `action` ensuring that the `finalize` block is called\nregardless of if the action succeeds or fails.\n\nThis emulates the `finally` clause in Java.\n\nIf an exception occurs in the `finalizer`, it is propagated. If `action`\nthrows an exception and the `finalizer` also throws an exception, the\nexception thrown by `finalizer` takes precedence.","examples": "> Example\n  Print the `Cleaning...` message regardless of if the action succeeds.\n      do_cleanup =\n          IO.println \"Cleaning...\"\n      Panic.with_finalizer do_cleanup <|\n          Panic.throw (Illegal_State.Error \"Foo\")"},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "recover", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"expected_types": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"icon": "panic","description": "Executes the provided action and converts a possible panic matching any of\nthe provided types into a dataflow Error.\n\nIf action executes successfully, the result of `Panic.recover` is the result\nof that action. Otherwise, if it panicked with a type matching one of the\nexpected error types, that panic is returned as a dataflow error. Unexpected\npanics are passed through as-is. it is the panic that was thrown after\nconversion to a dataflow error.","arguments": "- expected_types: The types of expected panics which should be recovered.\n  This can either be a Vector of types or a single type.\n- action: The code to execute that potentially panics.","examples": "> Example\n  Converting an expected panic to a dataflow error.\n\n      Panic.recover Illegal_Argument (Panic.throw (Illegal_Argument.Error \"Oh!\" Nothing))\n\n\n> Example\n  Converting one of many expected panic types to a dataflow error.\n\n      Panic.recover [Illegal_Argument, Illegal_State] (Panic.throw (Illegal_Argument.Error \"Oh!\" Nothing))"},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "rethrow_wrapped_if_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "If a dataflow error had occurred, wrap it in a `Wrapped_Dataflow_Error` and promote to a Panic.","arguments": "- value: value to return if not an error, or rethrow as a Panic.","examples": "> Example\n  Rethrow an error as a panic from the middle of a block, and handle it\n  with an explicilt handler.\n\n      handler e =\n          IO.println 'Caught: '+e.to_text\n\n      Panic.handle_wrapped_dataflow_error error_type=My_Error handler=handler <|\n          a = 10\n          b = a + a\n          IO.println a\n          IO.println b\n          Panic.rethrow_wrapped_if_error  (Error.throw (My_Error.Error 1))\n          IO.println \"Does not reach here\"\n\n      # Prints:\n      # 10\n      # 20\n      # Caught: (My_Error.Error 1)"},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "handle_wrapped_dataflow_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}, "error_type": {"lazy": false, "default": "Any"}, "handler": {"lazy": false, "type": "(Any -> Any) | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Catch any `Wrapped_Dataflow_Error` Panic and rethrow it as a dataflow error, or pass it to a user-specified handler.","arguments": "- action: The code to execute that potentially raised a Wrapped_Dataflow_Error.\n- error_type: The type of error to wrap and rethrow as a panic.\n- handler: An optional handler to receive the wrapped dataflow error.","examples": "> Example\n  Rethrow an error as a panic from the middle of a block, and handle it\n  with an explicilt handler.\n\n      handler e =\n          IO.println 'Caught: '+e.to_text\n\n      Panic.handle_wrapped_dataflow_error error_type=My_Error handler=handler <|\n          a = 10\n          b = a + a\n          IO.println a\n          IO.println b\n          Panic.rethrow_wrapped_if_error  (Error.throw (My_Error.Error 1))\n          IO.println \"Does not reach here\"\n\n      # Prints:\n      # 10\n      # 20\n      # Caught: (My_Error.Error 1)"},
{"module": "Standard.Base.Panic", "type": "Caught_Panic", "name": "Panic", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Caught_Panic", "arguments": {"payload": {"lazy": false}, "internal_original_exception": {"lazy": false, "comment": "- internal_original_exception (private): the original Java exception that is   the source of this panic. Only for internal use."}},"aliases": [],"description": "A wrapper for a caught panic.","arguments": "- payload: the payload carried by the error.\n- internal_original_exception (private): the original Java exception that is\n  the source of this panic. Only for internal use."},
{"module": "Standard.Base.Panic", "type": "Caught_Panic", "name": "convert_to_dataflow_error", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "panic","description": "Converts this caught panic into a dataflow error containing the same\npayload and stack trace."},
{"module": "Standard.Base.Panic", "type": "Caught_Panic", "name": "stack_trace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the stack trace of the caught panic."},
{"module": "Standard.Base.Panic", "type": "Wrapped_Dataflow_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Wrapped_Dataflow_Error", "arguments": {"payload": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Panic", "type": "Wrapped_Dataflow_Error", "name": "unwrap", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Throws the original error."},
{"module": "Standard.Base.Panic", "type": "Wrapped_Dataflow_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Polyglot", "arguments": {},"aliases": [],"description": "Utilities for working with Polyglot objects."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "get_array_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"array": {"lazy": false}},"aliases": [],"description": "Reads the number of elements in a given polyglot array object.","arguments": "- array: a polyglot array object, originating in any supported language."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "read_array_element", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"array": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "Reads the element in a given polyglot array object.","arguments": "- array: The array on which to perform the operation.\n- index: The index to get the element from."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "execute", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"callable": {"lazy": false}, "arguments": {"lazy": false}},"aliases": [],"description": "Executes a polyglot function object (e.g. a lambda).","arguments": "- callable: The polyglot function object to execute.\n- arguments: A vector of arguments to callable."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "get_member", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"object": {"lazy": false}, "member_name": {"lazy": false}},"aliases": [],"description": "Performs a by-name lookup for a member in a polyglot object.","arguments": "- object: The polyglot object on which to perform the member lookup.\n- member_name: The textual name of the member to lookup.","examples": "> Example\n  Look up the field a on an object o.\n      Polyglot.get_member o \"a\""},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "get_members", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"object": {"lazy": false}},"aliases": [],"description": "Returns a polyglot array of all of the members of the provided object.","arguments": "- object: The object from which to get a list of member names.","examples": "> Example\n  Get a list of the fields for an object o.\n      Polyglot.get_members o"},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"constructor": {"lazy": false}, "arguments": {"lazy": false}},"aliases": [],"description": "Instantiates a polyglot object using the provided constructor.","arguments": "- constructor: The constructor with which to instantiate the object.\n- arguments: A vector of the arguments to pass to the polyglot\n constructor.","examples": "> Example\n Instantiate a new Java Integer with the value 1.\n     Polyglot.new Integer [1]"},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "invoke", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"target": {"lazy": false}, "name": {"lazy": false}, "arguments": {"lazy": false}},"aliases": [],"description": "Invokes a method on a polyglot object by name.","arguments": "- target: The polyglot object on which to call the method.\n- name: The name of the method.\n- arguments: The arguments to pass to the method given by name."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "has_source_location", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks if `value` defines a source location.\n\nSource locations are typically exposed by functions, classes, sometimes\nalso other objects to specify their allocation sites."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "get_source_location", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Gets the source location of `value`.\n\nSource locations are typically exposed by functions, classes, sometimes\nalso other objects to specify their allocation sites.\nThis method will throw a polyglot exception if\n`Polyglot.has_source_location value` returns `False`."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "is_language_installed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"language_name": {"lazy": false}},"aliases": [],"description": "Checks if a polyglot language is installed in the runtime environment.","arguments": "- language_name: The name of the language to test."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "get_executable_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Returns the executable name of a polyglot object."},
{"module": "Standard.Base.Polyglot", "type": "Java", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Java", "arguments": {},"aliases": [],"description": "Utilities for working with Java polyglot objects."},
{"module": "Standard.Base.Polyglot", "type": "Java", "name": "add_to_class_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"path": {"lazy": false}},"aliases": [],"description": "Adds the provided entry to the host class path.\n\n\n\nUse of the actual polyglot imports system should be preferred to use of\nthis method.","arguments": "- path: The java classpath entry to add.","examples": "> Example\n  Adding Random to the classpath.\n\n     Java.add_to_class_path \"java.util.Random\""},
{"module": "Standard.Base.Polyglot", "type": "Java", "name": "lookup_class", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Looks up a java symbol on the classpath by name.\n\n\n\nUse of the actual polyglot imports system should be preferred to use of\nthis method.","arguments": "- name: The name of the java symbol to look up.","examples": "> Example\n  Look up java's Random class.\n\n      Java.lookup_class \"java.util.Random\""},
{"module": "Standard.Base.Polyglot", "type": "Java", "name": "is_instance", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}, "class": {"lazy": false}},"aliases": [],"description": "Checks whether an object is an instance of a given class.","arguments": "- object: The object to check for class membership.\n- class: The java class to check for membership in."},
{"module": "Standard.Base.Random", "type": "Random", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Random", "arguments": {},"aliases": [],"description": "Type for creating random values."},
{"module": "Standard.Base.Random", "type": "Random", "name": "new_generator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"seed": {"lazy": false, "type": "Integer | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Random","description": "Create a new `Random_Generator` with the specified seed.","arguments": "- seed: The seed used to initialze the `Random_Generator`.","examples": "> Example\n  Create a new `Random_Generator` and use it.\n\n      import Standard.Base.Random.Random\n\n      rng = Random.oew_generator 42\n      i = rng.integer 0 10"},
{"module": "Standard.Base.Random", "type": "Random", "name": "set_seed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"seed": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Random","description": "Set the seed of the default `Random_Generator` instance.","arguments": "- seed: The seed used to initialze the default `Random_Generator`.","examples": "> Example\n  Set the seed of the default `Random_Generator` to 42.\n\n      import Standard.Base.Random.Random\n\n      Random.set_seed 42"},
{"module": "Standard.Base.Random", "type": "Random", "name": "integer", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Integer", "checked": true}, "max": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Random","icon": "random","description": "Return a random `Integer` between `min` (inclusive) and `max`\n(inclusive).","arguments": "- min: The minimum value of the range to pick from (inclusive).\n- max: The maximum value of the range to pick from (inclusive).","examples": "> Example\n  Generate an integer between 1 and 10.\n\n       import Standard.Base.Random.Random\n\n       i = Random.integer 1 10"},
{"module": "Standard.Base.Random", "type": "Random", "name": "float", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Float", "checked": true, "default": "0.0"}, "max": {"lazy": false, "type": "Float", "checked": true, "default": "1.0"}},"aliases": [],"group": "Random","icon": "random","description": "Return a random `Float` in the specified range.","arguments": "- min: The minimum value of the range to pick from (inclusive).\n- max: The maximum value of the range to pick from (exclusive).","examples": "> Example\n  Generate a float between 2.3 and 3.4.\n\n       import Standard.Base.Random.Random\n\n       i = Random.float 2.3 3.4"},
{"module": "Standard.Base.Random", "type": "Random", "name": "boolean", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Random","icon": "random","description": "Return a random `Boolean` using the default instance of\n`Random_Generator`.","examples": "> Example\n  Generate a random boolean.\n\n      import Standard.Base.Random.Random\n\n      b = Random.boolean"},
{"module": "Standard.Base.Random", "type": "Random", "name": "gaussian", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"standard_deviation": {"lazy": false, "type": "Float", "checked": true, "default": "1.0"}, "mean": {"lazy": false, "type": "Float", "checked": true, "default": "0.0"}},"aliases": [],"group": "Random","icon": "random","description": "Return a random Gaussian-distributed `Float` with the specified mean and\nstandard deviation.","arguments": "- standard_deviation: The standard deviation of the sampled distribution.\n- mean: The mean of the sampled distribution.","examples": "> Example\n  Generate an gaussian float.\n\n       import Standard.Base.Random.Random\n\n       f = Random.gaussian"},
{"module": "Standard.Base.Random", "type": "Random", "name": "indices", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"group": "Random","icon": "random","description": "Returns `count` indices sampled from the range 0 (inclusive) to n\n(exclusive) without replacement.","arguments": "- n: The end of the range to sample from (exclusive).\n- count: The number of samples to take.","examples": "> Example\n  Generate 10 random indices between 0 and 100.\n\n       import Standard.Base.Random.Random\n\n       indices = Random.indices 100 10"},
{"module": "Standard.Base.Random", "type": "Random", "name": "date", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Date", "checked": true}, "max": {"lazy": false, "type": "Date", "checked": true}},"aliases": [],"group": "Random","icon": "random","description": "Return a `Date` within the specified `Date_Range`.","arguments": "- min: The lower bound of the range to pick from (inclusive).\n- max: The upper bound of the range to pick from (inclusive).","examples": "> Example\n  Generate a random date.\n\n      import Standard.Base.Random.Random\n\n      d = Random.date (Date.new 2023 03 01) (Date.new 2023 10 15)"},
{"module": "Standard.Base.Random", "type": "Random", "name": "time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Time_Of_Day", "checked": true, "default": "Time_Of_Day.new 0 0 0"}, "max": {"lazy": false, "type": "Time_Of_Day", "checked": true, "default": "Time_Of_Day.new 23 59 59"}},"aliases": [],"group": "Random","icon": "random","description": "Return a `Time_Of_Day` between `start_time` and `end_time` (inclusive).\n\n\n\nThe generated time is at a granularity of 1 second. Random values are\ngenerated for hours, minutes and seconds. The `nanoseconds` field is\nalways 0.","arguments": "- min: The lower bound of the range to pick from (inclusive).\n- max: The upper bound of the range to pick from (inclusive).","examples": "> Example\n  Generate a random time.\n\n      import Standard.Base.Random.Random\n\n      start = Time_Of_Day.new 8 12 15\n      end = Time_Of_Day.new 9 40 2\n      t = Random.time start end"},
{"module": "Standard.Base.Random", "type": "Random", "name": "uuid", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Random","icon": "random","description": "Return a new UUID.","examples": "> Example\n  Generate a uuid.\n\n      import Standard.Base.Random.Random\n\n      uuid = Random.uuid","remarks": "! Random Seed\n  `uuid` does not use the underlying `java.util.Random` instance, and is\n  therefore not affected by `set_seed`."},
{"module": "Standard.Base.Random", "type": "Random", "name": "items", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false, "type": "Vector Any | Array Any", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "with_replacement": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Random","icon": "random","description": "Returns a new `Vector` containing a random sample of the input vector,\nwith or without replacement.","arguments": "- vector: The `Vector` to take items from.\n- count: The number of items to return.\n- with_replacement: If false, each value in the `Vector` can only be\n  selected once during a single call; the returned values will contain no\n  duplicates. If true, values from the `Vector` can be returned multiple\n  times and duplicates are possible.","examples": "> Example\n  Sample a vector.\n\n      import Standard.Base.Random.Random\n\n      items = Random.items [1, 2, 3, 4]","remarks": "? Selection without replacement\n\n  If `with_replacement` is false, and `count` is equal to the size of the\n  collection, a random permutation of the collection is returned.\n\n  If `with_replacement` is false, and `count` is greater than the size of\n  the collection, an `Illegal_Argument` error is thrown. (If `count` is\n  greater than the size of the collection, `items` will run out of values\n  to choose from, and will not be able to return enough values.)"},
{"module": "Standard.Base.Random", "type": "Random", "name": "permute", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"group": "Random","icon": "random","description": "Returns a random permutation of the input `Vector`.","arguments": "- vector: The `Vector` to permute.","examples": "> Example\n  Permute a vector.\n\n      import Standard.Base.Random.Random\n\n      permuted = Random.permute [1, 2, 3, 4]"},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Random_Generator", "arguments": {"random_instance_holder": {"lazy": false, "type": "RandomInstanceHolder", "checked": true}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"seed": {"lazy": false, "type": "Integer|Nothing", "checked": true}},"aliases": [],"description": "Create a new rng with the given seed."},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "global_random_generator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "set_seed", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"seed": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "java_random", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "integer", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Integer", "checked": true}, "max": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "float", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Float", "checked": true, "default": "0.0"}, "max": {"lazy": false, "type": "Float", "checked": true, "default": "1.0"}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "boolean", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "gaussian", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"standard_deviation": {"lazy": false, "type": "Float", "checked": true, "default": "1.0"}, "mean": {"lazy": false, "type": "Float", "checked": true, "default": "0.0"}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "indices", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "date", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start_date": {"lazy": false, "type": "Date", "checked": true}, "end_date": {"lazy": false, "type": "Date", "checked": true}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "time", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start_time": {"lazy": false, "type": "Time_Of_Day", "checked": true, "default": "Time_Of_Day.new 0 0 0"}, "end_time": {"lazy": false, "type": "Time_Of_Day", "checked": true, "default": "Time_Of_Day.new 23 59 59"}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "uuid", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "items", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false, "type": "Vector Any | Array Any", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "with_replacement": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "permute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Base.Random", "type": "", "name": "get_default_seed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a default seed to use for random number generation.\n\nThe returned seed will likely differ between each call to this method."},
{"module": "Standard.Base.Runtime", "type": "Stack_Trace_Element", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Stack_Trace_Element", "arguments": {"name": {"lazy": false}, "source_location": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Runtime", "type": "Stack_Trace_Element", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "Input", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Context", "arguments": {},"aliases": []},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "Output", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Context", "arguments": {},"aliases": []},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "Dataflow_Stack_Trace", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Context", "arguments": {},"aliases": []},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the name of the context."},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "if_enabled", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}, "environment": {"lazy": false, "type": "Text", "checked": true, "default": "Runtime.current_execution_environment"}, "disabled_message": {"lazy": false, "type": "Text", "checked": true, "default": "\"The \"+self.name+\" context is disabled.\""}, "panic": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Checks whether the context is enabled. If it is, evaluates the provided\nfunction and returns the result. If not, panics.","arguments": "- action: Action to be performed with the context enabled.\n- environment: Name of the execution environment.\n- disabled_message: Message to be used in the error if the context is\n  disabled.\n- panic: If set to `True`, the error is raised as a Panic.\n  Otherwise, it is a dataflow error.\n  A dataflow error may be lost if the result of the action is not used,\n  so raising a `Panic` is safer. However, when we know that the result is\n  not discarded, the dataflow error is preferred."},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "is_enabled", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"environment": {"lazy": false, "default": "Runtime.current_execution_environment"}},"aliases": [],"description": "Checks whether the permission is enabled in the given environment.","arguments": "- environment: Name of the execution environment.\n- context: The context to enable."},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "with_enabled", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Run an action with the Context enabled."},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "with_disabled", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Run an action with the Context disabled."},
{"module": "Standard.Base.Runtime", "type": "", "name": "get_stack_trace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the execution stack trace of its call site. The ordering of the\nresulting vector is such that the top stack frame is the first element."},
{"module": "Standard.Base.Runtime", "type": "", "name": "gc", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Suggests that the runtime perform garbage collection.\n\nIt is not _guaranteed_ to perform garbage collection, but in practice\nwill _usually_ begin a garbage collection cycle.","examples": "> Example\n  Ask for the runtime to collect garbage.\n\n      Runtime.gc"},
{"module": "Standard.Base.Runtime", "type": "", "name": "assert", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true, "type": "Boolean", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Asserts that the given action succeeds, otherwise throws a panic.\n\nAssertions are disable by default, meaning that call to this method is\na no-op. To enable assertions, either set the environment variable\n`ENSO_ENABLE_ASSERTIONS=true` or enable JVM assertions by passing `-ea`\ncmd line option to java."},
{"module": "Standard.Base.Runtime", "type": "", "name": "assertions_enabled", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns True if assertions are enabled."},
{"module": "Standard.Base.Runtime", "type": "", "name": "no_inline", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Executes the provided action without allowing it to inline.\n\n\n\nThis is particularly useful when writing benchmarks and\nperformance-critical code where you need to prevent inlining from\noccurring.","arguments": "- action: The computation to be executed.","examples": "> Example\n  Print something to the console without it being inlined.\n\n      Runtime.no_inline <| IO.println \"Hi!\""},
{"module": "Standard.Base.Runtime", "type": "", "name": "no_inline_with_arg", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}, "arg": {"lazy": false}},"aliases": [],"description": "Applies the following function to the given argument, without allowing\nthem to inline.\n\n\n\nThis is particularly useful to avoid constant folding in benchmarks.","arguments": "- function: The one-argument function to call.\n- arg: The single argument for the function.","examples": "> Example\n  Print something to the console without it being inlined.\n\n      Runtime.no_inline_with_arg IO.println \"Hi!\""},
{"module": "Standard.Base.Runtime", "type": "", "name": "value_for_uuid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Any", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Value associated with a UUID if any"},
{"module": "Standard.Base.Runtime", "type": "", "name": "wrap_primitive_stack_trace_element", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"el": {"lazy": false}},"aliases": [],"description": "Converts a primitive stack trace element into the regular one."},
{"module": "Standard.Base.Runtime", "type": "", "name": "current_execution_environment", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the name of the current execution environment."},
{"module": "Standard.Base.Runtime", "type": "", "name": "with_enabled_context", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"context": {"lazy": false}, "environment": {"lazy": false, "default": "Runtime.current_execution_environment"}, "action": {"lazy": true}},"aliases": [],"description": "Enables a specific context in the provided runtime environment for the duration of the execution of the action.","arguments": "- environment: Name of the execution environment.\n- context: The context to enable.\n- action: Action to be performed with the context enabled."},
{"module": "Standard.Base.Runtime", "type": "", "name": "with_disabled_context", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"context": {"lazy": false}, "environment": {"lazy": false, "default": "Runtime.current_execution_environment"}, "action": {"lazy": true}},"aliases": [],"description": "Disables a specific context in the provided runtime environment for the duration of the execution of the action.","arguments": "- environment: Name of the execution environment.\n- context: The context to disable.\n- action: Action to be performed with the context disabled."},
{"module": "Standard.Base.System", "type": "System_Process_Result", "name": "Result", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "System_Process_Result", "arguments": {"exit_code": {"lazy": false}, "stdout": {"lazy": false}, "stderr": {"lazy": false}},"aliases": [],"description": "Create a System_Process_Result.","arguments": "- exit_code: The exit code of the child process.\n- stdout: Any values printed to standard out by the child process.\n- stderr: Any values printed to standard error by the child process."},
{"module": "Standard.Base.System", "type": "", "name": "create_process", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"command": {"lazy": false}, "arguments": {"lazy": false}, "input": {"lazy": false}, "redirect_in": {"lazy": false}, "redirect_out": {"lazy": false}, "redirect_err": {"lazy": false}},"aliases": [],"description": "Create a system process, returning the exit code, and the outputs to both\nstandard out and standard error.","arguments": "- command: The name of the system process.\n- arguments: An array of arguments to the system process.\n- input: The input to pass to the process via standard input.\n- redirect_in: Specifies if the standard input of the program should be\n  redirected to the started process.\n- redirect_out: Specifies if the standard output of the started process\n  should be redirected to the program's standard output.\n- redirect_err: Specifies if the standard error output of the started\n  process should be redirected to the program's standard error output."},
{"module": "Standard.Base.System", "type": "", "name": "exit", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"code": {"lazy": false}},"aliases": [],"description": "Exits the Enso program, returning the provided code to the parent\nprocess.","arguments": "- code: The numerical exit code for the Enso program.","examples": "> Example\n  Exit the Enso program with a failure.\n\n      System.exit 42"},
{"module": "Standard.Base.System", "type": "", "name": "nano_time", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the nanosecond resolution system time at the moment of the call.","examples": "> Example\n  Getting the current value of the nanosecond timer.\n\n      System.nano_time"},
{"module": "Standard.Base.System", "type": "", "name": "os", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get the name of the current platform upon which the program is running."},
{"module": "Standard.Base.System", "type": "", "name": "default_line_separator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the default line separator for the platform that the program is\ncurrently running on."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Warning", "arguments": {},"aliases": [],"description": "A representation of a dataflow warning attached to a value."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "attach", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"warning": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "Attaches a new warning to the value."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "attach_multiple", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"warnings": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "Attaches a new warning to the value."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "has_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"description": "Are any warnings attached to the value?"},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "remove_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"description": "Remove the warnings (either all or of a specified type) attached to the value.","arguments": "- warning_type: The type to remove if attached to the value. Defaults to all warnings."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "throw_on_warning", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"group": "Errors","icon": "error","description": "Throws the first matching warning (either all or of a specified type) as a data flow error.","arguments": "- warning_type: The type to throw if attached to the value. Defaults to all warnings."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "get_all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "wrap_errors": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Gets all the warnings attached to the given value. Warnings are returned in the\nreverse-chronological order with respect to their attachment time.","arguments": "- value: The value to get the attached warnings of.\n- wrap_errors: If true, warnings attached to elements in array-likes are\n  wrapped in Map_Error."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "limit_reached", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Returns `True` if the maximal number of reported warnings for a value has been reached, `False` otherwise."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "set", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "warnings": {"lazy": false, "type": "Vector Warning", "checked": true}},"aliases": [],"description": "Sets a new list of warnings for the given value. Any warnings already present\nin `value` will be lost.","arguments": "- value: the value to which warnings should be set to.\n- warnings: vector of warnings to set to the value."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "clear", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Returns the provided value with any warnings removed from it.","arguments": "- value: the value from which warnings should be removed."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "with_suspended", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"arg": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"description": "Executes the provided function with the given argument with its warnings\nsuspended.\n\nInside of the provided function, the argument value will have no warnings\nattached. The result will inherit the warnings from the original argument\nas well as any warnings that were attached to it inside of the function.","arguments": "- arg: the value to pass to the function whose warnings should be\n  suspended.\n- function: the function to execute with the given argument.","examples": "> Example\n  Detect warnings reported during a call to `bar` and raise them as\n  errors, but also ensure that the result inherits any warnings\n  originally attached to `foo`.\n\n      Warning.with_suspended foo foo->\n         result = bar foo\n         ## This will contain warnings reported during execution of\n            `bar`, but it will not be tainted with earlier warnings\n            coming from `foo`.\n         inner_warnings = Warning.get_all result . map .value\n         if inner_warnings.is_empty then result else\n             Error.throw inner_warnings.first"},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "map_attached_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"mapper": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "Maps warnings attached to a value.","arguments": "- mapper: the function to apply to all warnings. If it returns `Some` value,\n  the given warning is replaced with the new value. If it returns `Nothing`\n  the original warning remains unaffected.\n- value: the value whose warnings should be modified.","examples": "> Example\n  Map all `No_Match_Found` warnings to more specific messages. Any other\n  attached warnings are unaffected.\n\n      mapper warning = case warning of\n          Matching.No_Matches_Found criteria -> Maybe.Some (Missing_Input_Columns.Error criteria)\n          _ -> Nothing\n      Warning.map_attached_warnings mapper value"},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "map_warnings_and_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"mapper": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "An utility function which applies the mapping function both to any attached\nwarnings and dataflow errors.","arguments": "- mapper: the function to apply to all warnings or errors. If it returns\n  `Some` value, the given warning or error is replaced with the new value. If\n  it returns `Nothing` the original warning or error remains unaffected.\n- value: the value whose errors or warnings should be modified.","examples": "> Example\n  Map all `No_Match_Found` warnings or errors to more specific messages. Any\n  other attached warnings or errors are unaffected.\n\n      mapper error = case error of\n          Matching.No_Matches_Found criteria -> Maybe.Some (Missing_Input_Columns.Error criteria)\n          _ -> Nothing\n      Warning.map_warnings_and_errors mapper value"},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "detach_selected_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "predicate": {"lazy": false}},"aliases": [],"description": "A helper function which selects warnings matching a predicate and returns a\npair whose first element is the original value with the matched warnings\nremoved and the second element is the list of matched warnings.","arguments": "- value: the value whose warnings are to be filtered.\n- predicate: a predicate specifying which warnings to detach. The predicate\n  receives the warnings' payloads as its argument.","examples": "> Example\n  Detach warnings of a specific type.\n\n      result = Warning.detach_selected_warnings value (_.is_a Illegal_State)\n      result.first  # `value` with the matched warnings removed\n      result.second # the list of matched warnings"},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "merge_matched_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "matcher": {"lazy": false}, "merger": {"lazy": false}},"aliases": [],"description": "A helper function which gathers warnings matching some predicate and passes\nthem into a function which can aggregate them.\n\nThe merger function will not be called at all if no warnings match the\ncriteria.","arguments": "- value: the value whose warnings will be transformed.\n- matcher: a predicate selecting warnings to merge.\n- merger: a function taking a list of found payloads which should return a\n  list of new warnings that should be attached. It returns a list to not\n  limit it to merging warnings into a single warning.","examples": "> Example\n  Merge `No_Matches_Found` warnings into a single such warning.\n\n      Warning.merge_matched_warnings value (_.is_a No_Matches_Found) warnings->\n          all_criteria = warnings.flat_map .criteria\n          [No_Matches_Found all_criteria]"},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the warning value – usually its explanation or other contents."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "origin", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "A stack trace for the original warning creation."},
{"module": "Standard.Base.Warning", "type": "", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"payload": {"lazy": false}, "origin": {"lazy": false}},"aliases": [],"description": "Creates a new instance of the primitive warning value.","arguments": "- payload: value to which a Warning will be associated with.\n- origin: stacktrace representing the location where the warning is being created at."},
{"module": "Standard.Base.Warning", "type": "", "name": "attach_with_stacktrace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "warning": {"lazy": false}, "origin": {"lazy": false}},"aliases": [],"description": "Builtin utility function which attaches a new warning to the value\nand, compared to `Warning.attach` requires an explicit stacktrace associated with it."},
{"module": "Standard.Base.Warning", "type": "", "name": "get_all_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "should_wrap": {"lazy": false}},"aliases": [],"description": "Builtin function that gets all the warnings attached to the given value."},
{"module": "Standard.Base.Warning", "type": "", "name": "set_array", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "warnings": {"lazy": false}},"aliases": [],"description": "Sets a new list of warnings for the given value. Any warnings already present\nin `value` will be lost.","arguments": "- value: the value to which warnings should be set to.\n- warnings: array of warnings to set to the value."},
{"module": "Standard.Base.Warning", "type": "", "name": "map_attached_warnings_helper", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"mapper": {"lazy": false}, "value": {"lazy": false}, "frames_to_drop": {"lazy": false}},"aliases": [],"description": "Maps warnings attached to a value.\n\nAn internal helper function to avoid repeating the implementation."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_text_secret_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Creates a Single_Choice Widget for text or secret value."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_regex_text_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Creates a Regex / Text Widget for search and replace."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_separator_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a Single_Choice Widget for delimiters."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_delimiter_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a Single_Choice Widget for delimiters."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_file_read_delimiter_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a Single_Choice Widget for file read delimiters."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_number_format_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false, "type": "Number", "checked": true, "default": "1234.564321"}},"aliases": [],"description": "Creates a Single_Choice Widget for formatting decimals."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_date_format_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false, "type": "Date", "checked": true, "default": "Date.new 2012 3 14"}},"aliases": [],"description": "Creates a Single_Choice Widget for parsing dates."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_date_time_format_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date_time": {"lazy": false, "type": "Date_Time", "checked": true, "default": "Date_Time.new 2012 3 14 15 9 26 123"}},"aliases": [],"description": "Creates a Single_Choice Widget for parsing date times."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_time_format_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"time": {"lazy": false, "type": "Time_Of_Day", "checked": true, "default": "Time_Of_Day.new 13 30 55 123"}},"aliases": [],"description": "Creates a Single_Choice Widget for parsing times."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_format_chooser", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"include_number": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_date": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_date_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_boolean": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Create a Single_Choice Widget for selecting a format value."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_data_cleanse_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": [],"description": "Creates a Multiple_Choice Widget for selecting data cleanse operations."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_all_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Creates a Single_Choice Widget for Any selectors with all types enabled."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_any_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "add_text": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_regex": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_named_pattern": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_number": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_boolean": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_date": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_date_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Creates a Single_Choice Widget for Any selectors."},
{"module": "Standard.Database.Connection.Data_Link.Postgres_Data_Link", "type": "Postgres_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Data_Link", "arguments": {"details": {"lazy": false, "type": "Postgres", "checked": true}, "source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true}, "link_type": {"lazy": false, "type": "DB_Data_Link_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Data_Link.Postgres_Data_Link", "type": "Postgres_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Data_Link.Postgres_Data_Link", "type": "Postgres_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Client_Certificate", "type": "Client_Certificate", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Client_Certificate", "arguments": {"cert_file": {"lazy": false, "type": "File", "checked": true}, "key_file": {"lazy": false, "type": "File", "checked": true}, "key_password": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}},"aliases": [],"description": "Creates a new Client_Certificate object.","arguments": "- cert_file: path to the client certificate file.\n- key_file: path to the client key file.\n- key_password: password for the client key file."},
{"module": "Standard.Database.Connection.Client_Certificate", "type": "Client_Certificate", "name": "properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates the JDBC properties for the client certificate.","remarks": "? JDBC Properties\n- sslcert: points to the client certificate file.\n- sslkey: points to the client key file.\n- sslpass: password for the client key file."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Connection", "arguments": {"jdbc_connection": {"lazy": false}, "dialect": {"lazy": false}, "entity_naming_properties": {"lazy": false, "type": "Entity_Naming_Properties", "checked": true}, "supports_large_update": {"lazy": false, "type": "Ref Boolean", "checked": true}, "hidden_table_registry": {"lazy": false, "type": "Hidden_Table_Registry.Hidden_Table_Registry", "checked": true}, "data_link_setup": {"lazy": false, "type": "Data_Link_Setup | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "A Database connection using a JDBC driver.","arguments": "- jdbc_connection: the resource managing the underlying JDBC\n  connection.\n- dialect: the dialect associated with the database we are connected to.\n- entity_naming_properties: a helper allowing to manage properties of\n  entity naming rules of the given backend.\n- supports_large_update: whether the connection should try to use\n  `executeLargeUpdate`. Set to `True` by default and if the operation\n  fails with `UnsupportedOperationException`, it is updated to be\n  `False`.\n- hidden_table_registry: a registry of hidden tables that are not\n  shown to the user, but are used internally by the dry-run system.\n- data_link_setup: an optional setup allowing for saving the connection\n  as a data link."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Connection", "arguments": {"jdbc_connection": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "dialect": {"lazy": false}, "entity_naming_properties": {"lazy": false, "type": "Entity_Naming_Properties", "checked": true}, "data_link_setup": {"lazy": false, "type": "Data_Link_Setup | Nothing", "checked": true, "default": "Nothing"}, "try_large_update": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Constructs a new Connection.","arguments": "- jdbc_connection: the resource managing the underlying JDBC\n  connection.\n- dialect: the dialect associated with the database we are connected to.\n- entity_naming_properties: a helper allowing to manage properties of\n  entity naming rules of the given backend.\n- data_link_setup: an optional setup allowing for saving the connection\n  as a data link.\n- try_large_update: whether the connection should try to use\n  `executeLargeUpdate`."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "close", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Closes the connection releasing the underlying database resources\nimmediately instead of waiting for them to be automatically released.\n\nThe connection is not usable afterwards."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "databases", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "database", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the name of the current database (or catalog)."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "set_database", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false}},"aliases": [],"description": "Returns a new Connection with the specified database set as default.","arguments": "- database: The name of the database to connect to."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "schemas", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "schema", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the name of the current schema."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "set_schema", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"description": "Returns a new Connection with the specified schema set as default.","arguments": "- schema: The name of the schema to connect to."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets a list of the table types"},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "default": "Nothing"}, "database": {"lazy": false, "default": "self.database"}, "schema": {"lazy": false, "default": "Nothing"}, "types": {"lazy": false, "default": "self.dialect.default_table_types"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialized Table of all the matching views and tables.","arguments": "- name_like: The table name pattern to search for. Supports SQL wildcards (`%`, `_`). Defaults to `Nothing` which\n  means all tables are selected.\n- database: The database name to search in (default is current database).\n- schema: The schema name to search in (defaults to `Nothing`, meaning all\n  schemas are searched).\n- types: The table types to search for. The list of possible values can\n  be obtained using the `table_types` method. Defaults to a set of most\n  commonly used table types, ignoring internal system tables or indices.\n- all_fields: Return all the fields in the metadata table.","remarks": "? Temporary Tables\n\n  Note that the temporary tables may be created in a different schema\n  than the current one, so take this into account when filtering by schema."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "get_tables_advanced", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "default": "Nothing"}, "database": {"lazy": false, "default": "self.database"}, "schema": {"lazy": false, "default": "Nothing"}, "types": {"lazy": false, "default": "self.dialect.default_table_types"}, "all_fields": {"lazy": false, "default": "False"}, "include_hidden": {"lazy": false, "default": "False"}},"aliases": [],"description": "A helper that allows to access all tables in a database, including hidden\nones.\n\nLater, once nodes can have expandable arguments, we can merge this with\n`tables`, marking the `include_hidden` argument as expandable."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "table_exists", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Checks if the table with the given name exists in the database."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "alias": {"lazy": false, "default": "\"\""}},"aliases": [],"description": "Set up a query returning a Table object, which can be used to work with\ndata within the database or load it into memory.","arguments": "- query: name of the table or sql statement to query.\n  If supplied as `Text` it is treated as a table name.\n- alias: optionally specify a friendly alias for the query.","errors": ""},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": [],"description": "Execute the query and load the results into memory as a Table.","arguments": "- query: name of the table or sql statement to query.\n  If supplied as `Text` it is treated as a table name.\n- limit: the maximum number of rows to read.","remarks": "? Side Effects\n\n  Note that the `read` method is running without restrictions when the\n  output context is disabled, but it can technically cause side effects,\n  if it is provided with a DML query. Usually it is preferred to use\n  `execute_update` for DML queries, or if they are supposed to return\n  results, the `read` should be wrapped in an execution context check."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "create_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description | DB_Table | Table", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "[first_column_name_in_structure structure]"}, "temporary": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Creates a new empty table in the database and returns a query referencing\nthe new table.","arguments": "- table_name: the name of the table to create.\n- structure: the structure of the table, provided as either an existing\n  `Table` (no data will be copied) or a `Vector` of `Column_Description`.\n- primary_key: the names of the columns to use as the primary key. The\n  first column from the table is used by default. If it is set to\n  `Nothing` or an empty vector, no primary key will be created.\n- temporary: if set to `True`, the table will be temporary, meaning that\n  it will be dropped once the `connection` is closed. Defaults to\n  `False`.\n- allow_existing: Defaults to `False`, meaning that if the table with the\n  provided name already exists, an error will be raised. If set to `True`,\n  the existing table will be returned instead. Note that the existing\n  table is not guaranteed to have the same structure as the one provided.\n- on_problems: the behavior to use when encountering non-fatal problems.\n  Defaults to reporting them as warning.","errors": "","remarks": "? Dry Run if Output disabled\n\n  If performing output actions is disabled, only a dry run is performed\n  and no permanent changes occur. The operation will test for errors\n  (like missing columns) and if successful, return a temporary table with\n  a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "read_statement", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}, "column_types": {"lazy": false, "default": "Nothing"}, "last_row_only": {"lazy": false, "default": "False"}},"aliases": [],"description": "Internal read function for a statement with optional types.","arguments": "- statement: SQL_Statement to execute.\n- column_types: A vector of SQL type references that can act as suggested\n  column types. Only `Override` references override the type. Other kinds\n  of references do not influence the result. `Computed_By_Database`\n  references may get updated to cache the types fetched from the Database.\n- last_row_only: If set true, only the last row of the query is fetched.\n  Defaults to false."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "fetch_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}, "statement_setter": {"lazy": false}},"aliases": [],"description": "Given a prepared statement, gets the column names and types for the\nresult set."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "read_single_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}, "column_name": {"lazy": false}},"aliases": [],"description": "Internal helper method to run a query and read a single column from the\nresult as a Vector."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "execute_update", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "Executes a raw update query. If the query was inserting, updating or\ndeleting rows, the number of affected rows is returned; otherwise it\nreturns 0 for other types of queries (like creating or altering tables).","arguments": "- query: either raw SQL code as Text or an instance of SQL_Statement\n  representing the query to execute."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "Executes a raw query. If the query was inserting, updating or\ndeleting rows, the number of affected rows is returned; otherwise it\nreturns 0 for other types of queries (like creating or altering tables).","arguments": "- query: either raw SQL code as Text or an instance of SQL_Statement\n  representing the query to execute."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "drop_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "if_exists": {"lazy": false, "default": "False"}},"aliases": [],"description": "Drops a table.","arguments": "- table_name: the name of the table to drop.\n- if_exists: if set to `True`, the operation will not fail if the table\n  does not exist. Defaults to `False`."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "truncate_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Removes all rows from a table.","arguments": "- table_name: the name of the table to truncate."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "base_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the base `Connection` instance.\n\nUsed, so that all internal helper functions do not need to be replicated\non the 'subclasses'."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "maybe_run_maintenance", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "If no thread (including the current one) is currently running operations\non the connection, maintenance will be performed.\n\nCurrently, this consists of removing dry run tables that are no longer\nused.\n\nThis method should be run by most database operations to ensure that\nunused tables are cleaned at some point.\n\nAll errors are swallowed and not propagated, so it is safe to call this\nmethod wherever. There is no point of calling this method inside of\ncritical sections as then it will not do anything."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "table_naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a helper for checking and generating table names."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "column_naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a helper for checking and generating column names."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "internal_allocate_dry_run_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Creates a Table reference that refers to a table with the given name.\n\nOnce all references to the table with this name are destroyed, the table\nwill be marked for removal and dropped at the next maintenance."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "create_literal_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "DB_Table", "arguments": {"source": {"lazy": false, "type": "Table", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Creates a `DB_Table` that is not backed by an existing table in the\nDatabase, but is created in a query by constructing a `VALUES` expression.\n\nWe limit these tables to at most 256 cells to avoid creating too large\nqueries. If you need a larger table, create a temporary table instead.\n\nNote that the types of columns in the created table will depend on how\nthe Database interprets the provided values and may not reflect the types\nof the source table. If you need more sophisticated type mapping\nmechanism, use `create_table` instead."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "save_as_data_link", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Error"}},"aliases": [],"icon": "data_output","description": "Creates a Data Link that will open the same connection."},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_table_types_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_database_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "include_any": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_schema_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "include_any": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_table_name_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_structure_creator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_table_from_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Table", "arguments": {"connection": {"lazy": false}, "query": {"lazy": false, "type": "Text|SQL_Statement", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "_make_table_for_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "name": {"lazy": false}, "alias": {"lazy": false}, "internal_temporary_keep_alive_reference": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "_check_statement_is_allowed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "stmt": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Connection.Connection_Details", "type": "Connection_Details", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Connection_Details", "arguments": {},"aliases": [],"description": "Specifies the connection details for the database.\n\nThis is an interface that is implemented by particular database types, like\n`Postgres`, `SQLite` etc."},
{"module": "Standard.Database.Connection.Connection_Details", "type": "Connection_Details", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}},"aliases": [],"description": "Build the Connection resource.","arguments": "- options: Overrides for the connection properties."},
{"module": "Standard.Database.Connection.Connection_Options", "type": "Connection_Options", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Connection_Options", "arguments": {"options": {"lazy": false, "type": "Vector", "checked": true, "default": "[]"}},"aliases": [],"description": "Additional customization options for the JDBC connection.\n\nHold a set of key value pairs used to configure the connection."},
{"module": "Standard.Database.Connection.Connection_Options", "type": "Connection_Options", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Widget to design connection options."},
{"module": "Standard.Database.Connection.Connection_Options", "type": "Connection_Options", "name": "merge", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"base_options": {"lazy": false}},"aliases": [],"description": "Merge the base set of options with the overrides in this object."},
{"module": "Standard.Database.Connection.Connection_Options", "type": "Connection_Options", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Credentials", "type": "Credentials", "name": "Username_And_Password", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Credentials", "arguments": {"username": {"lazy": false, "type": "Text|Enso_Secret", "checked": true, "default": "Missing_Argument.throw \"username\""}, "password": {"lazy": false, "type": "Text|Enso_Secret", "checked": true, "default": "Missing_Argument.throw \"password\""}},"aliases": [],"description": "Simple username and password type."},
{"module": "Standard.Database.Connection.Credentials", "type": "Credentials", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"include_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Database.Connection.Credentials", "type": "Credentials", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Override `to_text` to mask the password field."},
{"module": "Standard.Database.Connection.Credentials", "type": "Credentials", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Database", "type": "", "name": "connect", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"details": {"lazy": false}, "options": {"lazy": false, "type": "Connection_Options", "checked": true, "default": "..Value"}},"aliases": [],"group": "Standard.Base.Database","icon": "data_input","suggested": 5,"description": "Tries to connect to the database.","arguments": "- details: `Connection_Details` specifying the database to connect to.\n- options: Additional custom connection options for the JDBC connection."},
{"module": "Standard.Database.Connection.Database", "type": "", "name": "connection_details_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Database", "type": "", "name": "resolve_constructor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Connection.Postgres", "type": "Postgres", "name": "Server", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Postgres", "arguments": {"host": {"lazy": false, "type": "Text", "checked": true, "default": "default_postgres_host"}, "port": {"lazy": false, "type": "Integer", "checked": true, "default": "default_postgres_port"}, "database": {"lazy": false, "type": "Text", "checked": true, "default": "default_postgres_database"}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "credentials": {"lazy": false, "type": "Credentials|Nothing", "checked": true, "default": "Nothing"}, "use_ssl": {"lazy": false, "type": "SSL_Mode", "checked": true, "default": "SSL_Mode.Prefer"}, "client_cert": {"lazy": false, "type": "Client_Certificate|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Connect to a PostgreSQL database.","arguments": "- host: The hostname of the database server (defaults to localhost).\n- port: The port of the database server (defaults to 5432).\n- database: The database to connect to. By default, it will use the\n  database provided in `PGDATABASE` environment variable, or if that is\n  not defined, it will fall back to a default database name: `postgres`.\n- schema: The schema to connect to. If empty, the default schema will be\n  used.\n- credentials: The credentials to use for the connection (defaults to\n  No Authentication or the PGPass file).\n- use_ssl: Whether to use SSL (defaults to `SSL_Mode.Prefer`).\n- client_cert: The client certificate to use or `Nothing` if not needed."},
{"module": "Standard.Database.Connection.Postgres", "type": "Postgres", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.Database.Connection.Postgres", "type": "Postgres", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}, "allow_data_links": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Build the Connection resource.","arguments": "- options: Overrides for the connection properties.\n- allow_data_links: Whether to allow saving this connection as a data link."},
{"module": "Standard.Database.Connection.Postgres", "type": "Postgres", "name": "jdbc_url", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the jdbc url for the connection."},
{"module": "Standard.Database.Connection.Postgres", "type": "Postgres", "name": "jdbc_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the properties for the connection."},
{"module": "Standard.Database.Connection.Postgres", "type": "", "name": "ssl_mode_to_jdbc_properties", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"use_ssl": {"lazy": false}},"aliases": [],"description": "Given an `SSL_Mode`, create the JDBC properties to secure a Postgres-based\nconnection."},
{"module": "Standard.Database.Connection.Postgres", "type": "", "name": "default_postgres_host", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Postgres", "type": "", "name": "default_postgres_port", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Postgres", "type": "", "name": "default_postgres_database", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Postgres", "type": "", "name": "create_data_link_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"details": {"lazy": false, "type": "Postgres", "checked": true}, "data_link_location": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Connection", "arguments": {"connection": {"lazy": false, "type": "Connection", "checked": true}, "make_new": {"lazy": false, "type": "Text -> Text -> Postgres_Connection", "checked": true}},"aliases": [],"description": "A Postgres database connection.","arguments": "- connection: the underlying connection.\n- make_new: a function that returns a new connection."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "properties": {"lazy": false}, "make_new": {"lazy": false}, "data_link_setup": {"lazy": false}},"aliases": [],"description": "Creates a Postgres connection based on a URL and properties.","arguments": "- url: The URL to connect to.\n- properties: A vector of properties for the connection.\n- make_new: A function that returns a new connection.\n- data_link_setup: The setup for saving the connection as a data link."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "close", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "close","description": "Closes the connection releasing the underlying database resources\nimmediately instead of waiting for them to be automatically released.\n\nThe connection is not usable afterwards."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "databases", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current database (or catalog)."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "set_database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified database set as default.","arguments": "- database: The name of the database to connect to."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "set_schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified schema set as default.","arguments": "- schema: The name of the schema to connect to."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "table_types", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets a list of the table types."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "default": "Nothing"}, "database": {"lazy": false, "default": "self.database"}, "schema": {"lazy": false, "default": "Nothing"}, "types": {"lazy": false, "default": "self.dialect.default_table_types"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialized Table of all the matching views and tables.","arguments": "- name_like: The table name pattern to search for. Supports SQL wildcards (`%`, `_`). Defaults to `Nothing` which\n  means all tables are selected.\n- database: The database name to search in (default is current database).\n- schema: The schema name to search in (defaults to `Nothing`, meaning all\n  schemas are searched).\n- types: The table types to search for. The list of possible values can\n  be obtained using the `table_types` method. Defaults to a set of most\n  commonly used table types, ignoring internal system tables or indices.\n- all_fields: Return all the fields in the metadata table.","remarks": "? Temporary Tables\n\n  Note that the temporary tables may be created in a different schema\n  than the current one, so take this into account when filtering by schema."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "alias": {"lazy": false, "default": "\"\""}},"aliases": ["import", "load", "open", "read"],"group": "Standard.Base.Input","icon": "data_input","description": "Set up a query returning a Table object, which can be used to work with\ndata within the database or load it into memory.","arguments": "- query: name of the table or sql statement to query.\n  If supplied as `Text` it is treated as a table name.\n- alias: optionally specify a friendly alias for the query.","errors": ""},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load", "open", "query"],"group": "Standard.Base.Input","icon": "data_input","description": "Execute the query and load the results into memory as a Table.","arguments": "- query: name of the table or sql statement to query.\n  If supplied as `Text` it is treated as a table name.\n- limit: the maximum number of rows to read.","remarks": "? Side Effects\n\n  Note that the `read` method is running without restrictions when the\n  output context is disabled, but it can technically cause side effects,\n  if it is provided with a DML query. Usually it is preferred to use\n  `execute_update` for DML queries, or if they are supposed to return\n  results, the `read` should be wrapped in an execution context check."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "create_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description | DB_Table | Table", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "[first_column_name_in_structure structure]"}, "temporary": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a new empty table in the database and returns a query referencing\nthe new table.","arguments": "- table_name: the name of the table to create.\n- structure: the structure of the table, provided as either an existing\n  `Table` (no data will be copied) or a `Vector` of `Column_Description`.\n- primary_key: the names of the columns to use as the primary key. The\n  first column from the table is used by default. If it is set to\n  `Nothing` or an empty vector, no primary key will be created.\n- temporary: if set to `True`, the table will be temporary, meaning that\n  it will be dropped once the `connection` is closed. Defaults to\n  `False`.\n- allow_existing: Defaults to `False`, meaning that if the table with the\n  provided name already exists, an error will be raised. If set to `True`,\n  the existing table will be returned instead. Note that the existing\n  table is not guaranteed to have the same structure as the one provided.\n- on_problems: the behavior to use when encountering non-fatal problems.\n  Defaults to reporting them as warning.","errors": "","remarks": "? Dry Run if Output disabled\n\n  If performing output actions is disabled, only a dry run is performed\n  and no permanent changes occur. The operation will test for errors\n  (like missing columns) and if successful, return a temporary table with\n  a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "execute_update", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw update query. If the query was inserting, updating or\ndeleting rows, the number of affected rows is returned; otherwise it\nreturns 0 for other types of queries (like creating or altering tables).","arguments": "- query: either raw SQL code as Text or an instance of SQL_Statement\n  representing the query to execute."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw query. If the query was inserting, updating or\ndeleting rows, the number of affected rows is returned; otherwise it\nreturns 0 for other types of queries (like creating or altering tables).","arguments": "- query: either raw SQL code as Text or an instance of SQL_Statement\n  representing the query to execute."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "dialect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the dialect."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "jdbc_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the underlying JDBC connection."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "drop_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "if_exists": {"lazy": false, "default": "False"}},"aliases": [],"description": "Drops a table.","arguments": "- table_name: the name of the table to drop.\n- if_exists: if set to `True`, the operation will not fail if the table\n  does not exist. Defaults to `False`."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "truncate_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Removes all rows from a table.","arguments": "- table_name: the name of the table to truncate."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "base_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the base `Connection` instance.\n\nUsed, so that all internal helper functions do not need to be replicated\non the 'subclasses'."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "save_as_data_link", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Error"}},"aliases": [],"icon": "data_output","description": "Creates a Data Link that will open the same connection."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "From_File", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQLite", "arguments": {"location": {"lazy": false, "type": "File", "checked": true, "default": "Missing_Argument.throw \"location\""}},"aliases": [],"description": "Connect to a SQLite DB File.","arguments": "- location: Location of the SQLite database to connect to."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "In_Memory", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQLite", "arguments": {},"aliases": [],"description": "Connect to a SQLite In Memory."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}},"aliases": [],"description": "Build the Connection resource.","arguments": "- options: Overrides for the connection properties."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "jdbc_url", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the jdbc url for the connection."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "jdbc_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the properties for the connection."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Connection", "arguments": {"connection": {"lazy": false}},"aliases": [],"description": "A SQLite database connection.","arguments": "- connection: the underlying connection."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "properties": {"lazy": false}},"aliases": [],"description": "Creates a SQLite connection based on a JDBC URL and properties.","arguments": "- url: The URL to connect to.\n- properties: A vector of properties for the connection."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "close", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "close","description": "Closes the connection releasing the underlying database resources\nimmediately instead of waiting for them to be automatically released.\n\nThe connection is not usable afterwards."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "databases", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current database (or catalog)."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "set_database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified database set as default.","arguments": "- database: The name of the database to connect to."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "set_schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified schema set as default.","arguments": "- schema: The name of the schema to connect to."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "table_types", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets a list of the table types"},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "default": "Nothing"}, "database": {"lazy": false, "default": "self.database"}, "schema": {"lazy": false, "default": "Nothing"}, "types": {"lazy": false, "default": "self.dialect.default_table_types"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialized Table of all the matching views and tables.","arguments": "- name_like: The table name pattern to search for. Supports SQL wildcards (`%`, `_`). Defaults to `Nothing` which\n  means all tables are selected.\n- database: The database name to search in (default is current database).\n- schema: The schema name to search in (defaults to `Nothing`, meaning all\n  schemas are searched).\n- types: The table types to search for. The list of possible values can\n  be obtained using the `table_types` method. Defaults to a set of most\n  commonly used table types, ignoring internal system tables or indices.\n- all_fields: Return all the fields in the metadata table.","remarks": "? Temporary Tables\n\n  Note that the temporary tables may be created in a different schema\n  than the current one, so take this into account when filtering by schema."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "alias": {"lazy": false, "default": "\"\""}},"aliases": ["import", "load", "open", "read"],"group": "Standard.Base.Input","icon": "data_input","description": "Set up a query returning a Table object, which can be used to work with\ndata within the database or load it into memory.","arguments": "- query: name of the table or sql statement to query.\n  If supplied as `Text` it is treated as a table name.\n- alias: optionally specify a friendly alias for the query.","errors": ""},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load", "open", "query"],"group": "Standard.Base.Input","icon": "data_input","description": "Execute the query and load the results into memory as a Table.","arguments": "- query: name of the table or sql statement to query.\n  If supplied as `Text` it is treated as a table name.\n- limit: the maximum number of rows to read.","remarks": "? Side Effects\n\n  Note that the `read` method is running without restrictions when the\n  output context is disabled, but it can technically cause side effects,\n  if it is provided with a DML query. Usually it is preferred to use\n  `execute_update` for DML queries, or if they are supposed to return\n  results, the `read` should be wrapped in an execution context check."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "create_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description | DB_Table | Table", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "[first_column_name_in_structure structure]"}, "temporary": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a new empty table in the database and returns a query referencing\nthe new table.","arguments": "- table_name: the name of the table to create.\n- structure: the structure of the table, provided as either an existing\n  `Table` (no data will be copied) or a `Vector` of `Column_Description`.\n- primary_key: the names of the columns to use as the primary key. The\n  first column from the table is used by default. If it is set to\n  `Nothing` or an empty vector, no primary key will be created.\n- temporary: if set to `True`, the table will be temporary, meaning that\n  it will be dropped once the `connection` is closed. Defaults to\n  `False`.\n- allow_existing: Defaults to `False`, meaning that if the table with the\n  provided name already exists, an error will be raised. If set to `True`,\n  the existing table will be returned instead. Note that the existing\n  table is not guaranteed to have the same structure as the one provided.\n- on_problems: the behavior to use when encountering non-fatal problems.\n  Defaults to reporting them as warning.","errors": "","remarks": "? Dry Run if Output disabled\n\n  If performing output actions is disabled, only a dry run is performed\n  and no permanent changes occur. The operation will test for errors\n  (like missing columns) and if successful, return a temporary table with\n  a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "execute_update", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw update query. If the query was inserting, updating or\ndeleting rows, the number of affected rows is returned; otherwise it\nreturns 0 for other types of queries (like creating or altering tables).","arguments": "- query: either raw SQL code as Text or an instance of SQL_Statement\n  representing the query to execute."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw query. If the query was inserting, updating or\ndeleting rows, the number of affected rows is returned; otherwise it\nreturns 0 for other types of queries (like creating or altering tables).","arguments": "- query: either raw SQL code as Text or an instance of SQL_Statement\n  representing the query to execute."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "dialect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the dialect."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "jdbc_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the underlying JDBC connection."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "drop_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "if_exists": {"lazy": false, "default": "False"}},"aliases": [],"description": "Drops a table.","arguments": "- table_name: the name of the table to drop.\n- if_exists: if set to `True`, the operation will not fail if the table\n  does not exist. Defaults to `False`."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "truncate_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Removes all rows from a table.","arguments": "- table_name: the name of the table to truncate."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "base_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the base `Connection` instance.\n\nUsed, so that all internal helper functions do not need to be replicated\non the 'subclasses'."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "For_File", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Format", "arguments": {},"aliases": [],"description": "Read SQLite files (kept for backwards compatibility)"},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "SQLite", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQLite_Format", "arguments": {},"aliases": [],"description": "Read SQLite files"},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "If the File_Format supports writing to the file, return a configured instance."},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "", "name": "magic_header_string", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Based on the File Format definition at: https://www.sqlite.org/fileformat.html"},
{"module": "Standard.Database.Connection.SSL_Mode", "type": "SSL_Mode", "name": "Disable", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SSL_Mode", "arguments": {},"aliases": [],"description": "Do not use SSL for the connection."},
{"module": "Standard.Database.Connection.SSL_Mode", "type": "SSL_Mode", "name": "Prefer", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SSL_Mode", "arguments": {},"aliases": [],"description": "Prefer SSL for the connection, but does not verify the server certificate."},
{"module": "Standard.Database.Connection.SSL_Mode", "type": "SSL_Mode", "name": "Require", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SSL_Mode", "arguments": {},"aliases": [],"description": "Will use SSL but does not verify the server certificate."},
{"module": "Standard.Database.Connection.SSL_Mode", "type": "SSL_Mode", "name": "Verify_CA", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SSL_Mode", "arguments": {"ca_file": {"lazy": false, "type": "Nothing|File", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Will use SSL, validating the certificate but not verifying the hostname.\nIf `ca_file` is `Nothing`, the default CA certificate store will be used."},
{"module": "Standard.Database.Connection.SSL_Mode", "type": "SSL_Mode", "name": "Full_Verification", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SSL_Mode", "arguments": {"ca_file": {"lazy": false, "type": "Nothing|File", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Will use SSL, validating the certificate and checking the hostname matches.\nIf `ca_file` is `Nothing`, the default CA certificate store will be used."},
{"module": "Standard.Database.Extensions.Upload_Database_Table", "type": "DB_Table", "name": "select_into_database_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false, "type": "Text", "checked": true}, "primary_key": {"lazy": false, "default": "[]"}, "temporary": {"lazy": false, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a new database table from this table.","arguments": "- connection: the database connection to use. The table will be created in\n  the database and schema associated with this connection.\n- table_name: the name of the table to create.\n- primary_key: the names of the columns to use as the primary key. The first\n  column from the table is used by default. If it is set to `Nothing` or an\n  empty vector, no primary key will be created.\n- temporary: if set to `True`, the table will be temporary, meaning that it\n  will be dropped once the `connection` is closed. Defaults to `False`.\n- on_problems: the behavior to use when encountering non-fatal problems.\n  Defaults to reporting them as warning.","errors": "","remarks": "? Dry Run if Output disabled\n\n  If performing output actions is disabled, only a dry run is performed and\n  no permanent changes occur. The operation checks for errors like missing\n  columns, and returns a temporary table containing a sample of the input\n  with a `Dry_Run_Operation` warning attached.\n\n  More expensive checks, like clashing keys are checked only on the sample of\n  rows, so errors may still occur when the output action is enabled."},
{"module": "Standard.Database.Extensions.Upload_Database_Table", "type": "DB_Table", "name": "update_rows", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "update_action": {"lazy": false, "type": "Update_Action", "checked": true, "default": "Update_Action.Update_Or_Insert"}, "key_columns": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "default_key_columns self"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Updates the database table with the contents of the provided table.\n\nThis operation will only work if this table is a 'trivial' table reference,\nlike returned by `Connection.query`, so it corresponds directly to a table\nexisting in a Database. If the target table is transformed in any way, this\ncorrespondence is lost and the update operation cannot be performed on such a\ntransformed object.","arguments": "- source_table: the table containing values for the update. This table may be\n  in-memory (in which case it will be uploaded as a temporary table) or any\n  database query with any desired transformations applied, as long as it is\n  coming from the same Connection as the target table.\n- update_action: specifies the update strategy - how to handle existing new\n  and missing rows.\n- key_columns: the names of the columns to use identify correlate rows from\n  the source table with rows in the target table. This key is used to\n  determine if a row from the source table exists in the target or is a new\n  one.\n- error_on_missing_columns: if set to `False` (the default), any columns\n  missing from the source table will be left unchanged or initialized with\n  the default value if inserting. If a missing column has no default value,\n  this will trigger a `SQL_Error`. If set to `True`, any columns missing from\n  the source will cause an error.\n - on_problems: the behavior to use when encountering non-fatal problems.","errors": "","remarks": "? Type Widening\n\n  Smaller types can be widened to a larger type, for example 32-bit integer\n  column can be widened to a 64-bit integer column, but not vice versa\n  (because larger numbers could not fit the smaller type and the type of the\n  column in the target table cannot be changed).\n\n\n? Dry Run if Output disabled\n\n  If performing output actions is disabled, only a dry run is performed and\n  no permanent changes occur. The operation checks for errors like missing\n  columns or mismatched types and if successful, returns the target table\n  unchanged with a `Dry_Run_Operation` warning attached.\n\n  More expensive checks, like clashing keys or unmatched rows are checked\n  only on a sample of rows, so errors may still occur when the output action\n  is enabled."},
{"module": "Standard.Database.Extensions.Upload_Database_Table", "type": "DB_Table", "name": "delete_rows", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key_values_to_delete": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "default_key_columns_required self"}, "allow_duplicate_matches": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Removes rows from a database table.\n\nIt returns the count of the rows that have been deleted.\n\nThis operation will only work if this table is a 'trivial' table reference,\nlike returned by `Connection.query`, so it corresponds directly to a table\nexisting in a Database. If the target table is transformed in any way, this\ncorrespondence is lost and the update operation cannot be performed on such a\ntransformed object.","arguments": "- key_values_to_delete: a table that contains the values of the primary key\n  columns of the rows to delete. The table must have all columns specified as\n  `key_columns`. Any other columns are ignored.\n- key_columns: the names of the columns that are used to correlate rows from\n  `key_values_to_delete` with rows in the target table. Defaults to the\n  primary key of the target table. If no primary key is set, this argument is\n  required.\n- allow_duplicate_matches: specifies if the key values are expected to match\n  more than one row each. Defaults to `False`, meaning that if a key value\n  matches more than one row, an error will be reported and no rows will be\n  deleted. This setting is meant to prevent additional deletion of too many\n  rows.","examples": "> Example\n\n  Remove students that have graduated from the `students` table.\n\n      students.delete_rows graduated_students key_columns=[\"student_id\"]","errors": "","remarks": "? Dry Run if Output disabled\n\n  If performing output actions is disabled, only a dry run is performed and\n  no permanent changes occur. The operation checks for errors like missing\n  columns, and returns the count of rows that would have been deleted by this\n  operation, with a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Database.Extensions.Upload_In_Memory_Table", "type": "Table", "name": "select_into_database_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false, "type": "Text", "checked": true}, "primary_key": {"lazy": false, "default": "[]"}, "temporary": {"lazy": false, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Database","icon": "data_output","description": "Creates a new database table from this in-memory table.","arguments": "- connection: the database connection to use. The table will be created in\n  the database and schema associated with this connection.\n- table_name: the name of the table to create.\n- primary_key: the names of the columns to use as the primary key. The first\n  column from the table is used by default. If it is set to `Nothing` or an\n  empty vector, no primary key will be created.\n- temporary: if set to `True`, the table will be temporary, meaning that it\n  will be dropped once the `connection` is closed. Defaults to `False`.\n- on_problems: the behavior to use when encountering non-fatal problems.\n  Defaults to reporting them as warning.","errors": "","remarks": "? Dry Run if Output disabled\n\n  If performing output actions is disabled, only a dry run is performed and\n  no permanent changes occur. The operation checks for errors like missing\n  columns, and returns a temporary table containing a sample of the input\n  with a `Dry_Run_Operation` warning attached.\n\n  More expensive checks, like clashing keys are checked only on the sample of\n  rows, so errors may still occur when the output action is enabled."},
{"module": "Standard.Database.Extensions.Upload_In_Memory_Table", "type": "Table", "name": "update_rows", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "update_action": {"lazy": false, "type": "Update_Action", "checked": true, "default": "Update_Action.Update_Or_Insert"}, "key_columns": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Database","icon": "data_output","description": "Updates the target table with the contents of this table.","arguments": "- target_table: the target table to update. It must be a database table.\n- update_action: specifies the update strategy - how to handle existing new\n  and missing rows.\n- key_columns: the names of the columns to use identify correlate rows from\n  the source table with rows in the target table. This key is used to\n  determine if a row from the source table exists in the target or is a new\n  one.\n- error_on_missing_columns: if set to `False` (the default), any columns\n  missing from the source table will be left unchanged or initialized with\n  the default value if inserting. If a missing column has no default value,\n  this will trigger a `SQL_Error`. If set to `True`, any columns missing from\n  the source will cause an error.\n - on_problems: the behavior to use when encountering non-fatal problems.","errors": "","remarks": "? Type Widening\n\n  Smaller types can be widened to a larger type, for example 32-bit integer\n  column can be widened to a 64-bit integer column, but not vice versa\n  (because larger numbers could not fit the smaller type and the type of the\n  column in the target table cannot be changed).\n\n\n? Dry Run if Output disabled\n\n  If performing output actions is disabled, only a dry run is performed and\n  no permanent changes occur. The operation checks for errors like missing\n  columns or mismatched types and if successful, returns the target table\n  unchanged with a `Dry_Run_Operation` warning attached.\n\n  More expensive checks, like clashing keys or unmatched rows are checked\n  only on a sample of rows, so errors may still occur when the output action\n  is enabled."},
{"module": "Standard.Database.Extensions.Upload_In_Memory_Table", "type": "Table", "name": "delete_rows", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key_values_to_delete": {"lazy": false, "type": "Table | DB_Table", "checked": true}, "key_columns": {"lazy": false, "default": "[]"}, "allow_duplicate_matches": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Database","icon": "data_output","description": "Removes rows from a database table.\n\nIt returns the count of the rows that have been deleted.\n\nThis operation will only work if this table is a 'trivial' table reference,\nlike returned by `Connection.query`, so it corresponds directly to a table\nexisting in a Database. If the target table is transformed in any way, this\ncorrespondence is lost and the update operation cannot be performed on such a\ntransformed object.","arguments": "- key_values_to_delete: a table that contains the values of the primary key\n  columns of the rows to delete. The table must have all columns specified as\n  `key_columns`. Any other columns are ignored.\n- key_columns: the names of the columns that are used to correlate rows from\n  `key_values_to_delete` with rows in the target table. Defaults to the\n  primary key of the target table. If no primary key is set, this argument is\n  required.\n- allow_duplicate_matches: specifies if the key values are expected to match\n  more than one row each. Defaults to `False`, meaning that if a key value\n  matches more than one row, an error will be reported and no rows will be\n  deleted. This setting is meant to prevent additional deletion of too many\n  rows.","examples": "> Example\n\n  Remove students that have graduated from the `students` table.\n\n      students.delete_rows graduated_students key_columns=[\"student_id\"]","errors": "","remarks": "? Dry Run if Output disabled\n\n  If performing output actions is disabled, only a dry run is performed and\n  no permanent changes occur. The operation checks for errors like missing\n  columns, and returns the count of rows that would have been deleted by this\n  operation, with a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Database.Internal.Common.Connections_Helpers", "type": "", "name": "get_data_viz_pairs", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Common.Database_Distinct_Helper", "type": "", "name": "make_distinct_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text_case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}, "key_column": {"lazy": false}, "value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Database_Join_Helper", "type": "Join_Subquery_Setup", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Join_Subquery_Setup", "arguments": {"subquery": {"lazy": false, "type": "From_Spec", "checked": true}, "new_columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "old_columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "indicator_column": {"lazy": false, "type": "Nothing | Internal_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Database_Join_Helper", "type": "Join_Subquery_Setup", "name": "column_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a mapping from names of columns in the original table to\ncorresponding columns in the created subquery."},
{"module": "Standard.Database.Internal.Common.Database_Join_Helper", "type": "", "name": "make_join_helpers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left_table": {"lazy": false}, "right_table": {"lazy": false}, "left_column_mapping": {"lazy": false}, "right_column_mapping": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Database_Join_Helper", "type": "", "name": "select_columns_for_join", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_naming_helper": {"lazy": false}, "join_kind": {"lazy": false}, "left_new_columns": {"lazy": false}, "right_new_columns": {"lazy": false}, "right_columns_to_drop": {"lazy": false}, "right_prefix": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Takes columns from the left and right subquery, a list of redundant column\nnames and returns a list of new columns that should be present in the join\nresult (depending on the kind of performed join), ensuring that any colliding\ncolumns are properly renamed."},
{"module": "Standard.Database.Internal.Common.Database_Join_Helper", "type": "", "name": "prepare_subqueries", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "left": {"lazy": false}, "right": {"lazy": false}, "needs_left_indicator": {"lazy": false}, "needs_right_indicator": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Encoding_Limited_Naming_Properties", "type": "Encoding_Limited_Naming_Properties", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Encoding_Limited_Naming_Properties", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true}, "limit": {"lazy": false, "type": "Integer", "checked": true}, "is_case_sensitive": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Encoding_Limited_Naming_Properties", "type": "Encoding_Limited_Naming_Properties", "name": "encoded_size", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Encoding_Limited_Naming_Properties", "type": "Encoding_Limited_Naming_Properties", "name": "truncate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "size": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Encoding_Limited_Naming_Properties", "type": "Encoding_Limited_Naming_Properties", "name": "size_limit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Common.Encoding_Limited_Naming_Properties", "type": "Encoding_Limited_Naming_Properties", "name": "raise_name_too_long_error", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity_kind": {"lazy": false}, "name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Group_Number_Helpers", "type": "", "name": "make_group_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"from": {"lazy": false, "type": "Integer", "checked": true}, "step": {"lazy": false, "type": "Integer", "checked": true}, "grouping_expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Group_Number_Helpers", "type": "", "name": "make_group_number_equal_count", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"from": {"lazy": false, "type": "Integer", "checked": true}, "step": {"lazy": false, "type": "Integer", "checked": true}, "group_count": {"lazy": false, "type": "Integer", "checked": true}, "ordering_expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "Lookup_Subquery_Setup", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Lookup_Subquery_Setup", "arguments": {"self_sub": {"lazy": false}, "lookup_sub": {"lazy": false}, "lookup_counter": {"lazy": false}, "new_table_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "Lookup_Subquery_Setup", "name": "get_self_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ix": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "Lookup_Subquery_Setup", "name": "get_lookup_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ix": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "Lookup_Subquery_Setup", "name": "create_merged_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ix": {"lazy": false}, "expected_type": {"lazy": false}, "dialect": {"lazy": false}, "infer_type_in_result": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}},"aliases": [],"description": "Creates an `Internal_Column` representing the `Replace_Column` scenario:\ntaking data from lookup table if it was matched, and from base table\notherwise.\nThis method also ensure that the column has the expected type, unifying\ntypes of the two sources."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "build_lookup_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_table": {"lazy": false}, "lookup_table": {"lazy": false}, "key_columns": {"lazy": false}, "add_new_columns": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implementation of `lookup_and_replace` for Database backend.\nSee `Table.lookup_and_replace` for more details."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "check_initial_invariants", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_table": {"lazy": false}, "lookup_table": {"lazy": false}, "lookup_columns": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}, "continuation": {"lazy": true}},"aliases": [],"description": "Checks if they key contains NULL values or if there would be unmatched rows\n(if `allow_unmatched_rows` is `False`), and reports any errors."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "make_lookup_counter_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "lookup_columns": {"lazy": false}, "unique_name_strategy": {"lazy": false}},"aliases": [],"description": "Prepares the lookup table counter that is used for two things:\n1. It allows us to check if a given row had found a match in the lookup row\n   and decide which value to use in `Replace_Column` case (the counter will\n   be `1` if there is a match and `NULL` if there is not).\n2. It allows us to find duplicate matches - if a row with counter >1 is found,\n   that means that a single row has matched multiple rows in the lookup table\n   and we should report an error."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "prepare_subqueries", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_table": {"lazy": false}, "lookup_table": {"lazy": false}, "lookup_columns": {"lazy": false}, "unique_name_strategy": {"lazy": false}},"aliases": [],"description": "Wraps the two source tables into subqueries and creates a set of new columns\n(encapsulated as `Lookup_Subquery_Setup`), together with the `lookup_counter`\ncolumn (see `make_lookup_counter_column`), that are valid in the context of a\nlookup join query (it translates the source columns valid in the input\ncontexts, to the external join context)."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "make_context_for_lookup_join", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"lookup_columns": {"lazy": false}, "subquery_setup": {"lazy": false}},"aliases": [],"description": "Creates a context for the lookup join query."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "precheck_for_duplicate_matches", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"lookup_columns": {"lazy": false}, "subquery_setup": {"lazy": false}, "connection": {"lazy": false}, "new_ctx": {"lazy": false}, "continuation": {"lazy": true}},"aliases": [],"description": "Runs a query that checks if there are any duplicate matches in the lookup\nresult. The query tries to minimize the amount of work and data that is\ntransferred, but it may not be cheap. It is however needed to be able to\nreport errors early."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "make_invariant_check", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"lookup_counter": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}},"aliases": [],"description": "Creates an expression that can be baked into the query (preferably in such\na way that it will not get removed after query transformations), that will\nfail if the 'key uniqueness' invariant and the 'all rows matching'\n(if `allow_unmatched_rows=False`) are violated when the query is being\nmaterialized.\n\nThis is needed, because the initial checks are run when the query is built,\nbut there is no guarantee that the table will not be changed before the query\nis actually materialized. If in the meantime, the data is modified and\ninvariants are broken, the query may return completely unexpected results\n(e.g. rows of the source table could get duplicated, which should never\nhappen with `lookup_and_replace`).\n\nThis additional checks ensures that if the invariants are broken, the query\nwill fail instead of returning corrupted data. Its error reporting may be\nlimited in comparison to the initial checks which may compute more\ninformation."},
{"module": "Standard.Database.Internal.Common.Offset_Helpers", "type": "", "name": "make_offset", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}, "colName": {"lazy": false, "type": "Internal_Column", "checked": true}, "order_descriptors": {"lazy": false, "type": "Vector Order_Descriptor", "checked": true}, "grouping_expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}, "fill_with": {"lazy": false, "type": "Fill_With", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Row_Number_Helpers", "type": "", "name": "make_row_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"from": {"lazy": false, "type": "Integer", "checked": true}, "step": {"lazy": false, "type": "Integer", "checked": true}, "order_descriptors": {"lazy": false, "type": "Vector Order_Descriptor", "checked": true}, "grouping_expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Connection.Entity_Naming_Properties", "type": "Entity_Naming_Properties", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Entity_Naming_Properties", "arguments": {"for_table_names": {"lazy": false}, "for_column_names": {"lazy": false}, "for_generated_column_names": {"lazy": false}},"aliases": [],"description": "Describes naming properties of database tables and columns.","arguments": "- for_table_names: properties of naming database tables. Should implement\n  the `Naming_Properties` interface.\n- for_column_names: properties of naming database columns. Should\n  implement the `Naming_Properties` interface.\n- for_generated_column_names: properties of naming generated columns.\n  Should implement the `Naming_Properties` interface."},
{"module": "Standard.Database.Internal.Connection.Entity_Naming_Properties", "type": "Entity_Naming_Properties", "name": "from_jdbc_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_connection": {"lazy": false}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "is_case_sensitive": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": []},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context", "arguments": {"from_spec": {"lazy": false, "type": "From_Spec", "checked": true}, "where_filters": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}, "orders": {"lazy": false, "type": "Vector Order_Descriptor", "checked": true}, "groups": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}, "limit": {"lazy": false, "type": "Nothing | Integer", "checked": true}, "extensions": {"lazy": false, "type": "Vector Context_Extension", "checked": true}},"aliases": [],"description": "A context associated with an SQL query.\n\nThe expressions can only be computed in a context which specifies from where\ntheir columns come and set filters and other settings for processing the\nquery.","arguments": "- from_spec: the sources for the query, see `From_Spec` for more\n  details.\n- where_filters: a list of expressions for filtering - only the rows\n  for which these expressions evaluate to true are included in the\n  result.\n- orders: a list of ordering expressions, for each entry an ORDER BY\n  clause is added.\n- groups: a list of grouping expressions, for each entry a GROUP BY is\n  added, the resulting query can then directly include only the\n  grouped-by columns or aggregate expressions.\n- limit: an optional maximum number of elements that the query should\n  return."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "for_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true, "default": "table_name"}, "internal_temporary_keep_alive_reference": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Creates a query context that just fetches data from a table, without any\nadditional processing.","arguments": "- table_name: The name of the table for which the context is being created.\n- alias: An alias name to use for table within the query.\n- internal_temporary_keep_alive_reference: See `From_Spec.Table` for more\n  details."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "for_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context", "arguments": {"raw_sql": {"lazy": false, "type": "Text|SQL_Statement", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Creates a query context that runs a raw SQL query.","arguments": "- raw_sql: The SQL statement (either as prepared statement or text).\n- alias: An alias name to use for table within the query."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "for_subquery", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context", "arguments": {"subquery": {"lazy": false, "type": "From_Spec", "checked": true}},"aliases": [],"description": "Creates a Context from a Sub_Query.","arguments": "- subquery: The subquery to lift into a context."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "set_where_filters", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_filters": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with changed `where_filters`.","arguments": "- new_filters: The new filters to set in the query."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "add_where_filters", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_filters": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with added `where_filters`.","arguments": "- new_filters: The new filters to add to the existing filters in the\n  query."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "set_orders", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_orders": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with changed `orders`.","arguments": "- new_orders: The new ordering clauses to set in the query."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "add_orders", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_orders": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with added `orders`.\n\nThe orderings are modified in such a way that the newly added ordering\ntakes precedence, but if any orderings were already present they are also\ntaken into account to break ties within the new ordering.","arguments": "- new_orders: The new ordering clauses to add to the query."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "set_groups", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_groups": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with changed `groups`.","arguments": "- new_groups: The new grouping clauses to set in the query."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "set_limit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_limit": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with changed `limit`.","arguments": "- new_limit: The new limit clauses to set in the query."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "add_extension", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"extension": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with an added extension."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "as_subquery", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"alias": {"lazy": false}, "column_lists": {"lazy": false}},"aliases": [],"description": "'Lifts' this context into a subquery, so that the original context (with all filters etc.) is\nencapsulated within the subquery and all external references passed as the second argument,\nrefer directly to that subquery.\n\nIt takes a list of lists of columns that should be included in that subquery (this can for\nexample the list of regular columns, the list of indices etc.)\nIt assumes that columns on these lists all have unique names.\n\nIt returns a new context and the lists transformed in such a way that each column corresponds\nto one from the original list but it is valid in the new context.\n\nThis is useful as a preprocessing step between combining queries, for example in a join."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each\nnode is passed to the provided function, and the return value of the\nfunction replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Subquery_Setup", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Subquery_Setup", "arguments": {"subquery": {"lazy": false, "type": "From_Spec", "checked": true}, "new_columns": {"lazy": false, "type": "Vector (Vector Internal_Column)", "checked": true}, "remap_column": {"lazy": false, "type": "Internal_Column -> Internal_Column", "checked": true}},"aliases": [],"arguments": "- subquery: The From_Spec for the created subquery.\n- new_columns: All columns that are available in the subquery, remapped\n  to be accessible from a context that uses `subquery` as its from spec.\n- remap_column: A function that remaps an internal column to be accessible\n  from a context that uses `subquery` as its from spec.\n  The behaviour is undefined if this method is called with a column that\n  was not part of the subquery."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context_Extension", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Context_Extension", "arguments": {"part_name": {"lazy": false, "type": "SQL_Part", "checked": true}, "expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}, "run_generator": {"lazy": false, "type": "Vector SQL_Builder -> SQL_Builder", "checked": true}},"aliases": [],"description": "A recipe for building the extension.","arguments": "- part_name: Should be initilised with SQL_Part.Extension \"<<extension_description>>\" where extension_description is \n  a description of this extension. SQL_Part.Extension \"<<extenion_descption>>\" then needs to be added to\n  get_part_order to determine where in the final SQL query this extension should be placed.\n- expressions: Sub-expressions needed for the part. They will be\n  generated and the results of that will be passed to `run_generator`.\n- run_generator: A function that takes the generated expressions and\n  returns the SQL code that will be inserted at the desired position."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context_Extension", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context_Extension", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each\nnode is passed to the provided function, and the return value of the\nfunction replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.Create_Column_Descriptor", "type": "Create_Column_Descriptor", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Create_Column_Descriptor", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "sql_type": {"lazy": false, "type": "Text", "checked": true}, "constraints": {"lazy": false, "type": "Vector Column_Constraint", "checked": true}},"aliases": [],"description": "A description of a column for the `Create_Table` query."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}, "internal_temporary_keep_alive_reference": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "A query source that takes data directly from a table in the\ndatabase.","arguments": "- table_name: the full name identifying the table in the database.\n- alias: the name upon which the table can be referred to in other\n  parts of the query, this is especially useful for example in\n  self-joins, allowing to differentiate between different instances of\n  the same table.\n- internal_temporary_keep_alive_reference: a reference that can be used\n  to track the lifetime of a temporary dry-run table. Once this context\n  is garbage collected, the temporary table may be dropped.\n  See `Hidden_Table_Registry` for more details."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Query", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"raw_sql": {"lazy": false, "type": "Text | SQL_Statement", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A query source that holds a raw SQL statement.","arguments": "- raw_sql: the raw SQL code of a query used as a source for this table,\n  or a SQL_Statement representing SQL code with interpolated values.\n- alias: the name upon which the table can be referred to in other\n  parts of the query, this is especially useful for example in\n  self-joins, allowing to differentiate between different instances of\n  the same table."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Literal_Values", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"column_vectors": {"lazy": false, "type": "Vector (Vector Any)", "checked": true}, "column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A query source consisting of a literal VALUES clause.","arguments": "- column_vectors: the contents of the literal table's columns.\n- column_names: the names of the literal table's columns,\n- alias: the name by which the table can be referred to in other parts of\n  the query."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Join", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"kind": {"lazy": false, "type": "SQL_Join_Kind", "checked": true}, "left_spec": {"lazy": false, "type": "From_Spec", "checked": true}, "right_spec": {"lazy": false, "type": "From_Spec", "checked": true}, "on": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}},"aliases": [],"description": "A query source that performs a join operation on two sources.","arguments": "- kind: the kind of the join.\n- left_spec: the left data source to be joined\n- right_spec: the right data source to be joined\n- on: a list of expressions that will be used as join conditions, these\n  are usually be equalities between expressions from the left and right\n  sources."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Union", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"queries": {"lazy": false, "type": "Vector Query", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A query source that performs a union operation on multiple sources.\n\nThis maps to the SQL operation `UNION ALL`, keeping any duplicate rows.","arguments": "- queries: the list of queries to be unioned. Eachn query shold have the\n  same number of columns, as these will be merged by position. Ideally,\n  corresponding columns should have the same names too, as the outer\n  query will be referring to columns of the union by names of the columns\n  from the first query.\n- alias: the name for the consolidated query, to be used by column\n  references, referring to columns of the union."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Sub_Query", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"columns": {"lazy": false, "type": "Vector (Pair Text SQL_Expression)", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A query source consisting of a sub-query.","arguments": "- columns: a list of pairs; each first element is the alias for the\n  column created in the sub-query and the second element is the\n  expression to be computed.\n- context: the context for the sub-query.\n- alias: the name upon which the results of this sub-query can be\n  referred to in other parts of the query."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each\nnode is passed to the provided function, and the return value of the\nfunction replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": [],"description": "Special handling to ignore the alias and internal temporary keep alive\nreference when comparing two `From_Spec.Table` values."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "From_Spec", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.IR.Internal_Column", "type": "Internal_Column", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Column", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "sql_type_reference": {"lazy": false, "type": "SQL_Type_Reference", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "An internal column structure.","arguments": "- name: The column name.\n- sql_type_reference: Lazily computed SQL type of the column.\n- expression: An expression for applying to the column."},
{"module": "Standard.Database.Internal.IR.Internal_Column", "type": "Internal_Column", "name": "rename", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_name": {"lazy": false}},"aliases": [],"description": "Rename the internal column.","arguments": "- new_name: The new name for the column."},
{"module": "Standard.Database.Internal.IR.Nulls_Order", "type": "Nulls_Order", "name": "First", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nulls_Order", "arguments": {},"aliases": [],"description": "Null values are included before any other values in the ordering."},
{"module": "Standard.Database.Internal.IR.Nulls_Order", "type": "Nulls_Order", "name": "Last", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nulls_Order", "arguments": {},"aliases": [],"description": "Null values are included after all other values in the ordering."},
{"module": "Standard.Database.Internal.IR.Operation_Metadata", "type": "Row_Number_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Row_Number_Metadata", "arguments": {"groupings_count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.IR.Operation_Metadata", "type": "Date_Period_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Date_Period_Metadata", "arguments": {"period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}, "input_value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.IR.Order_Descriptor", "type": "Order_Descriptor", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Order_Descriptor", "arguments": {"expression": {"lazy": false, "type": "SQL_Expression", "checked": true}, "direction": {"lazy": false, "type": "Sort_Direction", "checked": true}, "nulls_order": {"lazy": false, "type": "Nothing | Nulls_Order", "checked": true, "default": "Nothing"}, "collation": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Database.Internal.IR.Order_Descriptor", "type": "Order_Descriptor", "name": "reverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Order_Descriptor", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.IR.Order_Descriptor", "type": "Order_Descriptor", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Order_Descriptor", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each\nnode is passed to the provided function, and the return value of the\nfunction replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Select", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"expressions": {"lazy": false, "type": "Nothing | Vector (Pair Text SQL_Expression)", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}},"aliases": [],"description": "A Select SQL query.","arguments": "- expressions: List of pairs specifying the columns to materialize; each\n  is a pair whose first element is the name of the materialized column\n  and the second element is the expression to compute. If `Nothing` is\n  provided, all available columns will be selected.\n- context: The query context, see `Context` for more detail."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Insert", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "pairs": {"lazy": false, "type": "Vector (Pair Text SQL_Expression)", "checked": true}},"aliases": [],"description": "An Insert SQL query that inserts a single row to the table.","arguments": "- table_name: The name of the table to insert to.\n- pairs: A list of pairs consisting of a column name and and expression."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Create_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Create_Column_Descriptor", "checked": true}, "primary_key": {"lazy": false, "type": "Nothing | Vector Text", "checked": true}, "temporary": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "An SQL query that creates a new table.","arguments": "- table_name: the name of the table.\n- columns: descriptions of table columns.\n- primary_key: a vector of names of primary key columns or `Nothing` if\n  no primary key should be set. The column names are not checked, it is\n  the responsibility of the caller to ensure that the columns in\n  `primary_key` actually exist in `columns`, as otherwise the behavior is\n  undefined (most likely will result in an `SQL_Error` once executed).\n- temporary: specifies if the table should be marked as temporary."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Drop_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "if_exists": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "An SQL query that drops a table.","arguments": "- table_name: the name of the table to drop.\n- if_exists: if `True`, an `IF EXISTS` clause will be added."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Truncate_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An SQL query that removes all rows from a table, but does not drop the\ntable structure itself.","arguments": "- table_name: the name of the table to truncate."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Insert_From_Select", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "select": {"lazy": false, "type": "Query", "checked": true}},"aliases": [],"description": "An INSERT INTO ... SELECT query that allows to insert results of a query\ninto an existing table.","arguments": "- table_name: the name of the table to insert to.\n- column_names: a vector of names of target table columns. If not all\n  columns of the target table are provided, the remaining ones will be\n  initialized with their default values.\n- select: the query whose results will be inserted into the target table.\n  The columns in that query should correspond to the columns in specified\n  in `column_names`, matching by position."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Update_From_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"target_table_name": {"lazy": false, "type": "Text", "checked": true}, "source_table_name": {"lazy": false, "type": "Text", "checked": true}, "column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "An SQL UPDATE query that updates rows in the target table with values\nfrom the source table when the key columns match. Target table rows that\ndo not match the source are left unaffected.\n\nThis will usually be a query of the form\n`UPDATE target SET c1=source.c1, ... FROM source WHERE target.key1=source.key1 AND ...`\nwhere `c1` comes from `column_names` and `key1` comes from `key_columns`."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Delete_Unmatched_Rows", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"target_table_name": {"lazy": false, "type": "Text", "checked": true}, "source_table_name": {"lazy": false, "type": "Text", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "An SQL DELETE query that deletes from target table rows that are _not_\npresent in the source table, based on the specified key columns.\nThey key columns must be present under the same name in both tables.\n\nThis will usually be a query of the form\n`DELETE FROM target WHERE (key_columns...) NOT EXISTS (SELECT 1 FROM source WHERE source.key_columns = target.key_columns)`."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Delete_Matching_Rows", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"target_table_name": {"lazy": false, "type": "Text", "checked": true}, "source_table_name": {"lazy": false, "type": "Text", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "An SQL DELETE query that deletes from target table rows that have a\ncorresponding row in the source table, matching based on the specified\nkey columns.\n\nThey key columns must be present under the same name in both tables.\n\nThis will usually be a query of the form\n`DELETE FROM target WHERE (key_columns...) EXISTS (SELECT 1 FROM source WHERE source.key_columns = target.key_columns)`."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each\nnode is passed to the provided function, and the return value of the\nfunction replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"origin": {"lazy": false, "type": "Text", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "The internal representation of an SQL expression that gets a value from a\ncolumn.","arguments": "- origin: the name of the entity (table or sub-query) that this column\n  originates from, it corresponds to the `alias` field in `from_spec`.\n- name: the name of the column directly in the table or its alias in a\n  sub-query."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Constant", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "The internal representation of an SQL expression which is a constant to\nbe interpolated when building the query.","arguments": "- value: the value to be interpolated; the set of supported interpolation\n  values depends on the database backend."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Literal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"value": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "The internal representation of an SQL literal that should be inserted\nas-is into a query."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Text_Literal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"value": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A text literal that should be inserted into a query, wrapped in quotes\nwith any quotes it may contain escaped.\n\nThis is useful to avoid requiring unnecessary interpolations for text\nconstants in queries.\n\nUser-provided values should always be passed as interpolated `Constant`s.\nThis should only be used for 'statically' known constants - ones baked\ninto the library source code."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Operation", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"kind": {"lazy": false, "type": "Text", "checked": true}, "expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}, "metadata": {"lazy": false, "type": "Any | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "The internal representation of an SQL expression built from an operation\nand sub-expressions.","arguments": "- kind: the name of the operation, these can be both functions or infix\n  operators, the actual implementation is determined by a specific\n  dialect.\n- expressions: a list of expressions which are arguments to the operation\n  different operations support different amounts of arguments.\n- metadata: additional metadata tied to the operation. This will be\n  `Nothing` for most operations, but some operations that need to be\n  parametrized by additional settings can use this field to pass that\n  information to the code generator."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Let", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "binder": {"lazy": false, "type": "Text", "checked": true}, "bindee": {"lazy": false, "type": "SQL_Expression", "checked": true}, "body": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "The internal representation of a `WITH ... AS` CTE expression. A `Let`\nvalue contains the \"binding\" of the CTE expression to a lexically scoped\ntable name, as well as the body expression that refers to the binding.\n\nA `Let` value's body always contains at least one `Let_Ref` value with\nthe same `binder` identifier, unless the callback passed to the `let`\nmethod ignored its argument.","arguments": "- name: the optional user-provided name describing the expression bound\n  by the WITH ... AS clause\n- binder: the lexically-scoped name of the CTE expression.\n- bindee: the CTE expression.\n- body: the larger expression that contains references to the CTE."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Let_Ref", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "binder": {"lazy": false, "type": "Text", "checked": true}, "standalone_expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "The internal representation of a \"reference\" to a CTE expression.\n\nA `Let_Ref` value always occurs within the `body` expression of an\nenclosing `Let` value.\n\nDatabase backends often evaluate sub-expressions of `DB_Table` and\n`DB_Column` values, for example when querying the datanbase for an\nexpression type. `Let_Ref` values are sometimes evaluated in the\ndatabase without their enclosing `Let` values, in which case the\n`binder` field refers to an unbound identifier. In these cases, the\noriginal CTE expression in `standalone_expression` is used instead.","arguments": "- name: the optional user-provided name describing the expression bound\n  by the WITH ... AS clause\n- binder: the lexically-scoped name of the CTE expression.\n- standalone_expression: the full, original expression bound in the\n  enclosing `Let` value."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "List", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"values": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "The internal representation of an  list of SQL expressions which will be\nseparated by commas in a list in the final SQL query.\n\nNOTE - Only valid in certain locations so should be used carefully","arguments": "- value: the values that should be built into a comma separated list."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each\nnode is passed to the provided function, and the return value of the\nfunction replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "Inner", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Join_Kind", "arguments": {},"aliases": [],"description": "Inner join.\n\nThe result will contain only rows that had a match in both left and right\nsource."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "Left", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Join_Kind", "arguments": {},"aliases": [],"description": "Left join.\n\nThe result will contain all rows from the left source. Some of them may\nbe duplicated if they have multiple matches on the right. If a row from\nthe left source has no match on the right, it will be present exactly\nonce in the result and the fields corresponding to the right source will\nbe set to NULL."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "Right", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Join_Kind", "arguments": {},"aliases": [],"description": "Right join.\n\nThe result will contain all rows from the right source. Some of them may\nbe duplicated if they have multiple matches on the left. If a row from\nthe right source has no match on the left, it will be present exactly\nonce in the result and the fields corresponding to the left source will\nbe set to NULL."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "Cross", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Join_Kind", "arguments": {},"aliases": [],"description": "Cross join.\n\nThe result will contain a cross product of rows from the left source with\nthe right source. Its `on` list should be empty, instead `where_filters`\nin the query can be used to filter the results."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "Full", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Join_Kind", "arguments": {},"aliases": [],"description": "The result contains all rows from both sources, each unmatched row is\nextended with null values for the columns from the other table."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "to_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the SQL representation of this join kind as text."},
{"module": "Standard.Database.Internal.IR.Traversal_Helpers", "type": "", "name": "traverse_and_accumulate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "type": "Any -> Vector Any", "checked": true}, "node": {"lazy": false}},"aliases": [],"description": "Traverse a Query using a function that returns values to accumulate into a\nVector. The return value of the traversal is not used."},
{"module": "Standard.Database.Internal.Postgres.Helpers", "type": "", "name": "get_encoding_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_connection": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Helpers", "type": "", "name": "parse_postgres_encoding", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"encoding_name": {"lazy": false}},"aliases": [],"description": "Translates names of encodings from https://www.postgresql.org/docs/current/multibyte.html#CHARSET-TABLE\ninto their Java counterparts."},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "Pgpass_Entry", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Pgpass_Entry", "arguments": {"host": {"lazy": false}, "port": {"lazy": false}, "database": {"lazy": false}, "username": {"lazy": false}, "password": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "Pgpass_Entry", "name": "matches", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"host": {"lazy": false}, "port": {"lazy": false}, "database": {"lazy": false}, "username": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "", "name": "read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"host": {"lazy": false}, "port": {"lazy": false}, "database": {"lazy": false}, "username": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Read the .pgpass file from the User's home directory and obtain username\nand password.\n\nSee https://www.postgresql.org/docs/current/libpq-pgpass.html\n\nOn Windows this file is expected to be located at\n`%APPDATA%\\postgresql\\pgpass.conf`.\nOn Linux and macOS this file is expected to be located at `~/.pgpass` and\nit is should be inaccessible by other users and the group - otherwise it\nwill be ignored. This can be achieved by running `chmod 0600 ~/.pgpass`.\n\nIf `PGPASSFILE` environment variable is set, the provided location is\nused instead of the default one.","arguments": "- host: The hostname of the database server.\n- port: The port of the database server.\n- database: The database to connect to."},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "", "name": "locate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Determines the location of the .pgpass file to use."},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "", "name": "verify", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Checks if the given .pgpass file can be used.\n\nThe file can be used if it exists and has correct permissions on UNIX systems."},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "", "name": "parse_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "", "name": "parse_line", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"line": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Dialect", "arguments": {"dialect_operations": {"lazy": false}},"aliases": [],"description": "The dialect of PostgreSQL databases."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation\naccording to the specific dialect."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part's that determine what order each part gets written in for the final SQL output\nIf you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "wrap_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps and possibly escapes the identifier so that it can be used in a\ngenerated query regardless of what characters it contains.\nThe quotes used will depend on the dialect."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "make_table_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": [],"description": "Generates a SQL expression for a table literal."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.\n\nOne of the purposes of this method is to verify if the expected ordering\nsettings are supported by the given database backend.","arguments": "- internal_column: the column to order by.\n- sort_direction: the direction of the ordering.\n- text_ordering: If provided, specifies that the column should be treated\n  as text values according to the provided ordering. For non-text types,\n  it should be set to `Nothing`."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "prepare_distinct", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Prepares a distinct operation."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso\n`Value_Type`."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Internal_Column", "checked": true}, "target_type": {"lazy": false, "type": "SQL_Type", "checked": true}, "infer_result_type_from_database_callback": {"lazy": false, "type": "SQL_Expression -> SQL_Type_Reference", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": [],"description": "There is a bug in Postgres type inference, where if we unify two\nfixed-length char columns of length N and M, the result type is said to\nbe a **fixed-length** column of length max_int4. This is wrong, and in\npractice the column is just a variable-length text. This method detects\nthis situations and overrides the type to make it correct."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "cast_op_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of certain operations with\ncertain arguments.\n\nIt is used when the normal type inference provided by the database engine\nneeds to be adjusted.\n\nIn most cases this method will just return the expression unchanged, it\nis used only to override the type in cases where the default one that the\ndatabase uses is not what we want."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "cast_aggregate_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of aggregate operations.\nSome DBs do CAST(SUM(x) AS FLOAT) others do SUM(CAST(x AS FLOAT))."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.\n\nReturns `Nothing` if the key is not defined."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "prepare_metadata_for_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}, "operation_input_type": {"lazy": false}},"aliases": [],"description": "Prepares metadata for an operation taking a date/time period and checks\nif the given period is supported."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "if_replace_params_supports", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replace_params": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Returns true if the `replace` parameters are supported by this backend."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "needs_literal_table_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "postgres", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of PostgreSQL databases."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_dialect_operations", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "is_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This overrides the default behaviour, due to a weird behaviour of Postgres -\nit wants to determine the type for the parameter provided to IS NULL.\n\nBut when the parameter is NULL, the type is unspecified. This only occurs if\na constant-NULL column is created in an expression builder `make_constant`\nwhen computing an expression. We do not want to give it a default type, as\nit needs to be flexible - this NULL column may be used in expressions of\nvarious types. Only with IS NULL, having no type associated will fail with\n`ERROR: could not determine data type of parameter`. To circumvent this\nissue, we simply check if the parameter to be provided there is a `Nothing`\ninterpolation. If it is, we will just rewrite the expression to `TRUE` since\nthat is the expected result of `NULL IS NULL`.\n\nWith the IR refactor, this should be done in some preprocess pass that still\nworks on SQL_Expression and not raw SQL."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "represents_an_untyped_null_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arg": {"lazy": false}},"aliases": [],"description": "See `is_null` above.\n\nIt is a heuristic that will match generated expressions coming from\na NULL Literal or a Nothing constant. This should be enough, as any more\ncomplex expression should have some type associated with it."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "is_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The same issue as with `is_null` above, but here we can assume that `arg`\nrepresents some `text` value, so we can just CAST it."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_count_is_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_count_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_count_not_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_median", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_mode", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_percentile", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "first_last_aggregators", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "These are written in a not most-efficient way, but a way that makes them\ncompatible with other group-by aggregations out-of-the-box. In the future, we\nmay want to consider some alternative solutions."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_first_aggregator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"reverse": {"lazy": false}, "ignore_null": {"lazy": false}, "args": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_shortest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_longest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "concat_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "trim_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_count_distinct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_count_distinct_include_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "starts_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "ends_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_contains_expr", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}, "substring": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "contains", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "left", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "right", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_order_descriptor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "is_nan", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "is_inf", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "is_finite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "bool_or", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "floating_point_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "mod_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "decimal_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "decimal_mod", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "supported_replace_params", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "replace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_extract_as_int", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"enso_name": {"lazy": false}, "sql_name": {"lazy": false, "default": "enso_name"}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_extract_fractional_as_int", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"enso_name": {"lazy": false}, "sql_name": {"lazy": false, "default": "enso_name"}, "modulus": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_date_add", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_date_diff", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_date_trunc_to_day", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "as_int64", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": [],"description": "Alters the expression casting the value to a 64-bit integer."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "as_int32", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": [],"description": "Alters the expression casting the value to a 32-bit integer (the default choice for integers in Postgres)."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_distinct_extension", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expressions": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_runtime_error_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "The RUNTIME_ERROR operation should allow the query to compile fine and it\nwill not prevent it from running if the branch including this operation is\nnot taken. But if the branch is computed, it should ensure the query fails.\n\nThis query never returns a value, so its type should be polymorphic. However,\nthat is not possible - so currently it just 'pretends' that it would return a\nBoolean - because that is the type we expect in the use-case. This can be\naltered if needed.\n\nIt takes a variable as the second argument. It can be any value that is not\nstatically known - this ensure that the optimizer will not be able to\npre-compute the expression too early (which could make the query fail\nspuriously). See `make_invariant_check` in `Lookup_Query_Helper` for an\nexample."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "postgres_dialect_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Error_Mapper", "type": "Postgres_Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Error_Mapper", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Error_Mapper", "type": "Postgres_Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Error_Mapper", "type": "Postgres_Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Error_Mapper", "type": "Postgres_Error_Mapper", "name": "is_table_already_exists_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Error_Mapper", "type": "Postgres_Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Type_Mapping", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "value_type_to_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "sql_type_to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"infer_from_database_callback": {"lazy": false}, "op_name": {"lazy": false}, "arguments": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "The Postgres type mapping always relies on the return type determined by\nthe database backend."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "prepare_type_overrides", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type_suggestions": {"lazy": false}},"aliases": [],"description": "We want to respect any overriding references, but references that rely on\ncomputing the type by the database are resolved to Nothing to just rely\non the `ResultSet` metadata and decrease overhead."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "is_implicit_conversion", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"source_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "is_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "is_same_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type1": {"lazy": false, "type": "Value_Type", "checked": true}, "value_type2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "make_column_fetcher", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Creates a `Column_Fetcher` used to fetch data from a result set and build\nan in-memory column from it, based on the given column type."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "", "name": "simple_types_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "", "name": "complex_types_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "", "name": "on_unknown_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "", "name": "max_precision", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This is the maximum size that JDBC driver reports for 'unbounded' types in\nPostgres."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Dialect", "arguments": {"dialect_operations": {"lazy": false}},"aliases": [],"description": "The dialect of SQLite databases."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation\naccording to the specific dialect."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part's that determine what order each part gets written in for the final SQL output\nIf you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "wrap_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps and possibly escapes the identifier so that it can be used in a\ngenerated query regardless of what characters it contains.\nThe quotes used will depend on the dialect."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "make_table_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": [],"description": "Generates a SQL expression for a table literal."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.\n\nOne of the purposes of this method is to verify if the expected ordering\nsettings are supported by the given database backend.","arguments": "- internal_column: the column to order by.\n- sort_direction: the direction of the ordering.\n- text_ordering: If provided, specifies that the column should be treated\n  as text values according to the provided ordering. For non-text types,\n  it should be set to `Nothing`."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "prepare_distinct", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Prepares a distinct operation."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso\n`Value_Type`."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Internal_Column", "checked": true}, "target_type": {"lazy": false, "type": "SQL_Type", "checked": true}, "infer_result_type_from_database_callback": {"lazy": false, "type": "SQL_Expression -> SQL_Type_Reference", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "make_cast_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": [],"description": "SQLite allows mixed type columns, but we want our columns to be uniform.\nSo after unifying columns with mixed types, we add a cast to ensure that."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "cast_op_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of certain operations with\ncertain arguments.\n\nIt is used when the normal type inference provided by the database engine\nneeds to be adjusted.\n\nIn most cases this method will just return the expression unchanged, it\nis used only to override the type in cases where the default one that the\ndatabase uses is not what we want."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "cast_aggregate_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of aggregate operations.\nSome DBs do CAST(SUM(x) AS FLOAT) others do SUM(CAST(x AS FLOAT))."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.\n\nReturns `Nothing` if the key is not defined.\n\nCustom handling is required, because the default DatabaseMetaData\nimplementation does not correctly handle temporary tables."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "prepare_metadata_for_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}, "operation_input_type": {"lazy": false}},"aliases": [],"description": "Prepares metadata for an operation taking a date/time period and checks\nif the given period is supported."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "if_replace_params_supports", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replace_params": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Returns true if the `replace` parameters are suppoerted by this backend."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "needs_literal_table_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "custom_build_aggregate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "We need custom handling for First and Last, as SQLite does not support\nsuch aggregation functions out of the box, so instead we create a row\nnumber column in a subquery and compute the result based on that."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "sqlite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of SQLite databases."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "make_dialect_operations", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "unsupported", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_count_is_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_count_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_count_not_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_stddev_pop", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_stddev_samp", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "first_last_aggregators", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This is a prototype that doesn't work correctly. Left for reference for\nfuture implementation."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "concat_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "trim_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "is_inf", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "is_finite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_count_distinct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_count_distinct_include_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "starts_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "ends_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "make_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "make_contains_expr", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}, "substring": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "contains", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "left", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "right", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "bool_or", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "floating_point_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "mod_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "supported_replace_params", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "replace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "replace_only_first", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"case_sensitive": {"lazy": false}, "t": {"lazy": false}, "p": {"lazy": false}, "r": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "make_custom_cast", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_value_type": {"lazy": false}, "type_mapping": {"lazy": false}},"aliases": [],"description": "It will return `Nothing` if the type does not require custom logic."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "make_runtime_error_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "The RUNTIME_ERROR operation should allow the query to compile fine and it\nwill not prevent it from running if the branch including this operation is\nnot taken. But if the branch is computed, it should ensure the query fails.\n\nThis query never returns a value, so its type should be polymorphic. However,\nthat is not possible - so currently the SQLite dialect just does not handle\ninferring a type for it. Thus, it should only be used in places that will not\nneed client-side type inference (e.g. WHERE clause is ok).\nThis can be changed in the future, if needed."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Entity_Naming_Properties", "type": "", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Error_Mapper", "type": "SQLite_Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Error_Mapper", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Error_Mapper", "type": "SQLite_Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Error_Mapper", "type": "SQLite_Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "SQLite does not mind SQLite NULL primary keys."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Error_Mapper", "type": "SQLite_Error_Mapper", "name": "is_table_already_exists_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Error_Mapper", "type": "SQLite_Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Type_Mapping", "arguments": {},"aliases": [],"description": "Mapping from Value_Type to SQLite is done by finding the closest matching\ntype corresponding to one of the 4 supported affinities: INTEGER, REAL,\nNUMERIC, TEXT, BLOB. Thus many value types will end up being approximated by\na close but inexact type. Apart from that, a fourth artificial affinity is\nintroduced: BOOLEAN. Normally, SQLite does not have a dedicated boolean type\nand uses INTEGER instead. However, it is useful for our users to distinguish\nthe boolean columns. We do this by manually overriding the type of columns\ndetected as boolean or returned from our boolean operations. The JDBC\nautomatically handles translating between the underlying INTEGER storage and\nJava Booleans, so it is all seamless - only our type logic needs to be aware\nthat it cannot rely on the JDBC metadata as the type reported for boolean\noperations will be INTEGER - so we need to carefully ensure there is the\noverride.\n\nWhile the JDBC driver tries to approximate more precise types based on the\ntype name, these approximations are not fully true as the underlying SQLite\nstorage is still only one of the supported affinities. So to avoid suggesting\nto the user that the database can do stuff which it cannot (like storing\nintegers truncating them at 32-bits or storing fixed-length text) we\napproximate the supported types by data types that correspond to what can\nactually be stored in the given column to match its affinity. While SQLite\nallows to store any data in a column, we restrict the data to only what can\nmatch the column's affinity to be aligned with our other backends.\n\nSee `JDBC3ResultSet::getColumnType` method in the `org.xerial.sqlite-jdbc`\nmodule for the logic JDBC is using to map the SQLite types."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "value_type_to_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "sql_type_to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"infer_from_database_callback": {"lazy": false}, "op_name": {"lazy": false}, "arguments": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "The SQL type mapping uses the same logic as the in-memory backend, just\nsimplified to only the types that it supports. It does not rely on the\nDatabase to tell the expected types, because it has been found to be\nunreliable in more complex expressions."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "prepare_type_overrides", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type_suggestions": {"lazy": false}},"aliases": [],"description": "SQLite `ResultSet` metadata may differ row-by-row, so we cannot rely on\nthis metadata. Instead, we get the types inferred for each colum,\nregardless if it was initially overridden or not."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "is_implicit_conversion", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"source_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "is_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "is_same_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type1": {"lazy": false, "type": "Value_Type", "checked": true}, "value_type2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "make_column_fetcher", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Creates a `Column_Fetcher` used to fetch data from a result set and build\nan in-memory column from it, based on the given column type."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Types", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "numeric", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "real", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "blob", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "boolean", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The artificial 6th affinity that is used to distinguish boolean columns."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "simple_types_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The types that SQLite JDBC driver will report are: BOOLEAN, TINYINT,\nSMALLINT, BIGINT, INTEGER, DECIMAL, DOUBLE, REAL, FLOAT, NUMERIC, DATE,\nTIMESTAMP, CHAR, VARCHAR, BINARY, BLOB, CLOB.\n\nWe map the types to how they are actually stored, with the exception of\nboolean which is mapped as boolean type as explained above.\n\nFor types like dates - we map them to unsupported type, because date\noperations in SQLite are currently not supported due to their weird storage."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "name_based_workarounds", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The SQLite JDBC mapping relies on slightly modified version of the rules from\nhttps://www.sqlite.org/datatype3.html#affinity_name_examples\nHowever, with this the date-time columns will be mapped to the numeric type.\nInstead, we want to treat such columns as Text, so we override the mapping."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "operations_dict", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Maps operation names to functions that infer its result type."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "default_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "default_float", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "default_integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "unsupported_date_time", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Type_Refinements.DB_Table_Refinements", "type": "", "name": "refine_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Type_Refinements.DB_Table_Refinements", "type": "", "name": "is_single_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"table": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Type_Refinements.Single_Column_DB_Table_Conversions", "type": "DB_Column", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"that": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Database.Internal.Upload.Helpers.Argument_Checks", "type": "", "name": "check_delete_rows_arguments", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target_table": {"lazy": false}, "key_values_to_delete": {"lazy": false}, "key_columns": {"lazy": false}, "continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Argument_Checks", "type": "", "name": "check_target_table_for_update", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target_table": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Argument_Checks", "type": "", "name": "resolve_primary_key", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"structure": {"lazy": false}, "primary_key": {"lazy": false}},"aliases": [],"description": "Ensures that provided primary key columns are present in the table and that\nthere are no duplicates."},
{"module": "Standard.Database.Internal.Upload.Helpers.Argument_Checks", "type": "", "name": "check_update_arguments_structure_match", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "target_table": {"lazy": false}, "key_columns": {"lazy": false}, "update_action": {"lazy": false}, "error_on_missing_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "This helper ensures that all arguments are valid.\n\nThe `action` is run only if the input invariants are satisfied:\n- all columns in `source_table` have a corresponding column in `target_table`\n  (with the same name),\n- all `key_columns` are present in both source and target tables."},
{"module": "Standard.Database.Internal.Upload.Helpers.Check_Queries", "type": "", "name": "check_duplicate_key_matches_for_delete", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target_table": {"lazy": false}, "tmp_table": {"lazy": false}, "key_columns": {"lazy": false}, "allow_duplicate_matches": {"lazy": false}, "continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Check_Queries", "type": "", "name": "check_multiple_rows_match", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left_table": {"lazy": false}, "right_table": {"lazy": false}, "key_columns": {"lazy": false}, "continuation": {"lazy": true}},"aliases": [],"description": "Checks if any rows identified by `key_columns` have more than one match between two tables."},
{"module": "Standard.Database.Internal.Upload.Helpers.Check_Queries", "type": "", "name": "check_for_null_keys", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Check_Queries", "type": "", "name": "check_for_null_keys_if_any_keys_set", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Constants", "type": "", "name": "default_batch_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The recommended batch size seems to be between 50 and 100.\nSee: https://docs.oracle.com/cd/E18283_01/java.112/e16548/oraperf.htm#:~:text=batch%20sizes%20in%20the%20general%20range%20of%2050%20to%20100"},
{"module": "Standard.Database.Internal.Upload.Helpers.Constants", "type": "", "name": "dry_run_row_limit", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The maximum number of rows that will be used for the operation in dry run mode."},
{"module": "Standard.Database.Internal.Upload.Helpers.Default_Arguments", "type": "", "name": "first_column_name_in_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"structure": {"lazy": false}},"aliases": [],"description": "Returns the name of the first column in the provided table structure.\nIt also verifies that the structure is correct.\nUsed to provide the default value for `primary_key` in `create_table`."},
{"module": "Standard.Database.Internal.Upload.Helpers.Default_Arguments", "type": "", "name": "default_key_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "DB_Table | Table", "checked": true}},"aliases": [],"description": "Extracts the default argument for `key_columns` parameter of the\n`update_rows` operation."},
{"module": "Standard.Database.Internal.Upload.Helpers.Default_Arguments", "type": "", "name": "default_key_columns_required", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": [],"description": "A variant of `default_key_columns` that will raise an error if no key columns\nwere found."},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "Non_Unique_Key_Recipe", "name": "Recipe", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Non_Unique_Key_Recipe", "arguments": {"source_table": {"lazy": false}, "primary_key": {"lazy": false}, "original_panic": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "Null_Key_Recipe", "name": "Recipe", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Null_Key_Recipe", "arguments": {"source_table": {"lazy": false}, "primary_key": {"lazy": false}, "original_panic": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "internal_translate_known_upload_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "connection": {"lazy": false}, "primary_key": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Inspects any `SQL_Error` thrown and replaces it with an error recipe, that is\nconverted into a proper error in an outer layer.\n\nThe special handling is needed, because computing the\n`Non_Unique_Key` error may need to perform a SQL query that must be\nrun outside of the just-failed transaction."},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "handle_upload_duplicate_primary_key_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "handle_upload_null_primary_key_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "handle_upload_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "raise_duplicated_primary_key_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "primary_key": {"lazy": false}, "original_panic": {"lazy": false}},"aliases": [],"description": "Creates a `Non_Unique_Key` error containing information about an\nexample group violating the uniqueness constraint."},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "raise_null_primary_key_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "primary_key": {"lazy": false}, "original_panic": {"lazy": false}},"aliases": [],"description": "Creates a `Null_Key` error containing information about an\nexample group violating the non-null constraint."},
{"module": "Standard.Database.Internal.Upload.Helpers.Prepare_Structure", "type": "", "name": "align_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_or_columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Prepare_Structure", "type": "", "name": "align_vector_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Prepare_Structure", "type": "", "name": "structure_from_existing_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Prepare_Structure", "type": "", "name": "validate_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_naming_helper": {"lazy": false}, "structure": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Verifies that the provided structure is valid, and runs the provided action\nor raises an error.\n\nIn particular it checks if there are no clashing column names."},
{"module": "Standard.Database.Internal.Upload.Helpers.Prepare_Structure", "type": "", "name": "verify_structure_hint", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"structure_hint": {"lazy": false}, "column_names": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.SQL_Helpers", "type": "", "name": "make_batched_insert_template", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}, "column_names": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.SQL_Helpers", "type": "", "name": "prepare_create_table_statement", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}, "columns": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Creates a statement that will create a table with structure determined by the\nprovided columns.\n\nThe `primary_key` columns must be present in `columns`, but it is the\nresponsibility of the caller to ensure that, otherwise the generated\nstatement will be invalid."},
{"module": "Standard.Database.Internal.Upload.Operations.Create", "type": "", "name": "create_table_implementation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}, "structure": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "allow_existing": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Creates a new database table with the provided structure and returns the name\nof the created table.\n\nThe user-facing function that handles the dry-run logic.","remarks": "? Transactionality\n\n  The create operation itself is just one CREATE statement, so it does not\n  need to be done inside of a transaction.\n  The only edge case to handle is - if the table already exists, we want to\n  customize the behaviour based on `allow_existing`. This is achieved by\n  intercepting the 'already exists' error."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Source", "name": "Temporary_DB_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Delete_Rows_Source", "arguments": {"recipe": {"lazy": false, "type": "Table_Upload_Operation", "checked": true}, "tmp_table_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A temporary table created as source for actual delete operation.\nIt is used even when running from DB, because the Delete matching rows operation requires a named table."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Source", "name": "prepare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "key_values_to_delete": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "key_columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Source", "name": "run_in_transaction", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"connection": {"lazy": false}, "callback": {"lazy": false, "type": "Text -> Source_DB_Table_Uploader -> Integer", "checked": true}},"aliases": [],"description": "Runs the provided callback in transaction, having first created an empty temporary table.\nThe user must call `materialize` on `Source_DB_Table_Uploader` to actually upload the table contents - after verifying that the preconditions are met.\nThe callback gets the `Source_DB_Table_Uploader` name and reference as arguments."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Dry_Run_Source", "name": "Existing_DB_Query", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Delete_Rows_Dry_Run_Source", "arguments": {"db_table": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": [],"description": "The variant running from an existing DB query - in dry run mode we can\navoid materializing a temporary table if the query is already in DB."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Dry_Run_Source", "name": "Temporary_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Delete_Rows_Dry_Run_Source", "arguments": {"recipe": {"lazy": false, "type": "Table_Upload_Operation", "checked": true}, "dry_run_message_suffix": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A temporary table created for dry-run.\nThis variant is used when running delete with an in-memory table as a source.\nThe in-memory table has to be uploaded (at least in part) to DB to be able to run the check."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Dry_Run_Source", "name": "prepare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "key_values_to_delete": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "key_columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Dry_Run_Source", "name": "run_in_transaction", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"connection": {"lazy": false}, "callback": {"lazy": false, "type": "Source_DB_Table_Uploader -> Text -> Integer", "checked": true}},"aliases": [],"description": "Runs the provided callback in transaction, having first created empty temporary tables.\nThe user must call `materialize` on `Source_DB_Table_Uploader` to actually upload the table contents - after verifying that the preconditions are met.\nThe callback gets the `Source_DB_Table_Uploader`, as well as a (possibly empty) suffix to add to the dry-run message."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Source_DB_Table_Uploader", "name": "Existing_DB_Query", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Source_DB_Table_Uploader", "arguments": {"db_table": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Source_DB_Table_Uploader", "name": "Temporary_DB_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Source_DB_Table_Uploader", "arguments": {"recipe": {"lazy": false, "type": "Table_Upload_Operation", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Source_DB_Table_Uploader", "name": "materialize", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Table", "arguments": {},"aliases": [],"description": "Performs an upload of the source table (if needed) and returns a reference to it.\nThis method should be called after the invariant checks have passed -\notherwise the upload itself could fail due to NULL constraint violations."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "", "name": "common_delete_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"target_table": {"lazy": false, "type": "DB_Table", "checked": true}, "key_values_to_delete": {"lazy": false, "type": "Table | DB_Table", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Text", "checked": true}, "allow_duplicate_matches": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "", "name": "common_preprocess_source_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key_values_to_delete": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "key_columns": {"lazy": false}},"aliases": [],"description": "We select only the key columns and discard anything else.\n We also call distinct to ensure that we will not have primary-key duplicate\n issues when uploading the temporary table."},
{"module": "Standard.Database.Internal.Upload.Operations.Select_Into", "type": "", "name": "select_into_table_implementation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "connection": {"lazy": false}, "table_name": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Select_Into", "type": "", "name": "upload_table_in_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "connection": {"lazy": false}, "table_name": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "on_problems": {"lazy": false}, "row_limit": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "Context", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Append_Helper", "arguments": {"source_table": {"lazy": false}, "target_table": {"lazy": false}, "key_columns": {"lazy": false}, "dry_run": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "if_not_dry_run", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Runs the action only if running in normal mode.\nIn dry run mode, it will just return `Nothing`."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "update_common_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The update only affects matched rows, unmatched rows are ignored."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "insert_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_to_insert": {"lazy": false}},"aliases": [],"description": "Inserts all rows from the source.\n\nBehaviour is ill-defined if any of the rows already exist in the target.\nIf only new rows are supposed to be inserted, they have to be filtered\nbefore inserting."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "delete_unmatched_target_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Deletes rows from target table that were not present in the source."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "new_source_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Finds rows that are present in the source but not in the target."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "check_already_existing_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"continuation": {"lazy": true}},"aliases": [],"description": "Checks if any rows from the source table already exist in the target, and\nif they do - raises an error.\n\nDoes nothing if `key_columns` is empty, as then there is no notion of\n'matching' rows."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "check_rows_unmatched_in_target", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "check_multiple_target_rows_match", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"continuation": {"lazy": true}},"aliases": [],"description": "Check if there are rows in source that match multiple rows in the target."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "", "name": "common_update_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "target_table": {"lazy": false, "type": "DB_Table", "checked": true}, "update_action": {"lazy": false}, "key_columns": {"lazy": false}, "error_on_missing_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "", "name": "append_to_existing_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "target_table": {"lazy": false}, "update_action": {"lazy": false}, "key_columns": {"lazy": false}, "dry_run": {"lazy": false}},"aliases": [],"description": "Assumes that `source_table` is a simple table query without any filters,\njoins and other composite operations - if a complex query is needed, it\nshould be first materialized into a temporary table.\n\nIf `dry_run` is set to True, only the checks are performed, but the\noperations actually modifying the target table are not."},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "Table_Upload_Operation", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Upload_Operation", "arguments": {"table_description": {"lazy": false, "type": "Transactional_Table_Description", "checked": true}, "internal_upload_callback": {"lazy": false, "type": "Nothing -> DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "Table_Upload_Operation", "name": "perform_upload", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {},"aliases": [],"description": "Performs the actual data upload.\nThis method should be called inside of `run_transaction_with_tables`\nblock which had the `table_description` passed to it."},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "create_table_structure", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}, "structure": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Assumes the output context is enabled for it to work.\nCreates a table in the Database and returns its name."},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "resolve_temp_table_name", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"connection": {"lazy": false}, "temporary": {"lazy": false, "type": "Boolean", "checked": true}, "table_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Ensures the table has a valid temporary name for databases that have special naming rules for temporary tables.\nLike SQLServer, where temporary tables must start with `#`."},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "create_table_upload_operation", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table_Upload_Operation", "arguments": {"source_table": {"lazy": false}, "connection": {"lazy": false}, "table_name": {"lazy": false, "type": "Text", "checked": true}, "primary_key": {"lazy": false, "type": "Nothing | Vector Text", "checked": true}, "temporary": {"lazy": false, "type": "Boolean", "checked": true}, "remove_after_transaction": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "structure_hint": {"lazy": false, "default": "Nothing"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}, "row_limit": {"lazy": false, "type": "Integer | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "A helper to prepare an upload operation for a table.","arguments": "- source_table: the table to be uploaded.\n  If it's a `DB_Table`, the query will be materialized as a new table.\n  If it's an In Memmory `Table`, the data will be uploaded to the newly created table.\n- connection: the connection to the database.\n- table_name: the name of the table to be created.\n- primary_key: the primary key of the table to be created. Can be `Nothing` to set no key.\n- temporary: if `True`, the table will be created as temporary.\n- structure_hint: If set, it can be used to hint what types should be used for the columns of the table. Useful if the types slightly differ from the in-memory source types.\n- row_limit: if set, only the first `row_limit` rows will be uploaded."},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "_create_in_memory_table_upload_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false, "type": "Table", "checked": true}, "connection": {"lazy": false}, "table_name": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "remove_after_transaction": {"lazy": false}, "structure_hint": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "row_limit": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "_create_database_table_upload_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false, "type": "DB_Table", "checked": true}, "connection": {"lazy": false}, "table_name": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "remove_after_transaction": {"lazy": false}, "structure_hint": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "row_limit": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "_check_outside_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "Aggregate_With_Helper_Expressions", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Aggregate_With_Helper_Expressions", "arguments": {"create_helper_expressions": {"lazy": false, "type": "Aggregate_Column -> Vector Internal_Column -> Vector (Pair Text SQL_Expression)", "checked": true}, "make_aggregate": {"lazy": false, "type": "Aggregate_Column -> Text -> Vector Internal_Column -> DB_Table -> (Text -> Vector -> SQL_Expression -> SQL_Type_Reference) -> Problem_Builder -> Internal_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "Aggregate_With_Helper_Expressions", "name": "build", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "base_table": {"lazy": false}, "key_columns": {"lazy": false}, "resolved_aggregates": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "This method should be declared as result of `dialect.custom_build_aggregate` to use this setup."},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "make_aggregate_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Column", "arguments": {"table": {"lazy": false}, "aggregate": {"lazy": false}, "as": {"lazy": false}, "dialect": {"lazy": false}, "infer_return_type": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Creates an `Internal_Column` that will represent the computed aggregate.","arguments": "- table: The table owning the columns used in the aggregation.\n- aggregate: The description of the aggregation to compute.\n- as: The name for the created column.\n- dialect: The dialect of the database to generate the SQL for.\n- infer_return_type: A function that takes 3 arguments (name of the\n  operation, list of input columns and a raw SQL IR Expression) and returns\n  the inferred type for the aggregation.\n- problem_builder: A `Problem_Builder` instance used for reporting warnings."},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "aggregate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "DB_Table", "checked": true}, "group_by": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true}, "columns": {"lazy": false, "type": "Vector", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implementation for the `DB_Table.aggregate` method."},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "default_build_aggregate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"build_aggregate": {"lazy": false}, "dialect": {"lazy": false}, "base_table": {"lazy": false}, "key_columns": {"lazy": false}, "resolved_aggregates": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "make_infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "connection": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "map_column_inputs", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"f": {"lazy": false, "type": "Function", "checked": true}, "aggregate_column": {"lazy": false, "type": "Aggregate_Column", "checked": true}},"aliases": [],"description": "Applies a mapping to column inputs of the aggregate."},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "is_non_empty_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "throw_ordering_required", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Dialect_Operations", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Operations", "arguments": {"operations_dict": {"lazy": false, "type": "Dictionary Text (Vector (SQL_Builder->SQL_Builder))", "checked": true}},"aliases": [],"description": "Operations supported by a particular SQL dialect and how they are\nimplemented.","arguments": "- operations_dict: Dictionary mapping operation names to their\n  implementations; each implementation is a function which takes SQL\n  builders for the arguments, and optionally an additional metadata\n  argument, and should return a SQL builder yielding code for the whole\n  operation."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Dialect_Operations", "name": "extend_with", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"mappings": {"lazy": false}},"aliases": [],"description": "Creates a copy of the dialect that supports additional operations or\noverrides existing ones.\n\n# extend_with : Vector [Text, Vector SQL_Builder -> SQL_Builder] -> Dialect_Operations"},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Dialect_Operations", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Generator", "arguments": {"let_bindings_ref": {"lazy": false, "type": "Ref Hashset", "checked": true}},"aliases": [],"description": "We can use a Hashset for the let-binding names, since they are guaranteed\nto be distinct and not result in any shadowing."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Generator", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "expr": {"lazy": false}},"aliases": [],"description": "Builds code for an expression.","arguments": "- dialect: The SQL dialect in which the expression is being generated.\n- expr: The expression to generate SQL code for."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "apply_op_generator_with_metadata", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op": {"lazy": false}, "arguments": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_from_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "from_spec": {"lazy": false}},"aliases": [],"description": "Builds code for the FROM clause.","arguments": "- dialect: The SQL dialect for which the code is generated.\n- from_spec: A description of the FROM clause."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "order_descriptor": {"lazy": false}},"aliases": [],"description": "Builds code for an ordering.","arguments": "- dialect: The SQL dialect for which the code is generated.\n- order_descriptor: A description of the ORDER clause."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_select_query_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "columns": {"lazy": false}, "ctx": {"lazy": false}},"aliases": [],"description": "Generates SQL code corresponding to a SELECT statement.\n\n Arguments:\n - dialect: The SQL dialect for which the code is being generated.\n - ctx: A description of the SELECT clause."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_insert_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "table_name": {"lazy": false}, "pairs": {"lazy": false}},"aliases": [],"description": "Generates the SQL code corresponding to an INSERT query.","arguments": "- dialect: The SQL dialect for which the code is being generated.\n- table_name: The name of the table into which the values are being inserted.\n- pairs: The values to insert into the table, consisting of pairs of key, and\n  expression returning a value."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_sub_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "query": {"lazy": false}},"aliases": [],"description": "Builds code for a whole query.","arguments": "- dialect: The SQL dialect for which the code is being generated.\n- query: An IR describing the query."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Let_Binder_Renamer", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Let_Binder_Renamer", "arguments": {"existing_tables": {"lazy": false, "type": "Hashset Text", "checked": true}, "binders_ref": {"lazy": false, "type": "Ref Dictionary", "checked": true}, "serial_ref": {"lazy": false, "type": "Ref Integer", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Let_Binder_Renamer", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Let_Binder_Renamer", "arguments": {"existing_tables": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Let_Binder_Renamer", "name": "rename", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "binder": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Returns the short identifier that this binder maps to, and generates one\nif it hasn't been mapped yet."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "default_get_part_order", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part's that determine what order each part gets written in for the final SQL output\n If you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "generate_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "query": {"lazy": false}},"aliases": [],"description": "Builds code for a whole query.\n\nAlso preprocesses the query.\n\nThis is the entry-point to using SQL_Builder.","arguments": "- dialect: The SQL dialect for which the code is being generated.\n- query: An IR describing the query."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_binary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "A helper function to create a binary operator.","arguments": "- name: The name of the binary operator."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_unary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "A helper function to create a unary operator.","arguments": "- name: The name of the unary operator."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "lift_unary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"description": "A helper function to create an unary operation from a function.","arguments": "- name: Name of the operation, used for error reporting.\n- function: A function taking exactly one argument: the generated SQL code\n  for the argument of the operation, and returning the generated SQL code for\n  the whole operation."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "lift_binary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"description": "A helper function to create a binary operation from a function.","arguments": "- name: Name of the operation, used for error reporting.\n- function: A function taking exactly two arguments: the generated SQL code\n  for the argument of the operation, and returning the generated SQL code for\n  the whole operation."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "lift_binary_sql_function", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "sql_function": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A helper function to create a binary operation from a SQL function name.","arguments": "- name: Name of the operation, used for error reporting.\n- sql_function: SQL function taking two arguments."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_right_unary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "A helper function to create a unary operator which is added to the right of\nthe expression.","arguments": "- name: The name of the unary operator."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_function", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "A helper function to create a functional operation.","arguments": "- name: The name of the function."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_constant", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_code": {"lazy": false}},"aliases": [],"description": "A helper function to create an operation that takes no arguments.","arguments": "- sql_code: The SQL code for the constant."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "wrap_in_quotes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps the identifier name in quotes and escapes any quotes within the name\nwith double-quote.\n\n\n\nThis is the simplest way of escaping identifiers that should work across most\ndialects.","arguments": "- identifier: The identifier to wrap and escape."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "base_dialect_operations", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The base SQL dialect that is shared between most SQL implementations.\n\nIt is a base to help creating concrete dialects. It can be extended or\ncompletely overridden."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "is_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_iif", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "case_when", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "For Internal use.\nAn IR expression for constructing SQL `CASE` expressions."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "simple_cast", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_between", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_is_in", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_is_in_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_row_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false, "type": "Vector", "checked": true}, "metadata": {"lazy": false, "type": "Row_Number_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_group_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_group_number_equal_count", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_row_number_in_group", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "A helper for `lookup_and_replace`, and perhaps other operation.\nIt creates an expression that returns a row number within a group."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "alias", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "name": {"lazy": false}},"aliases": [],"description": "Adds an alias for the expression, applicable for expressions that represent\ncolumns or sub-queries.","arguments": "- dialect: The dialect for which to add the alias.\n- name: The name of the alias."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "default_make_table_literal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"wrap_identifier": {"lazy": false}, "vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "fold_case", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "simple_equals_ignore_case", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_equals", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_not_equals", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "collect_table_names", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Text", "arguments": {"query": {"lazy": false, "type": "Query", "checked": true}},"aliases": [],"description": "Collect all table names / aliases in a query. Used to generate unused names\nfor WITH clauses."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "preprocess_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"query": {"lazy": false, "type": "Query", "checked": true}},"aliases": [],"description": "Preprocessing step before converting Query to SQL.\n\nThis preprocessing step replaces the long UUID binder names in `WITH` clauses\nwith shorter names.\n\nFor `Let_Ref` nodes that are not inside a containing `WITH` nodes, the\nsubstitution is performed, but it is not used, since the binder is not used\nin those cases."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_concat", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"make_raw_concat_expr": {"lazy": false}, "make_contains_expr": {"lazy": false}, "has_quote": {"lazy": false}, "args": {"lazy": false}, "append_char": {"lazy": false, "default": "\"||\""}},"aliases": [],"description": "It takes 4 or 5 SQL arguments depending on `has_quote`.\nThe SQL arguments are following:\n- the column expression to concatenate,\n- the separator to use when joining the expressions,\n- a prefix to prepend,\n- a suffix to append,\n- a quote character to use to escape separator if it is present inside of a\n  column expression; it should be provided only if `has_quote` is `True` and\n  must not be empty then. If the quote character occurs in the expression, it\n  is escaped by doubling each occurrence.","arguments": "- make_raw_concat_expr: a function which takes two expressions - a (possibly\n  processed) column expression and a separator and returns a SQL expression\n  which concatenates the expressions with separators.\n- make_contains_expr: a function which takes two expressions - a string to\n  search in and a substring to search for and returns an expression which is\n  true if the string contains the substring.\n- has_quote: specifies whether it should expect an additional SQL argument\n  containing a quote character.\n- args: the processed SQL arguments from the generator."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "generate_create_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "name": {"lazy": false}, "columns": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}},"aliases": [],"description": "Generates the SQL code corresponding to a CREATE TABLE query."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "generate_column_description", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "descriptor": {"lazy": false}},"aliases": [],"description": "Generates a description of a single column for a CREATE TABLE query."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "truncate_table_delete_from_style", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "option for implementing generate_truncate_table_sql"},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "truncate_table_truncate_table_style", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "option for implementing generate_truncate_table_sql"},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "default_fetch_types_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "expression": {"lazy": false}, "context": {"lazy": false}, "where_filter_always_false_literal": {"lazy": false, "default": "\"FALSE\""}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "default_generate_collate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}, "quote_char": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\"\u0027"}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "_build_partition_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"grouping": {"lazy": false, "type": "SQL_Builder", "checked": true}, "ordering": {"lazy": false, "type": "SQL_Builder", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "_build_lead_lag_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "n": {"lazy": false, "type": "SQL_Builder", "checked": true}, "colName": {"lazy": false, "type": "SQL_Builder", "checked": true}, "grouping": {"lazy": false, "type": "SQL_Builder", "checked": true}, "ordering": {"lazy": false, "type": "SQL_Builder", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "_make_lead_lag", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "_make_lead_lag_closest_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "Column_Fetcher", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Fetcher", "arguments": {"fetch_value": {"lazy": false, "type": "ResultSet -> Integer -> Any", "checked": true}, "make_builder": {"lazy": false, "type": "Integer -> ProblemAggregator -> Column_Fetcher_Builder", "checked": true}},"aliases": [],"description": "A helper for fetching data from a result set and possibly building a\ncolumn out of it.","arguments": "- fetch_value: A function that fetches a value from a result set.\n- make_builder: A function that creates a builder for a column.\n  It takes an initial size as an argument. That size is only a suggestion\n  for initial capacity and the builder must be ready to accept more or\n  less rows than that.\n  It also takes a ProblemAggregator used for reporting problems. Care has\n  to be taken to ensure that the builder does not outlive the aggregator."},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "Column_Fetcher_Builder", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Fetcher_Builder", "arguments": {"append": {"lazy": false, "type": "Any -> Nothing", "checked": true}, "make_column": {"lazy": false, "type": "Text -> Column", "checked": true}},"aliases": [],"description": "Wraps an underlying builder to provide a generic interface.","arguments": "- append: A function that appends a value to the underlying builder.\n  By default, it must support appending `Nothing`, unless the column was\n  explicitly declared as non-nullable.\n- make_column: A function that creates a column from the underlying\n  builder. It takes the desired column name as argument."},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "boolean_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "double_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "long_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bits": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "big_integer_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "fetch_big_integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"rs": {"lazy": false}, "i": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "big_decimal_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "text_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "fallback_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A fallback fetcher that can be used for any type.\nIt will use `getObject` to get the desired value and the `InferredBuilder`\nto create a Java column that will suit the values present.\n\nIt is used as a default fallback. It may not work correctly for specialized\ntypes like dates, so a specialized fetcher should be used instead."},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "date_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "time_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "date_time_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "local_date_time_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A column fetcher that fetches the database column without timezone,\ninterpreting it as LocalDateTime and then converting to Enso Date_Time by\nadding the default system timezone."},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "default_fetcher_for_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": [],"description": "A default implementation that will assign specialized fetchers for the\nInteger, Float, Char and Boolean value types and a fallback for any other\ntype.\n\nThis should try to be aligned with `Storage.make_builder`."},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "seal_java_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_builder": {"lazy": false}, "column_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "make_builder_from_java_object_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "Data_Link_Setup", "name": "Available", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_Setup", "arguments": {"create_data_link_structure": {"lazy": false, "type": "Enso_File->JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "Data_Link_Setup", "name": "Unavailable", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_Setup", "arguments": {"cause": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "Data_Link_Setup", "name": "already_a_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_Setup", "arguments": {},"aliases": [],"description": "Returns an unavailable setup with reason being the connection was alraedy a data link."},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "Data_Link_Setup", "name": "save_credentials_for_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"data_link_location": {"lazy": false, "type": "Enso_File", "checked": true}, "credentials": {"lazy": false, "type": "Credentials", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "Data_Link_Setup", "name": "save_as_data_link", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "link_type": {"lazy": false, "type": "DB_Data_Link_Type", "checked": true, "default": "..Database"}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "Database", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Data_Link_Type", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Data_Link_Type", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "Query", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Data_Link_Type", "arguments": {"query": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "SQL_Statement", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Data_Link_Type", "arguments": {"sql_statement": {"lazy": false, "type": "SQL_Statement", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "from_js", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Data_Link_Type ! Illegal_Argument", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Parse the `table` field of a data link JSON, returning the appropriate link type.\n\nThis is the inverse to `to_js_object`."},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "add_to_data_link_description", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"connection_description": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Alters the connection description JSON, adding information dependent on\nthe data link type (table name or query to fetch, when applicable)."},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Serializes this data link type to an appropriate JSON representation that\ncan be assigned to the `table` field in a data link."},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "interpret", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}},"aliases": [],"description": "Interprets this data link setup according to its type.\nThe `Database` link will return the connection as-is, whereas the other\ntypes will return a `DB_Table` for the specific table/query."},
{"module": "Standard.Database.Internal.DB_Data_Link_Helpers", "type": "", "name": "data_link_connection_parameters", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Connection_Options", "arguments": {"source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.DB_Data_Link_Helpers", "type": "", "name": "save_table_as_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.DB_Data_Link_Helpers", "type": "", "name": "_find_referred_temporary_tables", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing | Vector Text", "arguments": {"connection": {"lazy": false}, "context": {"lazy": false}},"aliases": [],"description": "Checks if the query refers to any tables that are temporary.\n\nNote that this is a heuristic and it may potentially lead to false positives\nif aliasing table names exist across schemas. Supporting tables with clashing\nnames across schemas is something that may need to be revised overall in the\nDatabase library."},
{"module": "Standard.Database.Internal.DB_Wrapped_Error", "type": "DB_Wrapped_Error", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Wrapped_Error", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Support_Level", "name": "Allowed", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Support_Level", "arguments": {},"aliases": [],"description": "DDL statements are allowed inside of transactions."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Support_Level", "name": "Unsupported", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Support_Level", "arguments": {},"aliases": [],"description": "DDL statements are not allowed inside of transactions."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Support_Level", "name": "Ignored", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Support_Level", "arguments": {},"aliases": [],"description": "DDL statements are allowed inside of transactions, but they are ignored."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Support_Level", "name": "Causes_Commit", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Support_Level", "arguments": {},"aliases": [],"description": "DDL statements are allowed inside of transactions,\nbut they cause a commit of the current transaction."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Support_Level", "name": "get_from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Support_Level", "arguments": {"connection": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Transactional_Table_Description", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Transactional_Table_Description", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "temporary": {"lazy": false, "type": "Boolean", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true}, "remove_after_transaction": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Transactional_Table_Description", "name": "create", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Table", "arguments": {"connection": {"lazy": false}},"aliases": [],"description": "This operation creates the tables regardless of the Output Context setting.\nIt is the responsibility of the caller to ensure that the operation may proceed."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "run_transaction_with_tables", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"connection": {"lazy": false}, "tables": {"lazy": false, "type": "Vector Transactional_Table_Description", "checked": true}, "callback": {"lazy": false, "type": "Vector DB_Table -> Any", "checked": true}},"aliases": [],"description": "A helper that runs the provided code in a transaction, having first created the specified tables.\nThe callback is ran with a vector of created table references passed as an argument.\n\nThis helper method ensures that we can perform operations creating permanent\nor temporary tables with transactions. Some databases do not support DDL\nstatements within transactions, so as an approximation we create the tables\nbefore starting the transaction and if the transaction is rolled-back, we\nensure to try to drop these tables.\n\nIf a given database does allow DDL inside of transactions, we perform the\nwhole operation inside of transaction, to get better guarantees in case of\nsevere failures (network disconnection, process being killed etc.)."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "create_tables_inside_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"connection": {"lazy": false}, "tables": {"lazy": false, "type": "Vector Transactional_Table_Description", "checked": true}, "callback": {"lazy": false, "type": "Vector DB_Table -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "create_tables_outside_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"connection": {"lazy": false}, "tables": {"lazy": false, "type": "Vector Transactional_Table_Description", "checked": true}, "callback": {"lazy": false, "type": "Vector DB_Table -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "cleanup_tables_silently", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_names": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "cleanup_transaction_scoped_tables", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "tables": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "check_table_integrity", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"created_table": {"lazy": false}},"aliases": [],"description": "A helper that checks if the table was not modified between its creation and entering the transaction.\nOnly applicable to `create_tables_outside_transaction`."},
{"module": "Standard.Database.Internal.Error_Mapper", "type": "Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Error_Mapper", "arguments": {},"aliases": [],"description": "A helper class that helps map backend-specific errors to our common format,\nwhen applicable."},
{"module": "Standard.Database.Internal.Error_Mapper", "type": "Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Checks if the given error is related to a violation of PRIMARY KEY\nuniqueness constraint."},
{"module": "Standard.Database.Internal.Error_Mapper", "type": "Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Error_Mapper", "type": "Error_Mapper", "name": "is_table_already_exists_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Error_Mapper", "type": "Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Called by `Table.read`, allowing the dialect to transform a generic\n`SQL_Error` into a more specific error type, if applicable."},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "check_integrity", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity1": {"lazy": false}, "entity2": {"lazy": false}},"aliases": [],"description": "Checks if the two tables or columns have the same context and use the same\nconnection.\n\n\n\nTo combine different objects they need to satisfy this requirement, otherwise\nthe combination would be ill-formed.","arguments": "- entity1: The entity to check against the second.\n- entity2: The entity to check against the first."},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "check_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity1": {"lazy": false}, "entity2": {"lazy": false}},"aliases": [],"description": "Checks if the two tables or columns use the same connection.","arguments": "- entity1: The entity to check against the second.\n- entity2: The entity to check against the first."},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "ensure_same_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "entities": {"lazy": false}, "continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "unify_vector_singleton", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "A helper function simplifying argument handling.\n\n\n\nIt always returns a vector, if the argument was already a vector, it is kept\nas-is, otherwise it is wrapped in a singleton vector.","arguments": "- x: A value that may or may not be a vector."},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "assume_default_locale", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "rename_internal_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false}, "new_names": {"lazy": false}},"aliases": [],"description": "Transforms the vector of columns, changing names of each column to the\ncorresponding name from the second vector.","arguments": "- columns: A vector of columns to rename.\n- new_names: The new names for the columns."},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "expect_dialect_specific_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"related_column": {"lazy": false}, "argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the `argument` has an integer type (as defined by the dialect associated with `related_column`).\nSee `SQL_Type_Mapping.is_integer_type` for details."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "Hidden_Table_Reference", "name": "Reference", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hidden_Table_Reference", "arguments": {"parent": {"lazy": false, "type": "Hidden_Table_Registry", "checked": true}, "table_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "Hidden_Table_Registry", "name": "Registry", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hidden_Table_Registry", "arguments": {"reference_counter": {"lazy": false, "type": "HiddenTableReferenceCounter", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "Hidden_Table_Registry", "name": "make_reference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Creates a new reference to the table with the given name.\n\nOnce this and any other references to this table name are garbage\ncollected, the table will be scheduled for disposal and removed on the\nnext `run_maintenance_table_cleanup` invocation (unless the table is\n'brought back to life' by new references being introduced)."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "Hidden_Table_Registry", "name": "list_hidden_tables", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Lists all tables that were added to the registry by calling\n`make_reference` and not yet removed."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "Hidden_Table_Registry", "name": "is_registered", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Checks if the given table name is registered in the registry."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a new hidden table registry instance."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "", "name": "dispose_reference", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"reference": {"lazy": false}},"aliases": [],"description": "Utility method for disposing of references. Provided to avoid accidental\nscope capture with `Managed_Resource` finalizers."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "", "name": "run_maintenance_table_cleanup", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}},"aliases": [],"description": "Drops all temporary hidden tables that have been marked for removal and not\nbrought back to life.\n\nThis method must be run in a critical section guaranteeing that no other\noperations will be performed on the associated connection in parallel. Thanks\nto running it in a critical section, there is no risk that a table that is\njust being dropped will come back to life in the meantime - since no other\ncode can be creating tables on this connection at the same time."},
{"module": "Standard.Database.Internal.Internals_Access", "type": "", "name": "column_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"column": {"lazy": false, "type": "DB_Column | Internal_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Internals_Access", "type": "", "name": "get_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"thing": {"lazy": false, "type": "DB_Column | DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Internals_Access", "type": "", "name": "get_context", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context", "arguments": {"thing": {"lazy": false, "type": "DB_Column | DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Internals_Access", "type": "", "name": "internal_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Internal_Column", "arguments": {"table": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.In_Transaction", "type": "In_Transaction", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "In_Transaction", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.In_Transaction", "type": "In_Transaction", "name": "is_in_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if a transaction is currently being run."},
{"module": "Standard.Database.Internal.In_Transaction", "type": "In_Transaction", "name": "mark_running_in_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Executes the provided action marking as being run within a transaction."},
{"module": "Standard.Database.Internal.In_Transaction", "type": "In_Transaction", "name": "ensure_in_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Runs the provided action, failing if the call is not made from within a\ntransaction."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "JDBC_Connection", "arguments": {"connection_resource": {"lazy": false}, "operation_synchronizer": {"lazy": false}},"aliases": [],"arguments": "- connection_resource: a `Managed_Resource` containing the Java\n  Connection instance.\n- operation_synchronizer: a helper for synchronizing access to the underlying Connection."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "synchronized", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Runs the provided action ensuring that no other thread is working with\nthis Connection concurrently."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "close", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Closes the connection releasing the underlying database resources\nimmediately instead of waiting for them to be automatically released.\n\nThe connection is not usable afterwards."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "with_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": false}},"aliases": [],"description": "Open the connection to the database, then run the action wrapping any\nSQL errors."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "run_maintenance_action_if_possible", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"callback": {"lazy": false}},"aliases": [],"description": "Runs the provided callback only if no thread is currently inside a\n`synchronized` critical section (including the current thread)."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "with_metadata", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Open the connection to the database, then run the action passing the\ndatabase's metadata wrapping any SQL errors."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "with_prepared_statement", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}, "statement_setter": {"lazy": false}, "action": {"lazy": false}, "skip_log": {"lazy": false, "default": "False"}},"aliases": [],"description": "Runs the provided action with a prepared statement, adding contextual\ninformation to any thrown SQL errors.","arguments": "- query: The query to prepare. It may be either a raw SQL statement or a\n  `SQL_Statement`.\n- statement_setter: A strategy for filling holes in the prepared\n  statement.\n- action: The action to run with the prepared statement.\n- skip_log: If `True`, the query will not be logged even with logging\n  enabled. This is used to avoid logging a query that is not really run\n  (e.g. `ensure_query_has_no_holes` which prepares a statement but does\n  not execute it)."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "Text | SQL_Statement", "checked": true}},"aliases": [],"description": "Executes the provided SQL.\nTypically this shouldn't be used and with_prepared_statement should be preferred.\nIt is needed for SQLServer temp table creation where we need to execute a raw SQL statement\noutside of a stored procedure."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "raw_fetch_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}, "execute_query": {"lazy": false}, "statement_setter": {"lazy": false}},"aliases": [],"description": "Given a prepared statement, gets the column names and types for the\nresult set."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "raw_read_statement", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"raw_sql": {"lazy": false}},"aliases": [],"description": "Reads a raw SQL statement, using a very simple dialect-agnostic type\nmapping.\n\nIt may be used for accessing simple database metadata. It should never be\nused for proper queries."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"raw_sql": {"lazy": false}},"aliases": [],"description": "Checks that the query has no holes, and if it does, throws an error."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "run_without_autocommit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Runs the following action with auto-commit turned off on this connection\nand returns the result.\n\nAfterwards, the auto-commit setting is reverted to the state before\nrunning this function (so if it was off before, this method may not\nchange anything)."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "run_within_transaction", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Performs the given action within a transaction.\nOnce the action is completed, the transaction is committed.\nIf a panic or dataflow error escapes from the action, the transaction is\nrolled-back and closed.\nIf the rollback fails and panics, the panic related to the rollback will\ntake precedence over the original panic that caused that rollback."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "batch_insert", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"insert_template": {"lazy": false}, "statement_setter": {"lazy": false}, "table": {"lazy": false}, "batch_size": {"lazy": false}, "expected_type_hints": {"lazy": false, "default": "Nothing"}, "row_limit": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Insert rows from an in-memory table using a prepared query template in\nbatches for efficiency.\n\nIt is the caller's responsibility to call this method from within a\ntransaction to ensure consistency."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "properties": {"lazy": false}},"aliases": [],"description": "Creates a JDBC connection based on a URL and optionally username and\npassword.","arguments": "- url: The URL to connect to.\n- properties: A vector of properties for the connection."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "close_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}},"aliases": [],"description": "This cannot be a closure due to limitations of Managed_Resource.","arguments": "- connection: The connection to close."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "handle_sql_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}, "related_query": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Executes `action` and returns its result, catching any panics and if they are\ncoming from JDBC, wraps them with our own error types and returns as regular\ndata-flow errors.","arguments": "- action: The computation to execute. This computation may throw SQL errors."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "set_statement_values", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stmt": {"lazy": false}, "statement_setter": {"lazy": false}, "values": {"lazy": false}, "expected_type_hints": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Uses the provided `Statement_Setter` strategy to fill holes in a\nprovided `PreparedStatement`.\n\nA list of expected value types can be passed as `expected_type_hints` to add\nthese hints to the `Statement_Setter` to customize the behaviour for some\nspecific target value types."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "log_sql_if_enabled", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_connection": {"lazy": false}, "query_text": {"lazy": true}},"aliases": [],"description": "A helper that logs performed SQL queries/statements to a file, if an\nenvironment variable is set."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "profile_sql_if_enabled", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_connection": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "query_text": {"lazy": true, "type": "Text", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "A helper that logs performed SQL queries/statements run-time to a profiling\nfile, if an environment variable is set."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "get_pragma_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_connection": {"lazy": false}, "sql": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Replace_Params", "type": "Replace_Params", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Replace_Params", "arguments": {"input_type": {"lazy": false}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "only_first": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Replace_Params", "type": "Replace_Params", "name": "throw_unsupported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Raise an exception for an unsupported combination of parameters"},
{"module": "Standard.Database.Internal.Result_Set", "type": "", "name": "read_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"result_set": {"lazy": false}, "column_name": {"lazy": false}},"aliases": [],"description": "Read a single column from a ResultSet into a Vector"},
{"module": "Standard.Database.Internal.Result_Set", "type": "", "name": "result_set_to_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"result_set": {"lazy": false}, "make_column_fetcher": {"lazy": false}, "type_overrides": {"lazy": false, "default": "Nothing"}, "last_row_only": {"lazy": false, "default": "False"}},"aliases": [],"description": "Converts a ResultSet into a Table."},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Select", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The text literal SELECT"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Columns", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The expressions defining the columns to be returned\ne.g. Column1, Column2, left(Column3, 5) as Zip"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "From", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The table or sub query that the query selects from\ne.g. FROM Table1"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Where", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The expressions making up the WHERE part of the query\ne.g. WHERE Zip=90210"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Group", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The expressions making up the GROUP BY part of the query\ne.g. GROUP BY Column1"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Order", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The expressions making up the ORDER BY part of the query\ne.g. ORDER BY Column1"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Limit", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The LIMIT part of the query\ne.g. LIMIT 100"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Extension", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Any dialect defined query extensions with an identifying name"},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Type_Mapping", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "value_type_to_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Converts the given Value_Type to its corresponding SQL_Type.\n\nSome SQL dialects may not support all Value_Types (in fact most will\nhave at least a few exceptions, and some like SQLite may have very\nlimited support). If an SQL_Type that matches the Value_Type cannot be\nfound, a closest approximate match is returned instead. If an exact match\ncannot be found, an `Inexact_Type_Coercion` warning is reported according\nto the `on_problems` setting.\n\nIf the conversion is exact, it should be reversible, i.e.\n`sql_type_to_value_type (value_type_to_sql x Problem_Behavior.Report_Error) = x`."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "sql_type_to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Converts the given SQL_Type to its corresponding Value_Type."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Converts an SQL_Type to a Text representation compatible with the related\nSQL dialect that can be used in SQL expressions like CAST or column\ndefinitions."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"infer_from_database_callback": {"lazy": false}, "op_name": {"lazy": false}, "arguments": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "Returns a `SQL_Type_Reference` that will resolve to the resulting type of\nthe given operation.\n\nIn most cases this will just delegate to `infer_from_database_callback`\nwhich should ask the particular database backend to infer the type, but\nsome specific cases may override the default behavior. The notable\nexample is the ability to support Boolean types in SQLite.\n\nThe particular operation is identified by its name. It also gets a vector\nof supplied arguments in case the result type may depend on them. The\narguments are passed as-is, i.e. they may be Database columns or raw Enso\nvalues. The generated IR expression is also provided as\ndepending on the backend the raw arguments or the target expression may\nbe more useful to create the return type. In particular, the expression\nmay be used as an argument for the `infer_from_database_callback`."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "prepare_type_overrides", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type_suggestions": {"lazy": false}},"aliases": [],"description": "Gets a list of type suggestions and returns a list of type overrides for\na query.\n\nThis is used to customize type override behavior - most backends will\ncorrectly infer types from metadata, so unless specifically overridden,\nwe can rely on the `ResultSet` metadata and reduce any overhead. However,\nin some backends (SQLite) the metadata may not be as useful (in SQLite,\nthe metadata is changing depending on the result row, so the first row\nthat is usually used may not reflect the needs of the whole column) -\nthis method allows to provide custom overrides in such case.\n\nIf the vector contains a `Nothing` at a given position, that column type\nwill be inferred from the `ResultSet` metadata. If it contains a concrete\ntype, that type will be used instead, regardless of what is coming from\nthe metadata."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "is_implicit_conversion", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"source_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Checks if the conversion between the two types is one to be done implicitly in the given backend.\nConversions marked as implicit will not raise Inexact_Type_Coercion warnings.\n\nFor example, the Snowflake database converts all integer types to NUMERIC(38, 0).\nThis conversion is a property of the database, so warning about it would only be annoying."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Specifies if the given type coercion should raise an\n`Inexact_Type_Coercion` warning when materializing a table into memory."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "is_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Specifies if this backend recognizes the given type as an integer type.\n\nFor most backends, this should just be `.is_integer`.\nHowever, in some backends (e.g. Snowflake), the Decimal type is treated\nas the main Integer type, so this method can be used to specify that.\nWe don't make Decimal type an integer type by default, as in other\nbackends we do want to keep the distinction (for example in Postgres,\n`date_add` function will work with Integer but not with Decimal types)."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "is_same_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type1": {"lazy": false, "type": "Value_Type", "checked": true}, "value_type2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Checks if the two types are to be considered the same by the `By_Type`\nselector.\n\nIn most backends this can just delegate to `Value_Type.is_same_type`. But\ne.g. in Snowflake this can be used to make Decimal and Integer types\ninterchangeable."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "", "name": "default_sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "", "name": "default_should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "Computed_By_Database", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Type_Reference", "arguments": {"ref": {"lazy": false, "type": "Ref (SQL_Type_Recipe | SQL_Type)", "checked": true}},"aliases": [],"description": "Refers to the SQL type of a given column, as computed by the Database\nitself.\n\nSince fetching this type requires querying the database, it is computed\nlazily and cached.\n\nWe are not using a lazy field, because we also want to be able to\nmanually set cached type - see `cache_computed_type`."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "Overridden", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Type_Reference", "arguments": {"value": {"lazy": false, "type": "SQL_Type", "checked": true}},"aliases": [],"description": "Refers to an SQL type that is overridden by the dialect's type system."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "Null", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Type_Reference", "arguments": {},"aliases": [],"description": "A type reference that should never be queried.\nUsed in some internal expressions that are not user facing and are known\nto not rely on the type."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "from_constant", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Creates an `SQL_Type_Reference` from a known constant.\n\nThis is useful when the type is already known (for example in\n`Database.make_table`, because the column types were already fetched) or when\nthe type is overridden (for example when pretending that SQLite has a boolean\ntype)."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "context": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "Creates a new `SQL_Type_Reference` from a given SQL expression evaluated in a\nprovided context. The connection is used to ask the database engine what the\nexpected type will be."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a new `SQL_Type_Reference` that should never be used.\nThis is used by some internal methods which need to construct an internal\ncolumn, but we can guarantee that its SQL Type will never be checked."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "get", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the stored SQL type.\n\nThis may perform a database query on first access."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "to_type_override", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Turns this reference into a type override.\n\nIf the type is computed by the database, this will return `Nothing`,\nallowing the fetch method to read the type from query metadata. However,\nif it was overridden, it will return that override to be used instead of\nthe type coming from the metadata."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "cache_computed_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": true, "type": "SQL_Type", "checked": true}},"aliases": [],"description": "If this ref was `Computed_By_Database` that was not yet computed, it will\nsave the computed type in its cache. Otherwise, it will do nothing.\n\nThis can be used by queries to fill-in an already computed type, so that\nit no longer has to be fetched.\n\nThe `sql_type` argument is suspended, so that it will be processed only\nif it is used."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Recipe", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Type_Recipe", "arguments": {"connection": {"lazy": false, "type": "Connection", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "A recipe for computing the SQL type."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "", "name": "get_or_compute", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Type", "arguments": {"ref": {"lazy": false, "type": "Ref (SQL_Type_Recipe | SQL_Type)", "checked": true}},"aliases": [],"description": "Returns the SQL type represented by the given reference, computing it if\nnecessary.\n\nThe computed type is saved back into the Ref, so that future accesses can\nrely on the cached value."},
{"module": "Standard.Database.Internal.SQL_Warning_Helper", "type": "", "name": "process_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_object": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "A helper method used to gather any warnings reported during an SQL operation.\nIt will gather any warnings attached to the `jdbc_object`, then run the\nprovided `action` and attach any warnings to the result."},
{"module": "Standard.Database.Internal.SQL_Warning_Helper", "type": "", "name": "extract_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_object": {"lazy": false}},"aliases": [],"description": "Returns a vector of warnings reported by a JDBC object.\n\nThis works with any object that has a `getWarnings` method, returning a `SQLWarning`."},
{"module": "Standard.Database.Internal.SQL_Warning_Helper", "type": "", "name": "extract_warnings_into_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"builder": {"lazy": false}, "jdbc_object": {"lazy": false}},"aliases": [],"description": "Extracts warnings from a JDBC object and appends them into a provided vector\nbuilder.\n\nThis works with any object that has a `getWarnings` method, returning a `SQLWarning`."},
{"module": "Standard.Database.Internal.Statement_Setter", "type": "Statement_Setter", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Statement_Setter", "arguments": {"fill_hole": {"lazy": false, "type": "PreparedStatement -> Integer -> Value_Type|Nothing -> Any -> Nothing", "checked": true}},"aliases": [],"description": "Encapsulates the logic for filling a hole in a prepared statement."},
{"module": "Standard.Database.Internal.Statement_Setter", "type": "Statement_Setter", "name": "default", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default setter that is handling simple commonly supported types."},
{"module": "Standard.Database.Internal.Statement_Setter", "type": "Statement_Setter", "name": "null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Used internally to mark statements that do not expect to have any values\nto set.\n\nIt will panic if called."},
{"module": "Standard.Database.Internal.Statement_Setter", "type": "", "name": "fill_hole_default", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stmt": {"lazy": false}, "i": {"lazy": false}, "type_hint": {"lazy": false}, "value": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Naming_Helper", "arguments": {"connection": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "naming_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "create_unique_name_strategy", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a `Unique_Name_Strategy` that will generate names keeping the\ntable naming limitations in mind."},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "verify_table_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Verifies if the table name is valid.\nIf valid, it runs the provided action, otherwise it reports an error."},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "is_table_name_valid", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "generate_dry_run_table_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates a temporary table name for the given table name, used for dry\nruns.\n\nThe table name is 'stable', meaning that the same name will be returned\nfor the given input `table_name` on subsequent calls, unless the user\ncreates a clashing table in the meantime.\n\nThe table name is guaranteed to be unique for the database at the time it\nis generated - this is used to ensure that the dry run tables never\noverwrite pre-existing user data.","remarks": "! Safety\n\n  It is safe to drop/overwrite the table returned by this method, as it\n  can be assumed that it was not created by the user. It either does not\n  (yet) exist, or if it exists, it is present in our hidden table\n  registry - but that means it was created by Enso as a hidden table."},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "generate_random_table_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "default": "\"enso-table-\""}},"aliases": [],"description": "Generates a random table name that does not currently exist in the\ndatabase."},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "truncate_if_needed", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Truncates the name to fit in the limit, if it is too long."},
{"module": "Standard.Database.Internal.Telemetry", "type": "", "name": "log", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {"logger_name": {"lazy": false, "type": "Text", "checked": true}, "msg": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Schedules a single telemetry message for sending.","arguments": "- logger_name: Name of the (telemetry) logger\n- msg: Message. Must be of format `<msg>: <args>`, where `<args>` has\n  `<argname>=<argvalue>` mapping separated by `,`, for example\n  \"my message: arg1=1, arg2=2\".\n  See org.enso.logging.service.logback.telemetry.LogFormatter\n- args: Arguments passed to the LoggingEvent object"},
{"module": "Standard.Database.Internal.Telemetry", "type": "", "name": "_root_logger_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Generic_JDBC_Connection", "arguments": {"jdbc_connection": {"lazy": false, "type": "JDBC_Connection.JDBC_Connection", "checked": true}},"aliases": []},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "connect", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Generic_JDBC_Connection", "arguments": {"url": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"url\""}, "properties": {"lazy": false, "type": "Vector", "checked": true, "default": "[]"}},"aliases": [],"icon": "data_input","description": "Connect to a database specified by a JDBC URL.\n\nGeneric_JDBC_Connection is a wrapper around a JDBC Connection. This can\nbe used to access any JDBC-compliant database backend, including ones\nthat do not have full support via `Connection`s. It provides schema\ninformation, and the ability to execute SQL queries and commands.\n\nUnlike regular fully-supported `Connection`s, query results are returned\nas in-memory `Table`s, rather than as `DB_Table`s.\n\nThe JDBC driver must be available on the JVM classpath (for example, in a\n`polyglot/java` folder within the project).","arguments": "- url: The JDBC URL describing the database to connect to.\n- properties: A vector of properties for the connection.","examples": "> Example\n  Connect to an H2 database instance. (This requires that you have the H2\n  JDBC driver in your classpath.)\n\n      connection = Generic_JDBC_Connection.connect \"jdbc:h2:~/my_database\""},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "close", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Nothing", "arguments": {},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Close the underlying JDBC connection.","examples": "> Example\n  Connect to an H2 database instance, then close the connection.\n\n      connection = Generic_JDBC_Connection.connect \"jdbc:h2:~/my_database\"\n      connection.close"},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "execute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"sql": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"sql\""}},"aliases": ["delete", "insert", "query", "update"],"group": "Standard.Base.Output","icon": "data_output","description": "Execute a raw SQL query or statement. `execute` does not execute the SQL\nunless the output context is enabled.\n\nReturns the row count for a SQL DML statement, or 0 for SQL statements\nthat return nothing.","arguments": "- sql: The SQL query or statement to execute.","examples": "> Example\n  Create a table.\n\n      connection = Generic_JDBC_Connection.connect \"jdbc:h2:~/my_database\"\n      connection.execute \"create table foo (a int)\""},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"sql_query": {"lazy": false, "type": "SQL_Query", "checked": true, "default": "Missing_Argument.throw \"sql_query\""}},"aliases": ["import", "load"],"group": "Standard.Base.Input","icon": "data_input","description": "Execute a raw SQL query or read the contents of a table by name.\n\nReturns the resulting rows as an in-memory table.","arguments": "- sql_query: Either a table name or a raw SQL query.","examples": "> Example\n  Run a raw SQL query.\n\n      connection = Generic_JDBC_Connection.connect \"jdbc:h2:~/my_database\"\n      table = connection.read (SQL_Query.Raw_SQL \"select a, b, c from foo\")\n\n\n> Example\n  Read the contents of a table.\n\n      connection = Generic_JDBC_Connection.connect \"jdbc:h2:~/my_database\"\n      table = connection.read (SQL_Query.Table_name \"foo\")"},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "get_catalogs", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": ["catalog schema database"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a `Vector` of the available catalogs.","examples": "> Example\n  Get the available catalogs.\n\n      connection = Generic_JDBC_Connection.connect \"jdbc:h2:~/my_database\"\n      connection.get_catalogs"},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "get_schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"catalog": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "schema_pattern": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["catalog schema database"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a `Vector` of the available schemas.","arguments": "- catalog: A pattern specifying the catalog or catalogs to get schemas\n  for. If `catalog` is \"\", returns schemas that do not have a catalog. If\n  `catalog` is Nothing, return scheams for all catalogs.\n- schema_pattern: A pattern specifying the schemas to return. If\n  `schema_pattern` is Nothing, return all schemas.","examples": "> Example\n  Get the available schemas.\n\n      connection = Generic_JDBC_Connection.connect \"jdbc:h2:~/my_database\"\n      connection.get_schemas","remarks": "! Patterns\n\n  Patterns can be literal strings, or can include wildcard characters.\n  The wildcard characters are the same ones that are used in SQL `LIKE`\n  clauses.\n\n  Examples:\n  - \"A\": matches the table \"A\"\n  - \"A_\": matches the tables \"AB\" and \"AC\"\n  - \"A%\": matches the tables \"ABC\" and \"ADEF\""},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "get_tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"catalog": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "schema_pattern": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "\"\""}, "table_name_pattern": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "table_types": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["catalog schema database table"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a `Vector` of the available tables.","arguments": "- catalog: A pattern specifying the catalog or catalogs to get tables\n  for. If `catalog` is \"\", returns tables that do not have a catalog. If\n  `catalog` is Nothing, return tables for all catalogs.\n- schema_pattern: A pattern specifying the schemas to get tables for. If\n  `schema_pattern` is Nothing, return tables for all schemas.\n- table_name_pattern: A pattern specifying the tables to return. If\n  `table_name_pattern` is Nothing, return all tables.\n- table_types: A `Vector` of table type names to include.  If\n  `table_types` is Nothing, return all types of tables.","examples": "> Example\n  Get the available schemas.\n\n      connection = Generic_JDBC_Connection.connect \"jdbc:h2:~/my_database\"\n      connection.get_tables","remarks": "! Patterns\n\n  Patterns can be literal strings, or can include wildcard characters.\n  The wildcard characters are the same ones that are used in SQL `LIKE`\n  clauses.\n\n  Examples:\n  - \"A\": matches the table \"A\"\n  - \"A_\": matches the tables \"AB\" and \"AC\"\n  - \"A%\": matches the tables \"ABC\" and \"ADEF\""},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "get_table_info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"catalog": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "schema_pattern": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "\"\""}, "table_name_pattern": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "table_types": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["catalog schema database table"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a `Table` containing metadata about tables. The table contains\ncolumns for table catalog, schema, name, type and more. See\n`jdbc.sql.DatabaseMetaData` for a full list of columns.","arguments": "- catalog: A pattern specifying the catalog or catalogs to get tables\n  for. If `catalog` is \"\", returns tables that do not have a catalog. If\n  `catalog` is Nothing, return tables for all catalogs.\n- schema_pattern: A pattern specifying the schemas to get tables for. If\n  `schema_pattern` is Nothing, return tables for all schemas.\n- table_name_pattern: A pattern specifying the tables to return. If\n  `table_name_pattern` is Nothing, return all tables.\n- table_types: A `Vector` of table type names to include.  If\n  `table_types` is Nothing, return all types of tables.","examples": "> Example\n  Get the available schemas.\n\n      connection = Generic_JDBC_Connection.connect \"jdbc:h2:~/my_database\"\n      connection.get_table_info","remarks": "! Patterns\n\n  Patterns can be literal strings, or can include wildcard characters.\n  The wildcard characters are the same ones that are used in SQL `LIKE`\n  clauses.\n\n  Examples:\n  - \"A\": matches the table \"A\"\n  - \"A_\": matches the tables \"AB\" and \"AC\"\n  - \"A%\": matches the tables \"ABC\" and \"ADEF\""},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "with_metadata", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {"f": {"lazy": false, "type": "DatabaseMetaData -> Any", "checked": true}},"aliases": ["enquote escape"],"description": "Execute the function with the database metadata."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "quote_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"identifier": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Quote an identifier using the driver's quoting convention. Only performs\nthe quoting if the identifier requires it; otherwise, returns the\nidentifier unchanged.","arguments": "- identifier: The identifier to quote.","examples": "> Example\n  Quote an identifier.\n\n  connection.quote_identifier 'abc-def'\n  # => '\"abc-def\"'"},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "quote_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"literal": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Quote a literal using the driver's quoting convention. Only performs\nthe quoting if the literal requires it; otherwise, returns the\nliteral unchanged.","arguments": "- literal: The literal to quote.","examples": "> Example\n  Quote a literal.\n\n  connection.quote_identifier 'abc-def'\n  # => '\\'abc-def\\''"},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Details", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generic_JDBC_Details", "arguments": {"url": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Set up a connection to a JDBC database."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Details", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Details", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}},"aliases": [],"description": "Build the Connection resource.","arguments": "- options: Overrides for the connection properties."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "", "name": "rs_to_table_", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"rs": {"lazy": false}},"aliases": [],"description": "Convert a JDBC ResultSet to a Table using the fallback fetcher."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "", "name": "when_output_enabled_", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Run the action if Output is enabled, otherwise raise a dataflow error"},
{"module": "Standard.Database.Column_Constraint", "type": "Column_Constraint", "name": "Default_Expression", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Column_Constraint", "arguments": {"sql_expression": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Specifies a default value for the column.","arguments": "- `sql_expression`: The SQL expression to use as the default value. Note that this is a raw SQL expression, so if you want to set a default to a string, you must include the quotes. The quoting style may depend on the database. Never pass unsanitized data to this parameter.","remarks": "! SQL Injection\n\n  Since `sql_expression` is a raw SQL expression, note that malicious\n  data can cause execution of arbitrary SQL queries. Only use this\n  parameter with trusted data."},
{"module": "Standard.Database.Column_Constraint", "type": "Column_Constraint", "name": "Not_Null", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Constraint", "arguments": {},"aliases": [],"description": "DEPRECATED This will be replaced by extending the `Value_Type` with the concept of non-nullable types. TODO in #5872\n\nSpecifies that the column does not accept `NULL` values."},
{"module": "Standard.Database.Column_Description", "type": "Column_Description", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Description", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "constraints": {"lazy": false, "type": "Vector Column_Constraint", "checked": true, "default": "[]"}},"aliases": [],"description": "Describes a column structure for `Connection.create_table`.","arguments": "- name: The name of the column.\n- value_type: The type of the column.\n- constraints: Additional SQL constraints for the column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Column", "arguments": {"internal_name": {"lazy": false, "type": "Text", "checked": true}, "connection": {"lazy": false, "type": "Connection | Any", "checked": true}, "sql_type_reference": {"lazy": false, "type": "SQL_Type_Reference", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}},"aliases": [],"description": "Represents a single column backed by a database.\n\n\n\nThese columns may come from the Table or can be created by combining\nother columns with operators. Expressions created in this way may be\nmaterialized or used to apply filters, groupings etc. to tables from\nwhich they come. Combined expressions must come from the same context -\nthey must both have the same filtering, grouping etc. rules applied to be\nable to be combined.","arguments": "- internal_name: The name of the column.\n- connection: The connection with which the column is associated.\n- sql_type_reference: Lazily computed SQL type of the column.\n- expression: The expressions to apply to the column.\n- context: The SQl context in which the column exists."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "var_args_functions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Helper for the expression to tell it which functions needs a Vector."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "The name of the column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "dialect_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"icon": "metadata","description": "The name of the SQL Dialect used by the table."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "display", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"show_rows": {"lazy": false, "default": "10"}, "format_terminal": {"lazy": false, "default": "False"}},"aliases": [],"description": "Returns a text containing an ASCII-art table displaying this data.","arguments": "- show_rows: the number of initial rows that should be displayed.\n  - format_terminal: whether ANSI-terminal formatting should be used"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "print", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"show_rows": {"lazy": false, "default": "10"}},"aliases": [],"description": "Prints an ASCII-art table with this data to the standard output.","arguments": "- show_rows: the number of initial rows that should be displayed."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this column to JS_Object representation."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "to_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {},"aliases": [],"icon": "data_input","description": "Converts this column into a single-column table."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": ["column type", "field info", "metadata"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a Table describing this column's contents and type.\n\nThe table behaves like `DB_Table.column_info."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load"],"group": "Standard.Base.Input","icon": "data_input","description": "Returns a materialized column containing rows of this column.","arguments": "- max_rows: specifies the maximum number of rows to read."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Any", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Returns a vector containing all the elements in this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "(Any | Nothing) ! Index_Out_Of_Bounds", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the value contained in this column at the given index.\n\n\n\nIf the value is an NA then this method returns nothing. If the index is\nnot an index in the column it returns an `Index_Out_Of_Bounds`.","arguments": "- index: The index in the column from which to get the value.","examples": "> Example\n  Get the first element from a column.\n\n      import Standard.Examples\n\n      example_at = Examples.integer_column.at 0"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any | Nothing", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "default": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the value contained in this column at the given index.","arguments": "- index: The index in the column from which to get the value.\n- default: The value if the index is out of range.","examples": "> Example\n  Get the first element from a column.\n\n      import Standard.Examples\n\n      example_at = Examples.integer_column.get 0 -1"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the first element in the column, if it exists.\n\nIf the column is empty, this method will return a dataflow error\ncontaining an `Index_Out_Of_Bounds`.","examples": "> Example\n  Get the first element of a column.\n\n      import Standard.Examples\n\n      example_first = Examples.integer_column.first"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "value_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the `Value_Type` associated with that column.\n\nThe value type determines what type of values the column is storing and\nwhat operations are permitted."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "inferred_precise_value_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a possibly more precise `Value_Type` based on the data in the\ncolumn.\n\nMost columns will return their type without changes. A mixed column may\nreturn a more precise type if a common type can be found for all of its\nvalues."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "should_be_selected_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Internal hook that says if a given column should be selected by a\nspecific type in a `By_Type` selection."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "to_sql", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Statement", "arguments": {},"aliases": [],"icon": "convert","description": "Returns an SQL statement that will be used for materializing this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "let", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Column", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "callback": {"lazy": false, "type": "DB_Column -> DB_Column", "checked": true}},"aliases": [],"description": "Column-level manual CTE factoring.\n\n\n\nCalling `let` on a column wraps it as a CTE (common table\nexpression), using a SQL `WITH ... AS` clause. More specifically, it\ntakes a callback that receives a \"reference\" to the CTE; the callback\nthen returns an arbitrary column that uses the reference. The `let`\ncall itself returns the full `WITH` clause, containing both the CTE and\nthe callback return value.\n\nUsing `let` can reduce the number of duplicates of a column expression\nin the final generated SQL, replacing them with references to a single\nCTE bound by the `WITH` clause.\n\n`let` acts like a kind of \"let binding\". It works by giving a lexically\nscoped name to the query generated by `self`, and then generating the\nquery returned by the callback inside of this scope. See the examples\nbelow to see how the generated SQL is structured.\n\nInternally, `let` generates a unique name for the CTE, and creates a\n\"reference\" column which refers to that unique name. This\n\"reference\" column is passed to the callback, which can compute values\nbased on the reference and any other values. Finally, the return value of\nthe callback is wrapped in the binding `WITH ... AS` clause, which is\nreturned from the original call to `let`.\n\n`let` is only available in database backends that support `WITH` clauses\ninside expressions. For database backends that only support a single\n`WITH` clause at the top level, `let` returns `self` unchanged.\n\nSemantically, the following expressions will always have the same value:\n\n    1. f column\n    2. column.let \"name\" f","arguments": "- name: A prefix to use for the generated let binder.\n- callback: A function that receives the let reference and returns a\n  column value that refers to it.","examples": "> Example\n  Remove duplicates of a large column expression from a query.\n\n     ## Without CTEs\n\n      column = table_builder [['x', [1.3, 4.7, -1.3, -4.7]]] . at \"x\"\n      rounded = column.round\n      large = rounded * rounded\n      large.to_sql\n      ## =>\n\n         -- Two copies of the complex rounding query\n         SELECT ... [complex rounding query] * [complex rounding query]\n             ... FROM ...\n\n     ## With CTEs\n\n      not_so_large = column.round.let \"rounded\" rounded->\n         rounded * rounded\n      not_so_large.to_sql\n      ## =>\n\n         -- One copy of the complex rounding query\n         SELECT ... (WITH temp_table as ([complex rounding query])\n                          temp_table.x * temp_table.x)\n             ... FROM ...\n\n\n> Example\n  Use multiple CTEs in a query.\n\n  (column_a * column_b).let \"product_a_b\" product_a_b->\n     (product_a_b * 10).let \"plus_10\" times_ten->\n         times_ten + product_a_b + 100\n\n\n> Example\n  Give names to the CTE table names.\n\n  (column_a * column_b).let \"product_a_b\" product_a_b->\n     (product_a_b * 10).let \"times_ten\" times_ten->\n         times_ten + product_a_b + 100","remarks": "? When to use `let`\n\n  `let` can make queries shorter and/or simpler by eliminating\n  duplicates. However, the `WITH` clause itself, including the bound CTE\n  table name, also takes up space, so if the `self` argument to `let`\n  isn't very large, `let` can actually make the query longer.\n\n  For this reason, it makes sense to use let only on expressions that at\n  the same time: are expected to be relatively large (results of complex\n  transformations already) and are going to be repeated multiple times in\n  the query."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "make_op", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false}, "operands": {"lazy": false}, "new_name": {"lazy": false}, "metadata": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Sets up an operation of arbitrary arity.","arguments": "- op_kind: The kind of the operation\n- operands: A vector of additional operation arguments (the column itself\n  is always passed as the first argument).\n- new_name: The name of the resulting column.\n- metadata: Optional metadata for the `SQL_Expression.Operation`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "make_binary_op", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false}, "operand": {"lazy": false}, "new_name": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Creates a binary operation with given kind and operand.","arguments": "- op_kind: The kind of binary operator.\n- operand: The right operand to the binary operator.\n- new_name: The name of the resulting column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "make_unary_op", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false}, "new_name": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Helper for implementing unary operators.","arguments": "- op_kind: The kind of the unary operator.\n- new_name: The name of the resulting column. If nothing, will create a\n  name based on the operator."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the length of this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "count_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "transform4","description": "Returns the number of missing items in this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "transform4","description": "Returns the number of non-null items in this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "==", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["equals"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise equality comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.","arguments": "- other: The value to compare `self` against. If `other` is a column, the\n  comparison is performed pairwise between corresponding elements of\n  `self` and `other`.","examples": "> Example\n  Compare two columns for pairwise equality.\n\n      import Standard.Examples\n\n      example_eq = Examples.integer_column == Examples.decimal_column\n\n\n> Example\n  Compare a column with a number.\n\n      import Standard.Examples\n\n      example_eq = Examples.integer_column == 1","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "equals_ignore_case", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Element-wise case-insensitive text equality comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.","arguments": "- other: The value to compare `self` against. If `other` is a column, the\n  comparison is performed pairwise between corresponding elements of\n  `self` and `other`.\n- locale: The locale to use for the case-insensitive comparison."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "!=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["not equals"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise non-equality comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.","arguments": "- other: The value to compare `self` against. If `other` is a column, the\n  comparison is performed pairwise between corresponding elements of\n  `self` and `other`.","examples": "> Example\n  Compare two columns for pairwise inequality.\n\n      import Standard.Examples\n\n      example_neq = Examples.integer_column != Examples.decimal_column\n\n\n> Example\n  Compare a column with a number.\n\n      import Standard.Examples\n\n      example_neq = Examples.integer_column != 1","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["greater than or equal"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.  If `other` is a column, the comparison is performed pairwise\nbetween corresponding elements of `self` and `other`.","arguments": "- other: The other column to compare pairwise with."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["less than or equal"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.  If `other` is a column, the comparison is performed pairwise\nbetween corresponding elements of `self` and `other`.","arguments": "- other: The other column to compare pairwise with."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["greater than"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.  If `other` is a column, the comparison is performed pairwise\nbetween corresponding elements of `self` and `other`.","arguments": "- other: The other column to compare pairwise with."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["less than"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.  If `other` is a column, the comparison is performed pairwise\nbetween corresponding elements of `self` and `other`.","arguments": "- other: The other column to compare pairwise with."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "between", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"lower": {"lazy": false, "type": "DB_Column | Any", "checked": true}, "upper": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Element-wise inclusive bounds check.\n\n\n\nReturns a column with boolean values indicating whether values of this\ncolumn fit between the lower and upper bounds (both ends inclusive).","arguments": "- lower: The lower bound to compare elements of `self` against. If\n  `lower` is a column, the comparison is performed pairwise between\n  corresponding elements of `self` and `lower`.\n- upper: The upper bound to compare elements of `self` against. If\n  `upper` is a column, the comparison is performed pairwise between\n  corresponding elements of `self` and `upper`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["add", "concatenate", "plus"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise addition. Works on numeric types or text.\n\n\n\nReturns a column containing the result of adding `other` to each element\nof `self`.  If `other` is a column, the operation is performed pairwise\nbetween corresponding elements of `self` and `other`.","arguments": "- other: The other column to add to this column.","remarks": "? Arithmetic Overflow\n\n  For integer columns, the operation may yield results that will not fit\n  into the range supported by the column. In such case, the in-memory\n  backend will replace such results with `Nothing` and report a\n  `Arithmetic_Overflow` warning. The behaviour in Database backends is\n  not specified and will depend on the particular database - it may\n  cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["minus", "subtract", "time difference"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise subtraction. Allows to subtract numeric types or compute a\ndifference between two date/time values.\n\n\n\nReturns a column containing the result of subtracting `other` from each\nelement of `self`.  If `other` is a column, the operation is performed\npairwise between corresponding elements of `self` and `other`.","arguments": "- other: The other column to subtract from this column.","remarks": "? Arithmetic Overflow\n\n  For integer columns, the operation may yield results that will not fit\n  into the range supported by the column. In such case, the in-memory\n  backend will replace such results with `Nothing` and report a\n  `Arithmetic_Overflow` warning. The behaviour in Database backends is\n  not specified and will depend on the particular database - it may\n  cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["multiply", "product", "times"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise multiplication.\n\n\n\nReturns a column containing the result of multiplying `other` by each\nelement of `self`.  If `other` is a column, the operation is performed\npairwise between corresponding elements of `self` and `other`.","arguments": "- other: The other column to multiply `self` by.","remarks": "? Arithmetic Overflow\n\n  For integer columns, the operation may yield results that will not fit\n  into the range supported by the column. In such case, the in-memory\n  backend will replace such results with `Nothing` and report a\n  `Arithmetic_Overflow` warning. The behaviour in Database backends is\n  not specified and will depend on the particular database - it may\n  cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["divide"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise division.\n\n\n\nReturns a column containing the result of dividing each element of `self`\nby `other`.","arguments": "- other: The value to divide `self` by. If `other` is a column, the\n  division is performed pairwise between corresponding elements of `self`\n  and `other`.","examples": "> Example\n  Divide the elements of one column by the elements of another.\n\n      import Standard.Examples\n\n      example_div = Examples.decimal_column / Examples.integer_column\n\n\n> Example\n  Multiply each value in a column by a single value.\n\n      import Standard.Examples\n\n      example_div = Examples.integer_column / 10","errors": "","remarks": "? Arithmetic Overflow\n\n  For integer columns, the operation may yield results that will not fit\n  into the range supported by the column. In such case, the in-memory\n  backend will replace such results with `Nothing` and report a\n  `Arithmetic_Overflow` warning. The behaviour in Database backends is\n  not specified and will depend on the particular database - it may\n  cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "%", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["modulo", "modulus"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise modulus.\n\n\n\nReturns a column with results of modulus this column's elements against\n`other`.","arguments": "- other: The value to modulo `self` against. If `other` is a column, the\n  modulus is performed pairwise between corresponding elements of `self`\n  and `other`.","examples": "> Example\n  Modulus of two columns against each other.\n\n      import Standard.Examples\n\n      example_mod = Examples.integer_column % Examples.decimal_column\n\n\n> Example\n  Modulus of a column with a number.\n\n      import Standard.Examples\n\n      example_mod = Examples.integer_column % 3","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["power"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise raising to the power.\n\n\n\nReturns a column containing the result of raising each element of `self`\nby `other`.","arguments": "- other: The exponent to raise `self` by. If `other` is a column, the\n  power operation is performed pairwise between corresponding elements\n  of `self` and `other`.","examples": "> Example\n  Squares the elements of one column.\n\n      import Standard.Examples\n\n      example_div = Examples.decimal_column ^ 2\n\n\n> Example\n  Raises each value in a column by the value in another column.\n\n      import Standard.Examples\n\n      example_div = Examples.decimal_column ^ Examples.integer_column","remarks": "? Arithmetic Overflow\n\n  For integer columns, the operation may yield results that will not fit\n  into the range supported by the column. In such case, the in-memory\n  backend will replace such results with `Nothing` and report a\n  `Arithmetic_Overflow` warning. The behaviour in Database backends is\n  not specified and will depend on the particular database - it may\n  cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "&&", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["and"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise boolean conjunction.\n\n\n\nReturns a column containing the result of performing the boolean `and` on\n`other` and each element of `self`.  If `other` is a column, the\noperation is performed pairwise between corresponding elements of `self`\nand `other`.","arguments": "- other: The other column to compute the conjunction with."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "||", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["or"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise boolean disjunction.\n\n\n\nReturns a column containing the result of performing the boolean `or` on\n`other` and each element of `self`.  If `other` is a column, the\noperation is performed pairwise between corresponding elements of `self`\nand `other`.","arguments": "- other: The other column to compute the disjunction with."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "not", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Boolean negation of each element in this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "iif", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"when_true": {"lazy": false, "type": "Any", "checked": true}, "when_false": {"lazy": false, "type": "Any", "checked": true}},"aliases": ["if"],"group": "Standard.Base.Logical","icon": "preparation","description": "Replaces `True` values with `when_true` and `False` with `when_false`.\nOnly meant for use with boolean columns.","arguments": "- when_true: value or column when `self` is `True`.\n- when_false: value or column when `self` is `False`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "const", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Creates a column from a single constant value. The value must be of a\ntype supported by the database back-end.\n\nThis method is not static; it must be called on an existing column. That\nexisting column is only used for its internal state; the contents of the\ncolumn are not used.","arguments": "- value: the constant value to use for the entire column. The value must\n  be of a type supported by the database back-end.","examples": "> Example\n  Create a column of the value 42\n\n  column.const 42"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "round", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Illegal_Argument | Invalid_Value_Type", "arguments": {"decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Round to a specified number of decimal places.\n\n`round` is only valid for `Value_Type.Decimal`, `Value_Type.Float`, and\n`Value_Type.Integer` columns.\n\nBy default, rounding uses \"symmetric round-half-up\", also known as\n\"round towards 0.\" If use_bankers=True, then it uses \"round-half-even\",\nalso known as \"banker's rounding\".\n\nThe return type depends on the backend.","arguments": "- decimal_places: The number of decimal places to round to. Can be\n  negative, which results in rounding to positive integer powers of 10.\n  Must be between -15 and 15 (inclusive).\n- use_bankers: Rounds mid-point to nearest even number.","examples": "> Example\n  Round a column to two decimal places.\n\n      import Standard.Examples\n\n      example_round = Examples.decimal_column.round 2","errors": "","remarks": "! NaN/Inf\n  If a `NaN` or `Inf` value is passed to `round`, it immediately returns\n  the same value.\n\n\n? Negative decimal place counts\n  Rounding to `n` digits can be thought of as \"rounding to the nearest\n  multiple of 10^(-n)\". For negative decimal counts, this results in\n  rounding to the nearest positive integer power of 10."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "should_use_builtin_round", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": [],"description": "Determine whether to use built-in rounding. We use built-in rounding if:\n- It's not banker's rounding, and\n- If decimal_places is negative, the builtin `ROUND` supports that, and\n- We are not passing a floating point value to round with a non-zero decimal_places param (prohibited by postgres)\n  (Note that Postgres is fine with a `numeric` value here, just not `double precision`.)"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "round_builtin", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": [],"description": "Round a float-like column using the backend's builtin ROUND function."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "round_float", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": [],"description": "Round a float-like column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "round_decimal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": [],"description": "Round a float-like column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "round_integer", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": [],"description": "Round an integer column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "truncate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": ["int"],"group": "Standard.Base.Rounding","icon": "math","description": "Truncate the floating-point values to an integer by dropping the\nfractional part. This is equivalent to \"round-toward-zero\".","examples": "> Example\n  Truncate a column of floating-point values.\n\n      import Standard.Examples\n\n      example_truncate = Examples.decimal_column.truncate","remarks": "! NaN/Inf\n  If a `NaN` or `Inf` value is passed to `truncate`, it immediately returns\n  the same value."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "ceil", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Rounding","icon": "math","description": "Takes the ceiling of floating-point values, returning integer values.","examples": "> Example\n  Take the ceiling of a column of floating-point values.\n\n      import Standard.Examples\n\n      example_ceil = Examples.decimal_column.ceil","remarks": "! NaN/Inf\n  If a `NaN` or `Inf` value is passed to `ceil`, it immediately returns\n  the same value."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "floor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Rounding","icon": "math","description": "Takes the floor of floating-point values, returning integer values.","examples": "> Example\n  Take the floor of a column of floating-point values.\n\n      import Standard.Examples\n\n      example_floor = Examples.decimal_column.floor","remarks": "! NaN/Inf\n  If a `NaN` or `Inf` value is passed to `floor`, it immediately returns\n  the same value."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "decimal_div", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"description": "`/` for decimals."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "decimal_mod", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"description": "`mod` for decimals."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "coalesce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Returns a column of first non-`Nothing` value on each row of `self` and\n`values` list.","arguments": "- values: list of columns or values to coalesce with `self`.","examples": "> Example\n  Get the first non-`Nothing` value in two columns.\n\n      import Standard.Examples\n\n      example_coalesce = Examples.decimal_column.coalesce Examples.integer_column"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "min", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Math","icon": "transform4","description": "Returns a column of minimum on each row of `self` and `values`.","arguments": "- values: list of columns or values to minimum with `self`, or a single\n  column or value.","examples": "> Example\n  Get the minimum value in two columns.\n\n      import Standard.Examples\n\n      example_min = Examples.decimal_column.min Examples.integer_column"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "max", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Math","icon": "transform4","description": "Returns a column of maximum on each row of `self` and `values`.","arguments": "- values: list of columns or values to maximum with `self`, or a single\n  column or value.","examples": "> Example\n  Get the maximum value in two columns.\n\n      import Standard.Examples\n\n      example_max = Examples.decimal_column.max Examples.integer_column"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Returns a column of booleans, with `True` items at the positions where\nthis column contains a `Nothing`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_nan", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where\nthis column contains a NaN. This is only applicable to double columns."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_infinite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where\nthis column contains a +Inf/-Inf. This is only applicable to double\ncolumns."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_finite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where\nthis column contains a non-infinite, non-NaN floating point value. This\nis only applicable to double columns."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a column of booleans, with `True` items at the positions where\nthis column contains an empty string or `Nothing`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_present", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Returns a column of booleans, with `True` items at the positions where\nthis column does not contain a `Nothing`.","examples": "> Example\n  Check a column for present values.\n\n      import Standard.Examples\n\n      example_is_present = Examples.decimal_column.is_present"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_blank", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"treat_nans_as_blank": {"lazy": false, "default": "False"}},"aliases": [],"description": "Returns a column of booleans with `True` at the positions where this\ncolumn contains a blank value.","arguments": "- treat_nans_as_blank: If `True`, then `Number.nan` is considered as\n  blank.","remarks": "? Blank values\n  Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "fill_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"default": {"lazy": false, "type": "DB_Column | Previous_Value | Any", "checked": true}},"aliases": ["fill missing", "if_nothing"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column where missing values have been replaced with the\nprovided default.","arguments": "- default: The value to replace missing values with. If this argument\n  is a column, the value from `default` at the corresponding position\n  will be used. If this argument is `Previous_Value`, the missing values\n  will be replaced with the previous value in the column. Note that the\n  first rows may stay `Nothing` if they do not have a previous value to\n  use.","examples": "> Example\n  Fill missing values in a column with the value 20.5.\n\n      import Standard.Examples\n\n      example_fill_nothing = Examples.decimal_column.fill_nothing 20.5"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "fill_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"default": {"lazy": false, "type": "DB_Column | Previous_Value | Any", "checked": true}},"aliases": ["fill empty", "if_empty"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column where empty Text values have been replaced with the\nprovided default.","arguments": "- default: The value to replace empty values with. If this argument\n  is a column, the value from `default` at the corresponding position\n  will be used. If this argument is `Previous_Value`, the empty values\n  will be replaced with the previous value in the column. Note that the\n  first rows may stay empty if they do not have a previous value to use.","examples": "> Example\n  Fill empty values in a column with the value \"hello\".\n\n      import Standard.Examples\n\n      example_fill_empty = Examples.text_column_1.fill_empty \"hello\""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "offset", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"n": {"lazy": false, "default": "-1:Integer"}, "fill_with": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}},"aliases": ["displace", "lag", "lead", "shift", "slide"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column offset by n rows, where missing values have been replaced with the provided fill_with strategy.","arguments": "- n: The number of rows to offset the new column by. Negative n slides the values down in the column, adding records at the start. \n     Positive n slides the values up in the column, adding records at the end. Defaults to -1.\n- fill_with: The value to replace missing values with. Defaults to adding Nothing Values.\n- - ..Nothing - Add Nothing values in the spaces created by sliding the existing values.\n- - ..Closest_Value - If n is negative the first value gets used, if n is negative the last value gets used.\n- - ..Wrap_Around - In this mode values that slide off the top or bottom reappear at the other end. So no values get lost they are just rotated."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "rename", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Illegal_Argument", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Standard.Base.Metadata","icon": "text_input","description": "Returns a new column, containing the same elements as `self`, but with\nthe given name.","arguments": "- name: The new name for the column.","examples": "> Example\n  Rename a column.\n\n      import Standard.Examples\n\n      example_rename = Examples.integer_column.rename \"My Numbers\""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"order": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}},"aliases": ["order_by"],"group": "Standard.Base.Selections","icon": "order","description": "Sorts the column according to the specified rules.","arguments": "- order: Specifies the default sort order for this operation.\n  - missing_last: Specifies the default placement of missing values when\n    compared to non-missing ones. Note that this argument is independent\n    from `order`, i.e. missing values will always be sorted according to\n    this rule, ignoring the ascending / descending setting.","examples": "> Example\n  Sorting `column` in ascending order.\n      column.sort\n\n\n> Example\n  Sorting `column` in descending order.\n      column.sort Sort_Direction.Descending"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Standard.Base.Selections","icon": "parse3","description": "Creates a new Column with the specified range of rows from the input\nColumn.","arguments": "- range: The selection of rows from the table to return."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Standard.Base.Selections","icon": "parse3","description": "Creates a new column from the input with the specified range of rows\nremoved.","arguments": "- range: The selection of rows from the table to remove."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "starts_with", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Checks for each element of the column if it starts with `other`.\n\n\n\nIf `other` is a column, the operation is performed pairwise between\ncorresponding elements of `self` and `other`.  If the argument is a\nmissing value (a Nothing or a column with missing values), the behaviour\non these missing values is vendor specific.","arguments": "- other: A column or text to check for each item in `self`.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "ends_with", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Checks for each element of the column if it ends with `other`.\n\n\n\nIf `other` is a column, the operation is performed pairwise between\ncorresponding elements of `self` and `other`.  If the argument is a\nmissing value (a Nothing or a column with missing values), the behaviour\non these missing values is vendor specific.","arguments": "- other: A column ot text to check for each item in `self`.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "text_length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Calculates the text length for each element of the column.\n\nIn the Database backends, the default text length method of the\nparticular database is used.\n\nIn the in-memory backend, this will give you the grapheme length of the string.","examples": "> Example\n      import Standard.Examples\n\n      example_text_length =\n         Examples.text_column_1.text_length"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "text_left", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"n": {"lazy": false, "type": "DB_Column|Integer", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Gets the left n characters for each element of the column.\n\nIn the Database backends, the default text left method of the\nparticular database is used.\n\nIn the in-memory backend, this will give you the left n graphemes of the string.","examples": "> Example\n      import Standard.Examples\n\n      example_text_length =\n         Examples.text_column_1.text_left 5"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "text_right", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"n": {"lazy": false, "type": "DB_Column|Integer", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Gets the right n characters for each element of the column.\n\nIn the Database backends, the default text right method of the\nparticular database is used.\n\nIn the in-memory backend, this will give you the right n graphemes of the string.","examples": "> Example\n      import Standard.Examples\n\n      example_text_length =\n         Examples.text_column_1.text_right 5"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it contains `other`.\n\n\n\nIf `other` is a column, the operation is performed pairwise between\ncorresponding elements of `self` and `other`.  If the argument is a\nmissing value (a Nothing or a column with missing values), the behaviour\non these missing values is vendor specific.","arguments": "- other: A column ot text to check for each item in `self`.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "like", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"pattern": {"lazy": false, "type": "DB_Column | Text | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it matches an SQL-like pattern.","arguments": "- pattern: The pattern to match `self` against. If it is a column, the\n  operation is performed pairwise between corresponding elements of\n  `self` and that column. The pattern is an SQL-like pattern, where\n  `%` matches any sequence of characters and `_` matches any single\n  character.","examples": "> Example\n  Check if elements of a column start with 'F' and end with a dot.\n\n      import Standard.Examples\n\n      example_contains = Examples.text_column_1.like \"F%.\""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "regex_match", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"pattern": {"lazy": false, "type": "Column | Text | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it matches a regular expression.","arguments": "- pattern: The pattern to match `self` against. If it is a column, the\n  operation is performed pairwise between corresponding elements of\n  `self` and that column.","examples": "> Example\n  Check if elements of a column start with 'A' and end with a 'M'.\n\n      import Standard.Examples\n\n      example_contains = Examples.text_column_1.regex_match (regex \"A.*M\")"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "trim", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "type": "DB_Column | Text", "checked": true, "default": "\u0027\u0027"}},"aliases": [],"group": "Standard.Base.Text","icon": "text","description": "This function removes the specified characters, by default any\nwhitespace, from the start, the end, or both ends of the input.","arguments": "- where: The location of where to trim the input. By default, this\n  function trims both ends of the input.\n- what: A `Text` (or text `DB_Column`) containing characters that should be\n  removed. By default, spaces, tabs, returns and new lines are removed."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "text_replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Unsupported_Database_Operation", "arguments": {"term": {"lazy": false, "type": "Text | Regex | DB_Column", "checked": true, "default": "\"\""}, "new_text": {"lazy": false, "type": "Text | DB_Column", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["regex", "substitute"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces the first, or all occurrences of `term` with `new_text` in each\nrow. If `term` is empty, the function returns the table unchanged.\n\nThis method follows the exact replacement semantics of the\n`Text.replace` method.\n\nIf regex is used the replacement string can contain references to groups\nmatched. The following syntaxes are supported:\n    $0: the entire match string\n    $&: the entire match string\n    $n: the nth group\n    $&lt;foo&gt;: Named group `foo`\n\nThe exact syntax of the regular expression is dependent on the database\nengine.","arguments": "- term: The term to find.\n- replacement: The text to replace matches with.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- only_first: If True, only replace the first match.","examples": "> Example\n  Replace dashes with underscores.\n\n      column.text_replace \"-\" \"_\"\n\n\n> Example\n  Remove leading and trailing spaces from cells.\n\n      column.text_replace \"^\\s*(.*?)\\s*$\".to_regex \"$1\"\n\n\n> Example\n  Replace texts in quotes with parentheses.\n\n      column.text_replace '\"(.*?)\"'.to_regex '($1)'","remarks": "! Backend Support\n\n  Each database backend supports different combinations of options:\n\n  Text:\n  +----------------+------------+----------+--------+\n  | case_sensitive | only_first | postgres | sqlite |\n  +----------------+------------+----------+--------+\n  |       t        |      f     |     ✓    |    ✓   |\n  |       t        |      t     |     ✓    |    ✓   |\n  |       f        |      f     |     ✓    |    ✗   |\n  |       f        |      t     |     ✓    |    ✓   |\n  +----------------+------------+----------+--------+\n\n  Regex:\n  +----------------+------------+----------+--------+\n  | case_sensitive | only_first | postgres | sqlite |\n  +----------------+------------+----------+--------+\n  |       t        |      f     |     ✓    |    ✗   |\n  |       t        |      t     |     ✓    |    ✗   |\n  |       f        |      f     |     ✓    |    ✗   |\n  |       f        |      t     |     ✓    |    ✗   |\n  +----------------+------------+----------+--------+\n\n  Text Column:\n  +----------------+------------+----------+--------+\n  | case_sensitive | only_first | postgres | sqlite |\n  +----------------+------------+----------+--------+\n  |       t        |      f     |     ✓    |    ✓   |\n  |       t        |      t     |     ✗    |    ✓   |\n  |       f        |      f     |     ✗    |    ✗   |\n  |       f        |      t     |     ✗    |    ✓   |\n  +----------------+------------+----------+--------+"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "text_cleanse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Unsupported_Database_Operation", "arguments": {"remove": {"lazy": false, "type": "Vector Named_Pattern", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "column_add","description": "Applies the specified cleansings to the text in each row.","arguments": "- remove: A vector of the text cleanings to remove from the text. The text cleansings are \n   applied in the order they are provided. The same text cleansing can be used multiple\n   times. The text cleansings are:\n     - ..Leading_Whitespace: Removes all whitspace from the start of the string.\n     - ..Trailing_Whitespace: Removes all whitspace from the end of the string.\n     - ..Duplicate_Whitespace: Removes all duplicate whitspace from the string replacing it with the first whitespace character of the duplicated block.\n     - ..All_Whitespace: Removes all whitspace from the string.\n     - ..Newlines: Removes all newline characters from the string. Line Feed and Carriage Return characters are considered newlines.\n     - ..Leading_Numbers: Removes all numbers from the start of the string.\n     - ..Trailing_Numbers: Removes all numbers from the end of the string.\n     - ..Non_ASCII: Removes all non-ascii characters from the string.\n     - ..Tabs: Removes all tab characters from the string.\n     - ..Letters: Removes all letters from the string.\n     - ..Numbers: Removes all numbers characters from the string.\n     - ..Punctuation: Removes all characters in the set ,.!?():;'\" from the string.\n     - ..Symbols: Removes anything that isn't letters, numbers or whitespace from the string.","examples": "> Example\n  Remove leading and trailing spaces from cells.\n\n      column.text_cleanse [..Leading_Whitespace, ..Trailing_Whitespace]"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the year as a number from the date stored in the column.\n\nApplies only to columns that hold the `Date` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the month as a number (1-12) from the date stored in the column.\n\nApplies only to columns that hold the `Date` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "day", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the day of the month as a number (1-31) from the date stored in the\ncolumn.\n\nApplies only to columns that hold the `Date` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "day_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "date_and_time","description": "Gets the day of the year as a number (1 - 366) from the date stored in\nthe column.\n\nApplies only to columns that hold the `Date` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "day_of_week", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": ["weekday"],"group": "Standard.Base.DateTime","icon": "date_and_time","description": "Gets the weekday as a number (1 - 7) from the date stored in the column.\nMonday is 1, Tuesday is 2, ..., Sunday is 7.\n\nApplies only to columns that hold the `Date` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "hour", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the hour as a number (0-23) from the time stored in the column.\n\nApplies only to columns that hold the `Time_Of_Day` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "minute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the minute as a number (0-59) from the time stored in the column.\n\nApplies only to columns that hold the `Time_Of_Day` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the second as an integer (0-60) from the time stored in the column.\n\nApplies only to columns that hold the `Time_Of_Day` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "date_part", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the date part of the date/time value.\n\nReturns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "date_diff", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"end": {"lazy": false, "type": "DB_Column | Date | Date_Time | Time_Of_Day", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Computes a time difference between the two dates.\n\nIt returns a column of integers expressing how many periods fit between\nthe two dates/times.\n\nThe difference will be positive if `end` is greater than `self`.","arguments": "- end: A date/time column or a date/time value to compute the difference\n  from. It should have the same type as the current column, i.e. a\n  `Date_Time` column cannot be compared to a `Date` - to do so you first\n  need to `cast`.\n- period: The period to compute the difference in. For `Date` columns it\n  should be a `Date_Period` and for `Time` columns it should be a\n  `Time_Period`. For `Date_Time` columns it can be either.","remarks": "? Time Zone handling\n\n  Some backends may not preserve the timezone data in a `Date_Time`\n  (preserving the represented time instant). This may lead to slight\n  differences in time calculations between backends, especially around\n  unusual events like DST."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "date_add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"amount": {"lazy": false, "type": "DB_Column | Integer", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true, "default": "default_date_period self"}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Shifts the date/time by a specified period, returning a new date/time\ncolumn of the same type.","arguments": "- amount: An integer or integer column specifying by how many periods to\n  shift each date.\n- period: The period by which to shift. For `Date` columns it should be a\n  `Date_Period` and for `Time` columns it should be a `Time_Period`. For\n  `Date_Time` columns it can be either. It defaults to `Day` where\n  possible and `Hour` for `Time` columns.","remarks": "? Time Zone handling\n\n  Some backends may not preserve the timezone data in a `Date_Time`\n  (preserving the represented time instant). This may lead to slight\n  differences in time calculations between backends, especially around\n  unusual events like DST."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_in", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"vector": {"lazy": false, "type": "DB_Column | Vector | Array", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it is contained within the\nprovided vector or column.","arguments": "- vector: A vector of elements or another column. The resulting column\n  will contain true at the positions where the corresponding element of\n  `self` is contained in `vector`.","examples": "> Example\n  Check if elements of a column are contained in a provided vector.\n\n      import Standard.Examples\n\n      example_contains = Examples.text_column_1.is_in [1, 2, 5]"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "parse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"type": {"lazy": false, "type": "Value_Type | Auto", "checked": true}, "format": {"lazy": false, "type": "Text | Data_Formatter", "checked": true, "default": "\"\""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Parses a text column into values.\n\nIn the Database backends, the default formatting settings of the\nparticular database are used.\n\nIn the in-memory backend, the default parser options only parse values\nwhere the process is reversible (e.g., 0123 would not be converted to an\ninteger as there is a leading 0). However, settings in the\n`Data_Formatter` can control this.","arguments": "- type: The type to parse the column to. Defaults to `Auto` meaning that\n  the type will be inferred from the data. In the Database backends,\n  `Auto` is not supported, so a specific type must be selected.\n- format: The formatting settings to use when parsing the column.\n  For `Date`, `Time_Of_Day` and `Date_Time`, a Java date time style\n  can be used. For `Boolean`, it should be two values that represent true\n  and false, separated by a `|`. Alternatively, a `Data_Formatter` can be\n  passed to provide complete customisation of the formatting. If\n  `\"\"` is provided, the default formatting settings of the backend\n  will be used. `\"\"` is currently the only setting accepted by the\n  Database backends.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default.","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Illegal_Argument", "arguments": {"format": {"lazy": false, "type": "Text | Date_Time_Formatter | DB_Column", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Formatting values is not supported in database columns."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Illegal_Argument | Inexact_Type_Coercion | Conversion_Failure", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Cast the column to a specific type.\n\n\n\nIn the Database backend, this will boil down to a CAST operation.\nIn the in-memory backend, a conversion will be performed according to\nthe following rules:\n- Anything can be cast into the `Mixed` type.\n- Converting to a `Char` type, the elements of the column will be\n  converted to text. If it is fixed length, the texts will be trimmed or\n  padded on the right with the space character to match the desired\n  length.\n- Conversion between numeric types will replace values exceeding the\n  range of the target type with `Nothing`.\n- Converting decimal numbers into integers will truncate or round them,\n  depending on the backend. If more control is needed, use the various\n  rounding functions (such as `round` or `floor`).\n- Booleans may also be converted to numbers, with `True` being converted\n  to `1` and `False` to `0`. The reverse is not supported - use `iif`\n  instead.\n- A `Date_Time` may be converted into a `Date` or `Time` type - the\n  resulting value will be truncated to the desired type.\n- If a `Date` is to be converted to `Date_Time`, it will be set at\n  midnight of the default system timezone.\n- For a `Mixed` column being converted into a specific type, each row is\n  converted individually.\n\n If the target type cannot fit some of the values (for example due to too\n small range), a `Conversion_Failure` may be reported according to the\n `on_problems` rules. The Database backends may fail with `SQL_Error`\n instead.","arguments": "- value_type: The `Value_Type` to cast the column to.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","remarks": "? Inexact Target Type\n\n  If the backend does not support the requested target type, the closest\n  supported type is chosen and a `Inexact_Type_Coercion` problem is\n  reported.\n\n\n! Casting Text values\n\n  The `parse` method should be used to convert text values into other\n  types. Due to this, a Mixed column containing values `[2, \"3\"]` will\n  actually be converted into `[2, Nothing]` when casting to Integer type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "auto_cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"shrink_types": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["auto_value_type"],"group": "Standard.Base.Conversions","icon": "convert","description": "Change the value type of the column to a more specific one, based on its\ncontents.\n\nThis operation is currently not available in the Database backend."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "internal_do_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Shares the core CAST logic between `cast` and `parse`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {"function": {"lazy": false, "type": "Any -> Any", "checked": true}, "skip_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_value_type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}},"aliases": ["transform column"],"icon": "column_add","description": "Applies `function` to each item in this column and returns the column\nof results.","arguments": "- function: The function to apply to each element of `self` column.\n- skip_nothing: If `True`, `Nothing` values will be skipped. Otherwise,\n  `Nothing` values will be passed to the `function`.\n- expected_value_type: The expected value type of the resulting column.\n  If `Auto`, the value type will be inferred from the values returned by\n  `function`.","examples": "> Example\n  Multiply each element of the column by itself.\n\n      import Standard.Examples\n\n      example_map = Examples.integer_column.map (x -> x * x)","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {"that": {"lazy": false, "type": "DB_Column", "checked": true}, "function": {"lazy": false, "type": "Any -> Any -> Any", "checked": true}, "skip_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_value_type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}},"aliases": ["combine", "join by row position", "merge"],"icon": "join2-1","description": "Applies `function` to consecutive pairs of elements of `self` and `that`\nand returns a column of results.","arguments": "- that: The column to zip with `self`.\n- function: A binary function that is applied to corresponding pairs of\n  elements of `self` and `that` to produce a value.\n- skip_nothing: controls whether missing values should be passed to the\n  `function`. The default value of `True` will skip the rows for which\n  the value in either column is missing and automatically append\n  `Nothing` to the result table. If set to `False`, every pair of values\n  is passed to `function`.\n- expected_value_type: The expected value type of the resulting column.\n  If `Auto`, the value type will be inferred from the values returned by\n  `function`.","examples": "> Example\n  Zip two columns together as pairs.\n\n      import Standard.Examples\n\n      example_zip =\n         Examples.integer_column.zip Examples.text_column_1 [_, _]","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "as_internal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a simplified text representation for display in the REPL and errors."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "sql_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "short_circuit_special_floating_point", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"exp": {"lazy": false}},"aliases": [],"description": "If the column is NaN/Inf, return it immediately as the value; otherwise\nreturn the expression. If returning immediately, rename to the expression's\nname. If the column is not floating point, just return the expression."},
{"module": "Standard.Database.DB_Column", "type": "", "name": "make_text_case_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left": {"lazy": false}, "op": {"lazy": false}, "other": {"lazy": false}, "case_sensitivity": {"lazy": false}, "new_name": {"lazy": false}},"aliases": [],"description": "Helper for case case_sensitivity based text operations"},
{"module": "Standard.Database.DB_Column", "type": "", "name": "make_equality_check_with_floating_point_handling", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "other": {"lazy": false}, "op": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "", "name": "adapt_unified_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "expected_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "Vector", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Column", "checked": true}},"aliases": [],"description": "Conversion method to a Column to a Vector."},
{"module": "Standard.Database.DB_Column", "type": "Cleansable_Text", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "Many_Files_List", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Table", "arguments": {"internal_name": {"lazy": false, "type": "Text", "checked": true}, "connection": {"lazy": false, "type": "Connection | Any", "checked": true}, "internal_columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}},"aliases": [],"description": "Internal constructor that should not be used directly.\nPlease use `DB_Table.new` instead.","arguments": "- internal_name: The name of the table.\n- connection: The connection with which the table is associated.\n- internal_columns: The internal representation of the table columns.\n- context: The context associated with this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Table", "arguments": {"internal_name": {"lazy": false, "type": "Text", "checked": true}, "connection": {"lazy": false, "type": "Connection | Any", "checked": true}, "internal_columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}},"aliases": [],"description": "The internal constructor used to construct a DB_Table instance.\n\nIt can perform some additional operations, like refining the type,\nso it should always be preferred over calling `DB_Table.Value` directly."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "The name of the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "dialect_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"icon": "metadata","description": "The name of the SQL Dialect used by the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "display", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"show_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "format_terminal": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Returns a text containing an ASCII-art table displaying this data.","arguments": "- show_rows: the number of initial rows that should be displayed.\n  - format_terminal: whether ANSI-terminal formatting should be used"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "print", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"show_rows": {"lazy": false, "default": "10"}},"aliases": [],"description": "Prints an ASCII-art table with this data to the standard output.","arguments": "- show_rows: the number of initial rows that should be displayed."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this column to JS_Object representation."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! No_Such_Column | Index_Out_Of_Bounds", "arguments": {"selector": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns the column with the given name.","arguments": "- selector: The name or index of the column to get."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column | Any", "arguments": {"selector": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": [],"icon": "select_column","description": "Returns the column with the given name or index.","arguments": "- selector: The name or index of the column being looked up.\n- if_missing: The value to use if the selector isn't present."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "get_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {"selector": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "0"}, "index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": ["cell value", "get cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets a value from the table.","arguments": "- selector: The name or index of the column.\n- index: The index of the value to get within the column.\n- if_missing: The value to use if the selector isn't present."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "get_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row | Any", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": ["row"],"group": "Standard.Base.Selections","icon": "select_row","description": "Gets a row from the table.\nThis is a live read from the database, so the results may change on\nre-evaluation.","arguments": "- index: The index of the row to get within the table.\n- if_missing: The value to use if the selector isn't present."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "first_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["first cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets the top left value from the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "last_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["last cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets the bottom right value from the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "first_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["first field"],"group": "Standard.Base.Selections","icon": "select_column","description": "Gets the first column."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "last_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["last field"],"group": "Standard.Base.Selections","icon": "select_column","description": "Gets the last column"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "column_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["field count"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the number of columns in the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "select_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "reorder": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["select fields"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with a chosen subset of columns, as specified by the\n`columns`, from the input table. Any unmatched input columns will be\ndropped from the output.","arguments": "- columns: Specifies columns by a single instance or Vector of names;\n  indexes or regular expressions to match names; or a `By_Type` selector\n  to choose columns by type. Note: specifying columns by type ignores\n  size and precision.\n- reorder: By default, or if set to `False`, columns in the output will\n  be in the same order as in the input table. If `True`, the order in the\n  output table will match the order in the columns list. If a column is\n  matched by multiple selectors in reorder mode, it will be placed at\n  the position of the first one matched.\n- case_sensitivity: Controls whether to be case sensitive when matching\n  column names.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Select columns by name.\n\n      table.select_columns [\"bar\", \"foo\"]\n\n\n> Example\n  Select columns using names passed as a Vector.\n\n      table.select_columns [\"bar\", \"foo\"]\n\n\n> Example\n  Select columns matching a regular expression.\n\n      table.select_columns \"foo.+\".to_regex case_sensitivity=Case_Sensitivity.Insensitive\n\n\n> Example\n  Select the first two columns and the last column, moving the last one to front.\n\n      table.select_columns [-1, 0, 1] reorder=True\n\n\n> Example\n  Select integer columns.\n\n      table.select_columns [..By_Type ..Integer]","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "select_columns_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["select fields by type"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the chosen set of columns filtered by the type\nof the column.","arguments": "- types: The types of columns to select.\n- strict: If `True`, only columns with exactly the specified types will\n  be selected. If `False`, columns with related types will also be\n  selected (i.e. ignore size, precision)."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "remove_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["drop fields", "drop_columns", "remove fields", "select columns", "select fields"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the chosen set of columns, as specified by the\n`columns`, removed from the input table. Any unmatched input columns will\nbe kept in the output. Columns are returned in the same order as in the\ninput.","arguments": "- columns: Specifies columns by a single instance or Vector of names;\n  indexes or regular expressions to match names; or a `By_Type` selector\n  to choose columns by type. Note: specifying columns by type ignores\n  size and precision.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `False`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Remove columns with given names.\n\n      table.remove_columns [\"bar\", \"foo\"]\n\n\n> Example\n  Remove columns using names passed as a Vector.\n\n      table.remove_columns [\"bar\", \"foo\"]\n\n\n> Example\n  Remove columns matching a regular expression.\n\n      table.remove_columns \"foo.+\".to_regex Case_Sensitivity.Insensitive\n\n\n> Example\n  Remove the first two columns and the last column.\n\n      table.remove_columns [-1, 0, 1]\n\n\n> Example\n  Remove integer columns.\n\n      table.remove_columns [..By_Type ..Integer]","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "remove_columns_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["remove fields by type", "select columns by type", "select fields by type"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the chosen set of columns filtering out based\non the type of the column.","arguments": "- types: The types of columns to remove.\n- strict: If `True`, only columns with exactly the specified types will\n  be removed. If `False`, columns with related types will also be\n  removed (i.e. ignore size, precision)."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "select_blank_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["filter_blank_columns", "select_blank_fields", "select_missing_columns", "select_na"],"group": "Standard.Base.Selections","icon": "select_column","description": "Select columns which are either all blank or contain blank values. If no\nrows are present, all columns are considered blank.","arguments": "- when: By default, only columns consisting of all blank cells are\n  selected. If set to Blank_Selector.Any_Cell, columns with one or\n  more blank values are selected.\n- treat_nans_as_blank: specified whether `Number.nan` is considered as\n  blank. By default, it is not.","examples": "> Example\n  Select completely blank columns from a table.\n\n      table.select_blank_columns","remarks": "? Blank values\n  Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "remove_blank_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["drop_missing_columns", "drop_na", "select_blank_columns", "select_blank_fields", "select_missing_columns", "select_na"],"group": "Standard.Base.Selections","icon": "select_column","description": "Remove columns which are either all blank or contain blank values. If no\nrows are present, all columns are considered blank.","arguments": "- when: By default, only columns consisting of all blank cells are\n  selected. If set to Blank_Selector.Any_Cell, columns with one or\n  more blank values are selected.\n- treat_nans_as_blank: specified whether `Number.nan` is considered as\n  blank. By default, it is not.","examples": "> Example\n  Remove completely blank columns from a table.\n\n      table.remove_blank_columns","remarks": "? Blank values\n  Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "reorder_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "position": {"lazy": false, "type": "Position", "checked": true, "default": "..Before_Other_Columns"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the specified selection of columns moved to\neither the start or the end in the specified order.","arguments": "- columns: Specifies columns by a name, type, index or regular expression to\n  match names, or a Vector of these.\n- position: Specifies how to place the selected columns in relation to\n  the remaining columns which were not matched by `columns` (if any).\n- case_sensitivity: Controls whether to be case sensitive when matching\n  column names.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `False`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Move a column with a specified name to back.\n\n      table.reorder_columns [\"foo\"] position=Position.After_Other_Columns\n\n\n> Example\n  Move columns using names passed as a Vector.\n\n      table.reorder_columns [\"bar\", \"foo\"] position=Position.After_Other_Columns\n\n\n> Example\n  Move columns matching a regular expression to front, keeping columns matching \"foo.+\" before columns matching \"b.*\".\n\n      table.reorder_columns \"foo.+\".to_regex case_sensitivity=Case_Sensitivity.Insensitive\n\n\n> Example\n  Swap the first two columns.\n\n      table.reorder_columns [1, 0]\n\n\n> Example\n  Move the first column to back.\n\n      table.reorder_columns [0] position=Position.After_Other_Columns","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "sort_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"order": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the columns sorted by name according to the\nspecified sort method. By default, sorting will be according to\ncase-sensitive ascending order based on the normalized Unicode ordering.","arguments": "- order: Whether sorting should be in ascending or descending order.\n- text_ordering: The sort methodology to use.","examples": "> Example\n  Sort columns according to the default ordering.\n\n      table.sort_columns\n\n\n> Example\n  Sort columns according to the natural case-insensitive ordering.\n\n      table.sort_columns text_ordering=(Text_Ordering.Case_Insensitive sort_digits_as_numbers=True)\n\n\n> Example\n  Sort columns in descending order.\n\n      table.reorder_columns Sort_Direction.Descending"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "rename_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Missing_Input_Columns | Ambiguous_Column_Rename | Too_Many_Column_Names_Provided | Invalid_Column_Names | Duplicate_Output_Column_Names", "arguments": {"column_map": {"lazy": false, "type": "Table | Dictionary (Text | Integer | Regex) Text | Vector Text | Vector Vector", "checked": true, "default": "[\"Column\"]"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "table_edit","description": "Returns a new table with the columns renamed based on either a mapping\nfrom the old name to the new or a positional list of new names.","arguments": "- column_map: Mapping from old column names to new or a vector of new\n  column names to apply by position. `Regex` objects can be used\n  within the mapping to do pattern based renaming.\n  Can also be supplied as a `Table` either with a single column of new\n  names or two columns with old (first column) and new names (second\n  column).\n- case_sensitivity: Controls whether to be case sensitive when matching\n  column names.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Rename the \"Alpha\" column to \"Beta\"\n\n       table.rename_columns (Dictionary.from_vector [[\"Alpha\", \"Beta\"]])\n\n\n> Example\n  Rename the last column to \"LastColumn\"\n\n       table.rename_columns (Dictionary.from_vector [[-1, \"LastColumn\"]])\n\n\n> Example\n  Rename the \"Alpha\" column to \"Beta\" and last column to \"LastColumn\"\n\n       table.rename_columns (Dictionary.from_vector [[\"Alpha\", \"Beta\"], [-1, \"LastColumn\"]])\n\n\n> Example\n  Rename the first column to \"FirstColumn\"\n\n       table.rename_columns [\"FirstColumn\"]\n\n\n> Example\n  Add a prefix to all column names.\n\n       table.rename_columns (table.columns.map c-> \"prefix_\" + c.name)\n\n\n> Example\n  For all columns starting with the prefix `name=`, replace it with `key:`.\n\n       table.rename_columns (Dictionary.from_vector [[\"name=(.*)\".to_regex, \"key:$1\"]])","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "use_first_row_as_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["header", "rename"],"group": "Standard.Base.Metadata","icon": "table_edit","description": "Returns a new table with the columns renamed based on entries in the\nfirst row.\n\n\n\n  The following problems can occur:\n  - If any of the new names are invalid, an\n    `Invalid_Column_Names`.\n  - If any of the new names clash either with existing names or each\n    other, a Duplicate_Output_Column_Names.","arguments": "- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Rename the column based on the first row\n\n       table.use_first_row_as_names"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Resolves the column name to a column within this table.\n\n\n\nIf instead of a name, a column is provided, it is returned as-is as long\nas it comes from the same context.","arguments": "- column: The name (or column handle) for the column you want to resolve."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Such_Column | Index_Out_Of_Bounds | Invalid_Value_Type", "arguments": {"column": {"lazy": false, "type": "DB_Column | Expression | Text | Integer", "checked": true, "default": "Missing_Argument.throw \"column\""}, "filter": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true, "default": "Filter_Condition.Equal True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["filter rows", "where"],"group": "Standard.Base.Selections","icon": "preparation","description": "Selects only the rows of this table that correspond to `True` values of\n`filter`.","arguments": "- column: The column to use for filtering. Can be a column name, index or\n  the `Column` object itself.\n- filter: The filter to apply to the column. It can either be an instance\n  of `Filter_Condition` or a predicate taking a cell value and returning\n  a boolean value indicating whether the corresponding row should be kept\n  or not.\n- on_problems: Specifies how to handle if a non-fatal problem occurs,\n  attaching a warning by default.","examples": "> Example\n  Get people older than 30.\n\n      people.filter \"Age\" (Greater 30)\n\n\n> Example\n  Filter people between 30 and 40.\n\n      people.filter \"Age\" (Between 30 40)\n\n\n> Example\n  Select rows where more than 50% of the stock is sold.\n\n      table.filter \"sold_stock\" (Greater (table.at \"total_stock\" / 2))\n\n\n> Example\n  Select people celebrating a jubilee.\n\n      people.filter \"age\" (age -> (age%10 == 0))","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "filter_by_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Text", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["filter rows"],"group": "Standard.Base.Selections","icon": "preparation","description": "Selects only the rows of this table that correspond to `True` values of\n`filter`.","arguments": "- expression: The expression to evaluate to filter the rows.\n- on_problems: Specifies how to handle non-fatal problems, attaching a\n  warning by default.","examples": "> Example\n  Select people celebrating a jubilee.\n\n      people.filter_by_expression \"[age] % 10 == 0\"","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Standard.Base.Selections","icon": "select_row","description": "Creates a new Table with the specified range of rows from the input\nTable.\n\n\n\nFor the purposes of the `Index_Sub_Range.While` predicate a single\n\"element\" of the table is represented by the `Row` type.","arguments": "- range: The selection of rows from the table to return.","examples": "> Example\n  Take first 10 rows of the table.\n\n      table.take (..First 10)\n\n\n> Example\n  Take rows from the top of the table as long as their values sum to 10.\n\n      table.take (While row-> row.to_vector.compute Statistic.Sum == 10)","remarks": "? Supported Range Types\n\n  Database backends support all range types except `While` and `Sample`\n\n  In-memory tables support all range types."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Standard.Base.Selections","icon": "select_row","description": "Creates a new Table from the input with the specified range of rows\nremoved.\n\n\n\nFor the purposes of the `Index_Sub_Range.While` predicate a single\n\"element\" of the table is represented by the `Row` type.","arguments": "- range: The selection of rows from the table to remove.","examples": "> Example\n  Drop first 10 rows of the table.\n\n      table.drop (..First 10)\n\n\n> Example\n  Drop rows from the top of the table as long as their values sum to 10.\n\n      table.drop (While row-> row.to_vector.compute Statistic.Sum == 10)","remarks": "? Supported Range Types\n\n  Database backends support all range types except `While` and `Sample`\n\n  In-memory tables support all range types."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "remove_all_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Filter out all rows."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "add_row_number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Row\""}, "from": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "group_by": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector (Text | Sort_Column) | Text", "checked": true, "default": "[]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add index column", "rank", "record id"],"group": "Standard.Base.Values","icon": "column_add","description": "Adds a new column to the table enumerating the rows.","arguments": "- name: The name of the new column. Defaults to \"Row\".\n- from: The starting value for the enumeration. Defaults to 0.\n- step: The amount to increment the enumeration by. Defaults to 1.\n- group_by: Specifies the columns to group by. The row numbers are\n  counted separately for each group. By default, all rows are treated as\n  a single group.\n- order_by: Specifies the columns to order by. Defaults to the order of\n  the rows in the table. The row numbers are assigned according to the\n  specified ordering.","errors": "","remarks": "? Ordering of rows\n\n  Note that the ordering of rows from the original table is preserved in\n  all cases. The grouping and ordering settings affect how the row\n  numbers are assigned to each row, but the order of the rows itself is\n  not changed by this operation."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "add_group_number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"grouping_method": {"lazy": false, "type": "Grouping_Method", "checked": true, "default": "..Unique"}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Group\""}, "from": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add group column", "bucket", "group id", "tile"],"group": "Standard.Base.Values","icon": "column_add","description": "Adds a new column to the table enumerating groups of rows, assigning each\nrow to one group number. All rows in each group will get the same number.","arguments": "- grouping_method: Specifies how to group the rows; see \"Grouping\n  Methods\", below.\n- name: The name of the new column. Defaults to \"Group\".\n- from: The starting value for the enumeration. Defaults to 0.\n- step: The amount to increment the enumeration by. Defaults to 1.","examples": "> Example\n  Assign group numbers based on unique values of the first two columns.\n\n     ## table:\n         x | y | z\n        ---+---+---\n         1 | 0 | 2\n         0 | 1 | 0\n         1 | 2 | 0\n         0 | 1 | 1\n         1 | 0 | 1\n         1 | 2 | 1\n     table = table_builder [['x', [1, 0, 1, 0, 1, 1]], ['y', [0, 1, 2, 1, 0, 2]], ['z' [2, 0, 0, 1, 1, 1]]]\n     table2 = table.add_group_number (..Unique group_by=['x', 'y']) \"g\"\n     table2.at 'g' . to_vector\n     # => [0, 1, 2, 1, 0, 2]\n     ## table2:\n         x | y | z | g\n        ---+---+---+---\n         1 | 0 | 2 | 0\n         0 | 1 | 0 | 1\n         1 | 2 | 0 | 2\n         0 | 1 | 1 | 1\n         1 | 0 | 1 | 0\n         1 | 2 | 1 | 2\n\n\n> Example\n  Divide rows into three groups.\n     ## table:\n         x | y\n        ---+---\n         1 | 5\n         2 | 4\n         3 | 3\n         4 | 2\n         5 | 1\n     table = table_builder [['x', [1, 2, 3, 4, 5]], ['y', [5, 4, 3, 2, 1]]]\n     table2 = tabble.add_group_number (..Equal_Count 3) \"g\"\n     table2.at 'g' . to_vector\n     # => [0, 0, 1, 1, 2]\n     ## table2:\n         x | y | g\n        ---+---+---\n         1 | 5 | 0\n         2 | 4 | 0\n         3 | 3 | 1\n         4 | 2 | 1\n         5 | 1 | 2","errors": "","remarks": "? Grouping Methods\n\n  The following grouping methods are supported:\n  - `Unique`: Group rows by the specified columns.\n  - Equal_Count: Create the specified number of groups with the same\n    number of rows in each group (except possibly the last one).\n\n\n? Ordering of rows\n\n  In the in-memory database, the ordering of rows from the original table\n  is preserved in all cases. The grouping and ordering settings can\n  affect how the group numbers are assigned, depending on the grouping\n  method.  The order of the rows itself is not changed by this operation.\n\n  In the database backends, the ordering of rows is backend-dependent."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "limit", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"max_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "1000"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns a new Table that will include at most `max_rows` rows from the\noriginal Table.\n\n\n\nSince this Table is backed by an SQL database, the Table returned by the\n`limit` method is deterministic only if the Table has been ordered (using\nthe `order_by` method).\n\nOtherwise, no order is imposed, so the returned Table will include at most\n`max_rows` rows, but there are no guarantees on which rows will be\nselected. Moreover, even if the underlying table in the database did not\nchange, different sets of rows may be returned each time the returned\nTable is materialized.\n\nThe limit is applied at the very end, so the new Table behaves exactly as\nthe old one, just limiting its results when being materialized.\nSpecifically, applying further filters will still apply to the whole\nresult set and the limit will be taken after applying these filters.","arguments": "- max_rows: The maximum number of rows to get from the table.","examples": "> Example\n  In the call below, assuming that the table of `t1` contains rows for\n  numbers 1, 2, ..., 10, will return rows starting from 6 and not an empty\n  result as one could expect if the limit was applied before the filters.\n\n      t1 = table.sort [..Name \"A\"] . limit 5\n      t2 = t1.filter 'A' (..Greater than=5)\n      t2.read"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "set", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Existing_Column | Missing_Column | No_Such_Column | Expression_Error", "arguments": {"value": {"lazy": false, "type": "DB_Column | Text | Expression | Array | Vector | Range | Date_Range | Constant_Column | Simple_Expression", "checked": true}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add_Or_Update"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add column", "expression", "formula", "new column", "update column"],"group": "Standard.Base.Values","icon": "column_add","description": "Sets the column value at the given name.","arguments": "- value: The value, expression or column to create column.\n- as: Optional new name for the column.\n- set_mode: Specifies the expected behaviour in regards to existing\n  column with the same name.\n- on_problems: Specifies how to handle problems with expression\n  evaluation.","examples": "> Example\n  Create a table where the values of the total stock in the inventory is\n  doubled.\n\n      import Standard.Examples\n\n      example_set =\n          table = Examples.inventory_table\n          double_inventory = table.at \"total_stock\" * 2\n          table.set double_inventory as=\"total_stock\"\n          table.set (expr \"2 * [total_stock]\") as=\"total_stock_expr\"","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "evaluate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Text | Expression", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Given an expression, create a derived column where each value is the\nresult of evaluating the expression for the row.","arguments": "- expression: The expression to evaluate.\n- on_problems: Specifies how to handle non-fatal problems, attaching a\n  warning by default.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "make_table_from_dictionary", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dict": {"lazy": false}, "key_column_name": {"lazy": false}, "value_column_name": {"lazy": false}},"aliases": [],"description": "A helper that creates a two-column table from a Dictionary.\n\nThe keys of the `Dictionary` become the first column, with name\n`key_column_name`, and the values become the second column, with name\n`value_column_name`.\n\nFor the in-memory database, the `Dictionary` can be empty. For the\ndatabase backends, it must not be empty.","arguments": "- dict: The `Dictionary` to create the table from.\n- key_column_name: The name to use for the first column.\n- value_column_name: The name to use for the second column."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "make_table_from_vectors", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_vectors": {"lazy": false}, "column_names": {"lazy": false}},"aliases": [],"description": "A helper that creates a literal table from `Vector`s.\n\nFor the in-memory database, the columns can be empty. For the database\nbackends, they must not be empty.","arguments": "- column_vectors: A `Vector` of `Vector`s; each inner `Vector` becomes a\n  column of the table.\n- column_names: The names of the columns of the new table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "make_constant_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Create a constant column from a value."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "make_temp_column_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a unique temporary column name."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "with_temporary_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_column": {"lazy": false, "type": "DB_Column", "checked": true}, "f": {"lazy": false, "type": "Text -> DB_Table -> DB_Table", "checked": true}},"aliases": [],"description": "Run a table transformer with a temporary column added."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "filter_on_predicate_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"predicate_column": {"lazy": false}},"aliases": [],"description": "Filter a table on a boolean column. The column does not have to be part\nof the table, but it must be derived from it and share a context."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector DB_Column", "arguments": {},"aliases": [],"icon": "convert","description": "Returns the vector of columns contained in this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "column_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the vector of column names contained in this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Row", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": [],"icon": "select_row","description": "Returns a vector of rows contained in this table.\n\nIn the database backend, it first materializes the table to in-memory.","arguments": "- max_rows: specifies the maximum number of rows to read."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "first_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns the first row of the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "last_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns the last row of the table.\n\nIn the database backend, this function has to scan through all the\nresults of the query."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Incomparable_Values | No_Input_Columns_Selected | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector Sort_Column | Sort_Column", "checked": true, "default": "[(Sort_Column.Name (self.columns.at 0 . name))]"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["order_by"],"group": "Standard.Base.Selections","icon": "order","description": "Sorts the rows of the table according to the specified columns and order.","arguments": "- columns: The columns and order to sort the table.\n- text_ordering: The ordering method to use on text values.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Sorting `table` in ascending order by the value in column `'Quantity'`.\n\n      table.sort ['Quantity']\n\n\n> Example\n  Sorting `table` in descending order by the value in column `'Quantity'`.\n\n      table.sort [..Name 'Quantity' ..Descending]\n\n\n> Example\n  Sorting `table` in ascending order by the value in column `'Quantity'`,\n  using the value in column `'Rating'` for breaking ties.\n\n      table.sort ['Quantity', 'Rating']\n\n\n> Example\n  Sorting `table` in ascending order by the value in column `'Quantity'`,\n  using the value in column `'Rating'` in descending order for breaking\n  ties.\n\n      table.sort [..Name 'Quantity', ..Name 'Rating' ..Descending]\n\n\n> Example\n  Order the table by the second column in ascending order. In case of any\n  ties, break them based on the 7th column from the end of the table in\n  descending order.\n\n      table.sort [1, ..Index -7 ..Descending]\n\n\n> Example\n  Sort the table by columns whose names start with letter `a`.\n\n       table.sort [(..Select_By_Name \"a.*\".to_regex case_sensitivity=..Insensitive)]","errors": "","remarks": "? Missing Values\n\n  Missing (`Nothing`) values are sorted as less than any other object."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "order_by", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false, "default": "[(Sort_Column.Name (self.columns.at 0 . name))]"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "order","description": "Deprecated - use `Table.sort` instead."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "default_ordering", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the default ordering used for operations like `add_row_number` or\n`take`.\n\nIf the table was recently ordered by operations like `order_by`, that\nwill determine the ordering. Otherwise, the primary key is used if\navailable."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "get_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the primary key defined for the table, if applicable."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "distinct", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Missing_Input_Columns | No_Input_Columns_Selected | Floating_Point_Equality", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "self.column_names"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["deduplicate", "unique"],"group": "Standard.Base.Selections","icon": "preparation","description": "Returns the distinct set of rows within the specified columns from the\ninput table.\n\nWhen multiple rows have the same values within the specified columns, the\nfirst row of each such set is returned if possible, but in database\nbackends any row from each set may be returned (for example if the row\nordering is unspecified).\n\nFor the in-memory table, the unique rows will be in the order they\noccurred in the input (this is not guaranteed for database operations).","arguments": "- columns: The columns of the table to use for distinguishing the rows.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "duplicates", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Missing_Input_Columns | No_Input_Columns_Selected | Floating_Point_Equality", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "self.column_names"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "preparation","description": "Returns the set of rows which are duplicated within the specified columns from the\ninput table.\n\nWhen multiple rows have the same values within the specified columns all of those rows are \nreturned. Rows which are unique within the specified columns are removed.","arguments": "- columns: The columns of the table to use for distinguishing the rows.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"right": {"lazy": false, "type": "DB_Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "join_kind": {"lazy": false, "type": "Join_Kind", "checked": true, "default": "..Left_Outer"}, "on": {"lazy": false, "type": "Join_Condition | Text | Vector (Join_Condition | Text)", "checked": true, "default": "default_join_condition self join_kind"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["hlookup", "lookup", "merge", "vlookup", "xlookup"],"group": "Standard.Base.Calculations","icon": "join","description": "Joins two tables according to the specified join conditions.\n\n\n\n  - If a column name cannot be found, a `No_Such_Column` is reported\n    and an empty result is reported.\n  - If a column index is invalid, an `Index_Out_Of_Bounds` is\n    reported and an empty result is reported.\n  - If there are column names that are clashing between the two tables, a\n    `Duplicate_Output_Column_Names` is reported and the columns from the\n    table are renamed as described below.\n  - If a join condition correlates columns whose types are not compatible\n    (for example comparing numeric types with text), an\n    `Invalid_Value_Type` is reported.\n  - If decimal columns are joined on equality, a\n    `Floating_Point_Equality` is reported.\n\n  In any of the above cases, if a problem occurs, the resulting table\n  will have the desired structure, but it will be empty to indicate that\n  the join has failed due to an erroneous join condition.","arguments": "- right: The table to join with.\n- join_kind: The `Join_Kind` for the joining the two tables. It defaults\n  to `Left_Outer`.\n- on: A single condition or a common column name, or a list thereof, on\n  which to correlate rows from the two tables. If multiple conditions\n  are supplied, rows are correlated only if all are true.\n  If common column names are provided, these columns should be present\n  in both tables and an equality condition is added for each of them.\n  By default, the join is performed on the first column of the left table\n  correlated with a column in the right table with the same name.\n- right_prefix: The prefix added to right table column names in case of\n  name conflict.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","remarks": "? Column Renaming\n\n  If columns from the two tables have colliding names, a prefix (by\n  default `Right_`) is added to the name of the column from the right\n  table. The left column remains unchanged. It is possible that the new\n  name will be in use, in this case it will be resolved using the normal\n  renaming strategy - adding subsequent `_1`, `_2` etc.\n\n\n? Row Ordering For In-Memory Tables\n\n  This operation requires a well-defined order of rows in the input\n  tables. In-memory tables rely on the ordering stemming directly from\n  their layout in memory. Database tables may not impose a deterministic\n  ordering. If the table defines a primary key, it is used to by default\n  to ensure deterministic ordering. That can be overridden by specifying\n  a different ordering using `Table.sort`. If no primary key was\n  defined nor any ordering was specified explicitly by the user, the\n  order of columns is undefined and the operation will fail, reporting a\n  `Undefined_Column_Order` problem and returning an empty table.\n\n\n? Row Ordering For Database Tables\n\n  The ordering of rows in the resulting table is not specified.\n\n\n? Joining on equality of columns with the same name\n\n  When performing an Inner join on two columns with the same name and an\n  equality condition, only one copy of column will be included in the\n  output (as these two columns would have the exact same content, so they\n  would be redundant).\n\n\n? Same-name column join shorthand\n\n  As a shorthand, providing a column name or a list of column names\n  allows to join the two tables on equality of corresponding columns with\n  the same name. So `table.join other on=[\"A\", \"B\"]` is a shorthand for:\n      table.join other on=[Join_Condition.Equals \"A\" \"A\", Join_Condition.Equals \"B\" \"B\"]"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "join_or_cross_join", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"right": {"lazy": false, "type": "DB_Table", "checked": true}, "join_kind": {"lazy": false}, "on": {"lazy": false}, "right_prefix": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "Implementation of both `join` and `cross_join`."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "cross_join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"right": {"lazy": false, "type": "DB_Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "right_row_limit": {"lazy": false, "type": "Row_Limit", "checked": true, "default": "..Limit 100"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["append", "cartesian join"],"group": "Standard.Base.Calculations","icon": "join","description": "Joins tables by pairing every row of the left table with every row of the\nright table.\n\n\n\n  - If the `right` table has more rows than the `right_row_limit` allows,\n    a `Cross_Join_Row_Limit_Exceeded` is reported. In warning/ignore\n    mode, the join is still executed.","arguments": "- right: The table to join with.\n- right_row_limit: If the number of rows in the right table exceeds this,\n  then a `Cross_Join_Row_Limit_Exceeded` problem is raised. The check\n  exists to avoid exploding the size of the table by accident. This check\n  can be disabled by setting this parameter to `Nothing`.\n- right_prefix: The prefix added to right table column names in case of\n  name conflict. See \"Column Renaming\" below for more information.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","remarks": "? Column Renaming\n\n  If columns from the two tables have colliding names, a prefix (by\n  default `Right_`) is added to the name of the column from the right\n  table. The left column remains unchanged. It is possible that the new\n  name will be in use, in this case it will be resolved using the normal\n  renaming strategy - adding subsequent `_1`, `_2` etc.\n\n\n? Row Ordering For In-Memory Tables\n\n  This operation requires a well-defined order of rows in the input\n  tables. In-memory tables rely on the ordering stemming directly from\n  their layout in memory. Database tables may not impose a deterministic\n  ordering. If the table defines a primary key, it is used to by default\n  to ensure deterministic ordering. That can be overridden by specifying\n  a different ordering using `Table.sort`. If no primary key was\n  defined nor any ordering was specified explicitly by the user, the\n  order of columns is undefined and the operation will fail, reporting a\n  `Undefined_Column_Order` problem and returning an empty table.\n\n\n? Result Ordering For Database Tables\n\n  The ordering of rows in the resulting table is not specified."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "merge", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Missing_Input_Columns | Non_Unique_Key | Unmatched_Rows_In_Lookup", "arguments": {"lookup_table": {"lazy": false, "type": "DB_Table", "checked": true, "default": "Missing_Argument.throw \"lookup_table\""}, "key_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "add_new_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "allow_unmatched_rows": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["hlookup", "join", "lookup", "vlookup", "xlookup"],"group": "Standard.Base.Calculations","icon": "join","description": "Merges this table with a lookup table.\nNew values are looked up in the lookup table based on the `key_columns`.\nColumns that exist in the lookup table where a match was found are\nreplaced by values from the lookup table. Columns not found are left\nunchanged.\nThis operation is similar to `Table.update_rows`, but just returns a new\n`Table` instance, instead of updating the table in-place (which is only\npossible for Database tables).","arguments": "- lookup_table: The table to use for looking up values.\n- key_columns: Specifies the columns to use for correlating rows between\n  the two tables. Must identify values uniquely within `lookup_table`.\n- add_new_columns: Specifies if new columns from the lookup table should\n  be added to the result. If `False`, an `Unexpected_Extra_Columns`\n  problem is reported.\n- allow_unmatched_rows: Specifies how to handle missing rows in the lookup.\n  If `False` (the default), an `Unmatched_Rows_In_Lookup` error is raised.\n  If `True`, the unmatched rows are left unchanged. Any new columns will\n  be filled with `Nothing`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","errors": "","remarks": "? Result Ordering\n\n  When operating in-memory, this operation preserves the order of rows\n  from this table (unlike `join`).\n  In the Database backend, there are no guarantees related to ordering of\n  results."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Missing_Input_Columns | Non_Unique_Key | Unmatched_Rows_In_Lookup", "arguments": {"lookup_table": {"lazy": false, "type": "DB_Table | Dictionary", "checked": true}, "columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "from_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "to_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "allow_unmatched_rows": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["find replace"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces values in the columns using `lookup_table` to specify a mapping\nfrom old to new values.","arguments": "- lookup_table: the table to use as a mapping from old to new values. A\n  `Map` can also be used here (in which case passing `from_column` or\n  `to_column` is disallowed and will throw an `Illegal_Argument` error.\n- columns: the column or columns within `self` to perform the replace on.\n- from_column: the column within `lookup_table` to match against\n  `columns` in `self`.\n- to_column: the column within `lookup_table` to get new values from.\n- allow_unmatched_rows: Specifies how to handle missing rows in the lookup.\n  If `False` (the default), an `Unmatched_Rows_In_Lookup` error is raised.\n  If `True`, the unmatched rows are left unchanged. Any new columns will\n  be filled with `Nothing`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Replace values in column 'x' using a lookup table.\n\n      table = Table.new [['x', [1, 2, 3, 4]], ['y', ['a', 'b', 'c', 'd']], ['z', ['e', 'f', 'g', 'h']]]\n      #      | x | y | z\n      #   ---+---+---+---\n      #    0 | 1 | a | e\n      #    1 | 2 | b | f\n      #    2 | 3 | c | g\n      #    3 | 4 | d | h\n\n      lookup_table = Table.new [['x', [1, 2, 3, 4]], ['new_x', [10, 20, 30, 40]]]\n      #      | old_x | new_x\n      #   ---+-------+-------\n      #    0 | 1     | 10\n      #    1 | 2     | 20\n      #    2 | 3     | 30\n      #    3 | 4     | 40\n\n      result = table.replace lookup_table 'x'\n      #      | x  | y | z\n      #   ---+----+---+---\n      #    0 | 10 | a | e\n      #    1 | 20 | b | f\n      #    2 | 30 | c | g\n      #    3 | 40 | d | h","errors": "","remarks": "? Result Ordering\n\n  When operating in-memory, this operation preserves the order of rows\n  from this table (unlike `join`).\n\n  In the Database backend, there are no guarantees related to ordering of\n  results."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"right": {"lazy": false, "type": "DB_Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "keep_unmatched": {"lazy": false, "type": "Boolean | Report_Unmatched", "checked": true, "default": "Report_Unmatched"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["join by row position"],"group": "Standard.Base.Calculations","icon": "join2-1","description": "Joins two tables by zipping rows from both tables table together - the\nfirst row of the left table is correlated with the first one of the right\none etc.\n\n\n\n  - If the tables have different number of rows and `keep_unmatched` is\n    set to `Report_Unmatched`, the join will report `Row_Count_Mismatch`.","arguments": "- right: The table to join with.\n- keep_unmatched: If set to `True`, the result will include as many rows\n  as the larger of the two tables - the last rows of the larger table\n  will have nulls for columns of the smaller one. If set to `False`, the\n  result will have as many rows as the smaller of the two tables - the\n  additional rows of the larger table will be discarded. The default\n  value is `Report_Unmatched` which means that the user expects that two\n  tables should have the same amount of rows; if they do not, the\n  behaviour is the same as if it was set to `True` - i.e. the unmatched\n  rows are kept with `Nothing` values for the other table, but a\n  `Row_Count_Mismatch` problem is also reported.\n- right_prefix: The prefix added to right table column names in case of\n  name conflict. See \"Column Renaming\" below for more information.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","remarks": "? Column Renaming\n\n  If columns from the two tables have colliding names, a prefix (by\n  default `Right_`) is added to the name of the column from the right\n  table. The left column remains unchanged. It is possible that the new\n  name will be in use, in this case it will be resolved using the normal\n  renaming strategy - adding subsequent `_1`, `_2` etc.\n\n\n? Row Ordering\n\n  This operation requires a well-defined order of rows in the input\n  tables. In-memory tables rely on the ordering stemming directly from\n  their layout in memory. Database tables may not impose a deterministic\n  ordering. If the table defines a primary key, it is used to by default\n  to ensure deterministic ordering. That can be overridden by specifying\n  a different ordering using `Table.sort`. If no primary key was\n  defined nor any ordering was specified explicitly by the user, the\n  order of columns is undefined and the operation will fail, reporting a\n  `Undefined_Column_Order` problem and returning an empty table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "union", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"tables": {"lazy": false, "type": "DB_Table | Vector DB_Table", "checked": true}, "columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true, "default": "..In_Any_Warn_On_Missing"}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["append", "concat", "join"],"group": "Standard.Base.Calculations","icon": "union","description": "Appends records from other table(s) to this table.","arguments": "- tables: A single table or a vector of tables to append to this one. The\n  tables are concatenated in the order they are specified, with `self`\n  being the first one.\n- columns_to_keep: Specifies which columns to keep. Defaults to keeping\n  columns that are present in any of the tables, reporting a warning for\n  columns that are not present in all tables and adding `Nothing` values\n  for them.\n- match_columns: Specifies how to match the columns.\n  - If `Match_Columns.By_Name` - the columns are matched by name across\n    all provided tables.\n  - If `Match_Columns.By_Position` - the columns are mapped by position.\n    The names of each column come from the first table in which the given\n    column appears in.\n    The `List` option is not applicable when mapping columns by position.\n    Column names are taken from the first table if `In_All` and from the\n    first table that has the maximum number of columns if `In_Any`\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","errors": "","remarks": "? Unifying Column Types\n\n  Numeric columns are unified by finding the smallest type that can fit\n  all of the columns. The biggest integer type will be chosen and if\n  integers and decimals are mixed, the decimal type will be chosen.\n  If boolean columns are mixed with numeric columns, they will be coerced\n  to the numeric type (and converted to 0 and 1).\n\n  Text types will are also unified by finding the smallest type that can\n  fit all the values. If constant-length texts of different lengths are\n  mixed, they will be coerced to a varying-length type.\n\n  If date and date-time columns are unified, this yields a date-time\n  column. In-memory, the date is promoted by adding a time of 00:00 and\n  the system time-zone. In other backends that behaviour may differ.\n\n  If one of the matched columns has `Mixed` type, that type will be used\n  regardless of types of other columns. Note that the `Mixed` type may\n  not be supported by most Database backends.\n\n  Finally, if no common type is found using the rules above, everything\n  is converted to text.\n\n\n? Ordering of Columns in the result\n\n  When matching columns by name, it is possible that the ordering of\n  columns may vary between input tables. The ordering is determined as\n  following: columns that are kept from the first table are in the order\n  they appear in that table. If there are columns that do not appear in\n  the first table, they are appended to the end of the resulting table in\n  the order they appear in the input."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "aggregate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Invalid_Aggregate_Column | Invalid_Column_Names | Duplicate_Output_Column_Names | Floating_Point_Equality | Invalid_Aggregation | Unquoted_Delimiter | Additional_Warnings", "arguments": {"group_by": {"lazy": false, "type": "Vector (Integer | Text | Regex | Aggregate_Column) | Text | Integer | Regex", "checked": true, "default": "[]"}, "columns": {"lazy": false, "type": "Vector Aggregate_Column", "checked": true, "default": "[]"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["average", "count", "count distinct", "first", "group by", "last", "longest", "maximum", "mean", "median", "minimum", "mode", "percentile", "shortest", "standard deviation", "sum", "summarize", "variance"],"group": "Standard.Base.Calculations","icon": "transform4","description": "Aggregates the rows in a table using `group_by` columns.\nThe columns argument specifies which additional aggregations to perform\nand to return.","arguments": "- group_by: Vector of column identifiers to group by. These will be\n  included at the start of the resulting table. If no columns are\n  specified a single row will be returned with the aggregate columns.\n- columns: Vector of `Aggregate_Column` specifying the aggregated table.\n  Expressions can be used within the aggregate column to perform more\n  complicated calculations.\n- error_on_missing_columns: Specifies if a missing columns in aggregates\n  should result in an error regardless of the `on_problems` settings.\n  Defaults to `False`, meaning that problematic aggregate will not be\n  included in the result and the problem reported according to the\n  `on_problems` setting.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Count all the rows\n\n       table.aggregate columns=[Aggregate_Column.Count]\n\n\n> Example\n  Group by the Key column, count the rows\n\n       table.aggregate [\"Key\"] [Aggregate_Column.Count]","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "transpose", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Missing_Input_Columns | Duplicate_Output_Column_Names", "arguments": {"key_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "attribute_column_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Name\""}, "value_column_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Value\""}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["pivot", "unpivot"],"group": "Standard.Base.Calculations","icon": "map_row","description": "Returns a new table with a chosen subset of columns left unchanged and\nthe other columns pivoted to rows with a single name field and a single\nvalue field.","arguments": "- key_columns: Set of fields to remain as columns. These values will be\n  repeated for each data field that is pivoted.\n- attribute_column_name: The name of the field that will contain the\n  names of the pivoted fields. If this name is already in use, it will be\n  renamed with a numeric suffix.\n- value_column_name: The name of the field that will contain the values\n  of the pivoted fields. If this name is already in use, it will be\n  renamed with a numeric suffix.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Transpose Operation\n\n  Input Table `table`:\n\n     Id | Name    | Country\n    ----|---------|---------\n     A  | Example | France\n     B  | Another | Germany\n\n  Result `table.transpose ['Id'] 'Attribute' 'Value'`:\n\n     Id | Attribute | Value\n    ----|-----------|---------\n     A  | Name      | Example\n     A  | Country   | France\n     B  | Name      | Another\n     B  | Country   | Germany","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "cross_tab", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Missing_Input_Columns | Invalid_Aggregate_Column | Floating_Point_Equality | Invalid_Aggregation | Unquoted_Delimiter | Additional_Warnings | Invalid_Column_Names", "arguments": {"group_by": {"lazy": false, "type": "Vector (Integer | Text | Regex | Aggregate_Column) | Text | Integer | Regex", "checked": true, "default": "[]"}, "names": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "self.column_names.first"}, "values": {"lazy": false, "type": "Aggregate_Column | Vector Aggregate_Column", "checked": true, "default": "..Count"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["pivot", "unpivot"],"group": "Standard.Base.Calculations","icon": "column_add","description": "Returns a new table using a chosen field as the column header and then\naggregating the rows within each value as specified. Optionally, a set of\nfields can be used to group the rows.","arguments": "- group_by: Set of fields to group by. If not provided, a single row will\n  be produced.\n- name_column: The field to use as the column header. If this field is\n  not found, then each value will be a single column.\n- values: The aggregation to perform on each set of rows. Can be a single\n  aggregation or a vector of aggregations. Expressions can be used within\n  the aggregation to perform more complicated calculations.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Cross Tab Operation\n\n  Input Table `table`:\n\n     Id | B       | C\n    ----|---------|---------\n     A  | Name    | Example\n     A  | Country | France\n\n  Result `table.cross_tab ['Id'] 'B' (Aggregate_Column.First 'C')`:\n\n     Id | Name    | Country\n    ----|---------|---------\n     A  | Example | France","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "parse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "self.columns . filter (c-\u003e c.value_type.is_text) . map .name"}, "type": {"lazy": false, "type": "Value_Type | Auto", "checked": true}, "format": {"lazy": false, "type": "Text | Data_Formatter", "checked": true, "default": "\u0027\u0027"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Parses columns within a Table to a specific value type.\nBy default, it looks at all `Text` columns and attempts to deduce the\ntype (columns with other types are not affected).\n\nIn the Database backends, the default formatting settings of the\nparticular database are used.\n\nIn the in-memory backend, the default parser options only parse values\nwhere the process is reversible (e.g., 0123 would not be converted to an\ninteger as there is a leading 0). However, settings in the\n`Data_Formatter` can control this.","arguments": "- columns: The columns to parse. If not specified, all text columns\n  will be parsed.\n- type: The type to parse the columns to. Defaults to `Auto` meaning that\n  the type will be inferred from the data. In the Database backends,\n  `Auto` is not supported, so a specific type must be selected.\n- format: The formatting settings to use when parsing the columns.\n  For `Date`, `Time_Of_Day` and `Date_Time`, a Java date time style\n  can be used. For `Boolean`, it should be two values that represent true\n  and false, separated by a `|`. Alternatively, a `Data_Formatter` can be\n  passed to provide complete customisation of the formatting. If\n  `Nothing` is provided, the default formatting settings of the backend\n  will be used. `Nothing` is currently the only setting accepted by the\n  Database backends.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default.","examples": "> Example\n  Parse dates in a column.\n\n      table.parse \"birthday\" Value_Type.Date","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Date_Time_Format_Parse_Error | Illegal_Argument", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "format": {"lazy": false, "type": "Text | Date_Time_Formatter | DB_Column", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Formats `DB_Column`s within a `Table` using a format string,\n`Date_Time_Formatter`, or `DB_Column` of format strings.","arguments": "- columns: The columns to format. The columns can have different types,\n  but all columns must be compatible with any provided `format` value.\n- format: The type-dependent format string to use to format the values.\n  If `format` is `\"\"` or `Nothing`, .to_text is used to format the value.\n  In case of date/time columns, the format can also be a\n  `Date_Time_Formatter`. If `format` is a `DB_Column`, it must be a text\n  column.\n- locale: The locale in which the format should be interpreted.\n  If a `Date_Time_Formatter` is provided for `format` and the `locale` is\n  set to anything else than `Locale.default`, then that locale will\n  override the formatters locale.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default.","examples": "> Example\n  Format the first and last boolean columns as 'Yes'/'No'.\n\n      table.format columns=[0, -1] format=\"Yes|No\"\n\n\n> Example\n  Format dates in a column using the format `yyyyMMdd`.\n\n      table.format \"birthday\" \"yyyyMMdd\"\n\n\n> Example\n  Format all columns in the table using the default formatter.\n\n      table.format","errors": "","remarks": "? Supported Types\n  - `Value_Type.Date`\n  - `Value_Type.Date_Time`\n  - `Value_Type.Time`\n  - `Value_Type.Integer`\n  - `Value_Type.Float`\n  - `Value_Type.Boolean`\n\n\n? `Value_Type.Date`, `Value_Type.Date_Time`, `Value_Type.Time` format strings\n\n   See `Date_Time_Formatter` for more details.\n\n\n? `Value_Type.Integer`, `Value_Type.Float` format strings\n\n  Numeric format strings are specified by the Java DecimalFormat class.\n  See https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html\n  for a complete format specification.\n\n\n? `Value_Type.Boolean` format strings\n\n  Format strings for `Boolean` consist of two values that represent true\n  and false, separated by a `|`."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "split_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "delimiter": {"lazy": false, "type": "Text", "checked": true, "default": "\",\""}, "column_count": {"lazy": false, "type": "Columns_To_Add", "checked": true, "default": "..All_Columns"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["parse", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Splits a column of text into a set of new columns.\nThe original column will be removed from the table.\nThe new columns will be named with the name of the input column with a\nincrementing number after.","arguments": "- column: The name or index of the column to split the text of.\n- delimiter: The term or terms used to split the text.\n- column_count: The number of columns to split to.\n  If `All_Columns` then columns will be added to fit all data.\n- on_problems: Specifies the behavior when a problem occurs.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "split_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "delimiter": {"lazy": false, "type": "Text", "checked": true, "default": "\",\""}},"aliases": ["parse", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Splits a column of text into a set of new rows.\nThe values of other columns are repeated for the new rows.","arguments": "- column: The name or index of the column to split the text of.\n- delimiter: The term or terms used to split the text."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "tokenize_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "column_count": {"lazy": false, "type": "Columns_To_Add", "checked": true, "default": "..All_Columns"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["parse", "regex", "split"],"group": "Standard.Base.Conversions","icon": "split","description": "Tokenizes a column of text into a set of new columns using a regular\nexpression.\nIf the pattern contains marked groups, the values are concatenated\ntogether; otherwise the whole match is returned.\nThe original column will be removed from the table.\nThe new columns will be named with the name of the input column with a\nincrementing number after.","arguments": "- column: The name or index of the column to tokenize the text of.\n- pattern: The pattern used to find within the text.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- column_count: The number of columns to split to.\n  If `Nothing` then columns will be added to fit all data.\n- on_problems: Specifies the behavior when a problem occurs.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "tokenize_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "at_least_one_row": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["parse", "regex", "split"],"group": "Standard.Base.Conversions","icon": "split","description": "Tokenizes a column of text into a set of new rows using a regular\nexpression.\nIf the pattern contains marked groups, the values are concatenated\ntogether; otherwise the whole match is returned.\nThe values of other columns are repeated for the new rows.","arguments": "- column: The name or index of the column to tokenize the text of.\n- pattern: The pattern used to find within the text.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- at_least_one_row: If True, a tokenization that returns no values will still\n  produce at least one row, with `Nothing` for the output column values.\n  Equivalent to converting a tokenization output of [] to [Nothing]."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "parse_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text | Regex", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "parse_values": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": ["regex", "split", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Converts a Text column into new columns using a regular expression\npattern.\n\nEach match becomes a row in the table.\nThe values of other columns are repeated for the new rows.\n\nIf there are no marked groups, a single column with whole content of\nmatch is added. Otherwise, each group becomes a column (with group name\nif named in Regex).","arguments": "- column: The column to split the text of.\n- pattern: The pattern used to search within the text.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- parse_values: Parse any values using the default value parser.","remarks": "? Column Names\n\nIf no marked group, the new column will have the same name as the input.\nIf the marked groups are named, the names will be used otherwise the column\nwill be named `<Input Column> <N>` where `N` is the number of the marked group.\nIf the new name is already in use it will be renamed following the normal\nsuffixing strategy."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "expand_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Type_Error", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "fields": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}, "prefix": {"lazy": false, "type": "Prefix_Name", "checked": true, "default": "..Column_Name"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "split","description": "Expand a column of objects to a new set of columns.","arguments": "- column: The column to expand.\n- fields: The set fields to expand. If `Nothing` then all fields are added.\n- prefix: Prefix to add to the column names. By default the column name is used."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "expand_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Type_Error | No_Such_Column | Index_Out_Of_Bounds", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "at_least_one_row": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "split","description": "Expand aggregate values in a column to separate rows.\n\nFor each value in the specified column, if it is an aggregate (`Vector`,\n`Range`, etc.), expand it to multiple rows, duplicating the values in the\nother columns.\n\n\n\nThe following values are considered sequence-like:\n- `Array`\n- `Vector`\n- `List`\n- `Range`\n- `Date_Range`\n- `Pair`\n- `Table` (interpreted as a sequence of `Row`s)\n- `Column`\n\nSome aggregates, like dictionaries (`Dictionary`, `JS_Object`) will\nexpand into two columns - one for key and one for the value.\n\nIf a value is not an aggregate, or has no defined way of being expanded,\nit is left as a single row containing that value unchanged.\n\nIn in-memory tables, it is permitted to mix values of different types.","arguments": "- column: The column to expand.\n- at_least_one_row: for an empty aggregate value, if `at_least_one_row` is\n  true, a single row is output with `Nothing` for the aggregates column; if\n  false, no row is output at all.","examples": "> Example\n  Expand a column of integer `Vectors` to a column of `Integer`\n\n  table = Table.new [[\"aaa\", [1, 2]], [\"bbb\", [[30, 31], [40, 41]]]]\n  # => Table.new [[\"aaa\", [1, 1, 2, 2]], [\"bbb\", [30, 31, 40, 41]]]"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Illegal_Argument | Inexact_Type_Coercion | Conversion_Failure", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "[0]"}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Cast the selected columns to a specific type.\n\nReturns a new table in which the selected columns are replaced with\ncolumns having the new types.\n\n\n\nIn the Database backend, this will boil down to a CAST operation.\nIn the in-memory backend, a conversion will be performed according to\nthe following rules:\n- Anything can be cast into the `Mixed` type.\n- Converting to a `Char` type, the elements of the column will be\n  converted to text. If it is fixed length, the texts will be trimmed or\n  padded on the right with the space character to match the desired\n  length.\n- Conversion between numeric types will replace values exceeding the\n  range of the target type with `Nothing`.\n- Converting decimal numbers into integers will truncate or round them,\n  depending on the backend. If more control is needed, use the various\n  rounding functions (such as `round` or `floor`).\n- Booleans may also be converted to numbers, with `True` being converted\n  to `1` and `False` to `0`. The reverse is not supported - use `iif`\n  instead.\n- A `Date_Time` may be converted into a `Date` or `Time` type - the\n  resulting value will be truncated to the desired type.\n- If a `Date` is to be converted to `Date_Time`, it will be set at\n  midnight of the default system timezone.\n- For a `Mixed` column being converted into a specific type, each row is\n  converted individually.\n\n If the target type cannot fit some of the values (for example due to too\n small range), a `Conversion_Failure` may be reported according to the\n `on_problems` rules. The Database backends may fail with `SQL_Error`\n instead.","arguments": "- columns: The selection of columns to cast.\n- value_type: The `Value_Type` to cast the column to.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","remarks": "? Inexact Target Type\n\n  If the backend does not support the requested target type, the closest\n  supported type is chosen and a `Inexact_Type_Coercion` problem is\n  reported.\n\n\n! Casting Text values\n\n  The `parse` method should be used to convert text values into other\n  types. Due to this, a Mixed column containing values `[2, \"3\"]` will\n  actually be converted into `[2, Nothing]` when casting to Integer type."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "auto_cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "self.column_names"}, "shrink_types": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Change the value type of table columns to a more specific one, based on\ntheir contents.\n\nThis operation is currently not available in the Database backend."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "filter_blank_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["drop_empty_rows", "drop_missing_rows", "dropna", "filter_empty_rows", "remove_blank_rows", "remove_empty_rows", "remove_missing_rows"],"group": "Standard.Base.Selections","icon": "preparation","description": "Remove rows which are all blank or containing blank values.","arguments": "- when: If Blank_Selector.Any_Cell, then remove any row containing\n any blank values.\n  If Blank_Selector.All_Cells, then only remove rows with all blank values.\n- treat_nans_as_blank: If `True`, then `Number.nan` is considered as blank.","remarks": "? Blank values\n  Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "row_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["count"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the amount of rows in this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load"],"group": "Standard.Base.Input","icon": "data_input","description": "Returns a materialized dataframe containing rows of this table.","arguments": "- max_rows: specifies the maximum number of rows to read."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "to_select_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a query corresponding to this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "to_sql", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Statement", "arguments": {},"aliases": [],"icon": "convert","description": "Returns an SQL statement that will be used for materializing this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "column_info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": ["column types", "field info", "metadata"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a Table describing this table's contents.\n\nThe table lists all columns, counts of non-null items and value types of\neach column."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "make_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal": {"lazy": false}},"aliases": [],"description": "Helper to create columns from internal columns.","arguments": "- internal: The internal column to use for creating a column."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "columns_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "column_naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "updated_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_columns": {"lazy": false}},"aliases": [],"description": "Returns a copy of this table with updated internal columns.","arguments": "- columns: The columns with which to update this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "updated_context", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ctx": {"lazy": false}},"aliases": [],"description": "Returns a copy of this table with updated context.","arguments": "- ctx: The new context for this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "updated_context_and_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ctx": {"lazy": false}, "internal_columns": {"lazy": false}, "subquery": {"lazy": false, "default": "False"}},"aliases": [],"description": "Returns a copy of this table with updated context and columns.","arguments": "- ctx: The new context for this table.\n- internal_columns: The new columns to include in the table.\n- subquery: A boolean indicating whether the operation should be wrapped\n  in a subquery. This is a simple workaround for operations which may be\n  affected by further operations if not wrapped. For example, a group-by\n  may need to be wrapped in this way if a filter is to be performed on it\n  later on. Ideally, this should be done only on demand, if the\n  subsequent operation needs it and operations like join should try to\n  avoid nesting subqueries without necessity. However, for now, for\n  simplicity, we are always wrapping brittle operations. This may be\n  revised in the future, to generate better and more concise SQL code."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "as_subquery", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Nests a table as a subquery, using `updated_context_and_columns`, which\ncauses its columns to be referenced as names rather than expressions."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "is_trivial_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean ! Table_Not_Found", "arguments": {"fail_if_not_found": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Checks if this table is a 'trivial query'.\n\nA trivial query is a result of `connection.query` that has not been\nfurther processed. If there are any columns that are added or removed, or\nany other operations like join or aggregate are performed, the resulting\ntable is no longer trivial.\n\nSome operations, like writing to tables, require their target to be a\ntrivial query.","arguments": "- fail_if_not_found: If `True`, a `Table_Not_Found` error is raised if the\n  table does not exist in the database. Otherwise, `False` is returned."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a simplified text representation for display in the REPL and errors."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing ! Column_Count_Mismatch | Illegal_Argument | File_Error", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "format": {"lazy": false, "default": "Auto_Detect"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Backup"}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["export", "output", "save", "to_file"],"group": "Standard.Base.Output","icon": "data_output","description": "This function writes the table into a file.\n\nThe specific behavior of the various `File_Format`s is specified below.","arguments": "- path: The path to the output file.\n- format: The format of the file.\n  If `Auto_Detect` is specified; the provided file determines the\n  specific type and configures it appropriately. Details of this type are\n  below.\n- on_existing_file: Specified how to handle if the file already exists.\n- match_columns: Specifies how to match columns against an existing file.\n  If `Match_Columns.By_Name` - the columns are mapped by name against an\n  existing file. If there is a mismatch, then a `Column_Name_Mismatch`\n  error is raised.\n  If `Match_Columns.By_Position` - the columns are mapped by position\n  against an existing file. If there is a mismatch, then a\n  `Column_Count_Mismatch` error is raised.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default. The specific issues depend on the `File_Format`\n  argument.","returns": "- If an unsupported `File_Format` is specified, an\n  `Illegal_Argument` is raised.\n- If the path to the parent location cannot be found or the filename is\n  invalid, a `File_Error.Not_Found` is raised.\n- If another IO error occurs, such as access denied, an\n  `File_Error.IO_Error` is raised.\n- If appending and the columns do not match, a `Column_Count_Mismatch` is\n  raised.\n- Other specific errors or warnings that can be raised depend on the\n  format argument.\n- Otherwise, the file is loaded following the rules of the format\n  parameter.","examples": "> Example\n  Write a database table to a CSV file.\n\n      import Standard.Examples\n      from Standard.Database import all\n\n      example_to_csv =\n          connection = Database.connect (SQLite.From_File (File.new \"db.sqlite\"))\n          table = connection.query (SQL_Query.Table_Name \"Table\")\n          table.write (enso_project.data / \"example_csv_output.csv\")","remarks": "? `File_Format` write behaviors\n\n  - `Auto_Detect`: The file format is determined by the provided file.\n  - `Bytes` and `Plain_Text`: The Table does not support these types in\n    the `write` function. If passed as format, an\n    `Illegal_Argument` is raised. To write out the table as plain\n    text, the user needs to convert the Table to Text\n    (e.g. using `to_delimited` method) and then use the `Text.write`\n    function."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "save_as_data_link", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Error"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a Data Link that will act as a view into the query represented by\nthis table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "fill_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "default": {"lazy": false, "type": "DB_Column | Column_Ref | Expression | Previous_Value | Any", "checked": true}},"aliases": ["fill missing", "if_nothing"],"group": "Standard.Base.Values","icon": "table_clean","description": "Returns a new table where missing values in the specified columns have\nbeen replaced with the provided default(s).","arguments": "- columns: Specifies columns by a name, index or regular expression to\n  match names, or a Vector of these.\n- default: The value to replace missing values with. If this argument\n  is a column, the value from `default` at the corresponding position\n  will be used. If this argument is `Previous_Value`, the missing values\n  will be replaced with the previous value in the column. Note that the\n  first rows may stay `Nothing` if they do not have a previous value to\n  use.","examples": "> Example\n  Fill missing values in two columns with the value 20.5.\n\n      fill_nothing = table.fill_nothing [\"col0\", \"col1\"] 20.5"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "fill_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "default": {"lazy": false, "type": "DB_Column | Column_Ref | Expression | Previous_Value | Any", "checked": true}},"aliases": ["fill empty", "if_empty"],"group": "Standard.Base.Values","icon": "table_clean","description": "Returns a new column where empty Text values have been replaced with the\nprovided default.","arguments": "- columns: Specifies columns by a name, index or regular expression to\n  match names, or a Vector of these.\n- default: The value to replace empty values with. If this argument\n  is a column, the value from `default` at the corresponding position\n  will be used. If this argument is `Previous_Value`, the empty values\n  will be replaced with the previous value in the column. Note that the\n  first rows may stay empty if they do not have a previous value to use.","examples": "> Example\n  Fill empty values in two columns with the value \"hello\".\n\n      fill_empty = table.fill_empty [\"col0\", \"col1\"] \"hello\""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "text_replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "term": {"lazy": false, "type": "Text | DB_Column | Column_Ref | Expression | Regex", "checked": true, "default": "\"\""}, "new_text": {"lazy": false, "type": "Text | DB_Column | Column_Ref | Expression", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["regex", "substitute"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces the first, or all occurrences of `term` with `new_text` in each\nrow of the specified column. If `term` is empty, the function returns the\ntable unchanged.\n\nThis method follows the exact replacement semantics of `Text.replace`.\n\nIf regex is used the replacement string can contain references to groups\nmatched. The following syntaxes are supported:\n    $0: the entire match string\n    $&: the entire match string\n    $n: the nth group\n    $&lt;foo&gt;: Named group `foo`\n\nThe exact syntax of the regular expression is dependent on the database\nengine.","arguments": "- columns: Specifies columns by a name, index or regular expression to\n  match names, or a Vector of these.\n- term: The term to find. Can be `Text`, `Regex`, or a `Column` of\n  strings.\n- replacement: The text to replace matches with.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- only_first: If True, only replace the first match.","examples": "> Example\n  Replace dashes with underscores.\n\n      table.text_replace [\"Input\"] \"-\" \"_\"\n\n\n> Example\n  Remove leading and trailing spaces from cells.\n\n      table.text_replace [\"Input\"] \"^\\s*(.*?)\\s*$\".to_regex \"$1\"\n\n\n> Example\n  Replace texts in quotes with parentheses.\n\n      table.text_replace [\"Input\"] '\"(.*?)\"'.to_regex '($1)'"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "text_cleanse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"from": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type)", "checked": true}, "remove": {"lazy": false, "type": "Vector Named_Pattern", "checked": true, "default": "[]"}},"aliases": [],"group": "Standard.Base.Text","icon": "column_add","description": "Applies the specified cleansings to the text in each row of the specified columns","arguments": "- from: The column(s) to cleanse.\n- remove: A vector of the text cleanings to remove from the text. The text cleansings are\n    applied in the order they are provided. The same text cleansing can be used multiple\n    times. The text cleansings are:\n      - ..Leading_Whitespace: Removes all whitespace from the start of the string.\n      - ..Trailing_Whitespace: Removes all whitespace from the end of the string.\n      - ..Duplicate_Whitespace: Removes all duplicate whitespace from the string replacing it with the first whitespace character of the duplicated block.\n      - ..All_Whitespace: Removes all whitespace from the string.\n      - ..Newlines: Removes all newline characters from the string. Line Feed and Carriage Return characters are considered newlines.\n      - ..Leading_Numbers: Removes all numbers from the start of the string.\n      - ..Trailing_Numbers: Removes all numbers from the end of the string.\n      - ..Non_ASCII: Removes all non-ascii characters from the string.\n      - ..Tabs: Removes all tab characters from the string.\n      - ..Letters: Removes all letters from the string.\n      - ..Numbers: Removes all numbers characters from the string.\n      - ..Punctuation: Removes all characters in the set ,.!?():;'\" from the string.\n      - ..Symbols: Removes anything that isn't letters, numbers or whitespace from the string.","examples": "> Example\n  Remove leading and trailing spaces from cells.\n\n      table.text_cleanse [\"Input\"] [..Leading_Whitespace, ..Trailing_Whitespace]"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "running", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}, "of": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "group_by": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector (Text | Sort_Column) | Text", "checked": true, "default": "[]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["count", "cumulative", "maximum", "mean", "minimum", "product", "standard deviation", "sum", "sum", "total", "variance"],"group": "Standard.Base.Values","icon": "data_input","description": "Adds a new column to the table with a running calculation.","arguments": "- statistic: The running statistic to calculate.\n- of: The existing column to run the statistic over.\n- as: The name of the new column.\n- set_mode: Specifies the expected behaviour in regards to existing\n  column with the same name.\n- group_by: Specifies the columns to group by. The running statistic is\n  calculated separately for each group. By default, all rows are treated as\n  a single group.\n- order_by: Specifies the columns to order by. Defaults to the order of\n  the rows in the table. The running statistic is calculated according to the\n  specified ordering.","errors": "","remarks": "? Ordering of rows\n\n  Note that the ordering of rows from the original table is preserved in\n  all cases. The grouping and ordering settings affect how the running statistic is\n  calculated for each row, but the order of the rows itself is\n  not changed by this operation."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "offset", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type)", "checked": true, "default": "Missing_Argument.throw \"columns\""}, "n": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}, "fill_with": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}, "group_by": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["displace", "lag", "lead", "shift", "slide"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a table with new columns offset by n rows, where missing values have been replaced with the\nprovided fill_with strategy.","arguments": "- columns: The columns to offset\n- n: The number of rows to offset the new columns by. Negative n slides the values down in the columns' order adding records at the start. \n     Positive n slides the values up in the columns' order adding records at the end. Defaults to -1.\n- fill_with: The value to replace missing values with. Defaults to adding Nothing Values.\n- - ..Nothing - Add Nothing values in the spaces created by sliding the existing values.\n- - ..Closest_Value - If n is negative the first value gets used, if n is negative the last value gets used.\n- - ..Wrap_Around - In this mode values that slide off the top or bottom reappear at the other end. So no values get lost they are just rotated.\n- group_by: Applies the offset to each group as a separate batch of records.\n- order_by: The order to slide the records through. The actual record order remains the same but the records move as per the order defined by these columns.\n- set_mode: By default creates new columns, but choosing Update replaces the existing fields being offset.\n- on_problems: Missing columns are always an error. Other warnings like grouping on floating point numbers can be ignored or made an error with this argument.","returns": "- A Table of all records, with the selected columns offset by the number specified by n.","errors": "- A Table of all records, with the selected columns offset by the number specified by n.","remarks": "? Ordering of rows\n\n  Note that the ordering of rows from the original table is preserved in\n  all cases. The grouping and ordering settings affect how the values move as they are offset, but the order of the rows itself is\n  not changed by this operation."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "generate_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"over": {"lazy": false, "type": "Generate_Rows_Range", "checked": true, "default": "Missing_Argument.throw \"over\""}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["duplicate", "expand", "repeat", "replicate"],"group": "Standard.Base.Values","icon": "row_add","description": "Generates additional rows of data by repeating existing rows based on a provided range.","arguments": "- over: The range of values to use for the generation. This can be: ..Integer_Range or ..Date_Range\n   - from: The starting value for the range. (Constant, existing column or expression)\n   - to: The ending value for the range. (Constant, existing column or expression)\n   - include_end: Whether to include the end value in the range. (Defaults to False)\n   - step: The column with the step value for the range. (Defaults to 1 or ..Day)\n- as: Optional new name for the expanded range column.\n- on_problems: Missing columns are always an error. Other warnings like grouping on floating point numbers can be ignored or made an error with this argument.","returns": "- A Table of records with each incoming record duplicated by the number of times specified in the range.","errors": "- A Table of records with each incoming record duplicated by the number of times specified in the range."},
{"module": "Standard.Database.DB_Table", "type": "", "name": "make_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}, "columns": {"lazy": false}, "ctx": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "Creates a Table out of a connection, name and list of column names.","arguments": "- connection: The connection to a database.\n- table_name: The name of the table to get.\n- columns: List of columns to fetch. Each column is represented by a pair of\n  column name and its expected SQL Type.\n- ctx: The context to use for the table.\n- on_problems: The behavior to use when problems are encountered."},
{"module": "Standard.Database.DB_Table", "type": "", "name": "default_join_condition", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "join_kind": {"lazy": false}},"aliases": [],"description": "By default, join on the first column, unless it's a cross join, in which\ncase there are no join conditions."},
{"module": "Standard.Database.DB_Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "Table_Ref", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "", "name": "MAX_LITERAL_ELEMENT_COUNT", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The largest dataset that can be used to make a literal table, expressed in number of elements."},
{"module": "Standard.Database.DB_Table", "type": "", "name": "make_literal_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "column_vectors": {"lazy": false}, "column_names": {"lazy": false}, "alias": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "", "name": "_resolve_grouping_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector", "arguments": {"columns_helper": {"lazy": false, "type": "Table_Column_Helper", "checked": true}, "group_by": {"lazy": false, "type": "Vector", "checked": true}, "problem_builder": {"lazy": false, "type": "Problem_Builder", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "", "name": "_resolve_order_descriptors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "ordering": {"lazy": false}, "default_ordering": {"lazy": false}, "operation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "Many_Files_List", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect", "arguments": {},"aliases": [],"description": "Represents a specific SQL dialect.\n\nIt encapsulates dialect-specific code generation details allowing us to\nsupport differing SQL dialects."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "ensure_query_has_no_holes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation\naccording to the specific dialect."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part's that determine what order each part gets written in for the final SQL output\nIf you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.\n\nOne of the purposes of this method is to verify if the expected ordering\nsettings are supported by the given database backend.","arguments": "- internal_column: the column to order by.\n- sort_direction: the direction of the ordering.\n- text_ordering: If provided, specifies that the column should be treated\n  as text values according to the provided ordering. For non-text types,\n  it should be set to `Nothing`."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "prepare_distinct", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Prepares a distinct operation."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso\n`Value_Type`."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a helper object that handles the logic of setting values in a\nprepared statement.\n\nThis object may provide custom logic for handling dialect-specific\nhandling of some types."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": [],"description": "Builds an SQL expression that casts the given expression to the given\ntarget type.","arguments": "- column: the input column to transform.\n- target_type: the target type.\n- infer_result_type_from_database_callback: A callback that can be used\n  to infer the type of the newly built expression from the Database. It\n  should be used by default, unless an override is chosen."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": [],"description": "Specifies if the `fetch_columns` operation needs to execute the query to\nget the column types.\n\nIn most backends, the `getMetaData` may be called on a\n`PreparedStatement` directly, to infer column types without actually\nexecuting the query. In some however, like SQLite, this is insufficient\nand will yield incorrect results, so the query needs to be executed (even\nthough the full results may not need to be streamed).\n\nThe function takes the statement as an argument which can be used in\nheuristics telling whether the execute is needed."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": [],"description": "Performs any transformations on a column resulting from unifying other\ncolumns.\n\nThese transformations depend on the dialect. They can be used to align\nthe result types, for example."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": [],"description": "Prepares a query that can be used to fetch the type of an expression in\nthe provided context.\n\nThis method may modify the context to optimize the query while preserving\nthe types. For example, in most databases, it is fine to add\n`WHERE FALSE` to the query - ensuring that the engine will not do any\nactual work, but the resulting type will still be the same. There are\nexceptions though, like SQLite, where the best we can do is add\n`LIMIT 1`."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate": {"lazy": false}},"aliases": [],"description": "Checks if the given aggregate is supported.\n\nShould raise an appropriate dataflow error if not, or just return `True`."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a helper for mapping database-specific SQL errors into our common\nerror types."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.\n\nReturns `Nothing` if the key is not defined."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "prepare_metadata_for_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}, "operation_input_type": {"lazy": false}},"aliases": [],"description": "Prepares metadata for an operation taking a date/time period and checks\nif the given period is supported."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "if_replace_params_supports", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replace_params": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Returns true if the `replace` parameters are supported by this backend."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Determines the value type to use when uploading the given column to the\nDatabase.\n\nThis will usually just be `column.value_type`, but it allows the database\nto do custom fallback handling for datatypes that are not supported."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "should_check_table_integrity_at_beginning_of_transaction", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "An optional method. It only needs to be implemented if\n`DDL_Transaction.Support_Level` of this connection is different than `Allowed`.\n\nIt specifies if the table integrity should be checked at the beginning of\nthe transaction - to check if there were no unexpected modifications\nbetween the table was created (outside of transaction) and the\ntransaction was entered. Some dialects may decide to opt-out of\nthis check for performance reasons."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "custom_build_aggregate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Pair Context (Vector (Internal_Column | DB_Wrapped_Error))", "arguments": {"base_table": {"lazy": false, "type": "DB_Table", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "resolved_aggregates": {"lazy": false, "type": "Vector (Pair Text Aggregate_Column)", "checked": true}, "problem_builder": {"lazy": false, "type": "Problem_Builder", "checked": true}},"aliases": [],"description": "An optional method adding custom handling for the `aggregate` operation.\n\nThis method may be left undefined, in which case the default\nimplementation defined in `Aggregate_Helper.default_build_aggregate` will\nbe used. The method should be defined only if the dialect requires custom\nlogic."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Generates a expression for use in the SELECT OR WHERE clause. \nUsed for databases where the expression syntax is different in the SELECT clause \nto the syntax in the WHERE clause"},
{"module": "Standard.Database.Dialect", "type": "Temp_Table_Style", "name": "Temporary_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Temp_Table_Style", "arguments": {},"aliases": [],"description": "The temporary table is created using a create table statement."},
{"module": "Standard.Database.Dialect", "type": "Temp_Table_Style", "name": "Hash_Prefix", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Temp_Table_Style", "arguments": {},"aliases": [],"description": "The temporary table is created using a # table name."},
{"module": "Standard.Database.Dialect", "type": "", "name": "sqlite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of SQLite databases."},
{"module": "Standard.Database.Dialect", "type": "", "name": "postgres", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of PostgreSQL databases."},
{"module": "Standard.Database.Dialect", "type": "", "name": "default_fetch_primary_key", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "Default implementation relying on DatabaseMetaData."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Negative_Decimal_Places", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": []},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Float_Decimal_Places", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": []},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Use_Builtin_Bankers", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": []},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Primary_Key_Allows_Nulls", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": []},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Separate_NaN", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the Database distinguishes a separate `NaN` value for\nfloating point columns. Some databases will not be able to distinguish\nNaN from NULL."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Nested_With_Clause", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the Database backend supports WITH clauses in nested queries."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Case_Sensitive_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports case-sensitive column names. If `False`, the backend will\nmatch column names in a case insensitive way, so that \"Foo\" and \"foo\" will refer to the\nsame column."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Infinity", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports the `Infinity` value for floating point columns."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Case_Sensitive_Text_Comparison", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies text comparisons are case sensitive by default."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Sort_Digits_As_Numbers", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports natural ordering operations."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Case_Insensitive_Ordering", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "PRIAVTE\nSpecifies if the backend supports case insensitive ordering."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Case_Insensitive_Ordering_By_Default", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend uses case insensitive sort in its default ordering."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Order_By_Unicode_Normalization_By_Default", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend uses unicode normalization in its default ordering."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Order_By_Unicode_Normalization_When_Case_Insensitive", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend uses unicode normalization when doing case insentive ordering."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Allows_Mixed_Type_Comparisons", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if mixed operations comparing\nmixed types are allowed by a given backend. Some backends will allow\nsuch comparisons, when mixed type storage is allowed or by coercing to\nthe target type; others will fail with a type error."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Unicode_Normalization", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend compares\nstrings taking Unicode Normalization into account, i.e. whether\n's\\u0301' is considered equal to 'ś'."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "NaN_Non_Comparable", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if NaN value is\ntreated as greater than all numbers. If `False`, `NaN` is expected to\nyield False to both < and > comparisons."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Distinct_Returns_First_Row_From_Group_If_Ordered", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "PRIAVTE\nIf `order_by` was\napplied before, the distinct operation will return the first row from\neach group. Guaranteed in the in-memory backend, but may not be\nsupported by all databases."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Date_Time", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports date/time operations."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Text_Length_Limited_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports setting\na length limit on text columns."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Fixed_Length_Text_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports fixed\nlength text columns."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Length_Restricted_Text_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports\nlength restrictions for text columns."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Removes_Trailing_Whitespace_Casting_From_Char_To_Varchar", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "if SELECT concat('X', CAST(CAST('   ' AS CHAR(3)) AS VARCHAR(3)), 'X')\nreturns XX then this should be set to True"},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Char_Max_Size_After_Substring_Kept", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies how the max size of the char\ntype behaves after text_left/text_right.\nIf True the orginal size is kept, if False the size is reset."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Different_Size_Integer_Types", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports\ninteger types of various sizes, like 16-bit or 32-bit integers."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_8bit_Integer", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports 8-bit\nintegers."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Decimal_Type", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports the `Decimal`\nhigh-precision type."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Time_Duration", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports a\n`Duration`/`Period` type."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Nanoseconds_In_Time", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports\nnanosecond precision in time values."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Mixed_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports mixed-type\ncolumns."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Date_Time_Without_Timezone", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports\ndate/time operations without a timezone (true for most Database backends).\nDefaults to `.is_integer`."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Operation", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unsupported_Database_Operation", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Operation", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Convert the SQL error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Operation", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Pretty print the error."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Type", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unsupported_Database_Type", "arguments": {"type": {"lazy": false, "type": "Text", "checked": true}, "db": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Type", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Convert the SQL error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Type", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Pretty print the error."},
{"module": "Standard.Database.Errors", "type": "Different_Connections", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Different_Connections", "arguments": {},"aliases": [],"description": "Indicates that the operation tried to use tables from different connections."},
{"module": "Standard.Database.Errors", "type": "Different_Connections", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Convert the SQL error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "Different_Connections", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Pretty print the error."},
{"module": "Standard.Database.Errors", "type": "Aggregagtion_Requires_Order", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Aggregagtion_Requires_Order", "arguments": {"op_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that an aggregation operation requires the input to be ordered."},
{"module": "Standard.Database.Errors", "type": "Aggregagtion_Requires_Order", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Convert the SQL error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "Aggregagtion_Requires_Order", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Pretty print the error."},
{"module": "Standard.Database.Errors", "type": "SQL_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Error", "arguments": {"java_exception": {"lazy": false}, "related_query": {"lazy": false, "default": "Nothing", "comment": "- related_query (optional): A string representation of a query that this   error is related to."}},"aliases": [],"description": "Indicates an error with executing a query, update or connecting to the\ndatabase.","arguments": "- java_exception: The underlying exception.\n- related_query (optional): A string representation of a query that this\n  error is related to."},
{"module": "Standard.Database.Errors", "type": "SQL_Error", "name": "throw_sql_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Throws an error as if a SQL Exception was thrown."},
{"module": "Standard.Database.Errors", "type": "SQL_Error", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the SQL error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "SQL_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the SQL error."},
{"module": "Standard.Database.Errors", "type": "SQL_Timeout", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Timeout", "arguments": {"java_exception": {"lazy": false}, "related_query": {"lazy": false, "default": "Nothing", "comment": "- related_query (optional): A string representation of a query that this   error is related to."}},"aliases": [],"description": "Indicates that an operation has timed out.","arguments": "- java_exception: The underlying exception.\n- related_query (optional): A string representation of a query that this\n  error is related to."},
{"module": "Standard.Database.Errors", "type": "SQL_Timeout", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the timeout error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "SQL_Timeout", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the timeout error."},
{"module": "Standard.Database.Errors", "type": "SQL_Warning", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Warning", "arguments": {"java_exception": {"lazy": false}},"aliases": [],"description": "Indicates that a database backend has reported a non-fatal warning when\nexecuting an operation."},
{"module": "Standard.Database.Errors", "type": "SQL_Warning", "name": "message", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Errors", "type": "SQL_Warning", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Errors", "type": "Integrity_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integrity_Error", "arguments": {"object_description": {"lazy": false}},"aliases": [],"description": "Signalizes that an operation tried using objects coming from different\ncontexts.\n\nTo use columns from different tables, you must first join them."},
{"module": "Standard.Database.Errors", "type": "Integrity_Error", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a human-readable representation of the integrity error."},
{"module": "Standard.Database.Errors", "type": "Integrity_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the integrity error."},
{"module": "Standard.Database.Errors", "type": "Table_Not_Found", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Not_Found", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that a table was not found in the database.","arguments": "- table_name: The name of the table that was not found."},
{"module": "Standard.Database.Errors", "type": "Table_Not_Found", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the table not found error."},
{"module": "Standard.Database.Errors", "type": "Table_Already_Exists", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Already_Exists", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that a table already exists in the database.","arguments": "- table_name: The name of the table that already exists."},
{"module": "Standard.Database.Errors", "type": "Table_Already_Exists", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the table already exists error."},
{"module": "Standard.Database.Errors", "type": "Unmatched_Rows", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unmatched_Rows", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the `Update` operation encountered input rows that did not\nhave any matching rows in the target table."},
{"module": "Standard.Database.Errors", "type": "Unmatched_Rows", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the rows already present error."},
{"module": "Standard.Database.Errors", "type": "Rows_Already_Present", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Rows_Already_Present", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the `Insert` operation encountered input rows that already\nhad matching rows in the target table."},
{"module": "Standard.Database.Errors", "type": "Rows_Already_Present", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the rows already present error."},
{"module": "Standard.Database.Errors", "type": "Multiple_Target_Rows_Matched_For_Update", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Multiple_Target_Rows_Matched_For_Update", "arguments": {"example_key": {"lazy": false, "type": "Vector Any", "checked": true}, "example_count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the source table had rows matching multiple rows in the\ntarget table by the specified key."},
{"module": "Standard.Database.Errors", "type": "Multiple_Target_Rows_Matched_For_Update", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the multiple target rows matched for update error."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Encoding", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unsupported_Database_Encoding", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "A warning indicating that the encoding inferred to be used by the\ndatabase is not supported by Enso.\n\nThis should not affect data passed to/from the database, as the\nconnection driver should handle the translation. However, it affects how\nidentifier names are being handled, and it may cause trouble when the\nlength of identifier names is wrongly inferred, causing aliasing of names\nand generating invalid queries."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Encoding", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the unsupported database encoding warning."},
{"module": "Standard.Database.Errors", "type": "Invariant_Violation", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invariant_Violation", "arguments": {"message": {"lazy": false, "type": "Text|Nothing", "checked": true}, "original_cause": {"lazy": false, "type": "SQL_Error", "checked": true}},"aliases": [],"description": "Indicates that the database has been modified between the time the query\nwas prepared and the time it was executed, breaking an expected invariant\nand potentially causing data corruption.","arguments": "- message: A message describing the broken invariant, if available.\n  It may be set to `Nothing` if the backend cannot decode the invariant\n  message from the SQL error.\n- original_cause: The original SQL error that this error has been\n  translated from."},
{"module": "Standard.Database.Errors", "type": "Invariant_Violation", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Select_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "select, remove, reorder, and rename columns."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Filter", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "filter rows in a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Aggregate", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "aggregate values in a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Sort", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "sort rows in a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Join", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "join tables."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Union", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "combine the results of two queries."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Distinct", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "remove duplicate rows from a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Text_Cleanse", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "cleanse text data."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Integration_Tests", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "Catch all for tests that haven't yet been categorized correctly or use multiple features."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Add_Group_Number", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "add a group number column to a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Add_Row_Number", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "add a row number column to a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Make_Table_From", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "create a table from a dictionary or vectors."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Column_Operations", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "currently blocks getting a DB_Column from a DB_Table, but will soon refine to operations on DB_Column."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Sample", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "get_row, take, drop, limit"},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Replace", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "replace values in a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Merge", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "merge two tables."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Cross_Join", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "cross join two tables."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Offset", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "offset one or more columns"},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Generate_Rows", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "generate rows from a range"},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "if_supported_else_throw", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false, "type": "Any", "checked": true}, "error_name": {"lazy": false, "type": "Text", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Check if a feature is supported by a dialect, and throw an error if it is not."},
{"module": "Standard.Database.SQL", "type": "SQL_Fragment", "name": "Code_Part", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Fragment", "arguments": {"code": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A SQL fragment that represents raw SQL code.","arguments": "- code: A fragment of SQL code."},
{"module": "Standard.Database.SQL", "type": "SQL_Fragment", "name": "Interpolation", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Fragment", "arguments": {"object": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "A SQL fragment that represents an object which will be interpolated into\nthe query.","arguments": "- object: A value that will be interpolated into the query."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"fragments": {"lazy": false, "type": "Vector_Builder SQL_Fragment", "checked": true}},"aliases": [],"description": "A SQL_Builder for SQL queries.\n\n\n\nIt can be used to concatenate parts of SQL code in O(1) time and at the\nend build the actual query in linear time.","arguments": "- fragments: A builder that contains fragments of SQL code."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a SQL_Builder representing and empty code fragment."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "code", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "Creates a SQL_Builder representing a code fragment containing the specified raw\ncode.","arguments": "- text: The raw SQL code."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "interpolation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"object": {"lazy": false}},"aliases": [],"description": "Creates a SQL_Builder representing an interpolation of the given object.","arguments": "- object: The object to be interpolated into the query as if it has the type\n  given by `sql_type`."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "from_fragments", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"fragments": {"lazy": false}},"aliases": [],"description": "Creates an SQL_Builder from a list of fragments."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "join", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"separator": {"lazy": false}, "statements": {"lazy": false}},"aliases": [],"description": "Joins a vector of code fragments with the provided separator.","arguments": "- separator: The separator to use when joining the code fragments.\n- statements: The SQL statements to join using `separator`."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "++", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"description": "Concatenates two code fragments.","arguments": "- other: The code fragment to append to `self`."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the SQL_Builder represents an empty code fragment."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "is_constant", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if a code fragment is a constant."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "extract_constant", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Extracts the interpolated constant from the builder.\nThis can only be called if `is_constant` returns `True`."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "build", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Builds a SQL statement."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "paren", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Wraps the code fragment in parentheses."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "prefix_if_present", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"prefix": {"lazy": false}},"aliases": [],"description": "If the fragment is non empty, prepends the specified prefix to it.\n\n\n\nEmpty fragments are unaffected.","arguments": "- prefix: The prefix to append if the fragment is present."},
{"module": "Standard.Database.SQL", "type": "", "name": "optimize_fragments", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"fragments": {"lazy": false}},"aliases": [],"description": "Merges neighboring code fragments to create a more compact representation of\nthe same code.","arguments": "- fragments: The fragments to be merged together."},
{"module": "Standard.Database.SQL_Query", "type": "SQL_Query", "name": "Table_Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Query", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"name\""}},"aliases": [],"description": "Query a whole table or view."},
{"module": "Standard.Database.SQL_Query", "type": "SQL_Query", "name": "Raw_SQL", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Query", "arguments": {"sql": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"sql\""}},"aliases": [],"description": "Raw SQL query statement."},
{"module": "Standard.Database.SQL_Query", "type": "SQL_Query", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Statement", "arguments": {"internal_fragments": {"lazy": false, "type": "Vector SQL_Fragment", "checked": true}},"aliases": [],"description": "Represents a built SQL statement.\n\n\n\nThe statement consists of SQL code with parameters and values that will be\ninterpolated for these parameters.","arguments": "- internal_fragments: A vector of SQL code fragments."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "deserialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Statement ! Illegal_Argument", "arguments": {"json": {"lazy": false, "type": "Text | JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "fragments", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "A vector of code fragments.\n\nConsists of two types of values:\n- SQL_Fragment.Code_Part, representing parts of raw SQL code and\n- SQL_Fragment.Interpolation, representing objects that will be\n  interpolated in between the SQL code."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "unsafe_to_raw_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "This function returns a raw SQL string for the query, manually handling\nthe interpolation that is normally handled by the database engine itself.\n\nIt should be used EXTREMELY carefully - the returned SQL code should\nalways be read by a human to ensure that it does what is expected before\nexecuting it in any REPLs or other database interfaces.\n\nIt should NEVER be used in production code."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "prepare", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a pair consisting of the SQL code with holes for values and\na list for values that should be substituted."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a JS_Object representation of the statement."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "serialize", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object ! Unable_To_Serialize_SQL_Statement", "arguments": {"ensure_roundtrip": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Serializes this SQL statement to JSON.","arguments": "- ensure_roundtrip: If true, interpolated objects will be checked if they\n  can be deserialized back. If any object cannot make a round-trip, an\n  error will be thrown. If false, no checks are performed."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Database.SQL_Statement", "type": "Unable_To_Serialize_SQL_Statement", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unable_To_Serialize_SQL_Statement", "arguments": {"obj": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.SQL_Statement", "type": "Unable_To_Serialize_SQL_Statement", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.SQL_Type", "type": "SQL_Type", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Type", "arguments": {"typeid": {"lazy": false, "type": "Integer", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}, "precision": {"lazy": false, "type": "Nothing | Integer", "checked": true, "default": "Nothing"}, "scale": {"lazy": false, "type": "Nothing | Integer", "checked": true, "default": "Nothing"}, "nullable": {"lazy": false, "type": "Boolean | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Represents an internal SQL data-type.","arguments": "- typeid: a numerical type id, as defined in `java.sql.Types`.\n- name: a database-specific type name, used for pretty printing.\n- precision: For character types, specifies their length.\n  See `ResultSetMetaData.getPrecision`.\n- scale: The scale for fixed precision numeric types. Not applicable for\n  other types, so it's value is undefined.\n  See `ResultSetMetaData.getScale`.\n- nullable: Specifies if the given column is nullable. May be `Nothing`\n  if that is unknown / irrelevant for the type.\n  ToDo: the precise meaning of this will be revised with #5872."},
{"module": "Standard.Database.SQL_Type", "type": "SQL_Type", "name": "null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "The SQL type representing a null value."},
{"module": "Standard.Database.SQL_Type", "type": "SQL_Type", "name": "from_metadata", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"metadata": {"lazy": false}, "ix": {"lazy": false}},"aliases": [],"description": "Constructs a `SQL_Type` from a `ResultSetMetaData` object."},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "Take_Drop", "name": "Take", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Take_Drop", "arguments": {},"aliases": []},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "Take_Drop", "name": "Drop", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Take_Drop", "arguments": {},"aliases": []},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "", "name": "take_drop_helper", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"take_drop": {"lazy": false}, "table": {"lazy": false}, "selector": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true}},"aliases": [],"description": "Apply `take` or `drop` to a table, returning the specified by the selector."},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "", "name": "collect_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"take_drop": {"lazy": false}, "length": {"lazy": false}, "selector": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true}},"aliases": [],"description": "Turn the selector into a vector of ranges"},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "", "name": "check_supported", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selector": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true}, "cont": {"lazy": true}},"aliases": [],"description": "Throw Unsupported_Database_Operation for selectors that are not supported by database backends."},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "", "name": "cleanup_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ranges": {"lazy": false, "type": "Vector Range", "checked": true}},"aliases": [],"description": "Remove empty ranges."},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "", "name": "generate_subquery", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "row_column_name": {"lazy": false}, "range": {"lazy": false}},"aliases": [],"description": "Filter a table with a single range. Returns only those rows whose row column fall within the range."},
{"module": "Standard.Database.Update_Action", "type": "Update_Action", "name": "Insert", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Update_Action", "arguments": {},"aliases": [],"description": "Records are appended but if cause a primary key clash will fail."},
{"module": "Standard.Database.Update_Action", "type": "Update_Action", "name": "Update", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Update_Action", "arguments": {},"aliases": [],"description": "Just update the existing records. Unmatched columns are left unchanged.\nErrors if any record is not matched in the target table."},
{"module": "Standard.Database.Update_Action", "type": "Update_Action", "name": "Update_Or_Insert", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Update_Action", "arguments": {},"aliases": [],"description": "Append the records to the new table if not found.\nUpdates existing records to the new values. Unmatched columns are left unchanged."},
{"module": "Standard.Database.Update_Action", "type": "Update_Action", "name": "Align_Records", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Update_Action", "arguments": {},"aliases": [],"description": "Appends new records, updates existing records, removes records not in the target table"},
{"module": "Standard.Examples.Main", "type": "Example_Error_Type", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Example_Error_Type", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Create an example error.","arguments": "- message: The message contained in the error type."},
{"module": "Standard.Examples.Main", "type": "No_Methods", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "No_Methods", "arguments": {},"aliases": [],"description": "A dummy type that is used for example purposes."},
{"module": "Standard.Examples.Main", "type": "My_Error", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "My_Error", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Construct a simple error."},
{"module": "Standard.Examples.Main", "type": "", "name": "data_dir", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The data directory of the Examples project."},
{"module": "Standard.Examples.Main", "type": "", "name": "csv", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example CSV file for experimenting with Table and its APIs."},
{"module": "Standard.Examples.Main", "type": "", "name": "csv_path", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The path to the CSV."},
{"module": "Standard.Examples.Main", "type": "", "name": "csv_2500_rows", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example CSV file with 2,500 rows.","remarks": "! Downloading\n  Calling this method will result in the CSV file being downloaded from the\n  internet if it is not already present on your disk. If you do not\n  want this to happen, please place the spreadsheet in the\n  `lib/Standard/Examples/<version>/data` folder for your Enso distribution."},
{"module": "Standard.Examples.Main", "type": "", "name": "xls", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example XLS file for experimenting with Table and its APIs.","remarks": "! Downloading\n  Calling this method will result in the spreadsheet file being downloaded\n  from the internet if it is not already present on your disk. If you do not\n  want this to happen, please place the spreadsheet in the\n  `lib/Standard/Examples/<version>/data` folder for your Enso distribution."},
{"module": "Standard.Examples.Main", "type": "", "name": "xlsx", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example XLSX file for experimenting with Table and its APIs.","remarks": "! Downloading\n  Calling this method will result in the spreadsheet file being downloaded\n  from the internet if it is not already present on your disk. If you do not\n  want this to happen, please place the spreadsheet in the\n  `lib/Standard/Examples/<version>/data` folder for your Enso distribution."},
{"module": "Standard.Examples.Main", "type": "", "name": "scratch_file", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A file that is used for writing temporary data as part of tests."},
{"module": "Standard.Examples.Main", "type": "", "name": "duration", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example duration for experimenting with duration APIs."},
{"module": "Standard.Examples.Main", "type": "", "name": "json_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example amount of JSON as text."},
{"module": "Standard.Examples.Main", "type": "", "name": "json", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Example JSON for working with."},
{"module": "Standard.Examples.Main", "type": "", "name": "json_object", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example JSON object."},
{"module": "Standard.Examples.Main", "type": "", "name": "list", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example cons-list."},
{"module": "Standard.Examples.Main", "type": "", "name": "dictionary", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A simple dictionary that contains some numbers mapped to their word equivalents."},
{"module": "Standard.Examples.Main", "type": "", "name": "no_such_method", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a no_such_method_error as a value."},
{"module": "Standard.Examples.Main", "type": "", "name": "throw_error", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Throws an error."},
{"module": "Standard.Examples.Main", "type": "", "name": "throw_panic", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Throws a panic."},
{"module": "Standard.Examples.Main", "type": "", "name": "geo_data_url", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A URL for open-source geographic data about the locations of bus-stop ads in\nLos Angeles."},
{"module": "Standard.Examples.Main", "type": "", "name": "get_response", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets an HTTP response from a network endpoint.","remarks": "! Makes a Network Request\n  Calling this method will cause Enso to make a network request to a data\n  endpoint."},
{"module": "Standard.Examples.Main", "type": "", "name": "get_geo_data", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets HTTP data from a network endpoint.","remarks": "! Makes a Network Request\n  Calling this method will cause Enso to make a network request to a data\n  endpoint."},
{"module": "Standard.Examples.Main", "type": "", "name": "uri", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A basic URI for examples."},
{"module": "Standard.Examples.Main", "type": "", "name": "image_file", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A file that contains an image.","remarks": "! Downloading\n  Calling this method will result in the image file being downloaded from\n  the internet if it is not already present on your disk. If you do not want\n  this to happen, please place the image in the\n  `lib/Standard/Examples/<version>/data` folder for your Enso distribution."},
{"module": "Standard.Examples.Main", "type": "", "name": "image", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A PNG image.","remarks": "! Downloading\n  Calling this method will result in the image file being downloaded from\n  the internet if it is not already present on your disk. If you do not want\n  this to happen, please place the image in the\n  `lib/Standard/Examples/<version>/data` folder for your Enso distribution."},
{"module": "Standard.Examples.Main", "type": "", "name": "matrix", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A matrix that corresponds to `image`."},
{"module": "Standard.Examples.Main", "type": "", "name": "add_1_to", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}},"aliases": [],"description": "A silly little function that adds one to the provided number."},
{"module": "Standard.Examples.Main", "type": "", "name": "get_boolean", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A function that just returns a constant boolean value."},
{"module": "Standard.Examples.Main", "type": "", "name": "simple_table_json", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A simple small piece of JSON that can easily be converted into a table."},
{"module": "Standard.Examples.Main", "type": "", "name": "simple_table_json_headers", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The headers for the columns in the JSON table `simple_table_json`."},
{"module": "Standard.Examples.Main", "type": "", "name": "geo_json", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Some simple GeoJSON."},
{"module": "Standard.Examples.Main", "type": "", "name": "integer_column", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing integers."},
{"module": "Standard.Examples.Main", "type": "", "name": "decimal_column", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing decimal numbers."},
{"module": "Standard.Examples.Main", "type": "", "name": "bool_column_1", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing booleans."},
{"module": "Standard.Examples.Main", "type": "", "name": "bool_column_2", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing booleans."},
{"module": "Standard.Examples.Main", "type": "", "name": "text_column_1", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing text."},
{"module": "Standard.Examples.Main", "type": "", "name": "text_column_2", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing text."},
{"module": "Standard.Examples.Main", "type": "", "name": "inventory_table", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A simple table that contains basic shop inventory data for the food shop."},
{"module": "Standard.Examples.Main", "type": "", "name": "popularity_table", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A simple table that contains basic item popularity data for the food shop."},
{"module": "Standard.Examples.Main", "type": "", "name": "transactions_table", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A simple tablethat contains basic transaction data for the food shop."},
{"module": "Standard.Examples.Main", "type": "", "name": "match", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example regex match."},
{"module": "Standard.Examples.Main", "type": "", "name": "welcome", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The welcome file for Enso."},
{"module": "Standard.Geo.Geo_Json", "type": "", "name": "geo_json_to_table", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"geo_json": {"lazy": false}, "fields": {"lazy": false, "default": "Nothing"}},"aliases": [],"icon": "convert","description": "Converts a GeoJSON object to a Table.","arguments": "- geo_json: The GeoJSON object to convert.\n- fields: The set of fields to extract from the GeoJSON object."},
{"module": "Standard.Geo.Helpers", "type": "Object_Type", "name": "Feature", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Object_Type", "arguments": {},"aliases": [],"description": "A Geo JSON feature."},
{"module": "Standard.Geo.Helpers", "type": "Object_Type", "name": "Feature_Collection", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Object_Type", "arguments": {},"aliases": [],"description": "A Geo JSON feature collection."},
{"module": "Standard.Geo.Helpers", "type": "Object_Type", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert GeoJSON object type to Text."},
{"module": "Standard.Geo.Helpers", "type": "", "name": "get_feature_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"feature": {"lazy": false}},"aliases": [],"description": "Get JS_Object of a Feature GeoJSON object with properties and geometry merged."},
{"module": "Standard.Geo.Helpers", "type": "", "name": "get_geometry_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"feature": {"lazy": false}},"aliases": [],"description": "Get column key-value pairs of a feature's \"geometry\" object."},
{"module": "Standard.Geo.Helpers", "type": "", "name": "get_point_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Get column key-value pairs of a \"Point\" geometry object."},
{"module": "Standard.Geo.Main", "type": "", "name": "point", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"latitude": {"lazy": false}, "longitude": {"lazy": false}, "elevation": {"lazy": false, "default": "0"}},"aliases": [],"icon": "location","description": "Create a `Table` representing a geographic point with the specified latitude,\nlongitude, and elevation.","arguments": "- latitude: The latitude of the geographic point, specified in decimal form\n  using the [WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System)\n  coordinate system.\n- longitude: The longitude of the geographic point, specified in decimal form\n  using the [WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System)\n  coordinate system.\n- elevation: The elevation of the point from sea level, in metres.","examples": "> Example\n  Create a point representing the centre of London.\n\n      import Standard.Geo\n\n      example_point = Geo.point 51.509865 -0.118092"},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Meters", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use meters as the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Kilometers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use kilometers as the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Feet", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use feet as the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Yards", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use yards as the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Miles", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use miles as the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Smoots", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use Smoots as the unit.\nhttps://en.wikipedia.org/wiki/Smoot"},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "from_meters", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Float", "arguments": {"meters": {"lazy": false, "type": "Float", "checked": true}},"aliases": [],"description": "Converts meters to the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Table", "name": "geo_distance", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Table", "arguments": {"lat1": {"lazy": false, "type": "Float | Column | Column_Ref", "checked": true, "default": "_find_column_with_similar_name  self \"latitude\" \"lat\" (Missing_Argument.throw \"lat1\")"}, "long1": {"lazy": false, "type": "Float | Column | Column_Ref", "checked": true, "default": "_find_column_with_similar_name  self \"longitude\" \"long\" (Missing_Argument.throw \"long1\")"}, "lat2": {"lazy": false, "type": "Float | Column | Column_Ref", "checked": true, "default": "Missing_Argument.throw \"lat2\""}, "long2": {"lazy": false, "type": "Float | Column | Column_Ref", "checked": true, "default": "Missing_Argument.throw \"long2\""}, "units": {"lazy": false, "type": "Distance_Units", "checked": true, "default": "..Meters"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"icon": "geo_map_distance","description": "Computes the distance between two latitude/longitude points on each row of the table.","arguments": "- lat1: The latitude of the first point, either a Column or single value.\n- long1: The longitude of the first point, either a Column or single value.\n- lat2: The latitude of the second point, either a Column or single value.\n- long2: The longitude of the second point, either a Column or single value.\n- units: The unit to return the result in.\n- as: The name of the resulting column to add."},
{"module": "Standard.Geo.Table_Extensions", "type": "", "name": "_find_column_with_similar_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "column_name": {"lazy": false, "type": "Text", "checked": true}, "prefix": {"lazy": false, "type": "Text", "checked": true, "default": "column_name"}, "on_fail": {"lazy": true, "default": "Missing_Argument.throw column_name"}},"aliases": []},
{"module": "Standard.Geo.Table_Extensions", "type": "", "name": "compute_distance", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "lat1": {"lazy": false, "type": "Column | Float", "checked": true}, "lng1": {"lazy": false, "type": "Column | Float", "checked": true}, "lat2": {"lazy": false, "type": "Column | Float", "checked": true}, "lng2": {"lazy": false, "type": "Column | Float", "checked": true}, "units": {"lazy": false, "type": "Distance_Units", "checked": true}, "as": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Geo.Table_Extensions", "type": "", "name": "_to_radians", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"degrees": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Google_Analytics", "arguments": {},"aliases": [],"description": "Type providing API access to Google Analytics."},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "read", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "Missing_Argument.throw \"credentials\""}, "property": {"lazy": false, "type": "Google_Analytics_Property", "checked": true, "default": "Missing_Argument.throw \"property\""}, "dimensions": {"lazy": false, "type": "Vector", "checked": true, "default": "[\u0027country\u0027]"}, "metrics": {"lazy": false, "type": "Vector", "checked": true, "default": "[\u0027activeUsers\u0027]"}, "start_date": {"lazy": false, "type": "Date", "checked": true, "default": "Date.today.previous ..Year"}, "end_date": {"lazy": false, "type": "Date", "checked": true, "default": "Date.today"}},"aliases": [],"group": "Standard.Base.Web","icon": "data_input","description": "Performs Google Analytics call\nThis method calls the Google Analytics Reporting v4 API.","arguments": "- property: The Google Analytics property_id that is being queried\n- dimensions: The dimensions being queried. Default is ['country'].\n- metrics: The metrics being queried. Default is ['activeUsers'].\n- start_date: The beginning date of the query. Default is start of the\n  current year.\n- end_date: The end date being queried. Defaults to today.\n- credentials: The Google credentials to use. Default is to use the\n  Google Application Default Credentials in the environment variables.\n  See https://cloud.google.com/docs/authentication/application-default-credentials"},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "list_accounts", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "..Default"}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}, "include_deleted": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_input","description": "Reads the set of accounts from Google Analytics Admin API.","arguments": "- credentials: The Google credentials to use. Default is to use the\n  Google Application Default Credentials in the environment variables.\n  See https://cloud.google.com/docs/authentication/application-default-credentials\n- limit: The maximum number of accounts to read. Default is 1000.\n- include_deleted: Whether to include deleted accounts. Default is false."},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "list_properties", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "..Default"}, "account": {"lazy": false, "type": "Google_Analytics_Account_Filter", "checked": true, "default": "..All_Accounts"}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}, "include_deleted": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_input","description": "Reads the set of properties from Google Analytics Admin API.","arguments": "- account: The Google Analytics account(s) to read properties from or all\n  accounts. Default is all accounts.\n- credentials: The Google credentials to use. Default is to use the\n  Google Application Default Credentials in the environment variables.\n  See https://cloud.google.com/docs/authentication/application-default-credentials\n- limit: The maximum number of accounts to read. Default is 1000.\n- include_deleted: Whether to include deleted accounts. Default is false."},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "list_metrics", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "Missing_Argument.throw \"credentials\""}, "property": {"lazy": false, "type": "Google_Analytics_Property", "checked": true, "default": "Missing_Argument.throw \"property\""}},"aliases": [],"icon": "data_input","description": "Reads the set of metrics from Google Analytics for a property.","arguments": "- property: The Google Analytics property to read metrics from.\n- credentials: The Google credentials to use. Default is to use the\n  Google Application Default Credentials in the environment variables.\n  See https://cloud.google.com/docs/authentication/application-default-credentials"},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "list_dimensions", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "Missing_Argument.throw \"credentials\""}, "property": {"lazy": false, "type": "Google_Analytics_Property", "checked": true, "default": "Missing_Argument.throw \"property\""}},"aliases": [],"icon": "data_input","description": "Reads the set of dimensions from Google Analytics for a property.","arguments": "- property: The Google Analytics property to read metrics from.\n- credentials: The Google credentials to use. Default is to use the\n  Google Application Default Credentials in the environment variables.\n  See https://cloud.google.com/docs/authentication/application-default-credentials"},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics_Error", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Analytics_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}, "payload": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics_Error", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "", "name": "_make_metrics_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"self_arg": {"lazy": false}, "cache": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "", "name": "_make_dimensions_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"self_arg": {"lazy": false}, "cache": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "", "name": "_make_start_date_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "", "name": "_read_sample_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"dimensions": {"lazy": false, "type": "Vector", "checked": true}, "metrics": {"lazy": false, "type": "Vector", "checked": true}, "start_date": {"lazy": false, "type": "Date", "checked": true}, "end_date": {"lazy": false, "type": "Date", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "", "name": "_handle_google_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Analytics_Account", "arguments": {"java_record": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "id", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Account ID."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Account display name."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "create_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Account creation time."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "region_code", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Account region code."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "is_deleted", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Has the account been deleted?"},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "properties", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "..Default"}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}, "include_deleted": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "data_input","description": "List of all properties of the account.","arguments": "- credentials: The Google credentials to use. Default is the default\n  credentials.\n- limit: The maximum number of accounts to read. Default is 1000.\n- include_deleted: Whether to include deleted accounts. Default is false."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "All_Accounts", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Google_Analytics_Account_Filter", "arguments": {},"aliases": [],"description": "Filter to all accounts."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "Account", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Google_Analytics_Account_Filter", "arguments": {"account": {"lazy": false, "type": "Text|Google_Analytics_Account", "checked": true}},"aliases": [],"description": "Filter to a single account"},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "Accounts", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Google_Analytics_Account_Filter", "arguments": {"accounts": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Filter to set of accounts"},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"self_arg": {"lazy": false}, "cache": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "as_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Array | Nothing", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "", "name": "_create_analytics_account_from_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "AnalyticsAccount", "arguments": {"account": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Creates a Google Analytics account from a text ID.\nMost values are defaulted."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Google_Analytics_Account", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "Dimension", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Analytics_Field", "arguments": {"java_record": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "Metric", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Analytics_Field", "arguments": {"java_record": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "api_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Dimension API Name."},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Dimension display name."},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "category", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Dimension category."},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "description", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Dimension description."},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Analytics_Property", "arguments": {"java_record": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"self_arg": {"lazy": false}, "cache": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "id", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Property ID."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Property display name."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "create_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Property creation time."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "account", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Parent account"},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "currency", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Property currency."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "time_zone", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Property time zone."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "metrics", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "data_input","description": "List of all metrics of the property.","arguments": "- credentials: The Google credentials to use. Default is the default\n  credentials."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "dimensions", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "data_input","description": "List of all dimensions of the property.","arguments": "- credentials: The Google credentials to use. Default is the default\n  credentials."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "From_File", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Credential", "arguments": {"file": {"lazy": false, "type": "File", "checked": true, "default": "Missing_Argument.throw \"file\""}},"aliases": [],"icon": "key","description": "Access using a json credentials file downloaded from your Google account.","arguments": "- file: Path to the json credentials file."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "Default", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Credential", "arguments": {},"aliases": [],"icon": "key","description": "Access using the defaults provided by the environment variables."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "Sample", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Credential", "arguments": {},"aliases": [],"icon": "key","description": "Feeding this into supporting components will give sample data for that component."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Enso_File | File | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"icon": "key","description": "Creates a Google credential either from a json file or the default environment variables.","arguments": "- file: Path to the json credentials file or `Nothing` for the default."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "default", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Credential", "arguments": {},"aliases": [],"icon": "key","description": "Creates a Google credential either from the default environment variables."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "as_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "CredentialsProvider | Nothing", "arguments": {},"aliases": [],"description": "Gets the Java version of the credentials."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": [],"description": "To enable cloud file to work as a credential, need to localise it."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Sheets", "type": "Google_Sheets", "name": "Service", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Sheets", "arguments": {"java_service": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Sheets", "type": "Google_Sheets", "name": "initialize", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"secret_file": {"lazy": false}},"aliases": [],"icon": "cloud","description": "Initializes the Google Sheets instance using the given credentials file.","arguments": "- secret_file: a file containing Google Service Account credentials to use to\n  access Google services. The credentials file can be downloaded from the\n  Google Admin Console when generating a key."},
{"module": "Standard.Google_Api.Google_Sheets", "type": "Google_Sheets", "name": "get_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet_id": {"lazy": false}, "sheet_range": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Gets a table with the given ID and sheet range.","arguments": "- sheet_id: the ID of the downloaded spreadsheet. It can be read from the\n  spreadsheet URL.\n- sheet_range: specifies the sheet and cell range to read, e.g.\n  `'Sheet1!A1:B7'`."},
{"module": "Standard.Image.Histogram", "type": "Histogram", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Histogram", "arguments": {"channel": {"lazy": false}, "data": {"lazy": false}},"aliases": [],"description": "The histogram of a single image channel.","arguments": "- channel: The channel in the image for which this is a histogram.\n- data: The histogram data."},
{"module": "Standard.Image.Histogram", "type": "Histogram", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert histogram data to a JS_Object.","examples": "> Example\n  Convert a histogram to a JavaScript object.\n\n      import Standard.Examples\n\n      example_to_js_object =\n          histo = Examples.image.histogram 0\n          histo.to_js_object"},
{"module": "Standard.Image.Image", "type": "Image", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Image", "arguments": {"opencv_mat": {"lazy": false}},"aliases": [],"description": "The image data type.\n\n\n\nThe image is represented with a matrix of rows x columns. Each\npixel is represented with a vector of 1 to 4 values (channels).\nPixel values are normalized in a range [0.0 .. 1.0].","arguments": "- opencv_mat: The underlying matrix that stores the image data."},
{"module": "Standard.Image.Image", "type": "Image", "name": "from_vector", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"values": {"lazy": false}, "rows": {"lazy": false, "default": "1"}, "channels": {"lazy": false, "default": "1"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Create an image from the array of values.\n\n\n\nThe function expects the array of normalized values to have each value in\nthe range of [0.0 .. 1.0].","arguments": "- values: the vector of numbers.\n- rows: the number of rows in the resulting image.\n- channels: the number of channels in the resulting image.","examples": "> Example\n  Create an image from the vector.\n\n      from Standard.Image import Image\n\n      example_from_vector =\n          Image.from_vector [0, 0, 0, 0, 0, 0] rows=2 channels=1"},
{"module": "Standard.Image.Image", "type": "Image", "name": "read", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"location": {"lazy": false, "type": "File", "checked": true}, "flags": {"lazy": false, "default": "[]"}},"aliases": ["import", "load", "open"],"icon": "data_input","description": "Read an image from a file.\n\nThe function reads images in RGB format, or RGBA if the\n`Read_Flag.Alpha_Channel` flag is specified.","arguments": "- location: the file to read.\n- flags: the read flags.","examples": "> Example\n  Read the image.\n      Image.read \"image.png\"\n\n\n> Example\n  Read the image with alpha channel.\n      Image.read \"image.png\" Read_Flag.Alpha_Channel\n\n\n> Example\n  Read the image and convert it to grayscale.\n      Image.read \"image.png\" Read_Flag.Grayscale"},
{"module": "Standard.Image.Image", "type": "Image", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "flags": {"lazy": false, "default": "[]"}},"aliases": ["export", "output", "save", "to_file"],"icon": "data_output","description": "Write an image to a file.","arguments": "- path: The location to write the image to.\n- flags: A vector of flags that control how the image is written.","examples": "> Example\n  Write the image with applying png compression.\n      image.write path image\n\n\n> Example\n  Write the image with applying png compression.\n      image.write path image (Write_Flag.PNG_Compression 9)\n\n\n> Example\n  Write the image with applying several flags.\n      image.write path image [Write_Flag.JPEG_Quality 40, Write_Flag.JPEG_Progressive]"},
{"module": "Standard.Image.Image", "type": "Image", "name": "rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of image rows.","examples": "> Example\n  Get the number of rows from an image.\n\n      import Standard.Examples\n\n      example_rows = Examples.image.rows"},
{"module": "Standard.Image.Image", "type": "Image", "name": "columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of image columns.","examples": "> Example\n  Get the number of columns from an image.\n\n      import Standard.Examples\n\n      example_cols = Examples.image.columns"},
{"module": "Standard.Image.Image", "type": "Image", "name": "channels", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of image channels.","examples": "> Example\n  Get the number of channels from an image.\n\n      import Standard.Examples\n\n      example_channels = Examples.image.channels"},
{"module": "Standard.Image.Image", "type": "Image", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"row": {"lazy": false}, "column": {"lazy": false}},"aliases": [],"icon": "image","description": "Get the pixel value indexed by row and column.","arguments": "- row: the row index.\n- column: the column index.","examples": "> Example\n  Get the value at the specified row and column.\n\n      import Standard.Examples\n\n      example_get = Examples.image.get 10 10"},
{"module": "Standard.Image.Image", "type": "Image", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "operators","description": "Calculates the per-element sum of an image and a scalar or a matrix.\n\n\n\nThe matrix should have the same dimensions as the image.","arguments": "- value: A value can be a number, a vector of numbers, or a matrix. The\n  number value is applied to each pixel's channel of the image. The\n  vector value is padded with zeros to match the number of channels and\n  then applied to each image's pixel. The matrix value must have the same\n  dimensions (rows, columns, and channels) as this image. Otherwise, the\n  operation results in a `Dimensions_Not_Equal` error. The matrix is\n  applied element-wise, e.g., each matrix element is combined with the\n  appropriate pixel (the element with the same row and column) of this\n  image.","examples": "> Example\n  Add the constant to an image. Operation will add 0.1 to each channel\n  of the image.\n\n      import Standard.Examples\n\n      example_plus = Examples.image + 0.1\n\n\n> Example\n  Add 0.1 to the first channel of the image.\n\n      import Standard.Examples\n\n      example_plus = Examples.image + [0.1]\n\n\n> Example\n  Add 0.1 to the third channel of the image.\n\n      import Standard.Examples\n\n      example_plus = Examples.image + [0, 0, 0.1]\n\n\n> Example\n  Add a matrix to the image.\n\n      import Standard.Examples\n      from Standard.Image import Matrix\n\n      example_plus =\n          image = Examples.image\n          image + (Matrix.zeros rows=image.rows columns=image.columns channels=image.channels)"},
{"module": "Standard.Image.Image", "type": "Image", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "operators","description": "Calculates the per-element difference between an image and a scalar or a matrix.\n\n\n\nThe matrix should have the same dimensions as the image.","arguments": "- value: A value can be a number, a vector of numbers, or a matrix. The\n  number value is applied to each pixel's channel of the image. The\n  vector value is padded with zeros to match the number of channels and\n  then applied to each image's pixel. The matrix value must have the same\n  dimensions (rows, columns, and channels) as this image. Otherwise, the\n  operation results in a `Dimensions_Not_Equal` error. The matrix is\n  applied element-wise, e.g., each matrix element is combined with the\n  appropriate pixel (the element with the same row and column) of this\n  image.","examples": "> Example\n  Add the constant to an image. Operation will subtract 0.1 from each\n  channel of the image.\n\n      import Standard.Examples\n\n      example_minus = Examples.image - 0.1\n\n\n> Example\n  Subtract 0.1 from the first channel of the image.\n\n      import Standard.Examples\n\n      example_minus = Examples.image - [0.1]\n\n\n> Example\n  Subtract 0.1 from the third channel of the image.\n\n      import Standard.Examples\n\n      example_minus = Examples.image - [0, 0, 0.1]\n\n\n> Example\n  Subtract a matrix from the image.\n\n      import Standard.Examples\n      from Standard.Image import Matrix\n\n      example_minus =\n          image = Examples.image\n          image - (Matrix.zeros rows=image.rows columns=image.columns channels=image.channels)"},
{"module": "Standard.Image.Image", "type": "Image", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "math","description": "Calculates the per-element product of an image and a scalar or a matrix.\n\n\n\nThe matrix should have the same dimensions as the image.","arguments": "- value: A value can be a number, a vector of numbers, or a matrix. The\n  number value is applied to each pixel's channel of the image. The\n  vector value is padded with zeros to match the number of channels and\n  then applied to each image's pixel. The matrix value must have the same\n  dimensions (rows, columns, and channels) as this image. Otherwise, the\n  operation results in a `Dimensions_Not_Equal` error. The matrix is\n  applied element-wise, e.g., each matrix element is combined with the\n  appropriate pixel (the element with the same row and column) of this\n  image.","examples": "> Example\n  Multiply each channel of the image by 2.\n\n      import Standard.Examples\n\n      example_mul = Examples.image * 2\n\n\n> Example\n  Multiply first channel of the image by 2, and second channel by 4.\n\n      import Standard.Examples\n\n      example_mul = Examples.image * [2, 4, 1, 1]\n\n\n> Example\n  Multiply first channel of the image by 2, and zero the rest of\n  the channels.\n\n      import Standard.Examples\n\n      example_mul = image * [2]\n\n\n> Example\n  Multiply a matrix and the image.\n\n      import Standard.Examples\n      from Standard.Image import Matrix\n\n      example_mul =\n          image = Examples.image\n          image * (Matrix.ones rows=image.rows columns=image.columns channels=image.channels)"},
{"module": "Standard.Image.Image", "type": "Image", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "math","description": "Performs per-element division of an image and a scalar or a matrix.\n\n\n\nThe matrix should have the same dimensions as the image.","arguments": "- value: A value can be a number, a vector of numbers, or a matrix. The\n  number value is applied to each pixel's channel of the image. The\n  vector value is padded with zeros to match the number of channels and\n  then applied to each image's pixel. The matrix value must have the same\n  dimensions (rows, columns, and channels) as this image. Otherwise, the\n  operation results in a `Dimensions_Not_Equal` error. The matrix is\n  applied element-wise, e.g., each matrix element is combined with the\n  appropriate pixel (the element with the same row and column) of this\n  image.","examples": "> Example\n  Divide each channel of the image by 2.\n\n      import Standard.Examples\n\n      example_div = Examples.image / 2\n\n\n> Example\n  Divide first channel of the image by 2, and second channel by 4.\n\n      import Standard.Examples\n\n      example_div = Examples.image / [2, 4, 1, 1]\n\n\n> Example\n  Divide first channel of the image by 2, and zero the rest of\n  the channels.\n\n      import Standard.Examples\n\n      example_div = image / [2]\n\n\n> Example\n  Divide an image by a matrix.\n\n      import Standard.Examples\n      from Standard.Image import Matrix\n\n      example_div =\n          image = Examples.image\n          image / (Matrix.ones rows=image.rows columns=image.columns channels=image.channels)"},
{"module": "Standard.Image.Image", "type": "Image", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Convert the image to a vector.","examples": "> Example\n  Convert an image to a vector.\n\n      import Standard.Examples\n\n      example_to_vector = Examples.image.to_vector"},
{"module": "Standard.Image.Image", "type": "Image", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the image to a JS_Object.","examples": "> Example\n  Convert an image to a JavaScript object.\n\n      import Standard.Examples\n\n      example_to_json = Examples.image.to_js_object"},
{"module": "Standard.Image.Image", "type": "Image", "name": "to_matrix", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Convert the image to a Matrix.","examples": "> Example\n  Convert an image to a matrix.\n\n      import Standard.Examples\n\n      example_to_mat = Examples.image.to_matrix"},
{"module": "Standard.Image.Image", "type": "Image", "name": "histogram", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"channel": {"lazy": false}},"aliases": [],"icon": "image","description": "Create a histogram for the specified channel of the image.","arguments": "- channel: the channel number.","examples": "> Example\n  Create a histogram.\n\n      import Standard.Examples\n\n      example_histogram = Examples.image.histogram 0"},
{"module": "Standard.Image.Image", "type": "Image_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Image_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Image.Image", "type": "Image_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Image.Image", "type": "Image_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Image.Image", "type": "", "name": "core_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"mat": {"lazy": false}, "value": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"description": "Apply a core matrix operation.","arguments": "- mat: The matrix to operate on.\n- value: The value to apply to the matrix.\n- function: The function with which to apply `value` to `mat`."},
{"module": "Standard.Image.Image", "type": "", "name": "core_op_handler", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Handles errors in `core_op`.","arguments": "- error: The value to throw as an error."},
{"module": "Standard.Image.Image", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Image", "checked": true}},"aliases": []},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "Image", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Image_File_Format", "arguments": {},"aliases": [],"description": "File_Format to read Image files"},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Image.Image_File_Format", "type": "", "name": "supported", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "List comes from org.opencv.imgcodecs.Imgcodecs#imread doc comment."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Matrix", "arguments": {"opencv_mat": {"lazy": false}},"aliases": [],"description": "The matrix data type.\n\n\n\nEach value of the matrix is represented with an array of\nchannels. In contrast to an Image data type, Matrix values are\nnot normalized.","arguments": "- opencv_mat: The internal representation of the matrix."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "zeros", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"rows": {"lazy": false}, "columns": {"lazy": false}, "channels": {"lazy": false, "default": "1"}},"aliases": [],"icon": "data_input","description": "Create a matrix with all elements set to zero.","arguments": "- rows: the number of rows in the resulting matrix.\n- columns: the number of columns in the resulting matrix.\n- channels: the number of channels in the resulting matrix.","examples": "> Example\n  Create a matrix.\n\n      from Standard.Image import Matrix\n\n      example_zeros = Matrix.zeros rows=2 columns=2"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "ones", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"rows": {"lazy": false}, "columns": {"lazy": false}, "channels": {"lazy": false, "default": "1"}},"aliases": [],"icon": "data_input","description": "Create a matrix with all elements set to one.","arguments": "- rows: the number of rows in the resulting matrix.\n- columns: the number of columns in the resulting matrix.\n- channels: the number of channels in the resulting matrix.","examples": "> Example\n  Create a matrix.\n\n      from Standard.Image import Matrix\n\n      example_ones = Matrix.zeros rows=2 columns=2 channels=3"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "identity", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"rows": {"lazy": false}, "columns": {"lazy": false}, "channels": {"lazy": false, "default": "1"}},"aliases": [],"icon": "data_input","description": "Create an identity matrix containing ones on a main diagonal.","arguments": "- rows: the number of rows in the resulting matrix.\n- columns: the number of columns in the resulting matrix.\n- channels: the number of channels in the resulting matrix.","examples": "> Example\n  Create a matrix.\n\n      from Standard.Image import Matrix\n\n      example_identity = Matrix.identity rows=2 columns=2 channels=3"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"values": {"lazy": false}, "rows": {"lazy": false, "default": "1"}, "channels": {"lazy": false, "default": "1"}},"aliases": [],"description": "Create a matrix from the provided vector.","arguments": "- values: the vector of numbers.\n- rows: the number of rows in the resulting matrix.\n- channels: the number of channels in the resulting matrix.","examples": "> Example\n  Create a matrix.\n      from Standard.Image import Matrix\n\n      example_from_vector = Matrix.from_vector [1, 1, 0, 0] rows=2"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of matrix rows.","examples": "> Example\n  Get the number of rows in this matrix.\n\n      import Standard.Examples\n\n      example_rows = Examples.matrix.rows"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of matrix columns.","examples": "> Example\n  Get the number of columns in this matrix.\n\n      import Standard.Examples\n\n      example_columns = Examples.matrix.columns"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "channels", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of matrix channels.","examples": "> Example\n  Get the number of channels in this matrix.\n\n      import Standard.Examples\n\n      example_channels = Examples.matrix.channels"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"row": {"lazy": false}, "column": {"lazy": false}},"aliases": [],"icon": "image","description": "Get the matrix value at the specified row and column.","arguments": "- row: the row index.\n- column: the column index.","examples": "> Example\n  Get the value at the specified row and column.\n\n      import Standard.Examples\n\n      example_get = Examples.matrix.get 0 0"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "reshape", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"rows": {"lazy": false}, "channels": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "image","description": "Reshape the matrix specifying new number of rows and channels.","arguments": "- rows: the new number of rows.\n- channels: the new number of channels.","examples": "> Example\n  Reshape the matrix to a new shape of 3 rows and 1 column, with 1 channel.\n\n      from Standard.Image import Matrix\n\n      example_reshape = Matrix.from_vector [0, 0, 0] . reshape rows=3 channels=1"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "operators","description": "Calculates the per-element sum of two matrices or a matrix and a scalar.","arguments": "- value: A value can be a number, a vector of numbers, or a matrix. The\n  number value is applied to each values's channel of the matrix. The\n  vector value is padded with zeros to match the number of channels and\n  then applied to each pixel of this matrix. The matrix value must have\n  the same dimensions (rows, columns, and channels) as this\n  matrix. Otherwise, the operation results in a `Dimensions_Not_Equal`\n  error. The matrix is applied element-wise, e.g., each matrix element is\n  combined with the appropriate value (the element with the same row and\n  column) of this matrix.","examples": "> Example\n  Add 1 to each element of the matrix.\n\n      import Standard.Examples\n\n      example_plus = Examples.matrix + 1\n\n\n> Example\n  Add 100 to the first channel of the matrix.\n\n      import Standard.Examples\n\n      example_plus = Examples.matrix + [100]\n\n\n> Example\n  Add two matrices.\n\n      import Standard.Examples\n\n      example_plus = Examples.matrix + Examples.matrix"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "operators","description": "Calculates the per-element difference of two matrices or of a matrix and\na scalar.","arguments": "- value: A value can be a number, a vector of numbers, or a matrix. The\n  number value is applied to each values's channel of the matrix. The\n  vector value is padded with zeros to match the number of channels and\n  then applied to each pixel of this matrix. The matrix value must have\n  the same dimensions (rows, columns, and channels) as this\n  matrix. Otherwise, the operation results in a `Dimensions_Not_Equal`\n  error. The matrix is applied element-wise, e.g., each matrix element is\n  combined with the appropriate value (the element with the same row and\n  column) of this matrix.","examples": "> Example\n  Subtract 1 from each element of the matrix.\n\n      import Standard.Examples\n\n      example_minus = Examples.matrix - 1\n\n\n> Example\n  Subtract 100 from the second channel of the matrix.\n\n      import Standard.Examples\n\n      example_minus = Examples.matrix - [0, 100, 0, 0]\n\n\n> Example\n  Subtract two matrices.\n\n      import Standard.Examples\n\n      example_minus = Examples.matrix - Examples.matrix"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "math","description": "Calculates the per-element product of two matrices or a matrix and a\nscalar.","arguments": "- value: A value can be a number, a vector of numbers, or a matrix. The\n  number value is applied to each values's channel of the matrix. The\n  vector value is padded with zeros to match the number of channels and\n  then applied to each pixel of this matrix. The matrix value must have\n  the same dimensions (rows, columns, and channels) as this\n  matrix. Otherwise, the operation results in a `Dimensions_Not_Equal`\n  error. The matrix is applied element-wise, e.g., each matrix element is\n  combined with the appropriate value (the element with the same row and\n  column) of this matrix.","examples": "> Example\n  Multiply each channel of the matrix by 2.\n\n      import Standard.Examples\n\n      example_mul = Examples.matrix * 2\n\n\n> Example\n  Multiply first channel of the matrix by 2, and second channel by 4.\n\n      import Standard.Examples\n\n      example_mul = Examples.matrix * [2, 4, 1, 1]\n\n\n> Example\n  Multiply first channel of the matrix by 2, and zero the rest of the\n  channels.\n\n      import Standard.Examples\n\n      example_mul = Examples.matrix * [2]\n\n\n> Example\n  Multiply two matrices.\n      m * m"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "math","description": "Performs per-element division of two matrices or a matrix and a scalar.","arguments": "- value: A value can be a number, a vector of numbers, or a matrix. The\n  number value is applied to each values's channel of the matrix. The\n  vector value is padded with zeros to match the number of channels and\n  then applied to each pixel of this matrix. The matrix value must have\n  the same dimensions (rows, columns, and channels) as this\n  matrix. Otherwise, the operation results in a `Dimensions_Not_Equal`\n  error. The matrix is applied element-wise, e.g., each matrix element is\n  combined with the appropriate value (the element with the same row and\n  column) of this matrix.","examples": "> Example\n  Divide each channel of the matrix by 2.\n\n       import Standard.Examples\n\n       example_div = Examples.matrix / 2\n\n\n> Example\n  Divide first channel of the matrix by 2, and second channel by 4.\n\n       import Standard.Examples\n\n       example_div = Examples.matrix / [2, 4, 1, 1]\n\n\n> Example\n  Divide two matrices.\n\n       import Standard.Examples\n\n       example_div = Examples.matrix / Examples.matrix"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "normalize", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"min_value": {"lazy": false, "default": "0.0"}, "max_value": {"lazy": false, "default": "1.0"}},"aliases": [],"icon": "image","description": "Normalize the matrix into a range of [min_value .. max_value] so that the\nminimum value of the matrix becomes `min_value` and the maximum value of\nthe matrix becomes `max_value`.","arguments": "- min_value: the minimum value in the resulting normalized range.\n- max_value: the maximum value in the resulting normalized range.","examples": "> Example\n  Normalize a matrix from vector.\n\n      from Standard.Image import Matrix\n\n      example_normalize = Matrix.from_vector [0, 1, 2, 3, 4] . normalize\n\n\n> Example\n  Normalize a matrix of ones.\n\n      from Standard.Image import Matrix\n\n      example_normalize = Matrix.ones 2 3 . normalize\n\n\n> Example\n  Normalize an identity matrix.\n\n      from Standard.Image import Matrix\n\n      example_normalize = Matrix.identity 3 3 . normalize"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "to_image", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Convert this matrix to an image.","examples": "> Example\n  Convert a matrix to an image.\n\n      import Standard.Examples\n\n      example_to_image = Examples.matrix.to_image"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Get the elements of this matrix as a vector.","examples": "> Example\n  Convert a matrix to a vector.\n\n      import Standard.Examples\n\n      example_to_vector = Examples.matrix.to_vector"},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert this matrix to a JS_Object.","examples": "> Example\n  Convert a matrix to a JavaScript object.\n\n      import Standard.Examples\n\n      example_to_json = Examples.matrix.to_js_object"},
{"module": "Standard.Image.Matrix", "type": "Matrix_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Matrix_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Image.Matrix", "type": "Matrix_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Image.Matrix", "type": "Matrix_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Image.Matrix", "type": "", "name": "core_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"mat": {"lazy": false}, "value": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"description": "Apply a core matrix operation.","arguments": "- mat: The matrix to operate on.\n- value: The value to apply to the matrix.\n- function: The function with which to apply `value` to `mat`."},
{"module": "Standard.Image.Matrix", "type": "", "name": "core_op_handler", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Handles errors in `core_op`.","arguments": "- error: The value to throw as an error."},
{"module": "Standard.Image.Matrix", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Matrix", "checked": true}},"aliases": []},
{"module": "Standard.Image.Matrix_Error", "type": "Matrix_Error", "name": "Index_Out_Of_Bounds", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Matrix_Error", "arguments": {"rows": {"lazy": false}, "columns": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "Indicates that a matrix has been accessed with an illegal index.","arguments": "- rows: The number of rows in the matrix.\n- columns: The number of columns in the matrix.\n- index: The requested index in the matrix."},
{"module": "Standard.Image.Matrix_Error", "type": "Matrix_Error", "name": "Dimensions_Not_Equal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Matrix_Error", "arguments": {},"aliases": [],"description": "An error indicating that an operation has failed due to a mismatch of\nmatrix dimensions."},
{"module": "Standard.Image.Matrix_Error", "type": "Matrix_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty-prints a matrix error to be readable by the users."},
{"module": "Standard.Image.Read_Flag", "type": "Read_Flag", "name": "Alpha_Channel", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Read_Flag", "arguments": {},"aliases": [],"description": "Read the image with its alpha channel, otherwise the channel gets cropped."},
{"module": "Standard.Image.Read_Flag", "type": "Read_Flag", "name": "Grayscale", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Read_Flag", "arguments": {},"aliases": [],"description": "Always convert the image to a single channel grayscale image."},
{"module": "Standard.Image.Read_Flag", "type": "Read_Flag", "name": "GDAL", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Read_Flag", "arguments": {},"aliases": [],"description": "Use Geographic Data Abstraction Library (GDAL) driver to load images in\ngeospatial raster data formats."},
{"module": "Standard.Image.Read_Flag", "type": "Read_Flag", "name": "to_integer", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "JPEG_Quality", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {"val": {"lazy": false, "type": "Integer", "checked": true, "default": "95"}},"aliases": [],"description": "Sets the quality used when writing a JPEG.","arguments": "- val: A quality value from 0 to 100 (the higher, the better)."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "JPEG_Progressive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {},"aliases": [],"description": "Enable progressive JPEG compression format. Disabled by default."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "JPEG_Optimize", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {},"aliases": [],"description": "Enable optimized JPEG encoding algorithms. Disabled by default."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "JPEG_Luma_Quality", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {"val": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"description": "Sets the luma quality level used when writing a JPEG.","arguments": "- val: A quality value from 0 to 100 (the higher, the better)."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "JPEG_Chroma_Quality", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {"val": {"lazy": false, "default": "0"}},"aliases": [],"description": "Sets the chroma quality level used when writing a JPEG.","arguments": "- val: A quality value from 0 to 100 (the higher, the better)."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "PNG_Compression", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {"val": {"lazy": false, "type": "Integer", "checked": true, "default": "3"}},"aliases": [],"description": "Sets the compression level used when writing a PNG.","arguments": "- val: A compression level from 0 to 9. A higher value means a smaller\n  size but a longer compression time."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "WEBP_Quality", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {"val": {"lazy": false, "default": "101"}},"aliases": [],"description": "Sets the quality used when writing a WEBP image.","arguments": "- val: A quality from 0 to 100 (the higher, the better). A quality\n  above 100 indicates that the encoder should use lossless compression."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "value", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "to_integer", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "SQLServer_Details", "name": "SQLServer", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQLServer_Details", "arguments": {"host": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"host\""}, "credentials": {"lazy": false, "type": "Credentials", "checked": true, "default": "Missing_Argument.throw \"credentials\""}, "port": {"lazy": false, "type": "Integer", "checked": true, "default": "1433"}, "database": {"lazy": false, "type": "Text", "checked": true, "default": "\"master\""}},"aliases": [],"description": "Connect to a SQLServer database.","arguments": "- host: The name of the server to connect to.\n- credentials: The credentials to use for the connection.\n- port: The port to connect to (defaults to 1433).\n- database: The name of the database to connect to."},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "SQLServer_Details", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "SQLServer_Details", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}, "allow_data_links": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Build the Connection resource.","arguments": "- options: Overrides for the connection properties."},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "SQLServer_Details", "name": "jdbc_url", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the jdbc url for the connection."},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "SQLServer_Details", "name": "jdbc_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the properties for the connection."},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "", "name": "create_data_link_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"details": {"lazy": false, "type": "SQLServer_Details", "checked": true}, "data_link_location": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Dialect", "arguments": {"dialect_operations": {"lazy": false}},"aliases": [],"description": "The dialect of SQL Server databases."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation\naccording to the specific dialect."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part's that determine what order each part gets written in for the final SQL output\nIf you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "wrap_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps and possibly escapes the identifier so that it can be used in a\ngenerated query regardless of what characters it contains.\nThe quotes used will depend on the dialect."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "make_table_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": [],"description": "Generates a SQL expression for a table literal."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.\n\nOne of the purposes of this method is to verify if the expected ordering\nsettings are supported by the given database backend.","arguments": "- internal_column: the column to order by.\n- sort_direction: the direction of the ordering.\n- text_ordering: If provided, specifies that the column should be treated\n  as text values according to the provided ordering. For non-text types,\n  it should be set to `Nothing`."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "prepare_distinct", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Prepares a distinct operation."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso\n`Value_Type`."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "cast_op_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of certain operations with\ncertain arguments.\n\nIt is used when the normal type inference provided by the database engine\nneeds to be adjusted.\n\nIn most cases this method will just return the expression unchanged, it\nis used only to override the type in cases where the default one that the\ndatabase uses is not what we want."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "cast_aggregate_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of aggregate operations.\nSome DBs do CAST(SUM(x) AS FLOAT) others do SUM(CAST(x AS FLOAT))."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean ! Unsupported_Database_Operation", "arguments": {"aggregate": {"lazy": false, "type": "Aggregate_Column", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.\n\nReturns `Nothing` if the key is not defined."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "prepare_metadata_for_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}, "operation_input_type": {"lazy": false}},"aliases": [],"description": "Prepares metadata for an operation taking a date/time period and checks\nif the given period is supported."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "if_replace_params_supports", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replace_params": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Returns true if the `replace` parameters are supported by this backend."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "needs_literal_table_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "Expression_Kind", "name": "Boolean_Condition", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "Expression_Kind", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "sqlserver", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of SQL Server databases."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_generate_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "base_gen": {"lazy": false}, "expr": {"lazy": false}, "expression_kind": {"lazy": false, "type": "Expression_Kind", "checked": true}, "materialize_null_check": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Returns a pair of a SQL_Builder for the given expression and a vector of columns\nthat have been used in the expression and need to be checked for nulls.\nSQL Server needs special handling commpared to ther databases as it does not have a\nboolean data type.\nThis means that you can write\n    SELECT * FROM MyTable WHERE [Column1] > [Column2]\nbut you cannot write\n    SELECT [Column1] > [Column2] FROM MyTable\nto write the second query you need to write\n    SELECT CASE WHEN [Column1] IS NULL OR [Column2] IS NULL WHEN [Column1] > [Column2] THEN 1 ELSE 0 END FROM MyTable\nThe below function collects all of the fields which are needed to be checked for nulls returning them in a vector\nas the second element of the pair.\nThe first element of the pair is the SQL_Builder for the expression."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_align_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}, "has_kind": {"lazy": false, "type": "Expression_Kind", "checked": true}, "expected_kind": {"lazy": false, "type": "Expression_Kind", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_convert_value_to_boolean_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_convert_boolean_to_value_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_generate_null_check_sql_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"null_checks": {"lazy": false, "type": "Vector", "checked": true}, "expr": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_generate_is_null_expr", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"null_checks": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_op_expected_kind", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Kind", "arguments": {"op": {"lazy": false}, "arg_pos": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_op_return_kind", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Kind", "arguments": {"op": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_op_needs_to_materialize_null_checks", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"op": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_dialect_operations", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_make_iif", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_count_is_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_count_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_count_not_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_shortest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_longest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "concat_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "trim_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_count_distinct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_count_distinct_include_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "is_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "starts_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "like", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "ends_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_contains_expr", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}, "substring": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "contains", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "left", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "right", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_build_partition_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"grouping": {"lazy": false, "type": "SQL_Builder", "checked": true}, "ordering": {"lazy": false, "type": "SQL_Builder", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_build_lead_lag_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "n": {"lazy": false, "type": "SQL_Builder", "checked": true}, "colName": {"lazy": false, "type": "SQL_Builder", "checked": true}, "grouping": {"lazy": false, "type": "SQL_Builder", "checked": true}, "ordering": {"lazy": false, "type": "SQL_Builder", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_make_lead_lag", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_make_lead_lag_closest_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_order_descriptor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "bool_or", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "bool_not", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "floating_point_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "mod_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "decimal_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "decimal_mod", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "supported_replace_params", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "replace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_datepart", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"enso_name": {"lazy": false}, "sql_name": {"lazy": false, "default": "enso_name"}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_day_of_week", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_extract_microsecond", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_get_sqlserver_interval", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"interval": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_date_add", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_date_diff", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_make_month_datediff", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_date_trunc_to_day", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_runtime_error_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "The RUNTIME_ERROR operation should allow the query to compile fine and it\nwill not prevent it from running if the branch including this operation is\nnot taken. But if the branch is computed, it should ensure the query fails.\n\nThis query never returns a value, so its type should be polymorphic. However,\nthat is not possible - so currently it just 'pretends' that it would return a\nBoolean - because that is the type we expect in the use-case. This can be\naltered if needed.\n\nIt takes a variable as the second argument. It can be any value that is not\nstatically known - this ensure that the optimizer will not be able to\npre-compute the expression too early (which could make the query fail\nspuriously). See `make_invariant_check` in `Lookup_Query_Helper` for an\nexample."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_distinct_extension", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expressions": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "sqlserver_dialect_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Error_Mapper", "type": "SQLServer_Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Error_Mapper", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Error_Mapper", "type": "SQLServer_Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Error_Mapper", "type": "SQLServer_Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Error_Mapper", "type": "SQLServer_Error_Mapper", "name": "is_table_already_exists_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Error_Mapper", "type": "SQLServer_Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Type_Mapping", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "value_type_to_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "sql_type_to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"infer_from_database_callback": {"lazy": false}, "op_name": {"lazy": false}, "arguments": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "The SQLServer_Type_Mapping always relies on the return type determined by\nthe database backend except for boolean types."},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "prepare_type_overrides", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type_suggestions": {"lazy": false}},"aliases": [],"description": "We want to respect any overriding references, but references that rely on\ncomputing the type by the database are resolved to Nothing to just rely\non the `ResultSet` metadata and decrease overhead."},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "is_implicit_conversion", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"source_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "is_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "is_same_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type1": {"lazy": false, "type": "Value_Type", "checked": true}, "value_type2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "make_column_fetcher", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Creates a `Column_Fetcher` used to fetch data from a result set and build\nan in-memory column from it, based on the given column type."},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "", "name": "on_unknown_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "", "name": "operations_dict", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Maps operation names to functions that infer its result type."},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "", "name": "max_length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This is the maximum size that JDBC driver reports for 'unbounded' types in\nSQLServer."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Connection", "arguments": {"connection": {"lazy": false}, "make_new": {"lazy": false}},"aliases": [],"description": "A SQLServer database connection.","arguments": "- connection: the underlying connection.\n- make_new: a function that returns a new connection."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "properties": {"lazy": false}, "make_new": {"lazy": false}, "data_link_setup": {"lazy": false}},"aliases": [],"description": "Creates a SQLServer connection based on a URL and properties.","arguments": "- url: The URL to connect to.\n- properties: A vector of properties for the connection.\n- make_new: A function that returns a new connection.\n- data_link_setup: the setup for saving the connection as a data link."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "close", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "close","description": "Closes the connection releasing the underlying database resources\nimmediately instead of waiting for them to be automatically released.\n\nThe connection is not usable afterwards."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "databases", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current database (or catalog)."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "set_database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified database set as default.","arguments": "- database: The name of the database to connect to."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "set_schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "metadata","description": "Returns a new Connection with the specified schema set as default.","arguments": "- schema: The name of the schema to connect to."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "table_types", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets a list of the table types."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "database": {"lazy": false, "type": "Text", "checked": true, "default": "self.database"}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "self.schema"}, "types": {"lazy": false, "default": "[\"TABLE\", \"VIEW\"]"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialized Table of all the matching views and tables.","arguments": "- name_like: The table name pattern to search for. Supports SQL\n  wildcards (`%`, `_`). Defaults to `\"\"` which means all tables are\n  selected.\n- database: The database name to search in (default is current).\n- schema: The schema name to search in (defaults to current).\n  If \"*\" is provided, all schemas are searched.\n- types: The table types to search for. The list of possible values can\n  be obtained using the `table_types` method. Defaults to a set of most\n  commonly used table types, ignoring internal system tables or indices.\n- all_fields: Return all the fields in the metadata table.","remarks": "? Temporary Tables\n\n  Note that the temporary tables may be created in a different schema\n  than the current one, so take this into account when filtering by schema."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "alias": {"lazy": false, "default": "\"\""}},"aliases": ["import", "load", "open", "read"],"group": "Standard.Base.Input","icon": "data_input","description": "Set up a query returning a Table object, which can be used to work with\ndata within the database or load it into memory.","arguments": "- query: name of the table or sql statement to query.\n  If supplied as `Text` it is treated as a table name.\n- alias: optionally specify a friendly alias for the query.","errors": ""},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load", "open", "query"],"group": "Standard.Base.Input","icon": "data_input","description": "Execute the query and load the results into memory as a Table.","arguments": "- query: name of the table or sql statement to query.\n  If supplied as `Text` it is treated as a table name.\n- limit: the maximum number of rows to read.","remarks": "? Side Effects\n\n  Note that the `read` method is running without restrictions when the\n  output context is disabled, but it can technically cause side effects,\n  if it is provided with a DML query. Usually it is preferred to use\n  `execute_update` for DML queries, or if they are supposed to return\n  results, the `read` should be wrapped in an execution context check."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "create_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description | DB_Table | Table", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "[first_column_name_in_structure structure]"}, "temporary": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "Problem_Behavior.Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a new empty table in the database and returns a query referencing\nthe new table.","arguments": "- table_name: the name of the table to create.\n- structure: the structure of the table, provided as either an existing\n  `Table` (no data will be copied) or a `Vector` of `Column_Description`.\n- primary_key: the names of the columns to use as the primary key. The\n  first column from the table is used by default. If it is set to\n  `Nothing` or an empty vector, no primary key will be created.\n- temporary: if set to `True`, the table will be temporary, meaning that\n  it will be dropped once the `connection` is closed. Defaults to\n  `False`.\n- allow_existing: Defaults to `False`, meaning that if the table with the\n  provided name already exists, an error will be raised. If set to `True`,\n  the existing table will be returned instead. Note that the existing\n  table is not guaranteed to have the same structure as the one provided.\n- on_problems: the behavior to use when encountering non-fatal problems.\n  Defaults to reporting them as warning.","errors": "","remarks": "? Dry Run if Output disabled\n\n  If performing output actions is disabled, only a dry run is performed\n  and no permanent changes occur. The operation will test for errors\n  (like missing columns) and if successful, return a temporary table with\n  a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "execute_update", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw update query. If the query was inserting, updating or\ndeleting rows, the number of affected rows is returned; otherwise it\nreturns 0 for other types of queries (like creating or altering tables).","arguments": "- query: either raw SQL code as Text or an instance of SQL_Statement\n  representing the query to execute."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw query. If the query was inserting, updating or\ndeleting rows, the number of affected rows is returned; otherwise it\nreturns 0 for other types of queries (like creating or altering tables).","arguments": "- query: either raw SQL code as Text or an instance of SQL_Statement\n  representing the query to execute."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "dialect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the dialect."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "jdbc_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the underlying JDBC connection."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "drop_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "if_exists": {"lazy": false, "default": "False"}},"aliases": [],"description": "Drops a table.","arguments": "- table_name: the name of the table to drop.\n- if_exists: if set to `True`, the operation will not fail if the table\n  does not exist. Defaults to `False`."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "truncate_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Removes all rows from a table.","arguments": "- table_name: the name of the table to truncate."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "base_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the base `Connection` instance.\n\nUsed, so that all internal helper functions do not need to be replicated\non the 'subclasses'."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "save_as_data_link", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Error"}},"aliases": [],"icon": "data_output","description": "Creates a Data Link that will open the same connection."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Microsoft.SQLServer_Data_Link", "type": "SQLServer_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Data_Link", "arguments": {"details": {"lazy": false, "type": "SQLServer_Details", "checked": true}, "source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true}, "link_type": {"lazy": false, "type": "DB_Data_Link_Type", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.SQLServer_Data_Link", "type": "SQLServer_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.SQLServer_Data_Link", "type": "SQLServer_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Searcher.Main", "type": "", "name": "text_input", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["text input"],"group": "Standard.Base.Constants","icon": "text_input","description": "Creating text in Enso is as simple as adding a node that contains the text\nthat you would like to create.","examples": "> Example\n  Creating a node containing the text \"Hello, Enso!\".\n\n      \"Hello, Enso!\""},
{"module": "Standard.Searcher.Main", "type": "", "name": "input_number", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["number input"],"group": "Standard.Base.Constants","icon": "input_number","description": "Creating a number in Enso is as simple as adding a node that contains the\nnumber that you would like to create.\n\nEnso supports both integer and decimal literals.","examples": "> Example\n  Creating a node containing the integer 0.\n\n      0\n\n\n> Example\n  Creating a node containing the decimal 0.0.\n\n      0.0"},
{"module": "Standard.Searcher.Main", "type": "", "name": "table_input", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["table input"],"group": "Standard.Base.Constants","icon": "table_edit","description": "Creating a table in Enso is usually done directly from data. Nevertheless, it\ncan be useful to create tables manually.","examples": "> Example\n  Creating a node containing a table with two columns, one titled \"name\", and\n  the other titled \"stars\".\n\n      from Standard.Table import Table\n\n      example_table_input =\n          column_1 = [\"name\", \"Enso\"]\n          column_2 = [\"stars\", 5000]\n          table = Table.new [column_1, column_2]"},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Key_Pair_Credentials", "name": "Key_Pair", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Key_Pair_Credentials", "arguments": {"username": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"username\""}, "private_key": {"lazy": false, "type": "Enso_Secret|File|Enso_File", "checked": true, "default": "Missing_Argument.throw \"private_key\""}, "passphrase": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Credentials for key-pair based authentication.","arguments": "- username: The username to use for the connection.\n- private_key: The private key to use for the connection.\n  It can either be a path to the private key file or an `Enso_Secret`.\n  The file must be located on the local machine.\n- passphrase: The passphrase for the private key file. Only applicable if\n  the private key is a file."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Key_Pair_Credentials", "name": "generate_key_pair", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generated_Key_Pair", "arguments": {"location": {"lazy": false, "type": "Enso_File", "checked": true, "default": "Enso_File.home"}, "name": {"lazy": false, "type": "Text", "checked": true}, "if_exists": {"lazy": false, "type": "On_Existing_Key_Pair", "checked": true, "default": "..Use_Existing"}},"aliases": [],"group": "Standard.Base.Database","icon": "key","description": "Generate a key pair that can be used for authentication.\n\nThis function will generate a new key pair and store it in the provided\nCloud location. The private key will be stored as an `Enso_Secret` that\ncan be used when establishing a Database connection. The public key will\nbe saved as a text file next to that secret.\n\nTo finalize the setup, the public key must be associated with your account.\nTo do so, you need to run a query like:\n    ALTER USER <your_username> SET RSA_PUBLIC_KEY=<public_key_content>;\n\nSee https://docs.snowflake.com/en/user-guide/key-pair-auth#assign-the-public-key-to-a-snowflake-user for more information on the setup.","arguments": "- location: A directory where the secret and the public key will be stored.\n  Defaults to the user's home directory.\n- name: The name of the secret that will store the private key. The\n  public key will be stored under the same name with the `.pub` extension.\n- if_exists: Specifies what to do if the key pair with the given name\n  already exists. Defaults to warning the user and re-using the existing\n  key pair."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Generated_Key_Pair", "arguments": {"secret": {"lazy": false, "type": "Enso_Secret", "checked": true}, "internal_file": {"lazy": false, "type": "Enso_File", "checked": true}, "public_key_content": {"lazy": true, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"secret": {"lazy": false, "type": "Enso_Secret", "checked": true}, "public_key_file": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "public_key_file", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File", "arguments": {},"aliases": [],"description": "Returns the file containing the public key."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "alter_user_query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"username": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Returns the query that should be run to associate the public key with the user.","arguments": "- username: Name of the user to associate the public key with. If not\n  provided, a placeholder will be used."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "On_Existing_Key_Pair", "name": "Use_Existing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "On_Existing_Key_Pair", "arguments": {},"aliases": [],"description": "Skips generation and returns the already existing key pair."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "On_Existing_Key_Pair", "name": "Overwrite", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "On_Existing_Key_Pair", "arguments": {},"aliases": [],"description": "Generates a new key pair, overwriting the existing one."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "On_Existing_Key_Pair", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "On_Existing_Key_Pair", "arguments": {},"aliases": [],"description": "Throws an error if the key pair already exists."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "", "name": "parse_public_key", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"public_key_content": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "", "name": "generate_alter_user_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"username": {"lazy": false, "type": "Text|Nothing", "checked": true}, "public_key_file_content": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Enso_Secret", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Generated_Key_Pair", "checked": true}},"aliases": [],"description": "Allows to pass `Generated_Key_Pair` directly into credentials, as an `Enso_Secret`."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "Snowflake_Details", "name": "Snowflake", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Snowflake_Details", "arguments": {"account": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"account\""}, "credentials": {"lazy": false, "type": "Credentials|Key_Pair_Credentials", "checked": true, "default": "Missing_Argument.throw \"credentials\""}, "database": {"lazy": false, "type": "Text", "checked": true, "default": "\"SNOWFLAKE\""}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "\"PUBLIC\""}, "warehouse": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Connect to a Snowflake database.","arguments": "- account: The name of the account to connect to.\n- credentials: The credentials to use for the connection.\n- database: The name of the database to connect to.\n- schema: The name of the schema to connect to.\n- warehouse: The name of the warehouse to use."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "Snowflake_Details", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "Snowflake_Details", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}, "allow_data_links": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Build the Connection resource.","arguments": "- options: Overrides for the connection properties."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "Snowflake_Details", "name": "jdbc_url", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the jdbc url for the connection."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "Snowflake_Details", "name": "jdbc_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the properties for the connection."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "", "name": "create_data_link_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"details": {"lazy": false, "type": "Snowflake_Details", "checked": true}, "data_link_location": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "", "name": "_enhance_connection_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"details": {"lazy": false, "type": "Snowflake_Details", "checked": true}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Widgets", "type": "", "name": "password_or_keypair_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Key_Pair_Generator", "type": "Key_Pair", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Key_Pair", "arguments": {"raw_private_key": {"lazy": false, "type": "Text", "checked": true}, "raw_public_key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A pair of RSA keys stored as base64 encoded strings."},
{"module": "Standard.Snowflake.Internal.Key_Pair_Generator", "type": "Key_Pair", "name": "formatted_public_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Key_Pair_Generator", "type": "", "name": "public_key_prefix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Key_Pair_Generator", "type": "", "name": "public_key_suffix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Key_Pair_Generator", "type": "", "name": "generate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Dialect", "arguments": {"dialect_operations": {"lazy": false}},"aliases": [],"description": "The dialect of Snowflake databases."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation\naccording to the specific dialect."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part's that determine what order each part gets written in for the final SQL output\nIf you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "wrap_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps and possibly escapes the identifier so that it can be used in a\ngenerated query regardless of what characters it contains.\nThe quotes used will depend on the dialect."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "make_table_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": [],"description": "Generates a SQL expression for a table literal."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.\n\nOne of the purposes of this method is to verify if the expected ordering\nsettings are supported by the given database backend.","arguments": "- internal_column: the column to order by.\n- sort_direction: the direction of the ordering.\n- text_ordering: If provided, specifies that the column should be treated\n  as text values according to the provided ordering. For non-text types,\n  it should be set to `Nothing`."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "prepare_distinct", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Prepares a distinct operation."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso\n`Value_Type`."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "cast_op_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of certain operations with\ncertain arguments.\n\nIt is used when the normal type inference provided by the database engine\nneeds to be adjusted.\n\nIn most cases this method will just return the expression unchanged, it\nis used only to override the type in cases where the default one that the\ndatabase uses is not what we want."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "cast_aggregate_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of aggregate operations.\nSome DBs do CAST(SUM(x) AS FLOAT) others do SUM(CAST(x AS FLOAT))."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.\n\nReturns `Nothing` if the key is not defined."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "prepare_metadata_for_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}, "operation_input_type": {"lazy": false}},"aliases": [],"description": "Prepares metadata for an operation taking a date/time period and checks\nif the given period is supported."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "if_replace_params_supports", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replace_params": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Returns true if the `replace` parameters are supported by this backend."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "needs_literal_table_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "should_check_table_integrity_at_beginning_of_transaction", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "In Snowflake we need to create tables outside of transactions.\nHowever, currently we decide to opt-out of the integrity check for\nperformance reasons - there is too much overhead to each query. The check\nwould fail extremely rarely so it currently does not seem worth the cost.\nWe can revisit this choice in the future."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "custom_build_aggregate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "We need custom handling for First and Last aggregations, because in\nSnowflake the `FIRST_VALUE` and `LAST_VALUE` functions in Snowflake are\npurely window functions - they cannot be directly used in aggregate\nqueries.\n\nIf tried to be used inside of a group by, it yields an error:\n    Window function [FIRST_VALUE(T.A) OVER (PARTITION BY T.B ORDER BY T.C ASC NULLS LAST)] may not appear inside an aggregate function."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "snowflake", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of Snowflake databases."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_dialect_operations", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_count_is_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_count_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_count_not_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "replace_with_zero_if_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": [],"description": "A helper needed because Snowflake's aggregators return NULL if there were no\nrows. But for aggregators like COUNT we prefer to return 0 in such cases."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_median", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_mode", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_percentile", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "first_last_aggregators", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_first_aggregator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"reverse": {"lazy": false}, "ignore_null": {"lazy": false}, "args": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_shortest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_longest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "concat_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "trim_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_count_distinct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_count_distinct_include_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "replace_null_with_marker", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": [],"description": "A helper function that coalesces a NULL column replacing it with a marker value that is expected to not be present in real world data.\nIt is sometimes needed when we want to count distinct values in a column that contains NULLs and still include the rows containing NULLs.\nThe columns are converted to VARIANT type because of that, which may incur some overhead.\nBut there seems to be no other reliable way to handle this for columns like numeric where no non-NULL value exists that can be guaranteed to be unused."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_row_number_in_group", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "A helper for `lookup_and_replace`, and perhaps other operation.\nIt creates an expression that returns a row number within a group.\nThis is a specialization for Snowflake that adds a dummy ORDER BY clause to satisfy its compiler."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_group_number_equal_count", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "starts_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "ends_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "contains", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_contains_expr", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}, "substring": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "left", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "right", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_order_descriptor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "round_bankers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "is_nan", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "is_inf", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "is_finite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "bool_or", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "floating_point_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "mod_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "decimal_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "decimal_mod", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "supported_replace_params", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "replace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "extract_just_nanoseconds", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "extract_just_microseconds", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "extract_just_milliseconds", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "date_period_to_part_with_multiplier", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_date_add", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_date_diff", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_date_trunc_to_day", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "sql_type_string_for_date_time", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_runtime_error_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "The RUNTIME_ERROR operation should allow the query to compile fine and it\nwill not prevent it from running if the branch including this operation is\nnot taken. But if the branch is computed, it should ensure the query fails.\n\nThis query never returns a value, so its type should be polymorphic. However,\nthat is not possible - so currently it just 'pretends' that it would return a\nBoolean - because that is the type we expect in the use-case. This can be\naltered if needed.\n\nIt takes a variable as the second argument. It can be any value that is not\nstatically known - this ensure that the optimizer will not be able to\npre-compute the expression too early (which could make the query fail\nspuriously). See `make_invariant_check` in `Lookup_Query_Helper` for an\nexample."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_iif", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_distinct_extension", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"distinct_expressions": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_custom_cast", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression | Nothing", "arguments": {"column": {"lazy": false, "type": "Internal_Column", "checked": true}, "source_value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Returns a custom cast expression if it is needed for a specific pair of types,\nor Nothing if the default cast is sufficient."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "snowflake_dialect_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Error_Mapper", "type": "Snowflake_Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Error_Mapper", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Error_Mapper", "type": "Snowflake_Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Error_Mapper", "type": "Snowflake_Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Error_Mapper", "type": "Snowflake_Error_Mapper", "name": "is_table_already_exists_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Error_Mapper", "type": "Snowflake_Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Type_Mapping", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "value_type_to_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "sql_type_to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"infer_from_database_callback": {"lazy": false}, "op_name": {"lazy": false}, "arguments": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "The Snowflake_Type_Mapping always relies on the return type determined by\nthe database backend."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "prepare_type_overrides", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type_suggestions": {"lazy": false}},"aliases": [],"description": "We want to respect any overriding references, but references that rely on\ncomputing the type by the database are resolved to Nothing to just rely\non the `ResultSet` metadata and decrease overhead."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "is_implicit_conversion", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"source_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "is_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "is_same_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type1": {"lazy": false, "type": "Value_Type", "checked": true}, "value_type2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "make_column_fetcher", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Creates a `Column_Fetcher` used to fetch data from a result set and build\nan in-memory column from it, based on the given column type."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "simple_types_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "complex_types_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "on_unknown_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "max_length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This is the maximum size that JDBC driver reports for 'unbounded' types in\nSnowflake."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "time_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "date_time_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "smart_integer_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A fetcher for Snowflake Decimal integer columns.\nInteger columns in Snowflake are represented as `NUMBER(38, 0)`, meaning\nthere is no separate Integer type.\n\nIn Enso, using `Decimal` values incurs a significant overhead. Thus, when\nfetching such an integer column from Snowflake, we try to first fetch it as\nlightweight `Integer` and only fall back to `Decimal` if needed."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The actual SQL type that Snowflake uses for all integer types."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "integer_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "float_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Connection", "arguments": {"connection": {"lazy": false}, "make_new": {"lazy": false}},"aliases": [],"description": "A Snowflake database connection.","arguments": "- connection: the underlying connection.\n- make_new: a function that returns a new connection."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "properties": {"lazy": false}, "make_new": {"lazy": false}, "data_link_setup": {"lazy": false}},"aliases": [],"description": "Creates a Snowflake connection based on a URL and properties.","arguments": "- url: The URL to connect to.\n- properties: A vector of properties for the connection.\n- make_new: A function that returns a new connection.\n- data_link_setup: the setup for saving the connection as a data link."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "close", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "close","description": "Closes the connection releasing the underlying database resources\nimmediately instead of waiting for them to be automatically released.\n\nThe connection is not usable afterwards."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "warehouses", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of warehouses for the connection."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "warehouse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current warehouse."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "set_warehouse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"warehouse": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified database set as default.","arguments": "- database: The name of the database to connect to."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "databases", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current database (or catalog)."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "set_database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified database set as default.","arguments": "- database: The name of the database to connect to."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "set_schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified schema set as default.","arguments": "- schema: The name of the schema to connect to."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "table_types", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets a list of the table types."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "database": {"lazy": false, "type": "Text", "checked": true, "default": "self.database"}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "self.schema"}, "types": {"lazy": false, "default": "[\"TABLE\", \"VIEW\"]"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialized Table of all the matching views and tables.","arguments": "- name_like: The table name pattern to search for. Supports SQL\n  wildcards (`%`, `_`). Defaults to `\"\"` which means all tables are\n  selected.\n- database: The database name to search in (default is current).\n- schema: The schema name to search in (defaults to current).\n  If \"*\" is provided, all schemas are searched.\n- types: The table types to search for. The list of possible values can\n  be obtained using the `table_types` method. Defaults to a set of most\n  commonly used table types, ignoring internal system tables or indices.\n- all_fields: Return all the fields in the metadata table.","remarks": "? Temporary Tables\n\n  Note that the temporary tables may be created in a different schema\n  than the current one, so take this into account when filtering by schema."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "alias": {"lazy": false, "default": "\"\""}},"aliases": ["import", "load", "open", "read"],"group": "Standard.Base.Input","icon": "data_input","description": "Set up a query returning a Table object, which can be used to work with\ndata within the database or load it into memory.","arguments": "- query: name of the table or sql statement to query.\n  If supplied as `Text` it is treated as a table name.\n- alias: optionally specify a friendly alias for the query.","errors": ""},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load", "open", "query"],"group": "Standard.Base.Input","icon": "data_input","description": "Execute the query and load the results into memory as a Table.","arguments": "- query: name of the table or sql statement to query.\n  If supplied as `Text` it is treated as a table name.\n- limit: the maximum number of rows to read.","remarks": "? Side Effects\n\n  Note that the `read` method is running without restrictions when the\n  output context is disabled, but it can technically cause side effects,\n  if it is provided with a DML query. Usually it is preferred to use\n  `execute_update` for DML queries, or if they are supposed to return\n  results, the `read` should be wrapped in an execution context check."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "create_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description | DB_Table | Table", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "[first_column_name_in_structure structure]"}, "temporary": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a new empty table in the database and returns a query referencing\nthe new table.","arguments": "- table_name: the name of the table to create.\n- structure: the structure of the table, provided as either an existing\n  `Table` (no data will be copied) or a `Vector` of `Column_Description`.\n- primary_key: the names of the columns to use as the primary key. The\n  first column from the table is used by default. If it is set to\n  `Nothing` or an empty vector, no primary key will be created.\n- temporary: if set to `True`, the table will be temporary, meaning that\n  it will be dropped once the `connection` is closed. Defaults to\n  `False`.\n- allow_existing: Defaults to `False`, meaning that if the table with the\n  provided name already exists, an error will be raised. If set to `True`,\n  the existing table will be returned instead. Note that the existing\n  table is not guaranteed to have the same structure as the one provided.\n- on_problems: the behavior to use when encountering non-fatal problems.\n  Defaults to reporting them as warning.","errors": "","remarks": "? Dry Run if Output disabled\n\n  If performing output actions is disabled, only a dry run is performed\n  and no permanent changes occur. The operation will test for errors\n  (like missing columns) and if successful, return a temporary table with\n  a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "execute_update", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw update query. If the query was inserting, updating or\ndeleting rows, the number of affected rows is returned; otherwise it\nreturns 0 for other types of queries (like creating or altering tables).","arguments": "- query: either raw SQL code as Text or an instance of SQL_Statement\n  representing the query to execute."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw query. If the query was inserting, updating or\ndeleting rows, the number of affected rows is returned; otherwise it\nreturns 0 for other types of queries (like creating or altering tables).","arguments": "- query: either raw SQL code as Text or an instance of SQL_Statement\n  representing the query to execute."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "dialect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the dialect."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "jdbc_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the underlying JDBC connection."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "drop_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "if_exists": {"lazy": false, "default": "False"}},"aliases": [],"description": "Drops a table.","arguments": "- table_name: the name of the table to drop.\n- if_exists: if set to `True`, the operation will not fail if the table\n  does not exist. Defaults to `False`."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "truncate_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Removes all rows from a table.","arguments": "- table_name: the name of the table to truncate."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "base_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the base `Connection` instance.\n\nUsed, so that all internal helper functions do not need to be replicated\non the 'subclasses'."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "save_as_data_link", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Error"}},"aliases": [],"icon": "data_output","description": "Creates a Data Link that will open the same connection."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Snowflake.Snowflake_Data_Link", "type": "Snowflake_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Data_Link", "arguments": {"details": {"lazy": false, "type": "Snowflake_Details", "checked": true}, "source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true}, "link_type": {"lazy": false, "type": "DB_Data_Link_Type", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Snowflake_Data_Link", "type": "Snowflake_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Snowflake_Data_Link", "type": "Snowflake_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Convertible_To_Columns", "arguments": {"field_names": {"lazy": false, "type": "Vector Text", "checked": true}, "getter": {"lazy": false, "type": "Text->Any", "checked": true}},"aliases": [],"arguments": "- field_names: Set of column names (Vector Text).\n- getter: Get the value for a field name."},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Dictionary", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Pair", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Row", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Array", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "XML_Element", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Convertible_To_Rows", "arguments": {"original_value": {"lazy": false, "type": "Any", "checked": true}, "length": {"lazy": false, "type": "Integer", "checked": true}, "getter": {"lazy": false, "type": "Integer->Any", "checked": true}, "columns": {"lazy": false, "type": "Vector", "checked": true, "default": "[\"Value\"]"}, "is_sequence": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"arguments": "- original_value: The original value from before conversion.\n- length: The number of rows in the table.\n- getter: Get the value for a specified row.\n- columns: The names for the columns when object is expanded.\n  These will be added to the name of the input column.\n- is_sequence: Whether the object is a sequence-like aggregate. This will\n  affect the `expand_sequences_only` option of `expand_to_rows` method."},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "to_vector", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Return the iterator values as a `Vector`."},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "align_sequence_only", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Convertible_To_Rows", "arguments": {"sequence_only": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Aligns this conversion depending on if we want to only expand sequences\nor all kinds of objects.\n\nIf `sequence_only` is `False` or the conversion reports `is_sequence=True`, no changes are made.\nHowever, `sequence_only` is `True` and the conversion reports `is_sequence=False`,\nthe conversion is replaced with a single row - same as the `Any` fallback."},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Key_Value", "name": "Pair", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Key_Value", "arguments": {"key": {"lazy": false, "type": "Any", "checked": true}, "value": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"arguments": "- key: The key of the pair.\n- value: The value of the pair."},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Key_Value", "name": "at", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"idx": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Key_Value", "name": "get", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"idx": {"lazy": false}},"aliases": [],"description": "Return the key of the pair."},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Key_Value", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Key_Value", "name": "length", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Array", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "List", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Pair", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Dictionary", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "", "name": "_conversion_from_value_as_single_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Key_Value", "checked": true}},"aliases": []},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "Delimited", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Delimited_Format", "arguments": {"delimiter": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027,\u0027"}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "row_limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}, "quote_style": {"lazy": false, "type": "Quote_Style", "checked": true, "default": "..With_Quotes"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "value_formatter": {"lazy": false, "type": "Data_Formatter|Nothing", "checked": true, "default": "Data_Formatter.Value"}, "on_invalid_rows": {"lazy": false, "type": "Invalid_Rows", "checked": true, "default": "..Add_Extra_Columns"}, "line_endings": {"lazy": false, "type": "Line_Ending_Style|Infer", "checked": true, "default": "Infer"}, "comment_character": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Read delimited files such as CSVs into a Table.\n\nWhen reading this format, the following problems may occur:\n- If a row does not match the first row's column count, the function\n  raises an `Invalid_Row`.\n- If an empty file is passed, an `Empty_File_Error` is thrown.\n- If a quote is opened and never closed, a `File_Error.Corrupted_Format`\n  error is raised.","arguments": "- delimiter: The delimiter character to split the file into columns. An\n  `Illegal_Argument` error is returned if this is an empty string.\n- encoding: The encoding to use when reading the file.\n- skip_rows: The number of rows to skip from the top of the file.\n- row_limit: The maximum number of rows to read from the file. This count\n  does not include the header row (if applicable).\n- quote_style: Specifies the style of quotes used for reading and\n  writing.\n- headers: Specifies if the first row contains the  column names. If set\n  to `Detect_Headers`, the process tries to infer if headers are\n  present. If the column names are not unique, numeric suffixes will be\n  appended to disambiguate them.\n- value_formatter: Formatter to parse text values into numbers, dates,\n  times, etc. If `Nothing` values are left as Text.\n- on_invalid_rows: Specifies how to handle rows that have less or more\n  columns than the first row.\n- line_endings: Sets the line ending style to use. Defaults to `Infer` -\n  when reading a file or appending to an existing file, the line endings\n  are detected from file contents; when writing a new file in `Infer`\n  mode the `Unix` line endings are used.\n- comment_character: Sets the character which indicates the start of a\n  comment within a delimited file. Any line that begins with the comment\n  character is skipped. The comment character is treated as any other\n  character if it anywhere else than at the beginning of the line. This\n  option is only applicable for read mode and does not affect writing. It\n  defaults to `Nothing` which means that comments are disabled."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "write_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false}, "table": {"lazy": false}, "on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `Table.write` for this `File_Format`."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "clone", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "self.encoding"}, "quote_style": {"lazy": false, "type": "Quote_Style", "checked": true, "default": "self.quote_style"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "self.headers"}, "value_formatter": {"lazy": false, "default": "self.value_formatter"}, "on_invalid_rows": {"lazy": false, "type": "Invalid_Rows", "checked": true, "default": "self.on_invalid_rows"}, "line_endings": {"lazy": false, "default": "self.line_endings"}, "comment_character": {"lazy": false, "default": "self.comment_character"}},"aliases": [],"description": "Clone the instance with some properties overridden."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "with_quotes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"quote": {"lazy": false, "default": "\u0027\"\u0027"}, "quote_escape": {"lazy": false, "default": "quote"}, "always_quote": {"lazy": false, "default": "False"}},"aliases": [],"icon": "data_input","description": "Create a clone of this with specified quoting settings."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "without_quotes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Create a clone of this with specified quoting settings."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "with_headers", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Create a clone of this with first row treated as header."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "without_headers", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Create a clone of this where the first row is treated as data, not a\nheader."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "with_parsing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value_formatter": {"lazy": false, "default": "Data_Formatter.Value"}},"aliases": [],"icon": "data_input","description": "Create a clone of this with value parsing.\n\nA custom `Data_Formatter` can be provided to customize parser options."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "without_parsing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Create a clone of this without value parsing."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "with_line_endings", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"line_endings": {"lazy": false, "type": "Line_Ending_Style | Infer", "checked": true, "default": "Infer"}},"aliases": [],"icon": "data_input","description": "Creates a clone of this with a changed line ending style."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "with_comments", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"comment_character": {"lazy": false, "default": "\u0027#\u0027"}},"aliases": [],"icon": "data_input","description": "Creates a clone of this with comment parsing enabled."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "without_comments", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Creates a clone of this with comment parsing disabled."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Constructs a `Delimited` instance from JSON."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "", "name": "_catch_compatibility_changes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Table.Delimited.Invalid_Rows", "type": "Invalid_Rows", "name": "Drop_Invalid_Rows", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Invalid_Rows", "arguments": {},"aliases": [],"description": "Rows that contain too few or too many columns are dropped."},
{"module": "Standard.Table.Delimited.Invalid_Rows", "type": "Invalid_Rows", "name": "Keep_Invalid_Rows", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Invalid_Rows", "arguments": {},"aliases": [],"description": "Rows that contain too few or too many columns are kept\n\n- If a row has too few columns, the missing columns are filled with `Nothing`.\n- If it has too many, the extra columns are dropped."},
{"module": "Standard.Table.Delimited.Invalid_Rows", "type": "Invalid_Rows", "name": "Add_Extra_Columns", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Invalid_Rows", "arguments": {},"aliases": [],"description": "Rows that contain more columns than expected are kept, and the extra columns are added.\n\n- If a row has too few columns, the missing columns are filled with `Nothing`.\n- If it has too many, the extra columns are kept. The previous rows that\n  had less columns are filled with `Nothing`."},
{"module": "Standard.Table.Delimited.Invalid_Rows", "type": "Invalid_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "A conversion for backward compatibility."},
{"module": "Standard.Table.Delimited.Quote_Style", "type": "Quote_Style", "name": "No_Quotes", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Quote_Style", "arguments": {},"aliases": [],"description": "Do not quote any values or parse quotes when reading a `Delimited` file.\n\nIn write mode, values are not quoted even if this would result in an\ninvalid file."},
{"module": "Standard.Table.Delimited.Quote_Style", "type": "Quote_Style", "name": "With_Quotes", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Quote_Style", "arguments": {"quote": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\"\u0027"}, "quote_escape": {"lazy": false, "type": "Text", "checked": true, "default": "quote"}},"aliases": [],"description": "Specifies the style of quotes when reading or writing a `Delimited` file.","arguments": "- quote: The quote character denotes the start and end of a quoted value.\n  Quoted items are not split on the delimiter and can also contain\n  newlines. Empty input strings must be quoted (e.g. \"\") as otherwise an\n  empty value is treated as `Nothing`.\n- quote_escape: The character to escape the quote character in a quoted\n  value. For example, if both `quote` and `quote_escape` are set to `\"`,\n  then escaping quotes is done by double quotes: `\"ab\"\"cd\"` will yield\n  the text `ab\"cd`. Another popular choice for `quote_escape` is the `\\`\n  character. Then `\"ab\\\"cd\"` will yield the same text.","remarks": "! Quote Character\n\n  The quote and escape characters must consist of exactly one code-point\n  (i.e. it can be only one character and complex characters like emojis\n  may not be used)."},
{"module": "Standard.Table.Delimited.Quote_Style", "type": "Quote_Style", "name": "Always_Quote", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Quote_Style", "arguments": {"quote": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\"\u0027"}, "quote_escape": {"lazy": false, "type": "Text", "checked": true, "default": "quote"}},"aliases": [],"description": "Always quote text values when reading or writing a `Delimited` file.","arguments": "- quote: The quote character denotes the start and end of a quoted value.\n  Quoted items are not split on the delimiter and can also contain\n  newlines. Empty input strings must be quoted (e.g. \"\") as otherwise an\n  empty value is treated as `Nothing`.\n- quote_escape: The character to escape the quote character in a quoted\n  value. For example, if both `quote` and `quote_escape` are set to `\"`,\n  then escaping quotes is done by double quotes: `\"ab\"\"cd\"` will yield\n  the text `ab\"cd`. Another popular choice for `quote_escape` is the `\\`\n  character. Then `\"ab\\\"cd\"` will yield the same text.","remarks": "! Quote Character\n\n  The quote and escape characters must consist of exactly one code-point\n  (i.e. it can be only one character and complex characters like emojis\n  may not be used)."},
{"module": "Standard.Table.Delimited.Quote_Style", "type": "Quote_Style", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "Workbook", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Excel_Format", "arguments": {"xls_format": {"lazy": false, "type": "Boolean | Infer", "checked": true, "default": "Infer"}, "default_sheet": {"lazy": false, "type": "Text", "checked": true, "default": "\"EnsoSheet\""}},"aliases": [],"description": "Reads an Excel file as a connection to an `Excel_Workbook`.","arguments": "- xls_format:\n  If set to `True`, the file is read as an Excel 95-2003 format.\n  If set to `False`, the file is read as an Excel 2007+ format.\n  `Infer` will attempt to deduce this from the extension of the filename.\n- default_sheet: The default sheet to use when writing a table to a file\n  with these format settings."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "Sheet", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Excel_Format", "arguments": {"sheet": {"lazy": false, "type": "Integer|Text", "checked": true, "default": "1"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "row_limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}, "xls_format": {"lazy": false, "type": "Boolean|Infer", "checked": true, "default": "Infer"}},"aliases": [],"description": "Reads a sheet from an Excel file as a `Table`.","arguments": "- sheet: The sheet number or name.\n- headers: Specifies if the first row contains the  column names. If set\n  to `Detect_Headers`, the process tries to infer if headers are\n  present. If the column names are not unique, numeric suffixes will be\n  appended to disambiguate them.\n- skip_rows: The number of rows to skip before reading the data.\n- row_limit: The maximum number of rows to read.\n- xls_format:\n  If set to `True`, the file is read as an Excel 95-2003 format.\n  If set to `False`, the file is read as an Excel 2007+ format.\n  `Infer` will attempt to deduce this from the extension of the filename."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Excel_Format", "arguments": {"address": {"lazy": false, "type": "Text|Excel_Range", "checked": true, "default": "Missing_Argument.throw \u0027address\u0027"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "row_limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}, "xls_format": {"lazy": false, "type": "Boolean | Infer", "checked": true, "default": "Infer"}},"aliases": [],"description": "Reads a range from an Excel file as a `Table`.","arguments": "- address: A name of a range or an Excel-style address (e.g. Sheet1!A1:B2).\n- headers: Specifies if the first row contains the  column names. If set\n  to `Detect_Headers`, the process tries to infer if headers are\n  present. If the column names are not unique, numeric suffixes will be\n  appended to disambiguate them.\n- skip_rows: The number of rows to skip before reading the data.\n- row_limit: The maximum number of rows to read.\n- xls_format:\n  If set to `True`, the file is read as an Excel 95-2003 format.\n  If set to `False`, the file is read as an Excel 2007+ format.\n  `Infer` will attempt to deduce this from the extension of the filename."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "write_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false}, "table": {"lazy": false}, "on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `Table.write` for this `File_Format`.\n\nDepending on the `section` will control where to write.\n- If `Excel_Section.Workbook` (the default), the `table` will be written\n  to a new sheet in the workbook named `Sheet<n>` where n is the first\n  integer >1 that is not already used as a sheet name. If too many sheets\n  are present an `Illegal_Argument` error will be thrown.\n- If `Excel_Section.Worksheet`, the `table` will be written to the\n  specified sheet (either adding or replacing).\n- If `Excel_Section.Cell_Range`, the `table` will be written to the\n  specified range.","arguments": "- file: The file to write to.\n- table: The table to write.\n- on_existing_file: What to do if the file already exists.\n- match_columns: How to match columns between the table and the file.\n- on_problems: What to do if there are problems reading the file."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "", "name": "should_treat_as_xls_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"xls_format": {"lazy": false}, "file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Resolve the xls_format setting to a boolean."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "", "name": "xls_format_from_metadata", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "This function returns:\n- `True` if the file is an XLS format,\n- `False` if the file is an XLSX format,\n- `Nothing` if the file is not an Excel format."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "", "name": "as_section", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Excel_Section", "arguments": {"format": {"lazy": false, "type": "Excel_Format", "checked": true}},"aliases": [],"description": "Converts this format to a corresponding `Excel_Section`."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Constructs an `Excel_Format` instance from JSON.\nOnly a subset of options is currently supported."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Excel_Range", "arguments": {"java_range": {"lazy": false, "type": "Java_Range", "checked": true}},"aliases": [],"description": "Specifies a range within an Excel Workbook."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "is_valid_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Validates if a column index (1-based) is within the valid range for\nExcel.","arguments": "- column: 1-based index to check."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "is_valid_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"row": {"lazy": false}},"aliases": [],"description": "Validates if a row index (1-based) is within the valid range for Excel.","arguments": "- row: 1-based index to check."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "column_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Given a column name, parses to the index (1-based) or return index\nunchanged."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "from_address", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"address": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Creates a Range from an address."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "for_cell", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet": {"lazy": false}, "column": {"lazy": false}, "row": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Create a Range for a single cell."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "for_range", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet": {"lazy": false}, "left": {"lazy": false}, "top": {"lazy": false}, "right": {"lazy": false}, "bottom": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Create an Excel_Range for a range of cells."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "for_columns", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet": {"lazy": false}, "left": {"lazy": false}, "right": {"lazy": false, "default": "left"}},"aliases": [],"icon": "data_input","description": "Create an Excel_Range for a set of columns."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "for_rows", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet": {"lazy": false}, "top": {"lazy": false}, "bottom": {"lazy": false, "default": "top"}},"aliases": [],"icon": "data_input","description": "Create an Excel_Range for a set of rows."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "column_name_for_index", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"icon": "data_input","description": "Convert an index (1-based) to a column name"},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "column_index_for_name", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "data_input","description": "Convert a column name to an index (1-based)"},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "sheet_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the name of the sheet."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "top_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the index (1-based) of the top row of the range.\nReturns `Nothing` if referring to a complete column."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "bottom_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the index (1-based) of the bottom row of the range.\nReturns `Nothing` if referring to a complete column."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "left_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the index (1-based) of the left column of the range.\nReturns `Nothing` if referring to a complete row."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "right_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the index (1-based) of the right column of the range.\nReturns `Nothing` if referring to a complete row."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "is_single_cell", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Is the Excel_Range referring to a single cell"},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "address", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the address to this in A1 format."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Displays the Excel_Range."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "", "name": "validate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"validation": {"lazy": false}, "error_message": {"lazy": true}, "wrapped": {"lazy": true}},"aliases": [],"description": "Wrapper for validation of a value prior to execution."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "", "name": "excel_2007_column_limit", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Range", "type": "", "name": "excel_2007_row_limit", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Excel_Workbook", "arguments": {"excel_connection_resource_ref": {"lazy": false, "type": "Ref (Managed_Resource ReadOnlyExcelConnection)", "checked": true}, "file": {"lazy": false, "type": "File|Temporary_File|Nothing", "checked": true}, "internal_xls_format": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Creates an Excel_Workbook connection."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File | Temporary_File", "checked": true}, "xls_format": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Load a File as a connection to an Excel workbook.","arguments": "- file: The file to load.\n- xls_format: Whether to use the old XLS format (default is XLSX)."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "from_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"stream": {"lazy": false}, "xls_format": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "file": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Load an Input_Stream as a connection to an Excel workbook.","arguments": "- stream: The stream to load.\n- xls_format: Whether to use the old XLS format (default is XLSX).\n- file: Optional file reference."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "xls_format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Is the Workbook in the old XLS format?"},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "databases", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "database", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current file."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "set_database", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false, "type": "Text | File", "checked": true}},"aliases": [],"icon": "data_input","description": "Returns a new Workbook with the specified file.","arguments": "- database: The target file to open as an Excel_Workbook."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "schemas", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "schema", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "set_schema", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Workbook with the specified schema set as default.","arguments": "- schema: The name of the schema to connect to."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "sheet_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the number of sheets."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "sheet_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the names of all the sheets."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "named_ranges_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the number of named ranges."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "named_ranges", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the names of all the named ranges."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets a list of the table types."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "tables", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "default": "Nothing"}, "database": {"lazy": false, "default": "self.database"}, "schema": {"lazy": false, "default": "self.schema"}, "types": {"lazy": false, "default": "Nothing"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialised Table of all the matching views and tables.","arguments": "- name_like: The table name pattern to search for. Support SQL wildcards (`%`, `_`).\n- database: The database name to search in (default is current database).\n- schema: The schema name to search in (defaults to current schema).\n- types: The table types to search for. The list of values can be obtained using the `table_types` method.\n- all_fields: Return all the fields in the metadata table."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "Text", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "Headers.Detect_Headers"}},"aliases": [],"icon": "data_input","description": "Read a range into a Table.","arguments": "- query: sheet name, range name or address to read from the workbook.\n- alias: optionally specify a friendly alias for the query (unused).\n- headers: whether to use the first row as headers (default is\n  `Detect_Headers`)."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "Text | Excel_Range | Integer", "checked": true}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["get", "import", "load", "open", "range", "sheet", "worksheet"],"group": "Standard.Base.Input","icon": "data_input","description": "Read a range into a Table.","arguments": "- query: sheet name, range name or address to read from the workbook.\n- headers: whether to use the first row as headers (default is\n  `Detect_Headers`).\n- limit: the maximum number of rows to read.\n  If set to `Nothing`, all rows will be returned."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "read_section", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"section": {"lazy": false}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Read an Excel_Section from the Workbook","arguments": "- section: the section to read."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "sheet", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text | Integer", "checked": true}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "Headers.Detect_Headers"}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Reads a worksheet from the workbook.","arguments": "- name: the name of the worksheet to read.\n- headers: whether to use the first row as headers (default is\n  `Detect_Headers`)."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "close", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Closes the workbook, releasing any resources it holds.\n\nThis method may be used to release the underlying workbook file,\ne.g. to be able to delete it.\n\nAfter this method is called, this instance is not usable any more - any\noperation on it will throw an `Illegal_State` error."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a simple text description of the workbook."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a short human-readable text representation of the workbook."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a JS object representation for use in visualizations."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "with_java_workbook", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "read_many", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet_names": {"lazy": false, "type": "Vector", "checked": true, "default": "self.sheet_names"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "return": {"lazy": false, "default": "..As_Merged_Table"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Reads one or more sheets into a Table.","arguments": "- sheet_names: the names of sheets, ranges or addresses to read.\n  Defaults to all sheets. An invalid `sheet_name` will be reported as a\n  problem.\n- headers: whether to use the first row as headers (default is\n  `Detect_Headers`) for each sheet.\n- return: how to return the tables. Defaults to `As_Merged_Table` meaning\n  the tables are merged into a single table.\n- on_problems: how to handle problems during reading. Defaults to\n  `Report_Warning`."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Return_As", "name": "Table_Of_Tables", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Return_As", "arguments": {},"aliases": [],"description": "DEPRECATED\nEach sheet is returned as a row.\n\nThis option is deprecated, because it has been renamed. Please use the\nequivalent `With_New_Column` instead."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Return_As", "name": "Merged_Table", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Return_As", "arguments": {"columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true, "default": "Columns_To_Keep.In_Any"}, "match": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "Match_Columns.By_Name"}},"aliases": [],"description": "DEPRECATED\nAll sheets are merged into a single table. A union operation is performed.\n\nThis option is deprecated, because it has been renamed. Please use the\nequivalent `As_Merged_Table` instead."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "close_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"c": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "build_sheet_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"workbook": {"lazy": false, "type": "Excel_Workbook", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "_resolve_return_as_compatibility", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"return": {"lazy": false}},"aliases": [],"description": "A helper method that ensures that we can take the new `Return_As_Table` type\nas well as the deprecated `Return_As` type, together with autoscoping.\nWith autoscoping, the `As_Merged_Table` constructor is ambiguous, so plain\nautoscoping would not work and we do some workarounds to make it work.\nIn case of the ambiguity, the new-style `Return_As_Table.As_Merged_Table`\nvariant is preferred."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "_query_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"wb": {"lazy": false, "type": "Excel_Workbook", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Creates a query widget for the `read` method."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "_read_sheets", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector (Pair Text (Table | Nothing))", "arguments": {"workbook": {"lazy": false, "type": "Excel_Workbook", "checked": true}, "sheet_names": {"lazy": false, "type": "Vector Text", "checked": true}, "headers": {"lazy": false, "type": "Headers", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "_sheet_names_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"sheet_names": {"lazy": false, "type": "Vector Text", "checked": true}, "loaded_tables": {"lazy": false, "type": "Vector Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Read_Many_As_Merged_Table_Strategy", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Excel_Workbook", "checked": true}},"aliases": [],"description": "Loads all sheets in the Excel workbook and merges them into a single table."},
{"module": "Standard.Table.Extensions.Column_Vector_Extensions", "type": "Vector", "name": "to_column", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "default": "\"Vector\""}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Creates a column from a `Vector` of values.","arguments": "- name: Name of the new column."},
{"module": "Standard.Table.Extensions.Column_Vector_Extensions", "type": "Range", "name": "to_column", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "default": "\"Range\""}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Creates a column from a `Range` of values.","arguments": "- name: Name of the new column."},
{"module": "Standard.Table.Extensions.Column_Vector_Extensions", "type": "Date_Range", "name": "to_column", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "default": "\"Date_Range\""}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Creates a column from a `Date_Range` of values.","arguments": "- name: Name of the new column."},
{"module": "Standard.Table.Extensions.Excel_Extensions", "type": "Date", "name": "from_excel", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"excel_date": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Standard.Base.Conversions","icon": "date_and_time","description": "Converts an Excel date to a `Date`."},
{"module": "Standard.Table.Extensions.Excel_Extensions", "type": "Date_Time", "name": "from_excel", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"excel_date": {"lazy": false, "type": "Number", "checked": true}},"aliases": [],"group": "Standard.Base.Conversions","icon": "date_and_time","description": "Converts an Excel date time to a `Date_Time`."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "Vector", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fields": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `Vector` into a `Table`.","arguments": "- fields: a Vector of Text representing the names of fields to look up.\n  If `Nothing` then all fields found are added."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "Range", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Range\""}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `Range` into a `Table`.","arguments": "- name: The name of the column to use for the range."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "Date_Range", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "self.default_column_name"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `Date_Range` into a `Table`.","arguments": "- name: The name of the column to use for the range."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "JS_Object", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fields": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `JS_Object` into a `Table`.","arguments": "- fields: a Vector of Text representing the names of fields to look up.\n  If `Nothing` then all fields found are added."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "XML_Document", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `XML_Document` into a `Table`."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "XML_Element", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `XML_Document` into a `Table`."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "Table", "name": "from_objects", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "fields": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Constants","icon": "data_input","description": "Converts an object or a Vector of object into a Table, by looking up the\nrequested fields from each item.","arguments": "- value: The object or Vector of objects to convert to a table.\n  If a Vector or Array, then each item is added as a row.\n  Otherwise, treated as a single row.\n- fields: a Vector of Text representing the names of fields to look up.\n  If `Nothing` then all fields found are added.","examples": "> Example\n  Converts a set of objects into a table using the provided headers.\n\n      from Standard.Table import Table\n      import Standard.Examples\n\n      example_to_table =\n          json = Examples.simple_table_json\n          headers = Examples.simple_table_json_headers\n          Table.from_objects json headers"},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "Text", "name": "parse_to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Text | Regex", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "parse_values": {"lazy": false, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts a Text into a Table using a regular expression pattern.\n\nEach match becomes a row in the table.\n\nIf there are no marked groups, there will be a single column with the\nwhole content of the match. Otherwise, each group becomes a column\n(with the column name taken from the group name if the group is named in the\nregex).\n\nFor details on Enso's Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","arguments": "- pattern: The regular expression as either `Text` or `Regex` to search within the text.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- parse_values: Parse any values using the default value parser.","remarks": "? Column Names\n\nIf there are no marked groups, the new column will be named `Column`.\nIf the marked groups are named, the names will be used otherwise the column\nwill be named `Column <N>` where `N` is the number of the marked group.\n(Group 0 is not included.)"},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "JSON_Format", "name": "write_table", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}, "table": {"lazy": false}, "on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Implements the `Table.write` for this `JSON_File`.","arguments": "- file: The file to write to.\n- table: The table to write.\n- on_existing_file: What to do if the file already exists.\n- match_columns: How to match columns between the table and the file.\n  Not used for JSON.\n- on_problems: What to do if there are problems reading the file."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "", "name": "append_to_json_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "table": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Handles appending to a file containing a JSON table by removing the closing bracket and appending to it."},
{"module": "Standard.Table.Internal.Type_Refinements.Column_Refinements", "type": "", "name": "refine_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Type_Refinements.Column_Refinements", "type": "", "name": "is_single_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Column", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Integer", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Float", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Text", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Boolean", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Date", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Time_Of_Day", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Of_Day", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Date_Time", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Time", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Integer", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Float", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Text", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Boolean", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Date", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Time_Of_Day", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Of_Day", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Date_Time", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Time", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Table_Refinements", "type": "", "name": "refine_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Type_Refinements.Table_Refinements", "type": "", "name": "is_single_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Group_Number", "type": "", "name": "add_group_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "grouping_method": {"lazy": false, "type": "Grouping_Method", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}, "from": {"lazy": false, "type": "Integer", "checked": true}, "step": {"lazy": false, "type": "Integer", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Group_Number", "type": "", "name": "_prepare_group_by", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "problem_builder": {"lazy": false}, "group_by": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Group_Number", "type": "", "name": "_prepare_ordering", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "problem_builder": {"lazy": false}, "order_by": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Group_Number", "type": "", "name": "_illegal_if", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"b": {"lazy": false}, "msg": {"lazy": false}, "cont": {"lazy": true}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Row_Number", "type": "", "name": "add_row_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "name": {"lazy": false}, "from": {"lazy": false}, "step": {"lazy": false}, "group_by": {"lazy": false}, "order_by": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Row_Number", "type": "", "name": "create_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "name": {"lazy": false}, "from": {"lazy": false}, "step": {"lazy": false}, "grouping_columns": {"lazy": false}, "ordering": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Row_Number", "type": "", "name": "rename_columns_if_needed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "name": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "build_table_from_columns": {"lazy": false}},"aliases": [],"description": "If the table already contains a column called `name` it will be renamed to a\nunique name, so that a new column with this name can be added."},
{"module": "Standard.Table.Internal.Add_Row_Number", "type": "", "name": "nth_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "step": {"lazy": false}, "n": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Row_Number", "type": "", "name": "make_range_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "start": {"lazy": false}, "step": {"lazy": false}, "length": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Running", "type": "", "name": "add_running", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "Statistic.Count"}, "of": {"lazy": false, "type": "Text|Integer", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "group_by": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": []},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "Validated_Aggregate_Columns", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Validated_Aggregate_Columns", "arguments": {"key_columns": {"lazy": false, "type": "Vector Column", "checked": true}, "valid_columns": {"lazy": false, "type": "Vector (Pair Text Aggregate_Column)", "checked": true}, "problems": {"lazy": false, "type": "Vector Any", "checked": true}, "old_style": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "Internal_Order_By_Column_Reference", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Order_By_Column_Reference", "arguments": {"column": {"lazy": false}, "direction": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "Internal_Missing_Column_Error", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Missing_Column_Error", "arguments": {},"aliases": [],"description": "A marker for missing columns during resolution."},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "", "name": "prepare_aggregate_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"naming_helper": {"lazy": false}, "group_by": {"lazy": false}, "aggregates": {"lazy": false}, "table": {"lazy": false}, "error_on_missing_columns": {"lazy": false}},"aliases": [],"description": "Prepares an aggregation input for further processing:\n- resolves the column descriptors, reporting any issues,\n- ensures that the output names are unique,\n- finds the key columns."},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "", "name": "default_aggregate_column_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate_column": {"lazy": false}, "include_column": {"lazy": false, "default": "True"}},"aliases": [],"description": "Defines the default name of an `Aggregate_Column`.\n\nTo be used when `as` is `Nothing`.\n\nAssumes that the `Aggregate_Column` is resolved. You may need to transform it\nwith `resolve_aggregate` first."},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "", "name": "all_same_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregates": {"lazy": false}},"aliases": [],"description": "Utility function to check if all aggregates are operating on the same source column."},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "", "name": "resolve_aggregate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "problem_builder": {"lazy": false}, "aggregate_column": {"lazy": false, "type": "Aggregate_Column", "checked": true}},"aliases": [],"description": "Returns a copy of this aggregate where all column descriptors (names,\nindices or column references potentially from a different table) are\nreplaced with column references from the provided table.\n\nIt also verifies that the columns have the right types.\n\n`Sort_Column`s are replaced with column references of matched columns coming\nfrom the provided table.\n\nThis preprocess step is required by some helper function, to avoid having\nto pass the table reference and resolve the column descriptors all the\ntime.\n\nIf some columns cannot be resolved, `Nothing` is returned. Any issues are\nreported to the `Problem_Builder`."},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "", "name": "java_aggregator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "column": {"lazy": false}},"aliases": [],"description": "Creates a Java Aggregator for the Aggregate_Column"},
{"module": "Standard.Table.Internal.Cast_Helpers", "type": "", "name": "check_cast_compatibility", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_type": {"lazy": false}, "target_type": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if one type can be cast into another and returns a dataflow error\nexplaining the situation if not."},
{"module": "Standard.Table.Internal.Column_Format", "type": "", "name": "make_value_formatter_for_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "locale": {"lazy": false}},"aliases": [],"description": "Create a formatter for the specified `Value_Type`."},
{"module": "Standard.Table.Internal.Column_Format", "type": "", "name": "make_value_formatter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false}, "format": {"lazy": false, "type": "Text | Nothing", "checked": true}},"aliases": [],"description": "Create a formatter for the given format string.\nThe `value` parameter has to have a `format` method that takes a format and\nlocale."},
{"module": "Standard.Table.Internal.Column_Format", "type": "", "name": "make_boolean_formatter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Text | Nothing", "checked": true}},"aliases": [],"description": "Create a `Boolean` formatter that takes the format string as the second\nparameter."},
{"module": "Standard.Table.Internal.Column_Format", "type": "", "name": "make_datetime_formatter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"locale_override": {"lazy": false, "type": "Locale", "checked": true}, "format": {"lazy": false, "type": "Text | Date_Time_Formatter | Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Column_Format", "type": "", "name": "handle_illegal_argument_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format_string": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Rethrow a Java IllegalArgumentException as an Illegal_Argument."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Naming_Helper", "arguments": {"naming_properties": {"lazy": false}, "generated_name_properties": {"lazy": false, "default": "naming_properties"}},"aliases": []},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "in_memory", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A `Column_Naming_Helper` for the in-memory backend - having no length limits."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "has_length_limit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "create_unique_name_strategy", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a `Unique_Name_Strategy` that will generate names keeping the\ncolumn naming limitations in mind."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "ensure_name_is_valid", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the name is valid and runs the action, otherwise raises an error."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "validate_many_column_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"names": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the names are valid and runs the action, otherwise raises an error."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "sanitize_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Ensures that the name does not contain the null character."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "check_ambiguity", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"existing_names": {"lazy": false}, "new_name": {"lazy": false}, "continuation": {"lazy": true}},"aliases": [],"description": "Checks if the new name is unambiguously different from the existing ones.\nIn particular, it is used for case-insensitive backends to ensure that\nthere are no two columns that while not equal, are equal ignoring case -\nwhich could introduce problems."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "binary_operation_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"operation_name": {"lazy": false}, "left": {"lazy": false}, "right": {"lazy": false}},"aliases": [],"description": "Generates a column name for a binary operation."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "function_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"function_name": {"lazy": false}, "arguments": {"lazy": false}},"aliases": [],"description": "Generates a column name for a function-like transformation."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "to_expression_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Serializes a given object into an expression-like text approximation.\nNote that it may not necessarily be a valid expression, it just tries to\nbe similar to one. In many cases it will be valid, but it is not a\nguarantee.\n\nFor columns, it will return its name wrapped in `[` and `]`.\nFor other objects, it will return its pretty-printed representation."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "concat", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"texts": {"lazy": false}, "add_spaces": {"lazy": false, "default": "True"}},"aliases": [],"description": "Concatenates a vector of texts that are meant to make a single column\nname, ensuring it will fit within the limit.\n\nIt may truncate the whole text or also truncate individual parts to try\nto display every part."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "make_temp_column_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"existing_column_names": {"lazy": false}},"aliases": [],"description": "Create a column called \"temp\", possibly renamed."},
{"module": "Standard.Table.Internal.Column_Ops", "type": "", "name": "map_over_storage", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_column": {"lazy": false}, "function": {"lazy": false}, "builder": {"lazy": false}, "skip_nothing": {"lazy": false, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Map a text-returning function over the column values, using Storage directly.\nThe output column has the same name as the input."},
{"module": "Standard.Table.Internal.Column_Ops", "type": "", "name": "map_2_over_storage", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_column_0": {"lazy": false}, "input_column_1": {"lazy": false}, "function": {"lazy": false}, "builder": {"lazy": false}, "skip_nothing": {"lazy": false, "default": "True"}},"aliases": [],"description": "Map a text-returning function over the values of two columns, using Storage\ndirectly. The output column has the same name as the first input column.\n`skip_nothing` applies to the first input to the function, not both inputs."},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Constant_Column", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Number."},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Time", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Date_Time."},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Date."},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Time_Of_Day", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Time_Of_Day."},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Boolean."},
{"module": "Standard.Table.Internal.Date_Time_Helpers", "type": "", "name": "align_period_with_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Date_Time_Helpers", "type": "", "name": "make_date_part_function", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "period": {"lazy": false}, "make_unary_op": {"lazy": false}, "naming_helper": {"lazy": false}},"aliases": [],"description": "Common logic for `Column.date_part`."},
{"module": "Standard.Table.Internal.Date_Time_Helpers", "type": "", "name": "make_period_selector_for_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "Detected_Headers", "name": "Existing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Detected_Headers", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "Represents the headers found in the file."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "Detected_Headers", "name": "None", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Detected_Headers", "arguments": {"column_count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the file exists but no headers have been found,\nso only positional column matching is possible.\n\nNote that the file may still contain rows that have less or more columns\nthan specified here. This column count is only based on the first row."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "Detected_File_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Detected_File_Metadata", "arguments": {"headers": {"lazy": false, "type": "Detected_Headers | Nothing", "checked": true}, "line_separator": {"lazy": false, "type": "Text|Nothing", "checked": true}, "ends_with_newline": {"lazy": false, "type": "Boolean", "checked": true}, "has_any_content": {"lazy": false, "type": "Boolean", "checked": true}, "detected_encoding": {"lazy": false, "type": "Encoding", "checked": true}},"aliases": [],"description": "An internal type representing metadata describing the format of a specific\nDelimited file.","arguments": "- headers: headers present in the file.\n- line_separator: line separator detected from file contents, if any.\n- ends_with_newline: specifies if the last line ends with a line\n  separator that is consistent with the detected one.\n- has_any_content: specifies if the file contains any content.\n- detected_encoding: the encoding that would be used if reading the file.\n  If a specific encoding was set in the configuration, it will be passed\n  unchanged. However, if `Encoding.default` was used, this will contain\n  the detected encoding that was chosen."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "read_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false}, "file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Reads a delimited file according to the provided format.","arguments": "- format: The specification of the delimited file format.\n- file: The file to read.\n- on_problems: Specifies the behavior when a problem occurs during the\n  operation. By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "read_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "format": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "read_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false}, "stream": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "max_columns": {"lazy": false, "default": "default_max_columns"}, "related_file": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Reads an input stream according to the provided format.","arguments": "- format: The specification of the delimited file format.\n- stream: An `Input_Stream` to be used as the data source.\n- on_problems: Specifies the behavior when a problem occurs during the\n  operation. By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.\n- max_columns: Specifies the limit of columns to read. The limit is set to\n  avoid `OutOfMemory` errors on malformed files. It must be a positive\n  integer.\n- related_file: The file related to the provided `java_stream`, if available,\n  or `Nothing`. It is used for more detailed error reporting."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "read_from_reader", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false}, "java_reader": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "max_columns": {"lazy": false, "default": "4096"}},"aliases": [],"description": "Reads data from the provided `Reader` according to the provided format.\n\nThe `encoding` parameter is ignored, instead the provided reader should\nhandle any necessary decoding.","arguments": "- format: The specification of the delimited file format.\n- java_reader: A Java `Reader` used as the source of decoded characters.\n- on_problems: Specifies the behavior when a problem occurs during the\n  operation. By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.\n- max_columns: Specifies the limit of columns to read. The limit is set to\n  avoid `OutOfMemory` errors on malformed files. It must be a positive\n  integer."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "prepare_reader", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Delimited_Format", "checked": true}, "max_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "java_problem_aggregator": {"lazy": false}, "newline_override": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "detect_metadata", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "format": {"lazy": false}},"aliases": [],"description": "Reads the beginning of the file to detect the existing headers and column\ncount."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "newline_at_eof", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "encoding": {"lazy": false}},"aliases": [],"description": "Checks if the file has a newline at the end.\n\nReturns the newline sequence if found, `Nothing` otherwise."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "handle_parsing_failure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "handle_parsing_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "handle_io_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"related_file": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "default_max_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "write_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}, "file": {"lazy": false, "type": "Writable_File", "checked": true}, "on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Writes a delimited file according to the provided format.","arguments": "- table: The table to serialize.\n- format: The specification of the delimited file format.\n- file: The file to write to.\n- on_existing_file: Specifies how to proceed if the file already exists.\n- on_problems: Specifies the behavior when a problem occurs during the\n  operation. By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings."},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "append_to_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}, "file": {"lazy": false, "type": "Writable_File", "checked": true}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Handles appending to an existing file, ensuring that the columns are matched\nagainst the ones already in the file.\n\nIf the file does not exist or is empty, it acts like a regular overwrite."},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "append_to_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}, "file": {"lazy": false, "type": "File", "checked": true}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "write_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}},"aliases": [],"description": "Returns a Text value representing the table in the delimited format."},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "write_to_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}, "stream": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "related_file": {"lazy": false, "default": "Nothing"}, "separator_override": {"lazy": false, "default": "Nothing"}, "needs_leading_newline": {"lazy": false, "default": "False"}},"aliases": [],"description": "Writes to an output stream according to the provided format.","arguments": "- table: The table to serialize.\n- format: The specification of the delimited file format.\n- stream: An `Output_Stream` used as the data destination.\n- on_problems: Specifies the behavior when a problem occurs during the\n  operation. By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.\n- related_file: The file related to the provided `java_stream`, if available,\n  or `Nothing`. It is used for more detailed error reporting.\n- separator_override: An optional override for the line separator to use\n  instead of the one from `format`."},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "write_to_writer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}, "java_writer": {"lazy": false}, "separator_override": {"lazy": false, "default": "Nothing"}, "needs_leading_newline": {"lazy": false, "default": "False"}},"aliases": [],"description": "Writes data to the provided `Writer` according to the provided format.\n\nThe `encoding` parameter is ignored, instead the provided writer should\nhandle any necessary encoding.","arguments": "- table: The table to serialize.\n- format: The specification of the delimited file format.\n- java_writer: A Java `Writer` to which characters will be written.\n- separator_override: An optional override for the line separator to use\n  instead of the one from `format`."},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "should_write_headers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"headers": {"lazy": false, "type": "Headers", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "default_line_separator_for_writing", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default line separator used for newly written delimited files, if no\nspecific separator has been set."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "display_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "add_row_index": {"lazy": false, "type": "Boolean", "checked": true}, "max_rows_to_show": {"lazy": false, "type": "Integer", "checked": true}, "all_rows_count": {"lazy": false, "type": "Integer", "checked": true}, "format_terminal": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Renders an ASCII-art representation for a Table from a dataframe that\ncontains a fragment of the underlying data and count of all rows.","arguments": "- table: The materialized table that contains the data to be displayed.\n- add_row_index: A boolean flag, specifying whether to display row indices.\n- max_rows_to_show: The maximum amount of rows to display.\n- all_rows_count: The count of all rows in the underlying Table; if\n  `all_rows_count` is bigger than the amount of rows displayed, an additional\n  line will be included that will say how many hidden rows there are.\n  Useful for remote tables where `df` contains only a fragment of the data.\n- format_terminal: A boolean flag, specifying whether to use ANSI escape\n  codes for rich formatting in the terminal."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "print_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"header": {"lazy": false}, "rows": {"lazy": false}, "indices_count": {"lazy": false}, "format_term": {"lazy": false}},"aliases": [],"description": "A helper function for creating an ASCII-art representation of tabular data.","arguments": "- header: vector of names of columns in the table.\n- rows: a vector of rows, where each row is a vector that contains a text\n  representation of each cell\n- indices_count: the number specifying how many columns should be treated as\n  indices; this will make them in bold font if `format_term` is enabled.\n- format_term: a boolean flag, specifying whether to use ANSI escape codes\n  for rich formatting in the terminal."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "pad", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"txt": {"lazy": false}, "len": {"lazy": false}},"aliases": [],"description": "Ensures that the `txt` has at least `len` characters by appending spaces at\nthe end.","arguments": "- txt: The text to pad.\n- len: The minimum length of the text."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "ansi_bold", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"enabled": {"lazy": false}, "txt": {"lazy": false}},"aliases": [],"description": "Adds ANSI bold escape sequences to text if the feature is enabled.","arguments": "- enabled: will insert ANSI sequences only if this flag is true and we are not on Windows.\n- txt: The text to possibly bold."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "_get_item_as_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"storage": {"lazy": false}, "ix": {"lazy": false}},"aliases": [],"description": "Gets a textual representation of the item at position `ix` in `storage`."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "_normalize_text_for_display", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "Ensures that the text can be safely displayed in a terminal.\n\nIf the string contains special characters, it will be wrapped in quotes and\nthe characters escaped. Otherwise, the string is returned as-is."},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "make_java_headers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"headers": {"lazy": false, "type": "Headers", "checked": true}},"aliases": [],"description": "Convert Headers to the correct HeaderBehavior"},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "handle_reader", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "reader": {"lazy": false}},"aliases": [],"description": "Handle and map the Java errors when reading an Excel file"},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "read_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "section": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "xls_format": {"lazy": false, "default": "False"}},"aliases": [],"description": "Reads an input Excel file according to the provided section.","arguments": "- file: The File object to read.\n- section: The part of the Excel document to read.\n- on_problems: Specifies the behavior when a problem occurs during the\n  operation. By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.\n- xls_format: If `True` then the file is read in using Excel 95-2003 format\n  otherwise reads in Excel 2007+ format."},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "handle_bad_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "A helper that handles the Java exceptions reported when a malformed XLS file\nis opened."},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "handle_bad_format_with_handler", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"handler": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "A helper that handles the Java exceptions reported when a malformed XLS file\nis opened."},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "handle_invalid_location", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "A helper that handles the Java exceptions reported when a sheet, range or\naddress is invalid."},
{"module": "Standard.Table.Internal.Excel_Section", "type": "Excel_Section", "name": "Worksheet", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Excel_Section", "arguments": {"sheet": {"lazy": false, "type": "Integer|Text", "checked": true, "default": "1"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "Headers.Detect_Headers"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "row_limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": [],"description": "Gets the data from a specific sheet.","arguments": "- sheet: The sheet number or name.\n- headers: Specifies if the first row contains the  column names. If set\n  to `Detect_Headers`, the process tries to infer if headers are\n  present. If the column names are not unique, numeric suffixes will be\n  appended to disambiguate them.\n- skip_rows: The number of rows to skip before reading the data.\n- row_limit: The maximum number of rows to read."},
{"module": "Standard.Table.Internal.Excel_Section", "type": "Excel_Section", "name": "Cell_Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Excel_Section", "arguments": {"address": {"lazy": false, "type": "Text|Excel_Range", "checked": true}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "Headers.Detect_Headers"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "row_limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": [],"description": "Gets a specific range (taking either a defined name or external style\naddress) from the workbook.\nIf it is a single cell, it will be treated as the top left cell and will\nexpand right and down to cover the connected cells.","arguments": "- address: A name of a range or an Excel-style address (e.g. Sheet1!A1:B2).\n- headers: Specifies if the first row contains the  column names. If set\n  to `Detect_Headers`, the process tries to infer if headers are\n  present. If the column names are not unique, numeric suffixes will be\n  appended to disambiguate them.\n- skip_rows: The number of rows to skip before reading the data.\n- row_limit: The maximum number of rows to read."},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "make_java_existing_file_behavior", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"on_existing_file": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "write_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}, "table": {"lazy": false, "type": "Table", "checked": true}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "section": {"lazy": false, "type": "Excel_Section", "checked": true}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "xls_format": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Writes a Table to an Excel file.","arguments": "- file: The file to write to.\n- table: The table to serialize.\n- section: The part of the Excel workbook to write to.\n- match_columns: Controls how the columns are matched when appending to an\n  existing file.\n- on_problems: Specifies the behavior when a problem occurs during the\n  operation. By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.\n- xls_format: If `true`, the file is written in the legacy XLS format.\n  Otherwise, the file is written in the modern XLSX format."},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "write_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "table": {"lazy": false}, "on_existing_file": {"lazy": false}, "section": {"lazy": false}, "match_columns": {"lazy": false}, "xls_format": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "find_temp_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_file": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "find_bak_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_file": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "prepare_file_modification_strategy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "section": {"lazy": false}, "on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "handle_writer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"writer": {"lazy": true}},"aliases": [],"description": "Handle and map the Java errors when writing an Excel file"},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "make_java_existing_data_mode", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Expand_Objects_Helpers", "type": "", "name": "expand_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "column": {"lazy": false, "type": "Text | Integer", "checked": true}, "fields": {"lazy": false, "type": "(Vector Text) | Nothing", "checked": true, "default": "Nothing"}, "prefix": {"lazy": false, "type": "Prefix_Name", "checked": true, "default": "Prefix_Name.Column_Name"}},"aliases": []},
{"module": "Standard.Table.Internal.Expand_Objects_Helpers", "type": "", "name": "expand_to_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "column": {"lazy": false, "type": "Text | Integer", "checked": true}, "at_least_one_row": {"lazy": false, "default": "False"}, "sequences_only": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Conversions","description": "Expand aggregate values in a column to separate rows.\n\nFor each value in the specified column, if it is an aggregate (`Vector`,\n`Range`, etc.), expand it to multiple rows, duplicating the values in the\nother columns.\n\n\n\nThe following aggregate values are supported:\n- `Array`\n- `Vector`\n- `List`\n- `Range`\n- `Date_Range`\n- `Pair\n\nAny other values are treated as non-aggregate values, and their rows are kept\nunchanged.\n\nIn in-memory tables, it is permitted to mix values of different types.","arguments": "- column: The column to expand.\n- at_least_one_row: for an empty aggregate value, if `at_least_one_row` is\n  true, a single row is output with `Nothing` for the aggregates column; if\n  false, no row is output at all.","examples": "> Example\n  Expand a column of integer `Vectors` to a column of `Integer`\n\n  table = Table.new [[\"aaa\", [1, 2]], [\"bbb\", [[30, 31], [40, 41]]]]\n  # => Table.new [[\"aaa\", [1, 1, 2, 2]], [\"bbb\", [30, 31, 40, 41]]]"},
{"module": "Standard.Table.Internal.Expand_Objects_Helpers", "type": "", "name": "create_table_from_objects", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"base_value": {"lazy": false, "type": "Convertible_To_Rows", "checked": true}, "fields": {"lazy": false, "type": "Vector | Nothing", "checked": true}, "treat_dictionary_as_sequence": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": []},
{"module": "Standard.Table.Internal.Expand_Objects_Helpers", "type": "", "name": "_fill_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"builder": {"lazy": false}, "size": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "fan_out_to_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "function": {"lazy": false}, "column_count": {"lazy": false}, "column_builder": {"lazy": false, "default": "make_string_builder"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"description": "Transform a table by transforming a column into a set of columns. Takes a\nfunction that maps a single element of the input column to a vector of output\nvalues. The original column is replaced by the new columns.","arguments": "- table: The table to transform.\n- input_column: The column to transform.\n- function: A function that transforms a single element of `input_column`\n  to multiple values.\n- column_count: The number of columns to split to.\n  If `All_Columns` then columns will be added to fit all data."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "fan_out_to_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false, "type": "Text", "checked": true}, "function": {"lazy": false}, "column_names": {"lazy": false, "default": "[input_column_id]"}, "at_least_one_row": {"lazy": false, "default": "False"}, "column_builder": {"lazy": false, "default": "make_string_builder"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"description": "Transform a column by applying the given function to the values in the\ncolumn. The function produces multiple outputs, so each row is duplicated,\nwith each row getting a distinct output value in place of the original\ninput value. The other column values are just duplicated.","arguments": "- table: The table to transform.\n- input_column: The column to transform.\n- function: A function that transforms a single element of `input_column`\n  to multiple values.\n- column_names: The names for the generated columns or a call back to create\n  the names for each row.\n- at_least_one_row: When true, if the function returns an empty list, a\n  single row is output with `Nothing` for the transformed column. If false,\n the row is not output at all."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "fan_out_to_rows_and_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "function": {"lazy": false}, "column_names": {"lazy": false}, "at_least_one_row": {"lazy": false, "default": "False"}, "column_builder": {"lazy": false, "default": "make_string_builder"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"description": "Transform a column by applying the given function to the values in the\ncolumn. The function returns a `Vector` of `Vectors`. Each inner vector turns\ninto multiple new columns in a single row. Each inner vector within the outer\nvector produces an output row, so each row is duplicated, with each row\ngetting a distinct set of output values in place of the original input value.\nThe other column values are just duplicated.","arguments": "- table: The table to transform.\n- input_column: The column to transform.\n- function: A function that transforms a single element of `input_column`\n  to a `Vector` of `Vector` of values.\n- column_names: The names for the generated columns.\n- on_problems: Specifies the behavior when a problem occurs.","examples": "> Example\nf(\"12 34 56\") -> [[1, 2], [3, 4], [5, 6]]\n\nfoo | bar       | baz\n----+-----------+----\n  x | 12 34 56  |   y    ===>\n... | ...       | ...\n\nfoo | bar 1 | bar 2 | baz\n----+-------+-------+----\n  x |     1 |     2 |   y\n  x |     3 |     4 |   y\n  x |     5 |     6 |   y\n... | ...   | ...   | ...","errors": ""},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "fan_out_to_rows_and_columns_fixed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_storage": {"lazy": false}, "function": {"lazy": false}, "at_least_one_row": {"lazy": false, "type": "Boolean", "checked": true}, "column_names": {"lazy": false, "type": "Vector", "checked": true}, "column_builder": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Inner method for fan_out_to_rows_and_columns where the column names are fixed."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "fan_out_to_rows_and_columns_dynamic", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_storage": {"lazy": false}, "function": {"lazy": false}, "at_least_one_row": {"lazy": false}, "column_names_for_row": {"lazy": false}, "column_builder": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Inner method for fan_out_to_rows_and_columns where the column names are determined by each row."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "map_columns_to_multiple", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_column": {"lazy": false}, "function": {"lazy": false}, "column_count": {"lazy": false}, "column_builder": {"lazy": false, "default": "make_string_builder"}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Map a multi-valued function over a column and return the results as set of\noutput columns.\n\nReturns a Pair of a Vector of Columns and a Vector of problems.","arguments": "- input_column: The column to transform.\n- function: A function that transforms a single element of `input_column`\n  to multiple values.\n- column_count: The number of columns to split to.\n  If `Nothing` then columns will be added to fit all data.\n  If the data exceeds the `column_count`, a `Column_Count_Exceeded` error\n  will follow the `on_problems` behavior."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "rename_new_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "removed_column_name": {"lazy": false}, "columns": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Rename a vector of columns to be unique when added to a table."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "replace_column_with_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "old_column": {"lazy": false}, "new_columns": {"lazy": false}},"aliases": [],"description": "Replace a single column in a table with new columns.\nDoes not ensure names are unique; that must be done before calling this."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "maximum", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vec": {"lazy": false}},"aliases": [],"description": "Return the maximum value of the vector.\nThrows Empty_Error if the vector is empty."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "repeat_each", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Repeat a computation n times."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "uniform_length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target_length": {"lazy": false}, "v": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Pad or truncate a vector to be a specified length; if altered, report\nit as a Column_Count_Mismatch warning."},
{"module": "Standard.Table.Internal.Filter_Condition_Helpers", "type": "", "name": "make_filter_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_column": {"lazy": false}, "filter_condition": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "A helper function gathering the common logic that generates a boolean mask\nfrom a given source column and a filter condition. It contains logic common\nfor all backends.\n\nIt also performs validation and will throw errors if unexpected column types\nare encountered."},
{"module": "Standard.Table.Internal.Filter_Condition_Helpers", "type": "", "name": "warn_on_nothing_in_comparison", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"filter_condition": {"lazy": false}, "value": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Attach a warning if the provided value is `Nothing`."},
{"module": "Standard.Table.Internal.Filter_Condition_Helpers", "type": "", "name": "warn_on_nothing_in_comparison_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"filter_condition": {"lazy": false}, "values": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Attach a warning if the provided value is a `Vector` that contains `Nothing`."},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_builder_for_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "initial_size": {"lazy": false}, "java_problem_aggregator": {"lazy": false, "default": "Missing_Argument.throw \"java_problem_aggregator\""}},"aliases": [],"description": "Note: Value_Type must have an exact representation in Java."},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_bool_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"initial_size": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_double_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"initial_size": {"lazy": false}, "java_problem_aggregator": {"lazy": false, "default": "Missing_Argument.throw \"java_problem_aggregator\""}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_long_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"initial_size": {"lazy": false}, "bits": {"lazy": false}, "java_problem_aggregator": {"lazy": false, "default": "Missing_Argument.throw \"java_problem_aggregator\""}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_string_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"initial_size": {"lazy": false}, "value_type": {"lazy": false, "default": "Value_Type.Char"}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_inferred_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"initial_size": {"lazy": false}, "java_problem_aggregator": {"lazy": false, "default": "Missing_Argument.throw \"java_problem_aggregator\""}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Problems", "type": "", "name": "translate_problem", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"p": {"lazy": false}},"aliases": [],"description": "Convert a Java problem into its Enso equivalent."},
{"module": "Standard.Table.Internal.Java_Problems", "type": "", "name": "unpack_problem_summary", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_summary": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Problems", "type": "", "name": "with_problem_aggregator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "f": {"lazy": false}},"aliases": [],"description": "This is the new preferred way of running Java methods that may report problems."},
{"module": "Standard.Table.Internal.Java_Problems", "type": "", "name": "with_map_operation_problem_aggregator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"location": {"lazy": false, "type": "Text | Nothing", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "f": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Join_Helpers", "type": "Join_Condition_Resolver", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Join_Condition_Resolver", "arguments": {"left_at": {"lazy": false}, "right_at": {"lazy": false}, "make_equals": {"lazy": false}, "make_equals_ignore_case": {"lazy": false}, "make_between": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Join_Helpers", "type": "Join_Condition_Resolver", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"conditions": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Resolves the columns in the provided join conditions, handling any errors\nand capturing redundant columns.\n\nResolution errors are aggregated from all conditions (all found errors\nare reported instead of only the first one). If there were any errors,\n`Nothing` will be returned as the conditions indicating that state.\nBesides, a list of redundant columns from equality joins is aggregated\nwhich can be used to deduplicate them."},
{"module": "Standard.Table.Internal.Join_Helpers", "type": "Join_Condition_Resolution", "name": "Result", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Join_Condition_Resolution", "arguments": {"conditions": {"lazy": false, "type": "Vector Any", "checked": true}, "redundant_column_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Join_Kind_Cross", "type": "Join_Kind_Cross", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind_Cross", "arguments": {},"aliases": [],"description": "Cartesian product: each row of the left table is paired with each row of\nthe right table."},
{"module": "Standard.Table.Internal.Join_Kind_Cross", "type": "Join_Kind_Cross", "name": "to_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the SQL representation of this join kind as text."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "Lookup_Column", "name": "Key_Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Lookup_Column", "arguments": {"base_column": {"lazy": false}, "lookup_column": {"lazy": false}},"aliases": [],"description": "A key column used to correlate rows between the two tables."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "Lookup_Column", "name": "Keep_Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Lookup_Column", "arguments": {"base_column": {"lazy": false}},"aliases": [],"description": "A column from the base table that is kept as-is."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "Lookup_Column", "name": "Replace_Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Lookup_Column", "arguments": {"base_column": {"lazy": false}, "lookup_column": {"lazy": false}, "common_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "A column that is present in both tables.\nIf the row is matched with a row from the lookup table, the value from\nthe lookup table is used; otherwise the value from the base table is kept."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "Lookup_Column", "name": "Add_Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Lookup_Column", "arguments": {"lookup_column": {"lazy": false}},"aliases": [],"description": "A new column added from the lookup table.\nIf the row has no match, it will be `Nothing`."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "Lookup_Column", "name": "is_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "", "name": "prepare_columns_for_lookup", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_table": {"lazy": false}, "lookup_table": {"lazy": false}, "key_columns_selector": {"lazy": false}, "add_new_columns": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Checks if `key_columns` are present in both tables and returns settings\nindicating which columns will be updated and which will be added.\n\nIt also reports any errors or warnings related to selecting these columns."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "", "name": "merge_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_column": {"lazy": false}, "lookup_column": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "", "name": "make_java_lookup_column_description", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"lookup_column": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "Column_Set", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Set", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "column_indices": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "Column_Set", "name": "resolve_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"all_tables": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "match_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}, "matching_mode": {"lazy": false}, "columns_to_keep": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "A helper that encapsulates the common backend-agnostic logic of matching\ncolumns in `Table.union`.\n\nIt matches columns according to the provided matching settings and returns a\nlist of column sets to be merged.\n\nEach column set consists of a name of the resulting column and a list of\nindices for columns in corresponding tables that will be merged to form this\nresult column. The first column index corresponds to the first table in the\ninput and so on. If no column corresponding to a given column set was matched\nin a particular table, its entry will be contain `Nothing` instead.\n\nThe column sets are returned in the order in which the corresponding result\ncolumns should appear in the resulting table.\n\nThe method assumes at least one table is provided in its input."},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "_match_columns_by_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}, "columns_to_keep": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "_build_column_set_by_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}, "output_column_names": {"lazy": false}},"aliases": [],"description": "Common logic for computing the final result of by-name matching.\nOnce the set of output column names is determined, we compute the\n`Column_Set` by finding the corresponding column indices in each table (if found)."},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "_match_columns_by_position", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}, "columns_to_keep": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "_find_column_counts", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}},"aliases": [],"description": "Returns a map indicating in how many tables did a column with a given name appear."},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "_distinct_columns_in_appearance_order", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}},"aliases": [],"description": "Returns a list of distinct column names, in the order of first appearance,\nstarting from the first table."},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key", "name": "Key", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unordered_Multi_Value_Key", "arguments": {"hash_code": {"lazy": false, "type": "Integer", "checked": true}, "columns": {"lazy": false, "type": "Vector Column", "checked": true}, "row_index": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key", "name": "from_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false}, "row_index": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key", "name": "validate_grouping_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Checks which column may cause problems in the grouping due to imprecise\nfloating-point values."},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unordered_Multi_Value_Key_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Ordered_Multi_Value_Key", "name": "Key", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ordered_Multi_Value_Key", "arguments": {"columns": {"lazy": false, "type": "Vector Column", "checked": true}, "flip_direction": {"lazy": false, "type": "Vector Boolean", "checked": true}, "row_index": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Ordered_Multi_Value_Key", "name": "from_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false}, "flip_directions": {"lazy": false}, "row_index": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Ordered_Multi_Value_Key_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ordered_Multi_Value_Key_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Ordered_Multi_Value_Key_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Ordered_Multi_Value_Key_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Unordered_Multi_Value_Key", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Ordered_Multi_Value_Key", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Naming_Properties", "arguments": {},"aliases": [],"description": "An interface for a helper managing limitations of entity names.\n\nIt extends the API of the Java counterpart `NamingProperties`."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "encoded_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Returns the size of the string in the target encoding.\nIt may throw a panic if `size_limit` is `Nothing`."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "truncate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "size": {"lazy": false}},"aliases": [],"description": "Truncates the string to the given size in the target encoding.\nIt may throw a panic if `size_limit` is `Nothing`."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "size_limit", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the maximum size of an entity name in the target encoding,\nor `Nothing` if there is no limit."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "is_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies if names are case sensitive.\nIf not, names that are equal case insensitively, need to be deduplicated."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "raise_name_too_long_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity_kind": {"lazy": false}, "name": {"lazy": false}},"aliases": [],"description": "Raises a `Name_Too_Long` error for the given name.\nThe implementation may customize the extra message appended to the error\nexplaining the limitations."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Unlimited_Naming_Properties", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unlimited_Naming_Properties", "arguments": {"is_case_sensitive": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Unlimited_Naming_Properties", "name": "encoded_size", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Unlimited_Naming_Properties", "name": "truncate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "size": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Unlimited_Naming_Properties", "name": "size_limit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Unlimited_Naming_Properties", "name": "raise_name_too_long_error", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity_kind": {"lazy": false}, "name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Enso_Length_Limited_Naming_Properties", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Length_Limited_Naming_Properties", "arguments": {"limit": {"lazy": false, "type": "Integer", "checked": true}, "is_case_sensitive": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Enso_Length_Limited_Naming_Properties", "name": "encoded_size", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Enso_Length_Limited_Naming_Properties", "name": "truncate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "size": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Enso_Length_Limited_Naming_Properties", "name": "size_limit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Enso_Length_Limited_Naming_Properties", "name": "raise_name_too_long_error", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity_kind": {"lazy": false}, "name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "", "name": "recover_panics", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "A helper method that recovers panics thrown by `Naming_Properties`.\nThe `Naming_Properties` must throw panics and not dataflow errors to comply\nwith the Java `NamingProperties` interface (handling dataflow errors would\ncomplicate the usage).\nThis method allows to recover such panics and turn them into dataflow errors."},
{"module": "Standard.Table.Internal.Offset_Helper", "type": "", "name": "table_offset_impl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "columns": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "[]"}, "n": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}, "fillWith": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}, "group_by": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": []},
{"module": "Standard.Table.Internal.Offset_Helper", "type": "", "name": "column_offset_impl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}, "n": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}, "fillWith": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}},"aliases": []},
{"module": "Standard.Table.Internal.Parse_To_Table", "type": "", "name": "parse_text_to_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "regex_or_pattern": {"lazy": false, "default": "\".\""}, "case_sensitivity": {"lazy": false, "default": "Case_Sensitivity.Default"}, "parse_values": {"lazy": false, "default": "True"}, "on_problems": {"lazy": false, "default": "..Report_Warning"}},"aliases": [],"description": "Converts a Text into a Table using a regular expression pattern.\n\nSee Text.parse_to_table."},
{"module": "Standard.Table.Internal.Parse_Values_Helper", "type": "", "name": "valid_parse_targets", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Parse_Values_Helper", "type": "", "name": "is_a_valid_parse_target", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Checks if the type is a valid argument for `parse`."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Problem_Builder", "arguments": {"types_to_always_throw": {"lazy": false}, "oob_indices": {"lazy": false}, "missing_input_columns": {"lazy": false}, "missing_input_columns_location": {"lazy": false}, "other": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types_to_always_throw": {"lazy": false, "default": "[]"}, "error_on_missing_columns": {"lazy": false, "default": "False"}, "missing_input_columns_location": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Creates a new helper object for aggregating problems to report.","arguments": "- types_to_always_throw: Problems matching these types will be raised as\n  an error by the `attach_` methods regardless of the `Problem_Behavior`\n  used. By default, an empty vector.\n- error_on_missing_columns: If set to `True`, `Missing_Input_Columns` and\n  `Invalid_Aggregate_Column` will be raised as errors by the `attach_`\n  methods regardless of the `Problem_Behavior` used. Defaults to `False`.\n  Setting this to `True` is essentially a shorthand for adding these\n  problem types to `types_to_always_throw`.\n- missing_input_columns_location: The location to add to the missing\n  input column error to make it more informative. Defaults to `Nothing`."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "report_oob_indices", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"indices": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "report_missing_input_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "report_unique_name_strategy", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"unique_name_strategy": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "report_other_warning", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"warning": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "build_problemset", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a vector containing all reported problems, aggregated."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "attach_problems_after", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_behavior": {"lazy": false}, "result": {"lazy": false}},"aliases": [],"description": "Attaches gathered warnings to the result.\nAny errors from the `result` take precedence over the ones owned by this\nbuilder."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "attach_problems_before", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_behavior": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "computation": {"lazy": true}},"aliases": [],"description": "Attaches gathered warnings to the result of the provided computation.\nIf in `Report_Error` mode and there are any problems gathered, the first\none will be returned as error without even running the computation."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "get_problemset_throwing_distinguished_errors", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the generated problem set if no errors force throwing or throws\nthe first error that is meant to be thrown regardless of problem behavior."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "raise_no_output_columns_with_cause", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Raises `No_Output_Columns` error, with cause set to the first problem\nfrom this builder (if any were reported)."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "", "name": "append_to_ref", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ref": {"lazy": false}, "vector": {"lazy": false}},"aliases": [],"description": "Appends a `Vector` to a `Vector_Builder` stored in a `Ref`."},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Merged_Table_Strategy", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Read_Many_As_Merged_Table_Strategy", "arguments": {"into_table": {"lazy": false, "type": "Any -> Columns_To_Keep -> Match_Columns -> Problem_Behavior -> Read_Many_As_Table_Result", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Table_Result", "name": "Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Read_Many_As_Table_Result", "arguments": {"metadata": {"lazy": false, "type": "Nothing|Table", "checked": true}, "data": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Table_Result", "name": "No_Data", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Read_Many_As_Table_Result", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Merged_Table_Strategy", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Merged_Table_Strategy", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Merged_Table_Strategy", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Failed_To_Load", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Merged_Table_Strategy", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "The fallback strategy for converting a generic object into a table.\nCustom data types may implement a conversion to override this strategy, like above."},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "", "name": "_interpret_as_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false, "type": "Any", "checked": true}, "path": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "find_files_list_in_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Many_Files_List", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "ensure_column_type_valid_to_be_files_list", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "make_return", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"return_shape": {"lazy": false, "type": "Return_As_Table", "checked": true}, "input": {"lazy": false, "type": "Many_Files_List", "checked": true}, "objects": {"lazy": false, "type": "Vector (Any | Failed_To_Load)", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_input_as_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"input": {"lazy": false, "type": "Many_Files_List", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_merge_input_and_tables", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"input_table": {"lazy": false, "type": "Table", "checked": true}, "tables_for_rows": {"lazy": false, "type": "Vector Read_Many_As_Table_Result", "checked": true}, "columns_to_keep": {"lazy": false}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "Expands each table from `tables_for_rows` and computes their union, also\nduplicating the corresponding rows from `input_table`."},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_unify_metadata", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table | Nothing", "arguments": {"tables": {"lazy": false, "type": "Vector Read_Many_As_Table_Result", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Unifies provided metadata tables, knowing that some tables may have no \nmetadata - in such case we want to insert as many Nothing rows for metadata \nas there are rows in the corresponding data table."},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_make_table_with_one_null_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"empty_table": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_add_objects_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"base_table": {"lazy": false, "type": "Table", "checked": true}, "objects": {"lazy": false, "type": "Vector Any", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_inherit_warnings_from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Workaround for bug https://github.com/enso-org/enso/issues/11570\nTODO: Remove workaround one #11570 is closed."},
{"module": "Standard.Table.Internal.Replace_Helpers", "type": "", "name": "replace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_table": {"lazy": false}, "lookup_table": {"lazy": false}, "columns": {"lazy": false, "type": "Text | Integer | By_Type | Vector (Text | Integer | By_Type)", "checked": true}, "from_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "to_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "allow_unmatched_rows": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": []},
{"module": "Standard.Table.Internal.Rows_View", "type": "Rows_View", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Rows_View", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Rows_View", "type": "Rows_View", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the number of rows in the table."},
{"module": "Standard.Table.Internal.Rows_View", "type": "Rows_View", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Gets the specified row."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "split_to_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "delimiter": {"lazy": false, "default": "\",\""}, "column_count": {"lazy": false, "type": "Columns_To_Add", "checked": true, "default": "..All_Columns"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"description": "Splits a column of text into a set of new columns.\nSee `Table.split_to_columns`."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "split_to_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false, "type": "Text | Integer", "checked": true}, "delimiter": {"lazy": false, "default": "\",\""}},"aliases": [],"description": "Splits a column of text into a set of new rows.\nSee `Table.split_to_rows`."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "tokenize_to_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "pattern": {"lazy": false}, "case_sensitivity": {"lazy": false}, "column_count": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Tokenizes a column of text into a set of new columns using a regular\nexpression.\nSee `Table.tokenize_to_columns`."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "tokenize_to_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "pattern": {"lazy": false, "default": "\".\""}, "case_sensitivity": {"lazy": false, "default": "Case_Sensitivity.Sensitive"}, "at_least_one_row": {"lazy": false, "default": "False"}},"aliases": [],"description": "Tokenizes a column of text into a set of new rows using a regular\nexpression.\nSee `Table.tokenize_to_rows`."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "parse_to_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "pattern": {"lazy": false, "type": "Text | Regex", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "default": "Case_Sensitivity.Sensitive"}, "parse_values": {"lazy": false, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"description": "Converts a Text column into new columns using a regular expression\npattern.\nSee `Table.parse_to_columns`."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "regex_parse_to_vectors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}},"aliases": [],"description": "Create a parser from a regex to a nested `Vector`. Each match becomes an\nelement of the vector; each group (or the whole match, if there are no\ngroups) becomes an element of the inner vectors."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "regex_to_column_names", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}, "original_column_name": {"lazy": false}},"aliases": [],"description": "Generate column names for the output columns from a regex match.\nIf the regex has no explicit groups, it uses the original column name\nunchanged; otherwise, it uses the group name if it exists, or the original\ncolumn name with a number."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "handle_nothing", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Wrap a function so that it returns [] if passed Nothing."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"storage_type": {"lazy": false}},"aliases": [],"description": "Gets the value type represented by this Java Storage."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "closest_storage_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "enso_to_java", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Convert an Enso value to a Java value before storing it in a Java `Column`.\nThis step is unnecessary for primitive and builtin values, but necessary for\nvalues such as `Decimal`/`BigDecimal`."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "java_to_enso", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Convert a Java value to an Enso value before returning it to Enso from a Java\n`Column`.  This step is unnecessary for primitive and builtin values, but\nnecessary for values such as `Decimal`/`BigDecimal`."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "from_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Converts a value type to an in-memory storage type, possibly approximating it\nto the closest supported type."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "from_value_type_strict", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": [],"description": "A strict variant of `from_value_type` that expects that we can represent the\nprovided value type exactly."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "make_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"storage": {"lazy": false}, "initial_size": {"lazy": false}, "java_problem_aggregator": {"lazy": false}},"aliases": [],"description": "Creates a column storage builder for the given storage type."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "get_storage_for_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "Helper function for tests to get the storage of a Column"},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Column_Helper", "arguments": {"columns": {"lazy": false}, "internal_columns": {"lazy": false}, "make_column": {"lazy": false}, "table": {"lazy": false}, "materialize": {"lazy": false}},"aliases": [],"description": "Helps managing table columns.","arguments": "- columns: A list of columns in the table.\n- internal_columns: A list of all columns in a table. (In_DB this is different from columns)\n- make_column: A function which takes the internal column and creates a\n  fully fledged column from it.\n- table: A reference to the table.\n- materialize: A function which takes a table and materializes it to\n  in-memory."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "select_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selectors": {"lazy": false, "type": "Text | Integer | Regex | By_Type | Vector", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "reorder": {"lazy": false, "type": "Boolean", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "error_on_empty": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "A helper function encapsulating shared code for `select_columns`\nimplementations of various Table variants. See the documentation for the\nTable type for details.\n\nIt returns the selected columns. It is the responsibility of each\nimplementation to reconstruct a proper table from the\nresulting list of columns.","arguments": "- selectors: Single instance or a Vector of names, indexes or\n  regular expressions.\n- case_sensitivity: Specifies whether the column name matching should be\n  case sensitive.\n- reorder: Specifies whether to reorder the matched columns according to\n  the order of the selection criteria.\n  If `False`, the matched entries are returned in the same order as in\n  the input.\n  If `True`, the matched entries are returned in the order of the\n  criteria matching them. If a single object has been matched by multiple\n  criteria, it is placed in the group belonging to the first matching\n  criterion on the list. If a single criterion's group has more than one\n  element, their relative order is the same as in the input.\n- error_on_missing_columns: Specifies if missing columns should be raised\n  as error regardless of `on_problems`.\n- on_problems: Specifies the behavior when a problem occurs during the\n  operation. By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings.\n- error_on_empty: Specifies if the operation should fail if no columns\n  are selected."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "select_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types": {"lazy": false, "type": "Vector", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "A helper to returns a set of columns filtered by the type of the column.","arguments": "- types: The types of columns to select.\n- strict: If `True`, only columns with exactly the specified types will\n  be selected. If `False`, columns with types that are subtypes of the\n  specified types will also be selected (i.e. ignore size, precision)."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "remove_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selectors": {"lazy": false, "type": "Text | Integer | Regex | Vector", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "A helper function encapsulating shared code for `remove_columns`\nimplementations of various Table variants. See the documentation for the\nTable type for details.\n\nIt returns the columns which should be kept. It is the responsibility of\neach implementation to reconstruct a proper table from the resulting list\nof columns.","arguments": "- selectors: Single instance or a Vector of names, indexes or\n  regular expressions.\n- case_sensitivity: Specifies whether the column name matching should be\n  case sensitive.\n- error_on_missing_columns: Specifies if missing columns should be raised\n  as error regardless of `on_problems`.\n- on_problems: Specifies the behavior when a problem occurs during the\n  operation. By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "remove_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types": {"lazy": false, "type": "Vector", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "A helper to returns a set of columns filtering out based on the type of\nthe column.","arguments": "- types: The types of columns to remove.\n- strict: If `True`, only columns with exactly the specified types will\n  be selected. If `False`, columns with types that are subtypes of the\n  specified types will also be selected (i.e. ignore size, precision)."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "reorder_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selectors": {"lazy": false, "type": "Text | Integer | Regex | Vector", "checked": true}, "position": {"lazy": false, "type": "Position", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "A helper function encapsulating shared code for `reorder_columns`\nimplementations of various Table variants. See the documentation for the\nTable type for details.\n\nIt returns the columns which should be kept. It is the responsibility of\neach implementation to reconstruct a proper table from the resulting list\nof columns.","arguments": "- selectors: Single instance or a Vector of names, indexes or\n  regular expressions.\n- position: Specifies how to place the selected columns in relation to\n  the columns which were not matched by the `selector` (if any).\n- case_sensitivity: Specifies whether the column name matching should be\n  case sensitive.\n- error_on_missing_columns: Specifies if missing columns should be raised\n  as error regardless of `on_problems`.\n- on_problems: Specifies the behavior when a problem occurs during the\n  operation. By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "select_columns_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selectors": {"lazy": false, "type": "Text | Integer | Regex | By_Type | Vector", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "reorder": {"lazy": false, "type": "Boolean", "checked": true}, "problem_builder": {"lazy": false, "type": "Problem_Builder", "checked": true}},"aliases": [],"description": "A helper function which selects columns from the table based on the\nprovided selection criteria.","arguments": "- selectors: Single instance or a Vector of names, indexes or regular\n  expressions.\n- case_sensitivity: Specifies whether to match the column names ignoring\n  case.\n- reorder: Specifies whether to reorder the matched columns according to\n  the order of the selection criteria. If `False`, the matched entries\n  are returned in the same order as in the input. If `True`, the matched\n  entries are returned in the order of the first criteria matching them.\n  If a single criterion matches more than one column, their order is the\n  same as in the input table.\n- problem_builder: Encapsulates the aggregation of encountered problems."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "resolve_column_or_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selector": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "A helper function which selects a single column from the table.\n\nIt may allow selection of columns by index, name or computing a derived\nexpression."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "select_blank_columns_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "Blank_Selector.All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true}, "invert_selection": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "A helper method that gets the columns from the provided table that are\ncompletely blank or have some blanks.\n\n\n-TODO docs\n- when: By default, only columns consisting of all blank cells are\n  selected. If set to Blank_Selector.Any_Cell, columns with one or more blank values are\n  selected.\n- treat_nans_as_blank: If `True`, then `Number.nan` is considered as\n  blank.\n- invert_selection: If `True`, then the selection is inverted."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Not_Renamed", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Not_Renamed", "arguments": {},"aliases": [],"description": "An internal marker type for `rename_columns`."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Column_Transform_Element", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Transform_Element", "arguments": {"column": {"lazy": false}, "associated_selector": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Union_Result_Type", "name": "Common_Type", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Union_Result_Type", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Union_Result_Type", "name": "Fallback_To_Text", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Union_Result_Type", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Union_Result_Type", "name": "No_Types_To_Unify", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Union_Result_Type", "arguments": {},"aliases": [],"description": "This case is returned if the requested column was missing from _all_ tables,\nso there were no types to unify. An all-null column should be created."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "read_name_mapping_from_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_map": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "A helper function which takes a Table like object and a Table for a name\nmapping and returns a new Table with the columns renamed according to the\nmapping."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "rename_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"naming_helper": {"lazy": false, "type": "Column_Naming_Helper", "checked": true}, "internal_columns": {"lazy": false, "type": "Vector", "checked": true}, "mapping": {"lazy": false, "type": "Dictionary | Vector", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "A helper function encapsulating shared code for `rename_columns`\nimplementations of various Table variants. See the documentation for the\nTable type for details.\n\nIt takes a list of columns and a mapping, and returns the complete new set\nof column names which should be applied to the table. It is the\nresponsibility of each implementation to reconstruct a proper table from the\nresulting list of names.","arguments": "- internal_columns: A list of all columns in a table.\n- mapping: A selector specifying which columns should be moved and the order\n  in which they should appear in the result.\n- case_sensitivity: Specifies whether to match the column names ignoring\n  case.\n- error_on_missing_columns: If set to `True`, missing columns are treated as\n  error regardless of `on_problems`.\n- on_problems: Specifies the behavior when a problem occurs during the\n  operation. By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "sort_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_columns": {"lazy": false}, "order": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "A helper function encapsulating shared code for `sort_columns`\nimplementations of various Table variants. See the documentation for the\nTable type for details.\n\nIt takes a list of columns and returns the columns in the new order. It is\nthe responsibility of each implementation to reconstruct a proper table from\nthe resulting list of columns.","arguments": "- internal_columns: A list of all columns in a table.\n- order: Whether sorting should be in ascending or descending order.\n- text_ordering: The sort methodology to use."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "select_indices_reordering", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "indices": {"lazy": false}},"aliases": [],"description": "Selects element from the vector based on the given indices.\n\nThe elements are returned in the same order as their provided indices."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "select_indices_preserving_order", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "indices": {"lazy": false}},"aliases": [],"description": "Selects element from the vector based on the given indices.\n\nThe elements are returned in the same order as they appeared in the original\nvector."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "is_index_valid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "ix": {"lazy": false}},"aliases": [],"description": "Checks if the given index is in the valid range for the provided vector."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "match_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text | Regex", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "columns": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "A helper method to match columns by name"},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "prepare_order_by", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_columns": {"lazy": false}, "column_selectors": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Resolves the `Sort_Column` selectors and ensures that at least one column was\nselected."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "resolve_order_by", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_columns": {"lazy": false}, "column_selectors": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Resolves the `Sort_Column` selectors and returns a list of elements\ncontaining the original selector and the selected column."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "filter_blank_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "when": {"lazy": false}, "treat_nans_as_blank": {"lazy": false}},"aliases": [],"description": "A helper method gathering the common logic for constructing expressions that\ncan filter out blank rows."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "is_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"obj": {"lazy": false}},"aliases": [],"description": "Checks if the given object implements a Table interface.\n\nCurrently, it relies on a hack - it checks if the object has a method\n`is_table` and if it returns `True`."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "unify_result_type_for_union", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Union_Result_Type", "arguments": {"column_set": {"lazy": false, "type": "Column_Set", "checked": true}, "all_tables": {"lazy": false, "type": "Vector", "checked": true}, "problem_builder": {"lazy": false, "type": "Problem_Builder", "checked": true}},"aliases": [],"description": "A helper method that resolves what should be the result type of a particular\ncolumn set based on the union settings."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "replace_columns_with_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "old_columns": {"lazy": false}, "new_columns": {"lazy": false}},"aliases": [],"description": "Replace a set of columns in the table with a new set of columns. The old\ncolumns must all exist in the table, and the list of new columns must be the\nsame length and have the same names."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "replace_columns_with_transformed_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "selectors": {"lazy": false}, "transformer": {"lazy": false}, "error_on_missing_columns": {"lazy": false, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Replace a set of columns in the table with a new set of columns produced by\ntransforming the old columns. The old columns must all exist in the table,\nand the new columns must all have the same name."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "duplicate_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "counts": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": [],"description": "Takes a table and a list of counts and returns a new table with the rows\nduplicated according to the counts.\nThe vector should have the same number of elements as the number of rows in the table."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Ref", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "at", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selector": {"lazy": false, "default": "0"}},"aliases": [],"description": "Get a column.\nColumn must implement all the expected calculations.\nThis returns a Column, but the type is not known statically because it\nmay be an in-memory or Database column."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "evaluate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Expression", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Given an expression, create a derived column where each value is the\nresult of evaluating the expression for the row.","arguments": "- expression: The expression to evaluate.\n- on_problems: Specifies how to handle non-fatal problems, attaching a\n  warning by default."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Resolve a Column_Ref to a Column, keeping any other values as-is."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "resolve_as_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Resolve a Column_Ref to a Column, converting any other values into\na constant column."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "resolve_condition", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}},"aliases": [],"description": "Transforms a condition, changing any Column_Ref instances into Column instances resolved in this table."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "set", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "as": {"lazy": false, "type": "Text", "checked": true}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "Set_Mode.Add_Or_Update"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Set a column."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "column_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets a list of column names"},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Table_Ref", "type": "", "name": "check_is_in_values", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"operation_name": {"lazy": false}, "values": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Telemetry", "type": "", "name": "log", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {"logger_name": {"lazy": false, "type": "Text", "checked": true}, "msg": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Schedules a single telemetry message for sending.","arguments": "- logger_name: Name of the (telemetry) logger\n- msg: Message. Must be of format `<msg>: <args>`, where `<args>` has\n  `<argname>=<argvalue>` mapping separated by `,`, for example\n  \"my message: arg1=1, arg2=2\".\n  See org.enso.logging.service.logback.telemetry.LogFormatter\n- args: Arguments passed to the LoggingEvent object"},
{"module": "Standard.Table.Internal.Telemetry", "type": "", "name": "_root_logger_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Union", "type": "", "name": "make_union", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false, "type": "Vector", "checked": true}, "columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "The implementation of common logic that is used by `Table.from_union`.\nThe caller should ensure that `tables` contains only `Table` instances or `Nothing`.\nEach `Nothing` is replaced by a single all-nothing row, not introducing any new columns. \nThe `tables` vector must contain at least one non-nothing entry."},
{"module": "Standard.Table.Internal.Union", "type": "", "name": "_concat_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_set": {"lazy": false}, "tables": {"lazy": false}, "result_type": {"lazy": false}, "result_row_count": {"lazy": false}, "needs_cast": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "A helper that efficiently concatenates storages of in-memory columns."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unique_Name_Strategy", "arguments": {"deduplicator": {"lazy": false}},"aliases": [],"description": "Creates a Unique_Name_Strategy","arguments": "- deduplicator: Name deduplicator"},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"naming_properties": {"lazy": false}},"aliases": [],"description": "Creates a new Unique_Name_Strategy instance.\n\nThis is a mutable data structure, that allows for creating a collection\nof columns names and making them unique. It will track any duplicates or\ninvalid names that are passed to it.","arguments": "- max_name_length_units: The maximum length of a name in code units.\n  If this is specified, longer names will be truncated and any suffixes\n  added will also ensure to not exceed this limit (truncating the prefix\n  if necessary). The truncation is aware of grapheme clusters and will\n  not break them into parts, but remove as many whole grapheme clusters\n  as necessary to fit the limit. Defaults to `Nothing`, meaning that the\n  length is not limited.","examples": "> Example\n  Construct a set of unique names from two duplicate lists\n\n      unique_name_strategy = Unique_Name_Strategy.new\n      unique_names = [\"A\",\"B\",\"A\",\"\"] . map unique_name_strategy.make_unique\n      duplicates = unique_name_strategy.renames\n      invalid = unique_name_strategy.invalid_names"},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "combine_with_prefix", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"first": {"lazy": false}, "second": {"lazy": false}, "second_prefix": {"lazy": false}},"aliases": [],"description": "Changes names from the second list so that they do not clash with names\nfrom the first list and with each other.\n\nIt returns a new list where each new name corresponds to a name from the\nsecond list.\n\nIt assumes that names on each list are unique within that list and that\nall of the provided names are already valid. The behavior is unspecified\nif they are not.\n\nThe names are renamed using the following strategy:\n- if the name does not collide with any name from the first list, it will\n  always be kept as-is,\n- if the name collides, we first append the provided prefix, if it is now\n  unique (looking at the first list and the non-renamed elements of the\n  second one), we return that,\n- if the name with the prefix still collides, we append a numeric suffix\n  (starting with `_1`) to it, increasing the number as many times as\n  necessary to get a name that will not collide.\n\nNote that non-renamed names from the second list have precedence over\nelements being renamed, even if they show up on the list later.","examples": "> Example\n  Rename names from a second list to avoid clashing with the first one.\n\n      first = [\"A\", \"B\", \"second A\"]\n      second = [\"A\", \"B\", \"second A 1\", \"C\"]\n      unique_second = Unique_Name_Strategy.combine_with_prefix first second \"second_\"\n      unique_second == [\"second A 2\", \"second_B\", \"second A 1\", \"C\"]"},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "renames", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Vector of any duplicates renamed.\n\nNote that this vector will not contain renames where just the\nsecond_prefix was added."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "invalid_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Vector of any invalid names."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "truncated_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A mapping of original names to their truncated counterpart."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "make_valid_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"input": {"lazy": false}},"aliases": [],"description": "Takes a value and converts to a valid (but not necessarily unique) name.","arguments": "- name: The column name to make valid.","examples": "> Example\n      strategy = Unique_Name_Strategy.new\n      strategy.make_valid_name \"\" # returns \"Column\"\n      strategy.make_valid_name 1 # returns \"1\"\n      strategy.make_valid_name \"Hello\" # returns \"Hello\""},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "make_unique", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Takes a name and gets a unique version.","arguments": "- name: The column name to make unique.","examples": "> Example\n      strategy = Unique_Name_Strategy.new\n      strategy.make_unique \"A\" # returns \"A\"\n      strategy.make_unique \"A\" # returns \"A 1\""},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "is_unique", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Tells if the given name has not yet been encountered.\n\nIt does not use up the name - it needs to be marked with `mark_used` if\nneeded."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "make_all_unique", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"names": {"lazy": false}},"aliases": [],"description": "Takes a list of names and gets a list of unique versions.","arguments": "- names: The column names to make unique."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "mark_used", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"names": {"lazy": false}},"aliases": [],"description": "Takes a list of names and marks them as used, so that any further names\nclashing with those will have a prefix added."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "Addition_Kind", "name": "Numeric_Add", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Addition_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "Addition_Kind", "name": "Text_Concat", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Addition_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "Subtraction_Kind", "name": "Numeric_Subtract", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Subtraction_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "Subtraction_Kind", "name": "Date_Time_Difference", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Subtraction_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "most_specific_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}, "use_smallest": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Finds the most specific `Value_Type` that can be used to hold the given\nvalue.\n\nThis method will still prefer default types used in the in-memory backend, so\nfor integers it will return 64-bit integers even if the value could fit in a\nsmaller one; and for Text values variable-length text will be preferred over\nfixed-length."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "reconcile_types", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type", "arguments": {"current": {"lazy": false, "type": "Value_Type", "checked": true}, "new": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Finds a type that can fit both a current type and a new type."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "max_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": [],"description": "Reconciles two size parameters. If either of them is `Nothing` (meaning\nunbounded), returns `Nothing`. If both are bounded, the larger one is\nreturned."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "find_common_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type | Nothing", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Finds the most specific value type that will fit all the provided types.","arguments": "- types: a vector of types to unify.\n- strict: A flag determining how strict the unification is.\n  If `False`, if no common type can be found, `Mixed` is used as a generic fallback.\n  If `True`, `Nothing` is returned if no common type can be found and `Mixed`\n  is only returned if any of the input types was already `Mixed`."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "find_common_date_types", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type | Nothing", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "related_column_name": {"lazy": false, "type": "Text | Nothing", "checked": true}, "problem_builder": {"lazy": false, "type": "Problem_Builder", "checked": true}},"aliases": [],"description": "An extra helper function that reconciles Date_Time types with varying timezone\nsetting, as well as Date type, reporting any warnings.\nIt can be used as a fallback after `find_common_type` does not find a simple common type.\nIf non-date types are provided, it will fail by returning `Nothing`. It will not report any warnings in that case.\nIt assumes that the list of `types` is not empty."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "find_common_numeric_boolean_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type | Nothing", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}},"aliases": [],"description": "An extra helper function that reconciles numeric and boolean types.\nUnifying Boolean and numeric types is not expected by all operations, but\nsome may want to opt-in to it. This method allows to do so.\n\nIf non-numeric or non-boolean types are provided, it will fail by returning\n`Nothing`.\n\nNo warnings are reported, as coercing boolean to integer is harmless, it was\njust chosen not to be done by default."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "find_argument_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}, "infer_precise_type": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Finds the type of an argument to a column operation.\n\nIf the argument is a column, the type of that column is returned. If it\nis an Enso value, the smallest `Value_Type` that can fit that value will\nbe returned (but the Database is free to widen it to the closest type\nthat it supports without warning).\n\nSince there is no special type for `Nothing` and `Nothing` technically\ncan fit any nullable type, it usually needs to be handled specially. This\nmethod returns `Nothing` if the value is `Nothing` - so the caller can\ntry to treat this value as fitting any type, or accordingly to specific\nsemantics of each method."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "resolve_operation_kind", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any | Nothing", "arguments": {"arg1": {"lazy": false, "type": "Any", "checked": true}, "arg2": {"lazy": false, "type": "Any", "checked": true}, "operation_name": {"lazy": false, "type": "Text", "checked": true}, "find_operation_kind": {"lazy": false, "type": "Value_Type -> Any", "checked": true}},"aliases": [],"description": "Returns the operation kind based on types of the inputs, or an error if the inferred kinds are incompatible.\nIf both inputs are Null, it is impossible to tell the kind, so Nothing is returned and the caller may decide what to do."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "resolve_addition_kind", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Addition_Kind | Nothing", "arguments": {"arg1": {"lazy": false}, "arg2": {"lazy": false}},"aliases": [],"description": "A helper which resolves if numeric addition or string concatenation should be\nused when the a `+` operator is used with the two provided types.\nIt will return an error if the provided types are incompatible."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "resolve_subtraction_kind", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Subtraction_Kind | Nothing", "arguments": {"arg1": {"lazy": false}, "arg2": {"lazy": false}},"aliases": [],"description": "A helper which resolves if numeric subtraction or date-time difference should\nbe used when the a `-` operator is used with the two provided types.\nIt will return an error if the provided types are incompatible."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "check_binary_numeric_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arg1": {"lazy": false}, "arg2": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks that both provided arguments have numeric type and runs the action\nif they do."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "check_binary_boolean_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arg1": {"lazy": false}, "arg2": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks that both provided arguments have boolean type and runs the action\nif they do."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "check_multi_argument_comparable_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "arg_or_args": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks that all provided argument are comparable with the provided\ncolumn.","arguments": "- column: the column to compare the arguments to.\n- arg_or_args: a single value or column or a vector of values or columns.\n- action: the action to run if the arguments are compatible."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "raise_unexpected_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expected_type": {"lazy": false}, "argument": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "find_common_type_for_arguments", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "is_decimal_integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": [],"description": "Checks if `Value_Type.Decimal` represents integers."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "Leaf", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector_Builder", "arguments": {"vec": {"lazy": false}},"aliases": [],"description": "A leaf in the vector builder.","arguments": "- vec: The vector at the leaf."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "Append", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector_Builder", "arguments": {"left": {"lazy": false}, "right": {"lazy": false}, "len": {"lazy": false}},"aliases": [],"description": "A node that appends the two child nodes.","arguments": "- left: The left subtree.\n- right: The right subtree.\n- len: The length of the vectors across the subtrees."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates an empty vector builder."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vec": {"lazy": false}},"aliases": [],"description": "Creates a vector builder from a vector.","arguments": "- vec: The vector to create a vector builder from."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "length", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Number of elements inside of the to-be-built vector."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if this builder contains any elements."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "not_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if this builder is not empty."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "build", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Materializes the actual vector from this builder."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "++", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"description": "Concatenates another builder or vector to this.\n\n\n\nIt returns a new builder that will yield a vector that is a concatenation\nof `self` and the argument.","arguments": "- other: The other vector to concatenate with `self`."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Types_To_Include", "arguments": {"types": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any number columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "boolean", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any boolean columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any text columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "date", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any date columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any time columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "date_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any date_time columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_aggregate_column_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make an aggregate column selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_aggregate_column_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make an Aggregate_Column list editor"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_column_name_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "add_expression": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make a column name selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_column_name_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make a multiple column name selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_column_name_multi_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "add_regex": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_by_type": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Make a multiple column-name selector that allows each value to be selected at most once."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_column_ref_by_name_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "add_text": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_regex": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_number": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_boolean": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_named_pattern": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_date": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_date_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "columns_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Make a column reference by name selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_column_ref_by_name_selector_for_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "add_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "if_value_type_numeric_include_all_numeric": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Make a column reference by name selector filtered by type."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_fill_default_value_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_source": {"lazy": false, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "value_types": {"lazy": false, "default": "Value_Type.Mixed"}, "add_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "If `column_source` is Nothing, `Column_Ref` options will not be added."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_filter_condition_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "cache": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Make a filter condition selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_join_condition_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "cache": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Make a join condition selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_grouping_method_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_order_by_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "name_only": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Make a column name selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_rename_name_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "cache": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Make a column rename name selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "parse_type_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"include_auto": {"lazy": false, "default": "True"}},"aliases": [],"description": "Selector for type argument on `Column.parse`."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "write_table_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Selector for writing a table to a file."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_format_chooser_for_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": [],"description": "Make format selector based off value type"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_value_type_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Make value type selector for type filtering"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_replace_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make a replace builder."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "_get_column_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "cache": {"lazy": false}, "parameter": {"lazy": false, "type": "Text", "checked": true, "default": "\"column\""}, "default": {"lazy": false, "type": "Value_Type", "checked": true, "default": "Value_Type.Mixed"}},"aliases": []},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "_include_all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Treat Value_Type as if it could be any type (i.e. include all constants and types)."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Group_By", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "Missing_Argument.throw \"column\""}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Specifies a column to group the rows by. Deprecated but used internally.","arguments": "- column: the column (either name, expression or index) to group by.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Creates a new column with the row count of each group. If no rows,\nevaluates to 0.","arguments": "- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count_Distinct", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"columns": {"lazy": false, "type": "Text | Integer | Regex | Vector (Integer | Text | Regex | Any)", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "ignore_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the count of unique items in the selected\ncolumn(s) within each group. If no rows, evaluates to 0.","arguments": "- columns: either a single or set of columns (specified by name or\n  index) to count across. The aggregation may also be computed over\n  an expression evaluated on the Table, if provided instead of a\n  single column name. Currently expressions are not supported with\n  multiple selection.\n- as: name of new column.\n- ignore_nothing: if all values are Nothing won't be included."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count_Not_Nothing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the count of not `Nothing` (null) values of the\nspecified column within each group. If no rows, evaluates to 0.","arguments": "- column: the column (specified by name, expression or index) to count.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count_Nothing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the count of `Nothing` (null) values of the\nspecified column within each group. If no rows, evaluates to 0.","arguments": "- column: the column (specified by name, expression or index) to count.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count_Not_Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the count of not `Nothing` (null) and non-empty\n(\"\") values of the column within each group. If no rows, evaluates to 0.","arguments": "- column: the column (specified by name, expression or index) to count.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count_Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the count of `Nothing` (null) or empty (\"\")\ntext values of the column within each group. If no rows, evaluates to 0.","arguments": "- column: the column (specified by name, expression or index) to count.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Sum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the sum of values (ignoring missing values) of\nthe column within each group. If no rows, evaluates to `Nothing`.","arguments": "- column: the column (specified by name, expression or index) to total.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Average", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the mean of values (ignoring missing values) of\nthe column within each group. If no rows, evaluates to `Nothing`.","arguments": "- column: the column (specified by name, expression or index) to average.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Median", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the median of values (ignoring missing values)\nof the column within each group. If no rows, evaluates to `Nothing`.","arguments": "- column: column (specified by name, expression or index) to calculate\n  median on.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Percentile", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"percentile": {"lazy": false, "type": "Number", "checked": true, "default": "0.5"}, "column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the percentile of values (ignoring missing values)\nof the column within each group. If no rows, evaluates to `Nothing`.","arguments": "- percentile: Percentage to compute from 0-1 inclusive.\n- column: column (specified by name, expression or index) to compute\n  percentile.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Mode", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the mode of values (ignoring missing values)\nof the column within each group. If no rows, evaluates to `Nothing`.","arguments": "- column: column (specified by name, expression or index) to find the\n  most common value.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Standard_Deviation", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "population": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the standard deviation of values (ignoring\nmissing values) of the column within each group. If no rows, evaluates to\n`Nothing`.","arguments": "- column: column (specified by name, expression or index) to compute\n  standard deviation.\n- as: name of new column.\n- population: specifies if group is a sample or the population"},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Concatenate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "separator": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "suffix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "quote_char": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the values concatenated together. `Nothing`\nvalues will become an empty string. If no rows, evaluates to `Nothing`.","arguments": "- column: column (specified by name, expression or index) to concatenate.\n- as: name of new column.\n- separator: added between each value.\n- prefix: added at the start of the result.\n- suffix: added at the end of the result.\n- quote_char: character used to quote the values if the value is `Empty`\n  or contains the separator."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "First", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "ignore_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "order_by": {"lazy": false, "type": "Sort_Column | Text | Nothing | Vector (Text | Sort_Column)", "checked": true, "default": "[]"}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the first value in each group. If no rows,\nevaluates to `Nothing`.","arguments": "- column: column (specified by name, expression or index) to find first\n  group entry.\n- as: name of new column.\n- ignore_nothing: if `True`, then missing values are ignored and first\n  not missing value returned.\n- order_by: required for database tables. Specifies how to order the\n  results within the group."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Last", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "ignore_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "order_by": {"lazy": false, "type": "Sort_Column | Text | Nothing | Vector (Text | Sort_Column)", "checked": true, "default": "[]"}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the last value in each group. If no rows,\nevaluates to `Nothing`.","arguments": "- column: column (specified by name, expression or index) to find last\n  group entry.\n- as: name of new column.\n- ignore_nothing: if `True`, then missing values are ignored and last\n  not missing value returned.\n- order_by: required for database tables. Specifies how to order the\n  results within the group."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Maximum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the maximum value in each group. If no rows,\nevaluates to `Nothing`.","arguments": "- column: column (specified by name, expression or index) to find the\n  group maximum.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Minimum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the maximum value in each group. If no rows,\nevaluates to `Nothing`.","arguments": "- column: column (specified by name, expression or index) to find the\n  group minimum.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Shortest", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the shortest text in each group. If no rows,\nevaluates to `Nothing`.","arguments": "- column: column (specified by name, expression or index) to find the\n  group shortest value.\n- as: name of new column."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Longest", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the longest text in each group. If no rows,\nevaluates to `Nothing`.","arguments": "- column: column (specified by name, expression or index) to find the\n  group longest value.\n- as: name of new column."},
{"module": "Standard.Table.Blank_Selector", "type": "Blank_Selector", "name": "Any_Cell", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Blank_Selector", "arguments": {},"aliases": [],"description": "Select when any cell is blank or Nothing."},
{"module": "Standard.Table.Blank_Selector", "type": "Blank_Selector", "name": "All_Cells", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Blank_Selector", "arguments": {},"aliases": [],"description": "Select when all the cells are blank or Nothing."},
{"module": "Standard.Table.Column", "type": "Column", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"internal_java_column": {"lazy": false}},"aliases": [],"description": "Internal constructor that should not be used directly.\nPlease use `from_java_column` instead.","arguments": "- internal_java_column: The internal representation of the column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from_vector", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "items": {"lazy": false, "type": "Vector", "checked": true}, "value_type": {"lazy": false, "type": "Auto | Value_Type", "checked": true, "default": "Auto"}},"aliases": [],"icon": "convert","description": "Creates a new column given a name and a vector of elements.","arguments": "- name: The name of the column to create.\n- items: The elements to contain in the column.\n- value_type: The type of the values in the column. If `Auto`, the type\n  will be inferred from the items in the column.","examples": "> Example\n  Create a new column called \"My Column\" from a vector of numbers.\n\n      from Standard.Table import Column\n\n      example_from_vector =\n          Column.from_vector \"My Column\" [1, 2, 3, 4, 5]","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": "from_storage", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "storage": {"lazy": false}},"aliases": [],"description": "Creates a new column given a name and an internal Java storage."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from_java_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"java_column": {"lazy": false, "type": "Java_Column", "checked": true}},"aliases": [],"description": "Creates a new column given a Java Column object."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from_repeated_item", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"name": {"lazy": false}, "item": {"lazy": false}, "repeats": {"lazy": false}},"aliases": [],"description": "Creates a new column given a name and an element repeated over and over.","arguments": "- name: The name of the column to create.\n- item: The element to repeat in the column.\n- repeats: The number of times to repeat the element."},
{"module": "Standard.Table.Column", "type": "Column", "name": "can_contain_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Determines if a value type is eligable for a text data quality count"},
{"module": "Standard.Table.Column", "type": "Column", "name": "default_sample_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"description": "Default size for sampling data quality indicators."},
{"module": "Standard.Table.Column", "type": "Column", "name": "var_args_functions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Helper for the expression to tell it which functions needs a Vector."},
{"module": "Standard.Table.Column", "type": "Column", "name": "java_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A getter that is a workaround for bug https://github.com/enso-org/enso/issues/12180"},
{"module": "Standard.Table.Column", "type": "Column", "name": "display", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {"show_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "format_terminal": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Returns a text containing an ASCII-art table displaying this data.","arguments": "- show_rows: the number of initial rows that should be displayed.\n- format_terminal: whether ANSI-terminal formatting should be used","examples": "> Example\n  Convert a column to a pretty-printed text representation.\n\n      import Standard.Examples\n\n      example_display = Examples.integer_column.display"},
{"module": "Standard.Table.Column", "type": "Column", "name": "print", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Nothing", "arguments": {"show_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}},"aliases": [],"description": "Prints an ASCII-art table with this data to the standard output.","arguments": "- show_rows: the number of initial rows that should be displayed.","examples": "> Example\n  Convert a column to a pretty-printed text representation and print it\n  to the console.\n\n      import Standard.Examples\n\n      example_display = Examples.integer_column.print"},
{"module": "Standard.Table.Column", "type": "Column", "name": "==", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["equals"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise equality comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.","arguments": "- other: The value to compare `self` against. If `other` is a column, the\n  comparison is performed pairwise between corresponding elements of\n  `self` and `other`.","examples": "> Example\n  Compare two columns for pairwise equality.\n\n      import Standard.Examples\n\n      example_eq = Examples.integer_column == Examples.decimal_column\n\n\n> Example\n  Compare a column with a number.\n\n      import Standard.Examples\n\n      example_eq = Examples.integer_column == 1","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": "equals_ignore_case", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Element-wise case-insensitive text equality comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.","arguments": "- other: The value to compare `self` against. If `other` is a column, the\n  comparison is performed pairwise between corresponding elements of\n  `self` and `other`.\n- locale: The locale to use for the case-insensitive comparison."},
{"module": "Standard.Table.Column", "type": "Column", "name": "!=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["not equals"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise non-equality comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.","arguments": "- other: The value to compare `self` against. If `other` is a column, the\n  comparison is performed pairwise between corresponding elements of\n  `self` and `other`.","examples": "> Example\n  Compare two columns for pairwise inequality.\n\n      import Standard.Examples\n\n      example_neq = Examples.integer_column != Examples.decimal_column\n\n\n> Example\n  Compare a column with a number.\n\n      import Standard.Examples\n\n      example_neq = Examples.integer_column != 1","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["greater than or equal"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.","arguments": "- other: The value to compare `self` against. If `other` is a column, the\n  comparison is performed pairwise between corresponding elements of\n  `self` and `other`.","examples": "> Example\n  Compare two columns for pairwise greater-than-or-equal.\n\n      import Standard.Examples\n\n      example_geq = Examples.integer_column >= Examples.decimal_column\n\n\n> Example\n  Compare a column with a number.\n\n      import Standard.Examples\n\n      example_geq = Examples.integer_column >= 1"},
{"module": "Standard.Table.Column", "type": "Column", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["less than or equal"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.","arguments": "- other: The value to compare `self` against. If `other` is a column, the\n  comparison is performed pairwise between corresponding elements of\n  `self` and `other`.","examples": "> Example\n  Compare two columns for pairwise less-than-or-equal.\n\n      import Standard.Examples\n\n      example_leq = Examples.integer_column <= Examples.decimal_column\n\n\n> Example\n  Compare a column with a number.\n\n      import Standard.Examples\n\n      example_leq = Examples.integer_column <= 1"},
{"module": "Standard.Table.Column", "type": "Column", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["greater than"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.","arguments": "- other: The value to compare `self` against. If `other` is a column, the\n  comparison is performed pairwise between corresponding elements of\n  `self` and `other`.","examples": "> Example\n  Compare two columns for pairwise greater-than.\n\n      import Standard.Examples\n\n      example_gt = Examples.integer_column > Examples.decimal_column\n\n\n> Example\n  Compare a column with a number.\n\n      import Standard.Examples\n\n      example_gt = Examples.integer_column > 1"},
{"module": "Standard.Table.Column", "type": "Column", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["less than"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison.\n\n\n\nReturns a column with results of comparing this column's elements against\n`other`.","arguments": "- other: The value to compare `self` against. If `other` is a column, the\n  comparison is performed pairwise between corresponding elements of\n  `self` and `other`.","examples": "> Example\n  Compare two columns for pairwise less-than.\n\n      import Standard.Examples\n\n      example_lt = Examples.integer_column < Examples.decimal_column\n\n\n> Example\n  Compare a column with a number.\n\n      import Standard.Examples\n\n      example_lt = Examples.integer_column < 1"},
{"module": "Standard.Table.Column", "type": "Column", "name": "between", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"lower": {"lazy": false, "type": "Column | Any", "checked": true}, "upper": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Element-wise inclusive bounds check.\n\n\n\nReturns a column with boolean values indicating whether values of this\ncolumn fit between the lower and upper bounds (both ends inclusive).","arguments": "- lower: The lower bound to compare elements of `self` against. If\n  `lower` is a column, the comparison is performed pairwise between\n  corresponding elements of `self` and `lower`.\n- upper: The upper bound to compare elements of `self` against. If\n  `upper` is a column, the comparison is performed pairwise between\n  corresponding elements of `self` and `upper`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["add", "concatenate", "plus"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise addition. Works on numeric types or text.\n\n\n\nReturns a column with results of adding `other` from each element of\n`self`.","arguments": "- other: The value to add to `self`. If `other` is a column, the addition\n  is performed pairwise between corresponding elements of `self` and\n  `other`.","examples": "> Example\n  Add two columns to each other.\n\n      import Standard.Examples\n\n      example_plus = Examples.decimal_column + Examples.integer_column\n\n\n> Example\n  Add a single value to each item in a column.\n\n      import Standard.Examples\n\n      example_plus = Examples.integer_column + 10","remarks": "? Arithmetic Overflow\n\n  For integer columns, the operation may yield results that will not fit\n  into the range supported by the column. In such case, the in-memory\n  backend will replace such results with `Nothing` and report a\n  `Arithmetic_Overflow` warning. The behaviour in Database backends is\n  not specified and will depend on the particular database - it may\n  cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Table.Column", "type": "Column", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["minus", "subtract"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise subtraction. Allows to subtract numeric types or compute a\ndifference between two date/time values.\n\n\n\nReturns a column with results of subtracting `other` from each element of\n`self`.","arguments": "- other: The value to subtract from `self`. If `other` is a column, the\n  subtraction is performed pairwise between corresponding elements of\n  `self` and `other`.","examples": "> Example\n  Subtract one column from another.\n\n      import Standard.Examples\n\n      example_minus = Examples.decimal_column - Examples.integer_column\n\n\n> Example\n  Subtract a single value from each item in a column.\n\n      import Standard.Examples\n\n      example_minus = Examples.integer_column - 10","remarks": "? Arithmetic Overflow\n\n  For integer columns, the operation may yield results that will not fit\n  into the range supported by the column. In such case, the in-memory\n  backend will replace such results with `Nothing` and report a\n  `Arithmetic_Overflow` warning. The behaviour in Database backends is\n  not specified and will depend on the particular database - it may\n  cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Table.Column", "type": "Column", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["multiply", "product", "times"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise multiplication.\n\n\n\nReturns a column containing the result of multiplying each element of\n`self` by `other`.","arguments": "- other: The value to multiply `self` by. If `other` is a column, the\n  multiplication is performed pairwise between corresponding elements of\n  `self` and `other`.","examples": "> Example\n  Multiply the elements of two columns together.\n\n      import Standard.Examples\n\n      example_mul = Examples.decimal_column * Examples.integer_column\n\n\n> Example\n  Multiply each value in a column by a single value.\n\n      import Standard.Examples\n\n      example_mul = Examples.integer_column * 10","remarks": "? Arithmetic Overflow\n\n  For integer columns, the operation may yield results that will not fit\n  into the range supported by the column. In such case, the in-memory\n  backend will replace such results with `Nothing` and report a\n  `Arithmetic_Overflow` warning. The behaviour in Database backends is\n  not specified and will depend on the particular database - it may\n  cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Table.Column", "type": "Column", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["divide"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise division.\n\n\n\nReturns a column containing the result of dividing each element of `self`\nby `other`.","arguments": "- other: The value to divide `self` by. If `other` is a column, the\n  division is performed pairwise between corresponding elements of `self`\n  and `other`.","examples": "> Example\n  Divide the elements of one column by the elements of another.\n\n      import Standard.Examples\n\n      example_div = Examples.decimal_column / Examples.integer_column\n\n\n> Example\n  Multiply each value in a column by a single value.\n\n      import Standard.Examples\n\n      example_div = Examples.integer_column / 10","errors": "","remarks": "? Arithmetic Overflow\n\n  For integer columns, the operation may yield results that will not fit\n  into the range supported by the column. In such case, the in-memory\n  backend will replace such results with `Nothing` and report a\n  `Arithmetic_Overflow` warning. The behaviour in Database backends is\n  not specified and will depend on the particular database - it may\n  cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Table.Column", "type": "Column", "name": "%", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["modulo", "modulus"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise modulus.\n\n\n\nReturns a column with results of modulus this column's elements against\n`other`.","arguments": "- other: The value to modulo `self` against. If `other` is a column, the\n  modulus is performed pairwise between corresponding elements of `self`\n  and `other`.","examples": "> Example\n  Modulus of two columns against each other.\n\n      import Standard.Examples\n\n      example_mod = Examples.integer_column % Examples.decimal_column\n\n\n> Example\n  Modulus of a column with a number.\n\n      import Standard.Examples\n\n      example_mod = Examples.integer_column % 3","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["power"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise raising to the power.\n\n\n\nReturns a column containing the result of raising each element of `self`\nby `other`.","arguments": "- other: The exponent to raise `self` by. If `other` is a column, the\n  power operation is performed pairwise between corresponding elements\n  of `self` and `other`.","examples": "> Example\n  Squares the elements of one column.\n\n      import Standard.Examples\n\n      example_div = Examples.decimal_column ^ 2\n\n\n> Example\n  Raises each value in a column by the value in another column.\n\n      import Standard.Examples\n\n      example_div = Examples.decimal_column ^ Examples.integer_column","remarks": "? Arithmetic Overflow\n\n  For integer columns, the operation may yield results that will not fit\n  into the range supported by the column. In such case, the in-memory\n  backend will replace such results with `Nothing` and report a\n  `Arithmetic_Overflow` warning. The behaviour in Database backends is\n  not specified and will depend on the particular database - it may\n  cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Table.Column", "type": "Column", "name": "&&", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["and"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise boolean conjunction.\n\n\n\nReturns a column containing the result of performing boolean `and` on\neach element of `self` and `other`.","arguments": "- other: The value to compute the conjunction of `self` with. If `other`\n  is a column, the conjunction is performed pairwise between\n  corresponding elements of `self` and `other`.","examples": "> Example\n  Compute the pairwise logical conjunction to two columns.\n\n      import Standard.Examples\n\n      example_and = Examples.bool_column_1 && Examples.bool_column_2\n\n\n> Example\n  Compute the logical conjunction of each value in a column with a single\n  value.\n\n      import Standard.Examples\n\n      example_and = Examples.bool_column_1 && True"},
{"module": "Standard.Table.Column", "type": "Column", "name": "||", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["or"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise boolean disjunction.\n\n\n\nReturns a column containing the result of performing the boolean `or` on\neach element of `self` and `other`.","arguments": "- other: The value to compute the disjunction of `self` with. If `other`\n  is a column, the disjunction is performed pairwise between\n  corresponding elements of `self` and `other`.","examples": "> Example\n  Compute the pairwise logical disjunction to two columns.\n\n      import Standard.Examples\n\n      example_or = Examples.bool_column_1 || Examples.bool_column_2\n\n\n> Example\n  Compute the logical disjunction of each value in a column with a single\n  value.\n\n      import Standard.Examples\n\n      example_or = Examples.bool_column_1 || True"},
{"module": "Standard.Table.Column", "type": "Column", "name": "not", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": ["not"],"group": "Standard.Base.Logical","icon": "operators","description": "Boolean negation of each element in self column.","examples": "> Example\n  Negate the elements of a column.\n\n      import Standard.Examples\n\n      example_not = Examples.bool_column_1.not"},
{"module": "Standard.Table.Column", "type": "Column", "name": "iif", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"when_true": {"lazy": false, "type": "Column | Any", "checked": true}, "when_false": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["if"],"group": "Standard.Base.Logical","icon": "preparation","description": "Replaces `True` values with `when_true` and `False` with `when_false`.\nOnly meant for use with boolean columns.","arguments": "- when_true: value or column when `self` is `True`.\n- when_false: value or column when `self` is `False`.","examples": "> Example\n  If the value in a column is `True`, replace it with `1`, otherwise `0`.\n\n      import Standard.Examples\n\n      example_if = Examples.bool_column_1.iif 1 0"},
{"module": "Standard.Table.Column", "type": "Column", "name": "const", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Creates a column from a single constant value.\n\nThis method is not static; it must be called on an existing column. That\nexisting column is only used for its internal state; the contents of the\ncolumn are not used.","arguments": "- value: the constant value to use for the entire column.","examples": "> Example\n  Create a column of the value 42\n\n  column.const 42"},
{"module": "Standard.Table.Column", "type": "Column", "name": "round", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Illegal_Argument | Invalid_Value_Type", "arguments": {"decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Round the values in a numeric column to a specified number of decimal\nplaces.\n\nFor integers, rounding to 0 or more decimal places simply returns the\nargument. For negative decimal places, see below.\n\nBy default, rounding uses \"asymmetric round-half-up\", also known as\n\"round towards positive infinity.\" If use_bankers=True, then it uses\n\"round-half-even\", also known as \"banker's rounding\".\n\nIf the column is of type `Float` and `decimal_places` > 0, `round`\nreturns a column of `Float`; otherwise, it returns a column of\n`Integer`.","arguments": "- decimal_places: The number of decimal places to round to. Can be\n  negative, which results in rounding to positive integer powers of 10.\n  Must be between -15 and 15 (inclusive).\n- use_bankers: Rounds mid-point to nearest even number.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default.","examples": "> Example\n  Round a column of `Float` values`.\n\n      Column.from_vector \"foo\" [1.2, 2.3, 3.6] . round == (Column.from_vector \"foo\" [1, 2, 4])","errors": "","remarks": "! Precision\n  As floating-point numbers are inexact, rounding can have unexpected\n  results near the precision limit (about 15 decimal places), especially\n  when rounding mid-point values. For example:\n\n  Rounding 1.2222222222222235 to 15 decimal places returns:\n  - 1.222222222222224 in Postgres.\n  - 1.222222222222223 in SQLite.\n\n\n? Negative decimal place counts\n  Rounding to `n` digits can be thought of as \"rounding to the nearest\n  multiple of 10^(-n)\". For negative decimal counts, this results in\n  rounding to the nearest positive integer power of 10."},
{"module": "Standard.Table.Column", "type": "Column", "name": "truncate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": ["int"],"group": "Standard.Base.Rounding","icon": "math","description": "If the column is numeric, truncate the floating-point values to an\ninteger by dropping the fractional part. This is equivalent to\n\"round-toward-zero\". If the column is of type `Date_Time`, truncates the\nvalues to `Date`.","examples": "> Example\n  Truncate a column of `Float` values.\n\n      Column.from_vector \"foo\" [1.25, 2.33, 3.57] . truncate == (Column.from_vector \"foo\" [1, 2, 3])\n\n\n> Example\n  Truncate a column of `Date_Time` values.\n     date_times = Column.from_vector \"foo\" [Date_Time.new 2020 10 24 1 2 3, Date_Time.new 2020 10 24 1 2 3]\n     dates = Column.from_vector \"foo\" [Date.new 2020 10 24, Date.new 2020 10 24]\n     col.truncate == dates"},
{"module": "Standard.Table.Column", "type": "Column", "name": "ceil", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Rounding","icon": "math","description": "Computes the nearest integer above this number for values in a numeric\ncolumn.\n\nReturns a column of `Integer`.","examples": "> Example\n  Take the ceiling of a column of `Float` values.\n\n      Column.from_vector \"foo\" [1.25, 2.33, 3.57] . ceil == (Column.from_vector \"foo\" [2, 3, 4])"},
{"module": "Standard.Table.Column", "type": "Column", "name": "floor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Rounding","icon": "math","description": "Computes the nearest integer below this number for values in a numeric\ncolumn.\n\nReturns a column of `Integer`.","examples": "> Example\n  Take the floor of a column of `Float` values.\n\n      Column.from_vector \"foo\" [1.25, 2.33, 3.57] . floor == (Column.from_vector \"foo\" [1, 2, 3])"},
{"module": "Standard.Table.Column", "type": "Column", "name": "coalesce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Returns a column of first non-`Nothing` value on each row of `self` and\n`values` list.","arguments": "- values: list of columns or values to coalesce with `self`.","examples": "> Example\n  Get the first non-`Nothing` value in two columns.\n\n      import Standard.Examples\n\n      example_coalesce = Examples.decimal_column.coalesce Examples.integer_column"},
{"module": "Standard.Table.Column", "type": "Column", "name": "min", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Math","icon": "transform4","description": "Returns a column of minimum on each row of `self` and `values`.","arguments": "- values: list of columns or values to minimum with `self`, or a single\n  column or value.","examples": "> Example\n  Get the minimum value in two columns.\n\n      import Standard.Examples\n\n      example_min = Examples.decimal_column.min Examples.integer_column"},
{"module": "Standard.Table.Column", "type": "Column", "name": "max", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Math","icon": "transform4","description": "Returns a column of maximum on each row of `self` and `values`.","arguments": "- values: list of columns or values to maximum with `self`, or a single\n  column or value.","examples": "> Example\n  Get the maximum value in two columns.\n\n      import Standard.Examples\n\n      example_max = Examples.decimal_column.max Examples.integer_column"},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Returns a column of booleans, with `True` items at the positions where\nthis column contains a `Nothing`.","examples": "> Example\n  Check a column for missing values.\n\n      import Standard.Examples\n\n      example_is_nothing = Examples.decimal_column.is_nothing"},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_nan", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where\nthis column contains a NaN. This is only applicable to double columns."},
{"module": "Standard.Table.Column", "type": "Column", "name": "internal_is_nan", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_infinite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where\nthis column contains a +Inf/-Inf. This is only applicable to double\ncolumns."},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_finite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where\nthis column contains a non-infinite, non-NaN floating point value. This\nis only applicable to double columns."},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"description": "Returns a column of booleans, with `True` items at the positions where\nthis column contains an empty string or `Nothing`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "internal_is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_present", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Returns a column of booleans, with `True` items at the positions where\nthis column does not contain a `Nothing`.","examples": "> Example\n  Check a column for present values.\n\n      import Standard.Examples\n\n      example_is_present = Examples.decimal_column.is_present"},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_blank", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Returns a column of booleans with `True` at the positions where this\ncolumn contains a blank value.","arguments": "- treat_nans_as_blank: If `True`, then `Number.nan` is considered as\n  blank.","remarks": "? Blank values\n  Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "fill_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"default": {"lazy": false, "type": "Column | Previous_Value | Any", "checked": true}},"aliases": ["fill missing", "if_nothing"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column where missing values have been replaced with the\nprovided default.","arguments": "- default: The value to replace missing values with. If this argument\n  is a column, the value from `default` at the corresponding position\n  will be used. If this argument is `Previous_Value`, the missing values\n  will be replaced with the previous value in the column. Note that the\n  first rows may stay `Nothing` if they do not have a previous value to\n  use.","examples": "> Example\n  Fill missing values in a column with the value 20.5.\n\n      import Standard.Examples\n\n      example_fill_nothing = Examples.decimal_column.fill_nothing 20.5"},
{"module": "Standard.Table.Column", "type": "Column", "name": "fill_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"default": {"lazy": false, "type": "Column | Previous_Value | Any", "checked": true}},"aliases": ["fill empty", "if_empty"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column where empty Text values have been replaced with the\nprovided default.","arguments": "- default: The value to replace empty values with. If this argument\n  is a column, the value from `default` at the corresponding position\n  will be used. If this argument is `Previous_Value`, the empty values\n  will be replaced with the previous value in the column. Note that the\n  first rows may stay empty if they do not have a previous value to use.","examples": "> Example\n  Fill empty values in a column with the value \"hello\".\n\n      import Standard.Examples\n\n      example_fill_empty = Examples.text_column_1.fill_empty \"hello\""},
{"module": "Standard.Table.Column", "type": "Column", "name": "starts_with", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Checks for each element of the column if it starts with `other`.","arguments": "- other: The value to compare `self` with. If `other` is a column, the\n  operation is performed pairwise between corresponding elements of\n  `self` and `other`.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  Check the elements of a column for starting with the elements of\n  another column.\n\n      import Standard.Examples\n\n      example_starts_with =\n         Examples.text_column_1.starts_with Examples.text_column_2\n\n\n> Example\n  Check the elements of a column for starting with a value.\n\n      import Standard.Examples\n\n      example_starts_with = Examples.text_column_1.starts_with \"hell\"\n\n\n> Example\n  Check the elements of a column for starting with a value comparing case insensitively.\n\n      import Standard.Examples\n\n      example_starts_with = Examples.text_column_1.starts_with \"hell\" Case_Sensitivity.Insensitive"},
{"module": "Standard.Table.Column", "type": "Column", "name": "ends_with", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Checks for each element of the column if it ends with `other`.","arguments": "- other: The value to compare `self` with. If `other` is a column, the\n  operation is performed pairwise between corresponding elements of\n  `self` and `other`.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  Check the elements of a column for ending with the elements of another\n  column.\n\n      import Standard.Examples\n\n      example_ends_with =\n         Examples.text_column_1.ends_with Examples.text_column_2\n\n\n> Example\n  Check the elements of a column for ending with a value.\n\n      import Standard.Examples\n\n      example_ends_with = Examples.text_column_1.ends_with \"hell\""},
{"module": "Standard.Table.Column", "type": "Column", "name": "text_length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Calculates the text length for each element of the column.\n\nIn the Database backends, the default text length method of the\nparticular database is used.\n\nIn the in-memory backend, this will give you the grapheme length of the string.","examples": "> Example\n      import Standard.Examples\n\n      example_text_length =\n         Examples.text_column_1.text_length"},
{"module": "Standard.Table.Column", "type": "Column", "name": "text_left", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"n": {"lazy": false, "type": "Column | Integer", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Gets the left n characters for each element of the column.\n\nIn the Database backends, the default text left method of the\nparticular database is used.\n\nIn the in-memory backend, this will give you the left n graphemes of the string.","examples": "> Example\n      import Standard.Examples\n\n      example_text_length =\n         Examples.text_column_1.text_left 5"},
{"module": "Standard.Table.Column", "type": "Column", "name": "text_right", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"n": {"lazy": false, "type": "Column | Integer", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Gets the right n characters for each element of the column.\n\nIn the Database backends, the default text right method of the\nparticular database is used.\n\nIn the in-memory backend, this will give you the right n graphemes of the string.","examples": "> Example\n      import Standard.Examples\n\n      example_text_length =\n         Examples.text_column_1.text_right 5"},
{"module": "Standard.Table.Column", "type": "Column", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it contains `other`.","arguments": "- other: The value to compare `self` with. If `other` is a column, the\n  operation is performed pairwise between corresponding elements of\n  `self` and `other`.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.","examples": "> Example\n  Check the elements of a column for containing the elements of another\n  column.\n\n      import Standard.Examples\n\n      example_contains =\n          Examples.text_column_1.contains Examples.text_column_2\n\n\n> Example\n  Check the elements of a column for containing a value.\n\n      import Standard.Examples\n\n      example_contains = Examples.text_column_1.contains \"hell\""},
{"module": "Standard.Table.Column", "type": "Column", "name": "like", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"pattern": {"lazy": false, "type": "Column | Text | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it matches an SQL-like pattern.","arguments": "- pattern: The pattern to match `self` against. If it is a column, the\n  operation is performed pairwise between corresponding elements of\n  `self` and that column. The pattern is an SQL-like pattern, where\n  `%` matches any sequence of characters and `_` matches any single\n  character.","examples": "> Example\n  Check if elements of a column start with 'F' and end with a dot.\n\n      import Standard.Examples\n\n      example_contains = Examples.text_column_1.like \"F%.\""},
{"module": "Standard.Table.Column", "type": "Column", "name": "regex_match", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"pattern": {"lazy": false, "type": "Column | Text | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it matches a regular expression.","arguments": "- pattern: The pattern to match `self` against. If it is a column, the\n  operation is performed pairwise between corresponding elements of\n  `self` and that column.","examples": "> Example\n  Check if elements of a column start with 'A' and end with a 'M'.\n\n      import Standard.Examples\n\n      example_contains = Examples.text_column_1.regex_match (regex \"A.*M\")"},
{"module": "Standard.Table.Column", "type": "Column", "name": "trim", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "type": "Text | Column", "checked": true, "default": "\u0027\u0027"}},"aliases": [],"group": "Standard.Base.Text","icon": "text","description": "This function removes the specified characters, by default any\nwhitespace, from the start, the end, or both ends of the input.","arguments": "- where: The location of where to trim the input. By default, this\n  function trims both ends of the input.\n- what: A `Text` (or text `Column`) containing characters that should be\n  removed. By default, all whitespace is removed."},
{"module": "Standard.Table.Column", "type": "Column", "name": "text_replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"term": {"lazy": false, "type": "Text | Regex | Column", "checked": true, "default": "\"\""}, "new_text": {"lazy": false, "type": "Text | Column", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["regex", "substitute"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces the first, or all occurrences of `term` with `new_text` in each\nrow. If `term` is empty, the function returns the column unchanged.\n\nThis method follows the exact replacement semantics of the\n`Text.replace` method.\n\nIf regex is used the replacement string can contain references to groups\nmatched. The following syntaxes are supported:\n    $0: the entire match string\n    $&: the entire match string\n    $n: the nth group\n    $&lt;foo&gt;: Named group `foo`\n\nFor details on Enso's Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","arguments": "- term: The term to find. Can be `Text`, `Regex`, or a `Column` of\n  strings.\n- replacement: The text to replace matches with.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- only_first: If True, only replace the first match.","examples": "> Example\n  Replace dashes with underscores.\n\n      column.text_replace \"-\" \"_\"\n\n\n> Example\n  Remove leading and trailing spaces from cells.\n\n      column.text_replace \"^\\s*(.*?)\\s*$\".to_regex \"$1\"\n\n\n> Example\n  Replace texts in quotes with parentheses.\n\n      column.text_replace '\"(.*?)\"'.to_regex '($1)'"},
{"module": "Standard.Table.Column", "type": "Column", "name": "text_cleanse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"remove": {"lazy": false, "type": "Vector Named_Pattern", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "column_add","description": "Applies the specified cleansings to the text in each row.","arguments": "- remove: A vector of the text cleanings to remove from the text. The text cleansings are\n   applied in the order they are provided. The same text cleansing can be used multiple\n   times. The text cleansings are:\n     - ..Leading_Whitespace: Removes all whitespace from the start of the string.\n     - ..Trailing_Whitespace: Removes all whitespace from the end of the string.\n     - ..Duplicate_Whitespace: Removes all duplicate whitespace from the string replacing it with the first whitespace character of the duplicated block.\n     - ..All_Whitespace: Removes all whitespace from the string.\n     - ..Newlines: Removes all newline characters from the string. Line Feed and Carriage Return characters are considered newlines.\n     - ..Leading_Numbers: Removes all numbers from the start of the string.\n     - ..Trailing_Numbers: Removes all numbers from the end of the string.\n     - ..Non_ASCII: Removes all non-ascii characters from the string.\n     - ..Tabs: Removes all tab characters from the string.\n     - ..Letters: Removes all letters from the string.\n     - ..Numbers: Removes all numbers characters from the string.\n     - ..Punctuation: Removes all characters in the set ,.!?():;'\" from the string.\n     - ..Symbols: Removes anything that isn't letters, numbers or whitespace from the string.","examples": "> Example\n  Remove leading and trailing spaces from cells.\n\n      column.text_cleanse [..Leading_Whitespace, ..Trailing_Whitespace]"},
{"module": "Standard.Table.Column", "type": "Column", "name": "year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the year as a number from the date stored in the column.\n\nApplies only to columns that hold the `Date` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the month as a number (1-12) from the date stored in the column.\n\nApplies only to columns that hold the `Date` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "day", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the day of the month as a number (1-31) from the date stored in the\ncolumn.\n\nApplies only to columns that hold the `Date` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "day_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "date_and_time","description": "Gets the day of the year as a number (1 - 366) from the date stored in\nthe column.\n\nApplies only to columns that hold the `Date` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "day_of_week", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": ["weekday"],"group": "Standard.Base.DateTime","icon": "date_and_time","description": "Gets the weekday as a number (1 - 7) from the date stored in the column.\nMonday is 1, Tuesday is 2, ..., Sunday is 7.\n\nApplies only to columns that hold the `Date` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "hour", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the hour as a number (0-23) from the time stored in the column.\n\nApplies only to columns that hold the `Time_Of_Day` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "minute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the minute as a number (0-59) from the time stored in the column.\n\nApplies only to columns that hold the `Time_Of_Day` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the second as an integer (0-60) from the time stored in the column.\n\nApplies only to columns that hold the `Time_Of_Day` or `Date_Time` types.\nReturns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "date_part", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true, "default": "..Day"}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the date part of the date/time value.\n\nReturns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "date_diff", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"end": {"lazy": false, "type": "Column | Date | Date_Time | Time_Of_Day", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true, "default": "..Day"}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Computes a time difference between the two dates.\n\nIt returns a column of integers expressing how many periods fit between\nthe two dates/times.\n\nThe difference will be positive if `end` is greater than `self`.","arguments": "- end: A date/time column or a date/time value to compute the difference\n  from. It should have the same type as the current column, i.e. a\n  `Date_Time` column cannot be compared to a `Date` - to do so you first\n  need to `cast`.\n- period: The period to compute the difference in. For `Date` columns it\n  should be a `Date_Period` and for `Time` columns it should be a\n  `Time_Period`. For `Date_Time` columns it can be either.","remarks": "? Time Zone handling\n\n  Some backends may not preserve the timezone data in a `Date_Time`\n  (preserving the represented time instant). This may lead to slight\n  differences in time calculations between backends, especially around\n  unusual events like DST."},
{"module": "Standard.Table.Column", "type": "Column", "name": "date_add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"amount": {"lazy": false, "type": "Column | Integer", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true, "default": "default_date_period self"}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Shifts the date/time by a specified period, returning a new date/time\ncolumn of the same type.","arguments": "- amount: An integer or integer column specifying by how many periods to\n  shift each date.\n- period: The period by which to shift. For `Date` columns it should be a\n  `Date_Period` and for `Time` columns it should be a `Time_Period`. For\n  `Date_Time` columns it can be either. It defaults to `Day` where\n  possible and `Hour` for `Time` columns.","remarks": "? Time Zone handling\n\n  Some backends may not preserve the timezone data in a `Date_Time`\n  (preserving the represented time instant). This may lead to slight\n  differences in time calculations between backends, especially around\n  unusual events like DST."},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_in", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"vector": {"lazy": false, "type": "Vector | Column | Array", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it is contained within the\nprovided vector or column.","arguments": "- vector: A vector of elements or another column. The resulting column\n  will contain true at the positions where the corresponding element of\n  `self` is contained in `vector`.","examples": "> Example\n  Check if elements of a column are contained in a provided vector.\n\n      import Standard.Examples\n\n      example_contains = Examples.text_column_1.is_in [1, 2, 5]"},
{"module": "Standard.Table.Column", "type": "Column", "name": "parse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}, "format": {"lazy": false, "type": "Text | Data_Formatter", "checked": true, "default": "\"\""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Parses a text column into values.\n\nIn the Database backends, the default formatting settings of the\nparticular database are used.\n\nIn the in-memory backend, the default parser options only parse values\nwhere the process is reversible (e.g., 0123 would not be converted to an\ninteger as there is a leading 0). However, settings in the\n`Data_Formatter` can control this.","arguments": "- type: The type to parse the column to. Defaults to `Auto` meaning that\n  the type will be inferred from the data. In the Database backends,\n  `Auto` is not supported, so a specific type must be selected.\n- format: The formatting settings to use when parsing the column.\n  For `Date`, `Time_Of_Day` and `Date_Time`, a Java date time style\n  can be used. For `Boolean`, it should be two values that represent true\n  and false, separated by a `|`. Alternatively, a `Data_Formatter` can be\n  passed to provide complete customisation of the formatting. If\n  `\"\"` is provided, the default formatting settings of the backend\n  will be used. `\"\"` is currently the only setting accepted by the\n  Database backends.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default.","examples": "> Example\n  Parse dates in a column in the format `yyyy-MM-dd` (the default format).\n\n      import Standard.Examples\n\n      example_contains = Examples.text_column_1.parse Date\n\n\n> Example\n  Parse dates in a column in the format `dd/MM/yyyy`\n\n      import Standard.Examples\n\n      example_contains = Examples.text_column_1.parse Date 'dd/MM/yyyy'\n\n\n> Example\n  Parse a Yes/No column into a boolean column.\n\n      import Standard.Examples\n\n      example_contains = Examples.text_column_1.parse Boolean 'Yes|No'","errors": "","remarks": "? Number Formats\n\n  If parsing a column to a number, by default, the parser will attempt\n  to find the most appropriate format for the column. This is done by\n  finding the format that parses the longest set without an issue from\n  the first record.\n\n  It will try the following separators in British, German, French and\n  Swiss order.\n\n  - Thousand separators must be followed by groups of 3 numbers.\n  - Scientific notation is only allowed on decimals and must be on a\n    value between -10 and 10. The notation is an `E` followed by an\n    integer and must be enabled on the `Data_Formatter`,\n\n  The following formats are supported:\n  - Sign (+/-) followed by Number (e.g. +1,234.56)\n  - Using brackets to indicate a negative number (e.g. (1,234.56))\n  - Currency symbols (if not in Auto mode) can be placed before or after\n    the sign and number.\n  - If using brackets, the currency symbol must be placed after the\n    opening bracket."},
{"module": "Standard.Table.Column", "type": "Column", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Illegal_Argument", "arguments": {"format": {"lazy": false, "type": "Text | Date_Time_Formatter | Column", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Format a `Column` using a format string (or `Column` of format strings).","arguments": "- format: The type-dependent format string to use to format the values.\n  If `format` is `\"\"`, .to_text is used to format the value.\n  In case of date/time columns, a `Date_Time_Formatter` can be used.\n- locale: The locale in which the format should be interpreted.\n  If a `Date_Time_Formatter` is provided for `format` and the `locale` is\n  set to anything else than `Locale.default`, then that locale will\n  override the formatters locale.","examples": "> Example\n  Format a `Column` of `Dates` in the format `\"yyyyMMdd\"`.\n\n      input = Column.from_vector \"values\" [Date.new 2020 12 21, Date.new 2023 4 25]\n      input.format \"yyyyMMdd\"\n      # ==> [\"20201221\", \"20230425\"]\n\n\n> Example\n  Format `Column` of `Dates`, using format strings in a second column.\n\n      input = Column.from_vector \"values\" [Date.new 2020 12 21, Date.new 2023 4 25]\n      formats = Column.from_vector \"formats\" [\"yyyyMMdd\", \"dd-MM-yyyy\"]\n      input.format formats\n      # ==> [\"20201221\", \"25-04-2023\"]\n\n\n> Example\n  Format a `Column` of `Integers` in the format `\"#,##0.00\"`.\n\n      input = Column.from_vector \"values\" [100000000, 2222, 3]\n      input.format \"#,##0.00\"\n      # ==> [\"100,000,000.00\", \"2,222.00\", \"3.00\"]\n\n\n> Example\n  Format a `Column` of `Booleans` in the format `\"t|f\"`.\n\n      input = Column.from_vector \"values\" [True, False]\n      input.format \"t|f\"\n      # ==> [\"t\", \"f\"]\n\n\n> Example\n  Format a `Column` of numbers, using both decimal point / digit\n  separators and a Locale.\n\n      input = Column.from_vector \"values\" [\"100000000\", \"2222\", \"3\"] . parse numeric_type\n      input.format \"#,##0.00\" locale=(Locale.new \"fr\")\n      # ==> [\"100 000 000,00\", \"2 222,00\", \"3,00\"]","errors": "","remarks": "? Supported Types\n  - `Value_Type.Date`\n  - `Value_Type.Date_Time`\n  - `Value_Type.Time`\n  - `Value_Type.Integer`\n  - `Value_Type.Float`\n  - `Value_Type.Boolean`\n\n\n? `Value_Type.Date`, `Value_Type.Date_Time`, `Value_Type.Time` format strings\n\n   See `Date_Time_Formatter` for more details.\n\n\n? `Value_Type.Integer`, `Value_Type.Float` format strings\n\n  Numeric format strings are specified by the Java DecimalFormat class.\n  See https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html\n  for a complete format specification.\n\n\n? `Value_Type.Boolean` format strings\n\n  Format strings for `Boolean` consist of two values that represent true\n  and false, separated by a `|`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Illegal_Argument | Inexact_Type_Coercion | Conversion_Failure", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Cast the column to a specific type.\n\n\n\nIn the Database backend, this will boil down to a CAST operation.\nIn the in-memory backend, a conversion will be performed according to\nthe following rules:\n- Anything can be cast into the `Mixed` type.\n- Converting to a `Char` type, the elements of the column will be\n  converted to text. If it is fixed length, the texts will be trimmed or\n  padded on the right with the space character to match the desired\n  length.\n- Conversion between numeric types will replace values exceeding the\n  range of the target type with `Nothing`.\n- Converting decimal numbers into integers will truncate or round them,\n  depending on the backend. If more control is needed, use the various\n  rounding functions (such as `round` or `floor`).\n- Booleans may also be converted to numbers, with `True` being converted\n  to `1` and `False` to `0`. The reverse is not supported - use `iif`\n  instead.\n- A `Date_Time` may be converted into a `Date` or `Time` type - the\n  resulting value will be truncated to the desired type.\n- If a `Date` is to be converted to `Date_Time`, it will be set at\n  midnight of the default system timezone.\n- For a `Mixed` column being converted into a specific type, each row is\n  converted individually.\n\n If the target type cannot fit some of the values (for example due to too\n small range), a `Conversion_Failure` may be reported according to the\n `on_problems` rules. The Database backends may fail with `SQL_Error`\n instead.","arguments": "- value_type: The `Value_Type` to cast the column to.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","remarks": "? Inexact Target Type\n\n  If the backend does not support the requested target type, the closest\n  supported type is chosen and a `Inexact_Type_Coercion` problem is\n  reported.\n\n\n! Casting Text values\n\n  The `parse` method should be used to convert text values into other\n  types. Due to this, a Mixed column containing values `[2, \"3\"]` will\n  actually be converted into `[2, Nothing]` when casting to Integer type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "auto_cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"shrink_types": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["auto_value_type"],"group": "Standard.Base.Conversions","icon": "convert","description": "Change the value type of the column to a more specific one, based on its\ncontents.","arguments": "- shrink_types: If set `True`, smaller types will be chosen if possible,\n  according to the rules below. Defaults to `False`.","remarks": "? Auto Type Selection Rules\n\n  - If a `Mixed` column can be assigned a single type, like `Char` or\n    `Integer`, that will be used.\n  - Text columns are not parsed. To do that, use the `parse` method.\n  - If a `Float` column contains only integers, it will be converted to\n    an Integer column.\n  - If a `Decimal` column contains only integers that could fit in a\n    64-bit integer storage, it will be converted to an Integer column.\n  - If `shrink_types` is `False` (default), no other transformations are\n    applied.\n  - However, if `shrink_types` is set to `True`, then:\n    - Integer columns will be assigned the smallest size that can fit all\n      values (down to 16-bit integers; converting to the `Byte` type has\n      to be done manually through `cast`).\n    - If all elements in a text column have the same length, the type\n      will become fixed length.\n    - Otherwise, if a text column is variable length, but all text\n      elements are no longer than 255 characters, the column will get a\n      max length of 255. Otherwise, the column size limit will stay\n      unchanged."},
{"module": "Standard.Table.Column", "type": "Column", "name": "auto_value_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"shrink_types": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Deprecated: Use `auto_cast` instead.\n\nChange the value type of the column to a more specific one, based on its\ncontents.","arguments": "- shrink_types: If set `True`, smaller types will be chosen if possible,\n  according to the rules below. Defaults to `False`.","remarks": "? Auto Type Selection Rules\n\n  - If a `Mixed` column can be assigned a single type, like `Char` or\n    `Integer`, that will be used.\n  - Text columns are not parsed. To do that, use the `parse` method.\n  - If a `Float` column contains only integers, it will be converted to\n    an Integer column.\n  - If a `Decimal` column contains only integers that could fit in a\n    64-bit integer storage, it will be converted to an Integer column.\n  - If `shrink_types` is `False` (default), no other transformations are\n    applied.\n  - However, if `shrink_types` is set to `True`, then:\n    - Integer columns will be assigned the smallest size that can fit all\n      values (down to 16-bit integers; converting to the `Byte` type has\n      to be done manually through `cast`).\n    - If all elements in a text column have the same length, the type\n      will become fixed length.\n    - Otherwise, if a text column is variable length, but all text\n      elements are no longer than 255 characters, the column will get a\n      max length of 255. Otherwise, the column size limit will stay\n      unchanged."},
{"module": "Standard.Table.Column", "type": "Column", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {"function": {"lazy": false, "type": "Any -> Any", "checked": true}, "skip_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_value_type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}},"aliases": ["transform column"],"icon": "column_add","description": "Applies `function` to each item in this column and returns the column\nof results.","arguments": "- function: The function to apply to each element of `self` column.\n- skip_nothing: If `True`, `Nothing` values will be skipped. Otherwise,\n  `Nothing` values will be passed to the `function`.\n- expected_value_type: The expected value type of the resulting column.\n  If `Auto`, the value type will be inferred from the values returned by\n  `function`.","examples": "> Example\n  Multiply each element of the column by itself.\n\n      import Standard.Examples\n\n      example_map = Examples.integer_column.map (x -> x * x)","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}, "function": {"lazy": false, "type": "Any -> Any -> Any", "checked": true}, "skip_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_value_type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}},"aliases": ["combine", "join by row position", "merge"],"icon": "join2-1","description": "Applies `function` to consecutive pairs of elements of `self` and `that`\nand returns a column of results.","arguments": "- that: The column to zip with `self`.\n- function: A binary function that is applied to corresponding pairs of\n  elements of `self` and `that` to produce a value.\n- skip_nothing: controls whether missing values should be passed to the\n  `function`. The default value of `True` will skip the rows for which\n  the value in either column is missing and automatically append\n  `Nothing` to the result table. If set to `False`, every pair of values\n  is passed to `function`.\n- expected_value_type: The expected value type of the resulting column.\n  If `Auto`, the value type will be inferred from the values returned by\n  `function`.","examples": "> Example\n  Zip two columns together as pairs.\n\n      import Standard.Examples\n\n      example_zip =\n         Examples.integer_column.zip Examples.text_column_1 [_, _]","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": "rename", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Illegal_Argument", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Standard.Base.Metadata","icon": "text_input","description": "Returns a new column, containing the same elements as `self`, but with\nthe given name.","arguments": "- name: The new name for the column.","examples": "> Example\n  Rename a column.\n\n      import Standard.Examples\n\n      example_rename = Examples.integer_column.rename \"My Numbers\""},
{"module": "Standard.Table.Column", "type": "Column", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the name of this column.","examples": "> Example\n  Get the name of a column.\n\n      import Standard.Examples\n\n      example_name = Examples.text_column_2.name"},
{"module": "Standard.Table.Column", "type": "Column", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the length of this column.","examples": "> Example\n  Get the length of a column.\n\n      import Standard.Examples\n\n      example_length = Examples.text_column_2.length"},
{"module": "Standard.Table.Column", "type": "Column", "name": "count_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the number of missing items in this column.","examples": "> Example\n  Count the number of missing values in a column.\n\n      import Standard.Examples\n\n      example_count_nothing = Examples.text_column_2.count_nothing"},
{"module": "Standard.Table.Column", "type": "Column", "name": "count_untrimmed", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sample_size": {"lazy": false, "type": "Integer", "checked": true, "default": "Column.default_sample_size"}},"aliases": [],"description": "Counts the number of text values with leading or trailing whitespace.\nUsed for data quality indicator in Table Viz."},
{"module": "Standard.Table.Column", "type": "Column", "name": "requires_numeric_formatter_check", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Indicates if a numeric column requires formatting in table viz"},
{"module": "Standard.Table.Column", "type": "Column", "name": "count_non_trivial_whitespace", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sample_size": {"lazy": false, "type": "Integer", "checked": true, "default": "Column.default_sample_size"}},"aliases": [],"description": "Counts the number of text values with non trivial whitespace.\nUsed for data quality indicator in Table Viz."},
{"module": "Standard.Table.Column", "type": "Column", "name": "count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the number of non-null items in this column.","examples": "> Example\n  Count the number of not missing values in a column.\n\n      import Standard.Examples\n\n      example_count = Examples.text_column_2.count"},
{"module": "Standard.Table.Column", "type": "Column", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any | Nothing ! Index_Out_Of_Bounds", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the value contained in this column at the given index.\n\n\n\nIf the value is an NA then this method returns nothing. If the index is\nnot an index in the column it returns an `Index_Out_Of_Bounds`.","arguments": "- index: The index in the column from which to get the value.","examples": "> Example\n  Get the first element from a column.\n\n      import Standard.Examples\n\n      example_at = Examples.integer_column.at 0"},
{"module": "Standard.Table.Column", "type": "Column", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any | Nothing", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "default": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the value contained in this column at the given index.","arguments": "- index: The index in the column from which to get the value.\n- default: The value if the index is out of range.","examples": "> Example\n  Get the first element from a column.\n\n      import Standard.Examples\n\n      example_at = Examples.integer_column.get 0 -1"},
{"module": "Standard.Table.Column", "type": "Column", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": [],"icon": "data_input","description": "Returns a column containing rows of this column.","arguments": "- max_rows: specifies the maximum number of rows to read."},
{"module": "Standard.Table.Column", "type": "Column", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Returns a vector containing all the elements in this column.","examples": "> Example\n  Get the elements of a column as a vector.\n\n      import Standard.Examples\n\n      example_to_vector = Examples.integer_column.to_vector"},
{"module": "Standard.Table.Column", "type": "Column", "name": "value_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the `Value_Type` associated with that column.\n\nThe value type determines what type of values the column is storing and\nwhat operations are permitted."},
{"module": "Standard.Table.Column", "type": "Column", "name": "inferred_precise_value_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a possibly more precise `Value_Type` based on the data in the\ncolumn.\n\nMost columns will return their type without changes. A mixed column may\nreturn a more precise type if a common type can be found for all of its\nvalues."},
{"module": "Standard.Table.Column", "type": "Column", "name": "should_be_selected_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Internal hook that says if a given column should be selected by a\nspecific type in a `By_Type` selection."},
{"module": "Standard.Table.Column", "type": "Column", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this column to JS_Object representation.","examples": "> Example\n  Get a JavaScript representation of the column.\n\n      import Standard.Examples\n\n      example_to_json = Examples.integer_column.to_js_object"},
{"module": "Standard.Table.Column", "type": "Column", "name": "to_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": [],"icon": "data_input","description": "Converts this column into a single-column table.","examples": "> Example\n  Convert a column to a table.\n\n      import Standard.Examples\n\n      example_to_table = Examples.integer_column.to_table"},
{"module": "Standard.Table.Column", "type": "Column", "name": "info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": ["column type", "field info", "metadata"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a Table describing this column's contents and type.\n\nThe table behaves like `Table.column_info."},
{"module": "Standard.Table.Column", "type": "Column", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"order": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}, "missing_last": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "by": {"lazy": false, "type": "(Any -> Any -> Ordering) | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["order_by"],"group": "Standard.Base.Selections","icon": "order","description": "Sorts the column according to the specified rules.","arguments": "- order: specifies the default sort order for this operation.\n- missing_last: specifies the default placement of missing values when\n  compared to non-missing ones. Note that this argument is independent\n  from `order`, i.e. missing values will always be sorted according to\n  this rule, ignoring the ascending / descending setting.\n- by: function taking two items in this column and returning an\n  ordering. If specified, it is used instead of the natural\n  ordering of the values.","examples": "> Example\n  Sorting a column in ascending order.\n\n      import Standard.Examples\n\n      example_sort = Examples.integer_column.sort\n\n\n> Example\n  Sorting a column in descending order, placing missing values at the\n  top of the resulting column.\n\n      import Standard.Examples\n\n      example_sort =\n          Examples.integer_column.sort Sort_Direction.Descending missing_last=False\n\n\n> Example\n  Sorting `column` in ascending order, using a custom comparison\n  function.\n\n      import Standard.Examples\n\n      example_sort =\n          my_compare a b = Ordering.compare a.abs b.abs\n          Examples.decimal_column.sort by=my_compare"},
{"module": "Standard.Table.Column", "type": "Column", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Standard.Base.Selections","icon": "parse3","description": "Creates a new Column with the specified range of rows from the input\nColumn.","arguments": "- range: The selection of rows from the table to return.","returns": "A new Column containing the selected rows.","examples": "> Example\n  Select the first row from the \"Name\" Column.\n\n      table = Table.new [[\"Name\", [\"Alice\", \"Bob\", \"Charlie\"]]]\n      column = table.get \"Name\"\n      ## The take returns \"Alice\"\n      first_row = column.take (..First 1)\n\n\n> Example\n  Select the last row from the \"Name\" Column.\n\n      table = Table.new [[\"Name\", [\"Alice\", \"Bob\", \"Charlie\"]]]\n      column = table.get \"Name\"\n      ## The take returns \"Charlie\"\n      last_row = column.take (..Last 1)","errors": "A new Column containing the selected rows."},
{"module": "Standard.Table.Column", "type": "Column", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Standard.Base.Selections","icon": "parse3","description": "Creates a new Column from the input with the specified range of rows\nremoved.","arguments": "- range: The selection of rows from the table to remove."},
{"module": "Standard.Table.Column", "type": "Column", "name": "slice", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": [],"description": "Returns a column with a continuous sub-range of rows taken."},
{"module": "Standard.Table.Column", "type": "Column", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the first element in the column, if it exists.\n\nIf the column is empty, this method will return a dataflow error\ncontaining an `Index_Out_Of_Bounds`.","examples": "> Example\n  Get the first element of a column.\n\n      import Standard.Examples\n\n      example_first = Examples.integer_column.first"},
{"module": "Standard.Table.Column", "type": "Column", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns the last element in the column, if it exists.\n\nIf the column is empty, this method will return a dataflow error\ncontaining an `Index_Out_Of_Bounds`.","examples": "> Example\n  Get the last element of a column.\n\n      import Standard.Examples\n\n      example_last = Examples.integer_column.last"},
{"module": "Standard.Table.Column", "type": "Column", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "order","description": "Returns a column containing the values of `self` column with their order\nreversed.","examples": "> Example\n  Reverse the values of a column to produce a new column.\n\n      import Standard.Examples\n\n      example_reverse = Examples.integer_column.reverse"},
{"module": "Standard.Table.Column", "type": "Column", "name": "duplicate_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a column of numbers, in which every entry denotes how many times\nthe value at the given position occured before.","examples": "> Example\n  Count duplicate occurences of values in a column.\n\n      import Standard.Examples\n\n      example_duplicate_count = Examples.integer_column.duplicate_count"},
{"module": "Standard.Table.Column", "type": "Column", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Provides a simplified text representation for display in the REPL and errors."},
{"module": "Standard.Table.Column", "type": "Column", "name": "naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This is a shortcut for API compatibility."},
{"module": "Standard.Table.Column", "type": "Column", "name": "compute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}},"aliases": ["count", "kurtosis", "maximum", "mean", "median", "minimum", "mode", "skew", "standard_deviation", "statistic", "sum", "variance"],"group": "Standard.Base.Statistics","icon": "transform4","description": "Compute a single statistic on the column.","arguments": "- statistic: Statistic to calculate."},
{"module": "Standard.Table.Column", "type": "Column", "name": "compute_bulk", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"statistics": {"lazy": false, "type": "Vector Statistic", "checked": true, "default": "[Statistic.Count, Statistic.Sum]"}},"aliases": ["count", "kurtosis", "maximum", "mean", "median", "minimum", "mode", "skew", "standard_deviation", "statistic", "sum", "variance"],"icon": "transform4","description": "Compute statistics on the column.","arguments": "- statistics: Set of statistics to calculate."},
{"module": "Standard.Table.Column", "type": "Column", "name": "running", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "statistic.to_text+\" \"+self.name"}},"aliases": ["count", "cumulative", "maximum", "mean", "minimum", "product", "standard deviation", "sum", "sum", "total", "variance"],"group": "Standard.Base.Statistics","icon": "transform4","description": "Compute a single running statistic on the column.","arguments": "- statistic: Statistic to calculate.\n- name: Name of the new column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "offset", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"n": {"lazy": false, "default": "-1:Integer"}, "fill_with": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}},"aliases": ["displace", "lag", "lead", "shift", "slide"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column offset by n rows, where missing values have been replaced with the provided fill_with strategy.","arguments": "- n: The number of rows to offset the new column by. Negative n slides the values down in the column, adding records at the start. \n     Positive n slides the values up in the column, adding records at the end. Defaults to -1.\n- fill_with: The value to replace missing values with. Defaults to adding Nothing Values.\n- - ..Nothing - Add Nothing values in the spaces created by sliding the existing values.\n- - ..Closest_Value - If n is negative the first value gets used, if n is negative the last value gets used.\n- - ..Wrap_Around - In this mode values that slide off the top or bottom reappear at the other end. So no values get lost they are just rotated."},
{"module": "Standard.Table.Column", "type": "Column", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "_run_vectorized_many_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}, "fallback_fn": {"lazy": false, "type": "Any -> Any -> Any", "checked": true}, "operands": {"lazy": false}, "new_name": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Folds the vectorized operation over the provided column and values. When more\nthan one value to is provided, the result is folded with subsequent values.","arguments": "- column: The column to execute the operation over.\n- name: The name of the vectorized operation.\n- fallback_fn: A function used if the vectorized operation isn't available.\n  It should never raise dataflow errors.\n- operands: The vector of operands to apply to the function after `column`.\n- new_name: The name of the column created as the result of this operation."},
{"module": "Standard.Table.Column", "type": "", "name": "run_vectorized_binary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "name": {"lazy": false}, "operand": {"lazy": false}, "new_name": {"lazy": false, "default": "Nothing"}, "fallback_fn": {"lazy": false, "default": "Nothing"}, "expected_result_type": {"lazy": false, "default": "Nothing"}, "skip_nulls": {"lazy": false, "default": "True"}},"aliases": [],"description": "Executes a vectorized binary operation over the provided column.","arguments": "- column: The column to execute the operation over.\n- name: The name of the vectorized operation.\n- operand: The operand to apply to the function after `column`.\n- new_name: The name of the column created as the result of this operation.\n- fallback_fn: A function used if the vectorized operation isn't available.\n  It should never raise dataflow errors.\n- expected_result_type: The expected result type of the operation.\n- skip_nulls: Specifies if nulls should be skipped. If set to `True`, a null\n  value results in null without passing it to the function. If set to\n  `False`, the null values are passed as any other value and can have custom\n  handling logic."},
{"module": "Standard.Table.Column", "type": "", "name": "run_vectorized_ternary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "name": {"lazy": false}, "operand0": {"lazy": false}, "operand1": {"lazy": false}, "new_name": {"lazy": false, "default": "Nothing"}, "expected_result_type": {"lazy": false, "default": "Nothing"}, "skip_nulls": {"lazy": false, "default": "True"}},"aliases": [],"description": "Executes a vectorized ternary operation over the provided column.","arguments": "- column: The column to execute the operation over.\n- name: The name of the vectorized operation.\n- operand0: The first operand to apply to the function after `column`.\n- operand1: The second operand to apply to the function after `column`.\n- new_name: The name of the column created as the result of this operation.\n- expected_result_type: The expected result type of the operation.\n- skip_nulls: Specifies if nulls should be skipped. If set to `True`, a null\n  value results in null without passing it to the function. If set to\n  `False`, the null values are passed as any other value and can have custom\n  handling logic."},
{"module": "Standard.Table.Column", "type": "", "name": "run_binary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "function": {"lazy": false}, "operand": {"lazy": false}, "new_name": {"lazy": false}, "skip_nulls": {"lazy": false, "default": "True"}, "expected_result_type": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Runs a binary operation over the provided column and operand which may be\nanother column or a scalar value.","arguments": "- column: The column to execute the operation over.\n- function: The function to apply to each element of `column`.\n- operand: The operand to apply to the function after `column`.\n- new_name: The name of the column created as the result of this operation.\n- skip_nulls: Specifies if nulls should be skipped. If set to `True`, a null\n  value results in null without passing it to the function. If set to\n  `False`, the null values are passed as any other value and can have custom\n  handling logic.\n- expected_result_type: The expected result type of the operation. If set to\n  `Nothing`, the result type is inferred from the values."},
{"module": "Standard.Table.Column", "type": "", "name": "run_vectorized_binary_op_with_fallback_problem_handling", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "name": {"lazy": false}, "operand": {"lazy": false}, "fallback_fn": {"lazy": false}, "new_name": {"lazy": false}, "expected_result_type": {"lazy": false, "default": "Nothing"}, "skip_nulls": {"lazy": false, "default": "True"}},"aliases": [],"description": "Executes a vectorized binary operation over the provided column.","arguments": "- column: The column to execute the operation over.\n- name: The name of the vectorized operation.\n- operand: The operand to apply to the function after `column`.\n- fallback_fn: A function used if the vectorized operation isn't available.\n  It takes a `MapOperationProblemAggregator` as its first argument.\n  It should never raise dataflow errors and use the aggregator builder to\n  report problems. If fatal problems are expected, the fallback should be\n  raising a panic and the user-facing code should ensure such panic is caught\n  and converted to a dataflow error.\n- expected_result_type: The expected result type of the operation.\n- new_name: The name of the column created as the result of this operation.\n- skip_nulls: Specifies if nulls should be skipped. If set to `True`, a null\n  value results in null without passing it to the function. If set to\n  `False`, the null values are passed as any other value and can have custom\n  handling logic."},
{"module": "Standard.Table.Column", "type": "", "name": "slice_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "ranges": {"lazy": false}},"aliases": [],"description": "A helper to create a new table consisting of slices of the original table."},
{"module": "Standard.Table.Column", "type": "", "name": "make_storage_builder_for_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false}, "initial_size": {"lazy": false}, "java_problem_aggregator": {"lazy": false}},"aliases": [],"description": "Creates a storage builder suitable for building a column for the provided\ncolumn type.\n\nIf a value type is not supported, its closest match is selected and\nan `Inexact_Type_Coercion` problem is reported."},
{"module": "Standard.Table.Column", "type": "", "name": "run_vectorized_binary_case_text_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left": {"lazy": false}, "op": {"lazy": false}, "other": {"lazy": false}, "case_sensitivity": {"lazy": false}, "fallback": {"lazy": false}, "new_name": {"lazy": false}},"aliases": [],"description": "Helper for case case_sensitivity based text operations.\nThe fallback is needed to handle custom case sensitivity options,\nuntil the vectorized operation can take that parameter."},
{"module": "Standard.Table.Column", "type": "", "name": "resolve_storage_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": [],"description": "Converts the value type to a storage type, passing `Nothing` through.\n\nSometimes we do not specify the storage type as it should be inferred by the\nvectorized operation, in which case it can be `Nothing`."},
{"module": "Standard.Table.Column", "type": "", "name": "wrap_text_argument_as_value_provider", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "wrap_text_or_regex_argument_as_value_provider", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "cast_if_needed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "value_type": {"lazy": false}},"aliases": [],"description": "Cast a column to a `Value_Type`, unless it already has that type."},
{"module": "Standard.Table.Column", "type": "", "name": "naming_helper", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "default_date_period", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Resolves the default date period for `date_add` depending on the source column value type."},
{"module": "Standard.Table.Column", "type": "", "name": "fill_previous", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "is_missing": {"lazy": false}},"aliases": [],"description": "Fills the missing values in a provided column with the previous non-missing value.","arguments": "- column: The column to fill.\n- is_missing: A boolean column specifying which elements are deemed missing.\n  If set to `Nothing`, this will rely on the default missing value semantics\n  (`is_nothing`)."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Vector\""}},"aliases": [],"description": "Conversion method to a Column from a Vector."},
{"module": "Standard.Table.Column", "type": "Vector", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "Conversion method to a Column to a Vector."},
{"module": "Standard.Table.Column", "type": "Vector", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "Conversion method to a Table to a Vector."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Range\""}},"aliases": [],"description": "Conversion method to a Column from a Vector."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "that.default_column_name"}},"aliases": [],"description": "Conversion method to a Column from a Vector."},
{"module": "Standard.Table.Column", "type": "Cleansable_Text", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "apply_unary_operation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}, "operation": {"lazy": false, "type": "UnaryOperation", "checked": true}, "new_name": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}, "if_unsupported": {"lazy": true, "default": "Panic.throw (Illegal_State.Error \"Unsupported unary operation for column called \"+column.name+\". This is a bug in the Table library.\")"}},"aliases": [],"description": "Applies a UnaryOperation to a column.","arguments": "- column: The column to apply the operation to.\n- operation: The UnaryOperation to apply.\n- new_name: The name of the column created as the result of this operation.\n- if_unsupported: The result if the operation is not supported for the column."},
{"module": "Standard.Table.Column", "type": "", "name": "apply_unary_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}, "new_name": {"lazy": false, "type": "Text", "checked": true}, "function": {"lazy": false}, "expected_result_type": {"lazy": false, "type": "Value_Type|Nothing", "checked": true, "default": "Nothing"}, "nothing_unchanged": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Applies a function to every row in the column.","arguments": "- column: The column to apply the operation to.\n- new_name: The name of the column created as the result of this operation.\n- function: A function applied to every element. It should not raise errors.\n- expected_result_type: The expected result type of the operation.\n- nothing_unchanged: If set to `True`, `Nothing` values will be passed through\n  the operation without being changed. If set to `False`, `Nothing` values will\n  be passed to the function."},
{"module": "Standard.Table.Column", "type": "Many_Files_List", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "_call_comparator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left": {"lazy": false}, "other": {"lazy": false}, "new_name": {"lazy": false}, "comparator": {"lazy": true}, "enso_action": {"lazy": true}},"aliases": [],"description": "Temporary function to determine if to use the Comparators statics or embedded operations."},
{"module": "Standard.Table.Column", "type": "", "name": "_apply_case_sensitive_text_operation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"left": {"lazy": false, "type": "Column", "checked": true}, "other": {"lazy": false, "type": "Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "operation": {"lazy": false}, "fallback_fn": {"lazy": false}, "new_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "All_Columns", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Add", "arguments": {},"aliases": [],"description": "Add all available columns."},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "First", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Add", "arguments": {"columns": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Add the first specified number of columns."},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "columns_to_split", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer | Nothing", "arguments": {},"aliases": [],"description": "Gets the number of columns to add (or Nothing if all columns)."},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Columns_To_Keep", "type": "Columns_To_Keep", "name": "In_Any", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Keep", "arguments": {},"aliases": [],"description": "All columns are kept.\n\nIf a column is present only in some of the tables, it is padded with\n`Nothing` for tables where it is missing."},
{"module": "Standard.Table.Columns_To_Keep", "type": "Columns_To_Keep", "name": "In_All", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Keep", "arguments": {},"aliases": [],"description": "Only columns that are present in all tables are kept.\n\nIf there are columns that are only present in some of the tables,\na problem is reported."},
{"module": "Standard.Table.Columns_To_Keep", "type": "Columns_To_Keep", "name": "In_List", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Keep", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true, "default": "Missing_Argument.throw \"column_names\""}},"aliases": [],"description": "Specific list of column names to keep.\n\nIf a table does not have a column that is specified in the list, it is\npadded with `Nothing` and a problem is reported."},
{"module": "Standard.Table.Columns_To_Keep", "type": "Columns_To_Keep", "name": "In_Any_Warn_On_Missing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Keep", "arguments": {},"aliases": [],"description": "All columns are kept, but it will warn about columns that are not\npresent in all tables.\n\nIf a column is present only in some of the tables, it is padded with\n`Nothing` for tables where it is missing."},
{"module": "Standard.Table.Columns_To_Keep", "type": "Columns_To_Keep", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "The default widget for `Columns_To_Keep`.\nIt does not display the internal `In_Any_Warn_On_Missing` variant, since\nthat variant is only meant to be used as the default value."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number|Text", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number|Text", "checked": true}},"aliases": [],"description": "Add two values/columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Subtract", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Subtract two values/columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Multiply", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Multiply two values/columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Divide", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Divide a fixed value or column by another value or column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Mod", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Compute the remainder of a fixed value or column divided by another\nvalue or column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Power", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Raise a fixed value or column to the power of another value or column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Round", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "precision": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Rounds values in the column to the specified precision."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Ceil", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Rounds values in the column up to the nearest integer."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Floor", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Rounds values in the column down to the nearest integer."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Truncate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number|Date_Time", "checked": true}},"aliases": [],"description": "Truncates the fractional part of values in the column.\nIf a Date_Time, returns the Date."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Min", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true}},"aliases": [],"description": "Returns the minimum value of two columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Max", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true}},"aliases": [],"description": "Returns the maximum value of two columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Date_Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true}, "length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Adds a period to a date/time column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Date_Part", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true}},"aliases": [],"description": "Returns part of a date/time column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Date_Diff", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true}, "end": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Returns the difference between two date/time columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Not", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true}},"aliases": [],"description": "Negate a boolean column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "And", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true}},"aliases": [],"description": "Boolean AND on two boolean columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Or", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true}},"aliases": [],"description": "Boolean OR on two boolean columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "If", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true}, "condition": {"lazy": false, "type": "Filter_Condition", "checked": true}, "true_value": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "True"}, "false_value": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "False"}},"aliases": [],"description": "If input meets a condition return true value, otherwise false value.\n\nThe `true_value` and `false_value` can be either a constant or a column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Trim", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true}, "where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "type": "Text|Column_Ref", "checked": true, "default": "\"\""}},"aliases": [],"description": "Removes the specified characters, by default any whitespace, from the\nstart, the end, or both ends of the input."},
{"module": "Standard.Table.Column_Operation", "type": "Simple_Expression", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column_Operation", "checked": true}},"aliases": []},
{"module": "Standard.Table.Column_Ref", "type": "Column_Ref", "name": "Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Ref", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Reference to a column by name in a table."},
{"module": "Standard.Table.Column_Ref", "type": "Column_Ref", "name": "Index", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Ref", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"description": "Reference to a column by index in a table."},
{"module": "Standard.Table.Constants", "type": "Previous_Value", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Previous_Value", "arguments": {},"aliases": [],"description": "Indicates that the operation should use the previous non-missing value to\nwhen filling in missing values, for example in `fill_nothing` and\n`fill_empty`."},
{"module": "Standard.Table.Constants", "type": "Report_Unmatched", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Report_Unmatched", "arguments": {},"aliases": [],"description": "A value that marks the mode that allows column mismatches but reports them as\na problem."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Data_Formatter", "arguments": {"trim_values": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "allow_leading_zeros": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "decimal_point": {"lazy": false, "type": "Text|Auto", "checked": true, "default": "Auto"}, "thousand_separator": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "allow_exponential_notation": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "datetime_formats": {"lazy": false, "type": "Vector Date_Time_Formatter", "checked": true, "default": "[Date_Time_Formatter.default_enso_zoned_date_time]"}, "date_formats": {"lazy": false, "type": "Vector Date_Time_Formatter", "checked": true, "default": "[Date_Time_Formatter.iso_date]"}, "time_formats": {"lazy": false, "type": "Vector Text", "checked": true, "default": "[Date_Time_Formatter.iso_time]"}, "true_values": {"lazy": false, "type": "Vector Text", "checked": true, "default": "[\"True\",\"true\",\"TRUE\"]"}, "false_values": {"lazy": false, "type": "Vector Text", "checked": true, "default": "[\"False\",\"false\",\"FALSE\"]"}},"aliases": [],"description": "Specifies options for reading text data in a table to more specific types and\nserializing them back.\n\nFor date and time formats, see `Date_Time_Formatter`.","arguments": "- trim_values: Trim whitespace before parsing.\n- allow_leading_zeros: Specifies how to treat numeric values starting\n  with leading zeroes when detecting the type of a column automatically.\n  If set to `False` (the default), then if found values will be left as\n  text. If the type is a number then leading zeroes are accepted\n  regardless of this setting.\n- decimal_point: The character used to separate the integer part from the\n  fractional part of a number. If `Auto` then the format for numbers will\n  be guessed automatically. Can be changed for example to ',' to allow\n  for European format.\n- thousand_separator: A separator that can be used to separate groups of\n  digits in numbers (must be in groups of 3 digits).\n- allow_exponential_notation: Specifies if exponential notation is\n  allowed.\n- datetime_formats: Expected datetime formats.\n- date_formats: Expected date formats.\n- time_formats: Expected time formats.\n- true_values: Values representing True.\n- false_values: Values representing False."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "parse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"text": {"lazy": false}, "type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Parse a Text into a value.","arguments": "- text: Text value to parse.\n- type: The expected Enso type to parse the value into. If set to\n  `Auto`, the type will be inferred automatically.\n- on_problems: Specifies the behavior when a problem occurs.\n  By default, a warning is issued, but the operation proceeds.\n  If set to `Report_Error`, the operation fails with a dataflow error.\n  If set to `Ignore`, the operation proceeds without errors or warnings."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "format", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Format a value into a Text.","arguments": "- value: Value to format."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "with_number_formatting", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"decimal_point": {"lazy": false, "default": "self.decimal_point"}, "thousand_separator": {"lazy": false, "default": "self.thousand_separator"}, "allow_leading_zeros": {"lazy": false, "default": "self.allow_leading_zeros"}, "allow_exponential_notation": {"lazy": false, "default": "self.allow_exponential_notation"}},"aliases": [],"icon": "convert","description": "Create a clone of self with specified number formatting options.","arguments": "- decimal_point: The character used to separate the integer part from the fractional part of a number.\n- thousand_separator: A separator that can be used to separate groups of digits in numbers.\n- allow_leading_zeros: Specifies if values starting with leading zeroes should be treated as numbers.\n- allow_exponential_notation: Allow parsing of exponential notation format."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "with_datetime_formats", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"datetime_formats": {"lazy": false, "type": "Vector | Date_Time_Formatter", "checked": true, "default": "self.datetime_formats"}, "date_formats": {"lazy": false, "type": "Vector | Date_Time_Formatter", "checked": true, "default": "self.date_formats"}, "time_formats": {"lazy": false, "type": "Vector | Date_Time_Formatter", "checked": true, "default": "self.time_formats"}},"aliases": [],"icon": "convert","description": "Specify values for Date/Time parsing.\n\nA plain text pattern can be provided and it will be automatically\nconverted into a `Date_Time_Formatter` using simple pattern parsing\nrules. See `Date_Time_Formatter` for available options.","arguments": "- datetime_formats: Expected datetime formats.\n- date_formats: Expected date formats.\n- time_formats: Expected time formats."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "with_boolean_values", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"true_values": {"lazy": false}, "false_values": {"lazy": false}},"aliases": [],"icon": "convert","description": "Specify values for Boolean parsing.","arguments": "- true_values: Values representing True.\n- false_values: Values representing False."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "with_format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"type": {"lazy": false}, "format": {"lazy": false}},"aliases": [],"icon": "convert","description": "Create a clone of self with a changed format string for a particular\ndatatype.\n\nIt is mostly a convenience function to easily specify a datatype format.","arguments": "- type: The value type for which to change the format. The format can be\n  changed only for `Date_Time`, `Date`, `Time` and `Boolean` value types.\n- format: The new format string to set. For dates, it is the usual date\n  format notation, and for booleans it should be two values that\n  represent true and false, separated by a `|`."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "clone", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"trim_values": {"lazy": false, "default": "self.trim_values"}, "allow_leading_zeros": {"lazy": false, "default": "self.allow_leading_zeros"}, "decimal_point": {"lazy": false, "default": "self.decimal_point"}, "thousand_separator": {"lazy": false, "default": "self.thousand_separator"}, "allow_exponential_notation": {"lazy": false, "default": "self.allow_exponential_notation"}, "datetime_formats": {"lazy": false, "default": "self.datetime_formats"}, "date_formats": {"lazy": false, "default": "self.date_formats"}, "time_formats": {"lazy": false, "default": "self.time_formats"}, "true_values": {"lazy": false, "default": "self.true_values"}, "false_values": {"lazy": false, "default": "self.false_values"}},"aliases": [],"description": "Clone the instance with some properties overridden."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "get_thousand_separator", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "wrap_base_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_parser": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_integer_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"auto_mode": {"lazy": false, "default": "False"}, "target_type": {"lazy": false, "default": "Value_Type.Integer"}},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_decimal_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"auto_mode": {"lazy": false, "default": "False"}},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_boolean_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_date_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_date_time_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_time_of_day_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_identity_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_value_type_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "get_specific_type_parsers", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_auto_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_integer_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_decimal_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_date_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_time_of_day_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_date_time_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_boolean_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_text_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "get_specific_type_formatters", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_auto_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_formatter_for_column_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "", "name": "wrap_text_in_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false}},"aliases": [],"description": "Utility function to convert single text value to a vector"},
{"module": "Standard.Table.Data_Formatter", "type": "", "name": "make_vector_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"single_choice_widget": {"lazy": false}, "display": {"lazy": false, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Missing_Input_Columns", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Missing_Input_Columns", "arguments": {"criteria": {"lazy": false, "type": "[Text | Integer]", "checked": true}, "where": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "One or more columns not found in the input table.","arguments": "- criteria: the names of the columns, regular expressions or indices that\n  did not matches any columns.\n- where: an optional text describing to which object this error is\n  related to (for example in join, whether the reported error is for the\n  left or right table)."},
{"module": "Standard.Table.Errors", "type": "Missing_Input_Columns", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert a missing input error to a human-readable form."},
{"module": "Standard.Table.Errors", "type": "Too_Many_Column_Names_Provided", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Too_Many_Column_Names_Provided", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "More names than the column count provided to the function.\nCan occur when using By_Position."},
{"module": "Standard.Table.Errors", "type": "Too_Many_Column_Names_Provided", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert a too many columns error to a human-readable form."},
{"module": "Standard.Table.Errors", "type": "Invalid_Column_Names", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Column_Names", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "extra_message": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Create an invalid column names error.","arguments": "- column_names: The names of the invalid columns.\n- extra_message: An optional message to append to the error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Column_Names", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Handles the Java counterpart `InvalidColumnNameException` and converts it into a dataflow error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Column_Names", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the invalid output columns error."},
{"module": "Standard.Table.Errors", "type": "Duplicate_Output_Column_Names", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Duplicate_Output_Column_Names", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "Create an duplicate column names error.","arguments": "- column_names: The set of duplicated column names."},
{"module": "Standard.Table.Errors", "type": "Duplicate_Output_Column_Names", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the duplicate output column names error."},
{"module": "Standard.Table.Errors", "type": "No_Output_Columns", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Output_Columns", "arguments": {"cause": {"lazy": false, "type": "Any | Nothing", "checked": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "No_Output_Columns", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the no output columns error."},
{"module": "Standard.Table.Errors", "type": "Ambiguous_Column_Rename", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ambiguous_Column_Rename", "arguments": {"column_name": {"lazy": false, "type": "Text", "checked": true}, "new_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Ambiguous_Column_Rename", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the error."},
{"module": "Standard.Table.Errors", "type": "No_Input_Columns_Selected", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "No_Input_Columns_Selected", "arguments": {},"aliases": [],"description": "Indicates that no input columns were selected for the operation, so the\noperation will cause no effect."},
{"module": "Standard.Table.Errors", "type": "No_Input_Columns_Selected", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Aggregation", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Aggregation", "arguments": {"column": {"lazy": false, "type": "Text", "checked": true}, "rows": {"lazy": false, "type": "Vector Integer", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Aggregation", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Ignored_NaN_Values", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ignored_NaN_Values", "arguments": {"column": {"lazy": false, "type": "Text", "checked": true}, "rows": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Ignored_NaN_Values", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Ignored_Nothing_Values", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ignored_Nothing_Values", "arguments": {"column": {"lazy": false, "type": "Text", "checked": true}, "rows": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Ignored_Nothing_Values", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Unquoted_Delimiter", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unquoted_Delimiter", "arguments": {"column": {"lazy": false, "type": "Text", "checked": true}, "rows": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unquoted_Delimiter", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Row", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Row", "arguments": {"source_file_line_number": {"lazy": false, "type": "Integer", "checked": true}, "index": {"lazy": false, "type": "Integer | Nothing", "checked": true}, "row": {"lazy": false, "type": "Vector Text", "checked": true}, "expected_columns": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Row", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Additional_Invalid_Rows", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Additional_Invalid_Rows", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Additional_Invalid_Rows", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Mismatched_Quote", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Mismatched_Quote", "arguments": {"cell_text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Mismatched_Quote", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Parser_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Parser_Error", "arguments": {"cause": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unquoted_Characters_In_Output", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unquoted_Characters_In_Output", "arguments": {"column": {"lazy": false, "type": "Text", "checked": true}, "rows": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unquoted_Characters_In_Output", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the unquoted characters error."},
{"module": "Standard.Table.Errors", "type": "Unquoted_Characters_In_Output", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Location", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Location", "arguments": {"location": {"lazy": false, "type": "Text | Any", "checked": true}, "message": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Location", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the invalid location error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Format", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Format", "arguments": {"column": {"lazy": false, "type": "Text|Nothing", "checked": true}, "value_type": {"lazy": false, "type": "Value_Type|Integer|Number|Date|Date_Time|Time_Of_Day|Boolean|Any", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true}, "cells": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Format", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the invalid format error."},
{"module": "Standard.Table.Errors", "type": "Empty_File_Error", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Empty_File_Error", "arguments": {},"aliases": [],"description": "Indicates that an empty file was encountered, so no data could be loaded."},
{"module": "Standard.Table.Errors", "type": "Empty_File_Error", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Empty_File_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the empty file error."},
{"module": "Standard.Table.Errors", "type": "Empty_Sheet", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Empty_Sheet", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Empty_Sheet", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Empty_Sheet", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the empty sheet error."},
{"module": "Standard.Table.Errors", "type": "Existing_Column", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Column", "arguments": {"column_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Existing_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Missing_Column", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Missing_Column", "arguments": {"column_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Missing_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Existing_Data", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Data", "arguments": {"message": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Existing_Data", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Range_Exceeded", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Range_Exceeded", "arguments": {"message": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Range_Exceeded", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Column_Count_Mismatch", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Count_Mismatch", "arguments": {"expected": {"lazy": false}, "actual": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Column_Count_Mismatch", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Column_Count_Mismatch", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Column_Name_Mismatch", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Name_Mismatch", "arguments": {"missing": {"lazy": false}, "extras": {"lazy": false}, "message": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Column_Name_Mismatch", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Column_Name_Mismatch", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "No_Such_Column", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Column", "arguments": {"column_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "No_Such_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the no such column error."},
{"module": "Standard.Table.Errors", "type": "No_Index_Set_Error", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "No_Index_Set_Error", "arguments": {},"aliases": [],"description": "An error returned when getting an index but no index is set for that table."},
{"module": "Standard.Table.Errors", "type": "No_Index_Set_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the no index set error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Value_Type", "arguments": {"expected": {"lazy": false, "type": "Value_Type|Text", "checked": true}, "actual": {"lazy": false, "type": "Value_Type", "checked": true}, "related_column": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that a column with an unexpected value type has been encountered."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Value_Type", "arguments": {"expected": {"lazy": false, "type": "Value_Type|Text", "checked": true}, "actual": {"lazy": false, "type": "Value_Type", "checked": true}, "value": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Indicates that a value with an unexpected value type has been encountered."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "Not_Ordered", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Value_Type", "arguments": {"actual": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Indicates that a value type does not support comparisons."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "Incomparable", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Value_Type", "arguments": {"type_1": {"lazy": false, "type": "Value_Type", "checked": true}, "type_2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Indicates that the two value types cannot be compared with each other."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_JSON_Format", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_JSON_Format", "arguments": {"input": {"lazy": false}, "message": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_JSON_Format", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the Invalid_JSON_Format."},
{"module": "Standard.Table.Errors", "type": "Column_Type_Mismatch", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Type_Mismatch", "arguments": {"column_name": {"lazy": false, "type": "Text", "checked": true}, "expected_type": {"lazy": false, "type": "Text | Value_Type", "checked": true}, "got_type": {"lazy": false, "type": "Text | Value_Type", "checked": true}},"aliases": [],"description": "An error indicating a mismatch of column types of merged columns."},
{"module": "Standard.Table.Errors", "type": "Column_Type_Mismatch", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "No_Common_Type", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Common_Type", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "related_column_name": {"lazy": false, "type": "Nothing|Text", "checked": true}},"aliases": [],"description": "An error indicating that no common type could be found, and the operation\ncould not be performed.","arguments": "- types: The types that were tried to be unified.\n- related_column_name: The name of the resulting column that was being\n  unified, if applicable."},
{"module": "Standard.Table.Errors", "type": "No_Common_Type", "name": "Warning_Convert_To_Text", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Common_Type", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "related_column_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A warning indicating that no common type could be found, so the operation\nhad to fall back to converting all values to text."},
{"module": "Standard.Table.Errors", "type": "No_Common_Type", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "No_Common_Type", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unmatched_Columns", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unmatched_Columns", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "An error indicating that some columns were not present in all of the\nmerged tables."},
{"module": "Standard.Table.Errors", "type": "Unmatched_Columns", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Cross_Join_Row_Limit_Exceeded", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Cross_Join_Row_Limit_Exceeded", "arguments": {"limit": {"lazy": false, "type": "Integer", "checked": true}, "existing_rows": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that a `cross_join` has been attempted where the right table\nhas more rows than allowed by the limit."},
{"module": "Standard.Table.Errors", "type": "Cross_Join_Row_Limit_Exceeded", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Row_Count_Mismatch", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Row_Count_Mismatch", "arguments": {"left_rows": {"lazy": false, "type": "Integer", "checked": true}, "right_rows": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the row counts of zipped tables do not match."},
{"module": "Standard.Table.Errors", "type": "Row_Count_Mismatch", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Aggregate_Column", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Aggregate_Column", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "expression_error": {"lazy": false, "type": "Expression_Error | No_Such_Column | Nothing", "checked": true}},"aliases": [],"description": "Indicates that a provided name is not found within available columns nor\nrepresents a valid expression."},
{"module": "Standard.Table.Errors", "type": "Invalid_Aggregate_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Inexact_Type_Coercion", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Inexact_Type_Coercion", "arguments": {"requested_type": {"lazy": false, "type": "Value_Type", "checked": true}, "actual_type": {"lazy": false, "type": "Value_Type", "checked": true}, "unavailable": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Indicates that the requested `Value_Type` is not available in the given\nbackend, so it was replaced by its closest available type."},
{"module": "Standard.Table.Errors", "type": "Inexact_Type_Coercion", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Inexact_Type_Coercion", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Conversion_Failure", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Conversion_Failure", "arguments": {"target_type": {"lazy": false, "type": "Value_Type", "checked": true}, "related_column": {"lazy": false, "type": "Text|Nothing", "checked": true}, "affected_rows_count": {"lazy": false, "type": "Nothing|Integer", "checked": true}, "example_values": {"lazy": false, "type": "Vector Any", "checked": true}},"aliases": [],"description": "Indicates that some values from the column could not be converted to the\ndesired type.\n\nThis may occur for example when a number does not fit the range of the\ntarget type."},
{"module": "Standard.Table.Errors", "type": "Conversion_Failure", "name": "Text_Too_Long", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Conversion_Failure", "arguments": {"target_type": {"lazy": false, "type": "Value_Type", "checked": true}, "related_column": {"lazy": false, "type": "Text|Nothing", "checked": true}, "affected_rows_count": {"lazy": false, "type": "Nothing|Integer", "checked": true}, "example_values": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "Indicates that for some values, their text representation is too long for\nthe target text type."},
{"module": "Standard.Table.Errors", "type": "Conversion_Failure", "name": "Out_Of_Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Conversion_Failure", "arguments": {"target_type": {"lazy": false, "type": "Value_Type", "checked": true}, "related_column": {"lazy": false, "type": "Text|Nothing", "checked": true}, "affected_rows_count": {"lazy": false, "type": "Nothing|Integer", "checked": true}, "example_values": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": [],"description": "Indicates that some values are out of the range of the target type."},
{"module": "Standard.Table.Errors", "type": "Conversion_Failure", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Integer_Precision", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Loss_Of_Integer_Precision", "arguments": {"affected_rows_count": {"lazy": false, "type": "Integer", "checked": true}, "example_value": {"lazy": false, "type": "Integer", "checked": true}, "example_value_converted": {"lazy": false, "type": "Float", "checked": true}},"aliases": [],"description": "Indicates that an automatic conversion of an Integer column to a Float\ncolumn is losing precision because some of the large integers cannot be\nexactly represented by the floating-point type.\n\nCurrently, this error is only reported in-memory."},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Integer_Precision", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Integer_Precision", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Decimal_Precision", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Loss_Of_Decimal_Precision", "arguments": {"affected_rows_count": {"lazy": false, "type": "Integer", "checked": true}, "example_value": {"lazy": false, "type": "Decimal", "checked": true}, "example_value_converted": {"lazy": false, "type": "Float", "checked": true}},"aliases": [],"description": "Indicates that an automatic conversion of a Decimal column to a Float\ncolumn is losing precision because some of the values cannot be exactly\nrepresented by the floating-point type.\n\nCurrently, this error is only reported in-memory."},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Decimal_Precision", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Decimal_Precision", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Arithmetic_Overflow", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Arithmetic_Overflow", "arguments": {"target_type": {"lazy": false, "type": "Value_Type", "checked": true}, "affected_rows_count": {"lazy": false, "type": "Nothing|Integer", "checked": true}, "example_operands": {"lazy": false, "type": "Nothing | Vector Any", "checked": true}},"aliases": [],"description": "Indicates that the result of an arithmetic operation is too large to fit the target type."},
{"module": "Standard.Table.Errors", "type": "Arithmetic_Overflow", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Arithmetic_Overflow", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_For_Type", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Value_For_Type", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Indicates that a column construction/transformation failed because the\nprovided value is not valid for the requested column type."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_For_Type", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Column_Count_Exceeded", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Count_Exceeded", "arguments": {"limit": {"lazy": false, "type": "Integer", "checked": true}, "column_count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that an operation generating new columns produced more columns\nthan allowed by the limit."},
{"module": "Standard.Table.Errors", "type": "Column_Count_Exceeded", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Name_Too_Long", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Name_Too_Long", "arguments": {"entity_kind": {"lazy": false, "type": "Text", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}, "extra_message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that a table/column name is too long for the given backend."},
{"module": "Standard.Table.Errors", "type": "Name_Too_Long", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the column name too long error."},
{"module": "Standard.Table.Errors", "type": "Truncated_Column_Names", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Truncated_Column_Names", "arguments": {"names_map": {"lazy": false, "type": "Dictionary Text Text", "checked": true}},"aliases": [],"description": "Indicates that some column names were truncated to fit the maximum length\nsupported by the backend."},
{"module": "Standard.Table.Errors", "type": "Truncated_Column_Names", "name": "original_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get the original column names."},
{"module": "Standard.Table.Errors", "type": "Truncated_Column_Names", "name": "truncated_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get the truncated names."},
{"module": "Standard.Table.Errors", "type": "Truncated_Column_Names", "name": "find_truncated_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Truncated_Column_Names", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the truncated column names warning."},
{"module": "Standard.Table.Errors", "type": "Clashing_Column_Name", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Clashing_Column_Name", "arguments": {"provided_name": {"lazy": false, "type": "Text", "checked": true}, "clashing_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that a provided column name is clashing with another column\nname in the `Table.set` operation."},
{"module": "Standard.Table.Errors", "type": "Clashing_Column_Name", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the clashing column name error."},
{"module": "Standard.Table.Errors", "type": "Unexpected_Extra_Columns", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unexpected_Extra_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unexpected_Extra_Columns", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the unexpected extra columns warning."},
{"module": "Standard.Table.Errors", "type": "Unmatched_Rows_In_Lookup", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unmatched_Rows_In_Lookup", "arguments": {"example_key_values": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unmatched_Rows_In_Lookup", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the unmatched rows in lookup error."},
{"module": "Standard.Table.Errors", "type": "Non_Unique_Key", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Non_Unique_Key", "arguments": {"key_column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "clashing_example_key_values": {"lazy": false, "type": "Vector Any", "checked": true}, "clashing_example_row_count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the columns selected for the primary key do not uniquely\nidentify rows in the table.","arguments": "- key_column_names: Names of columns comprising the key that is not\n  unique.\n- clashing_example_key_values: The values of an example key that\n  corresponds to more than one row.\n- clashing_example_row_count: The number of rows that correspond to the\n  example key."},
{"module": "Standard.Table.Errors", "type": "Non_Unique_Key", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the non-unique primary key error."},
{"module": "Standard.Table.Errors", "type": "Null_Values_In_Key_Columns", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Null_Values_In_Key_Columns", "arguments": {"example_row": {"lazy": false, "type": "Vector Any", "checked": true}, "add_sql_suffix": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Indicates that the source table contained NULL values in key columns.\nRows containing NULL values as part of their key will not be correctly\ncorrelated with target rows due to how NULL equality works in SQL."},
{"module": "Standard.Table.Errors", "type": "Null_Values_In_Key_Columns", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Not_All_Rows_Downloaded", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Not_All_Rows_Downloaded", "arguments": {"max_rows": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Not_All_Rows_Downloaded", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Nothing_Value_In_Filter_Condition", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing_Value_In_Filter_Condition", "arguments": {"filter_condition": {"lazy": false, "type": "Filter_Condition", "checked": true}},"aliases": [],"description": "Indicates that a Nothing/NULL value was used as a parameter to a\n`Filter_Condition` comparison or `is_in` operation."},
{"module": "Standard.Table.Errors", "type": "Nothing_Value_In_Filter_Condition", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Mixing_Date_Time_Types", "name": "Date_To_Date_Time", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Mixing_Date_Time_Types", "arguments": {"related_column_name": {"lazy": false, "type": "Text | Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Mixing_Date_Time_Types", "name": "Implicit_Time_Zone", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Mixing_Date_Time_Types", "arguments": {"related_column_name": {"lazy": false, "type": "Text | Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Mixing_Date_Time_Types", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "No_Rows", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Rows", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "The message should be used to provide additional context."},
{"module": "Standard.Table.Errors", "type": "No_Rows", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Table.Expression", "type": "Expression", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Expression", "arguments": {"expression": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Creates an expression from a Text value."},
{"module": "Standard.Table.Expression", "type": "Expression", "name": "evaluate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Expression", "checked": true}, "get_column": {"lazy": false}, "make_constant": {"lazy": false}, "is_column": {"lazy": false}, "module_name": {"lazy": false}, "type_name": {"lazy": false}, "var_args_functions": {"lazy": false}},"aliases": [],"description": "Evaluates an expression and returns the result","arguments": "- expression: the expression to evaluate\n- get_column: a function that takes a column name and returns the\n  associated Column object.\n- make_constant: a function that takes an object and returns a\n  constant Column object.\n- module_name: the name of the Column module that the expression is\n  being evaluated against.\n- type_name: the name of the Column type that the expression is being\n  evaluated against.\n- var_args_functions: a Vector of function names which take a single\n  Vector argument but which should be exposed with variable parameters."},
{"module": "Standard.Table.Expression", "type": "Expression_Error", "name": "Syntax_Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}, "line": {"lazy": false, "type": "Integer", "checked": true}, "column": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "The expression supplied could not be parsed due to a syntax error."},
{"module": "Standard.Table.Expression", "type": "Expression_Error", "name": "Unsupported_Operation", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Error", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Expression error when a function could not be found on the target type."},
{"module": "Standard.Table.Expression", "type": "Expression_Error", "name": "Argument_Mismatch", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Expression error when the number of arguments for a function is incorrect."},
{"module": "Standard.Table.Expression", "type": "Expression_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Expression", "type": "", "name": "expr", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Expression", "arguments": {"expression": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "column_add","description": "Create an expression from a Text value.","arguments": "- expression: the expression to create"},
{"module": "Standard.Table.Expression", "type": "", "name": "handle_java_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_type": {"lazy": false}, "enso_constructor": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Expression_Statics", "arguments": {},"aliases": [],"description": "Set of static functions for expression support allowing callback to Enso code."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "today", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date", "arguments": {},"aliases": [],"description": "Obtains the current date from the system clock in the system timezone."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "now", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Time", "arguments": {},"aliases": [],"description": "Obtains the current date-time from the system clock in the system timezone."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Of_Day", "arguments": {},"aliases": [],"description": "Obtains the current time from the system clock in the default time-zone."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "regex", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}},"aliases": [],"description": "Creates a regular expression (alternatively use r/expression/)"},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "*", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Multiples two values."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "/", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Divides this by that."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "+", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Adds two values."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "-", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Subtracts that from this."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "==", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares two values for equality."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "!=", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares two values for inequality."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "^", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compute the result of raising this to the power that."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "%", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Computes the remainder when dividing this by that."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "<", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares if this is less than that"},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "<=", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares if this is less than or equal to that"},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": ">", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares if this is greater than that"},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": ">=", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares if this is greater than or equal to that"},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "pi", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"description": "The mathematical constant pi, equal to the ratio of a circle circumference\nto its diameter."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "e", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"description": "The mathematical constant e, the base of the natural logarithm."},
{"module": "Standard.Table.Fill_With", "type": "Fill_With", "name": "Nothing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fill_With", "arguments": {},"aliases": [],"description": "Fills gaps created by offset with Nothing Values"},
{"module": "Standard.Table.Fill_With", "type": "Fill_With", "name": "Closest_Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fill_With", "arguments": {},"aliases": [],"description": "Fills gaps created by offset with the first value when shifting downwards\nor the last value when shifting upwards"},
{"module": "Standard.Table.Fill_With", "type": "Fill_With", "name": "Wrap_Around", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fill_With", "arguments": {},"aliases": [],"description": "Fills the gaps created by offset with the values that got slid off the other end"},
{"module": "Standard.Table.Fill_With", "type": "Fill_With", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "Integer_Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generate_Rows_Range", "arguments": {"from": {"lazy": false, "type": "Integer | Column_Ref | Expression", "checked": true, "default": "Missing_Argument.throw \"from\""}, "to": {"lazy": false, "type": "Integer | Column_Ref | Expression", "checked": true, "default": "Missing_Argument.throw \"to\""}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "A integer range"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "Date_Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generate_Rows_Range", "arguments": {"from": {"lazy": false, "type": "Date | Column_Ref | Expression", "checked": true, "default": "Missing_Argument.throw \"from\""}, "to": {"lazy": false, "type": "Date | Column_Ref | Expression", "checked": true, "default": "Missing_Argument.throw \"to\""}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Date_Period|Period", "checked": true, "default": "..Day"}},"aliases": [],"description": "A date range"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generate_Rows_Range", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "An existing range that will be used for each row"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "Integer_Column", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generate_Rows_Range", "arguments": {"value": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "An existing column of integers that will be used to to create a 0 to n range for each row"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Create a widget for operation"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "get_range_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"table": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "Gets the column of ranges to use for generating rows"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Convert an integer to a Generate_Rows_Range"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}},"aliases": [],"description": "Convert from an integer range to a Generate_Rows_Range"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}},"aliases": [],"description": "Convert from a date range to a Generate_Rows_Range"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "Convert from a column of integers to a Generate_Rows_Range"},
{"module": "Standard.Table.Grouping_Method", "type": "Grouping_Method", "name": "Unique", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Grouping_Method", "arguments": {"on": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "Missing_Argument.throw \"on\""}},"aliases": [],"description": "Group rows by the specified columns.","arguments": "- on: Rows that have the same values for these columns will be grouped\n  together. At least one column must be specified."},
{"module": "Standard.Table.Grouping_Method", "type": "Grouping_Method", "name": "Equal_Count", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Grouping_Method", "arguments": {"group_count": {"lazy": false, "type": "Integer", "checked": true, "default": "5"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}},"aliases": [],"description": "Create the specified number of groups with the same number of rows in\neach group (except possibly the last one).\n\nArguments\n- group_count: The number of groups to divide the table into.\n- order_by: (Optional.) Specifies the order in which rows should be\n  assigned to groups. Only affects the assignment of group numbers, not\n  the ordering of the output rows. Defaults to the order of the rows in\n  the table."},
{"module": "Standard.Table.Headers", "type": "Headers", "name": "Detect_Headers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Headers", "arguments": {},"aliases": [],"description": "Attempt to detect if the data has headers or not."},
{"module": "Standard.Table.Headers", "type": "Headers", "name": "Has_Headers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Headers", "arguments": {},"aliases": [],"description": "The first row of the data is the column names."},
{"module": "Standard.Table.Headers", "type": "Headers", "name": "No_Headers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Headers", "arguments": {},"aliases": [],"description": "Treat the first row of data as a normal row."},
{"module": "Standard.Table.Headers", "type": "Headers", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Infer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Headers", "type": "Headers", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Table.Join_Condition", "type": "Join_Condition", "name": "Equals", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Condition", "arguments": {"left": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "Missing_Argument.throw \"left\""}, "right": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\"\""}},"aliases": [],"description": "Correlates rows from the two tables if the `left` element is equal to the\n`right` element.\n\n`Nothing` (or null in database) is considered equal to itself.","arguments": "- left: A name or index of a column in the left table.\n - right: A name or index of a column in the right table."},
{"module": "Standard.Table.Join_Condition", "type": "Join_Condition", "name": "Equals_Ignore_Case", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Condition", "arguments": {"left": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "Missing_Argument.throw \"left\""}, "right": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"description": "Correlates rows from the two tables if the `left` element is equal to the\n`right` element, ignoring case. This is only supported for text columns.\n\nCase insensitive comparisons may mean a database has to perform a row\nscan, which can cause a performance degradation.\n\n`Nothing` (or null in database) is considered equal to itself.","arguments": "- left: A name or index of a column in the left table.\n - right: A name or index of a column in the right table.\n - locale: The locale to use for case insensitive comparisons."},
{"module": "Standard.Table.Join_Condition", "type": "Join_Condition", "name": "Between", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Condition", "arguments": {"left": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "Missing_Argument.throw \"left\""}, "right_lower": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\"\""}, "right_upper": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\"\""}},"aliases": [],"description": "Correlates rows from the two tables if the `left` element fits between\nthe `right_lower` and `right_upper` elements. The comparison is inclusive\nfor both lower and upper bounds.\n\nIf any of the values on row are `Nothing` (or null in database) then the\nrows won't be joined.","arguments": "- left: A name or index of a column in the left table.\n - right_lower: A name or index of a column in the right table, used as\n   the lower bound for the check.\n - right_upper: A name or index of a column in the right table, used as\n   the upper bound for the check."},
{"module": "Standard.Table.Join_Condition", "type": "Join_Condition", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Inner", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Returns only rows where a match between the left and right table is\nfound. If one row from the left table matches multiple rows in the right\ntable, it is duplicated this many times to be correlated with each\nmatched row, and vice-versa."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Left_Outer", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Correlated rows are returned in the same way as with `Inner`, but each\nrow from the left table that did not match any rows from the right one is\nalso included - with columns of the right table being set to null for\nthat row."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Right_Outer", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Correlated rows are returned in the same way as with `Inner`, but each\nrow from the right table that did not match any rows from the right one\nis also included - with columns of the right table being set to null for\nthat row."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Full", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Correlated rows are returned in the same way as with `Inner`, but each\nrow from the left and right table that did not match any rows from the\nother one is also included - with columns of the other table being set to\nnull for that row."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Left_Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Returns just rows of the left table that did not match any in the right\ntable.\n\nIn this mode, unlike in others, only columns of the left table are\nreturned, since all columns of the right table would be all null anyway."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Right_Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Returns just rows of the right table that did not match any in the left\ntable.\n\nIn this mode, unlike in others, only columns of the right table are\nreturned, since all columns of the left table would be all null anyway."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Match_Columns", "type": "Match_Columns", "name": "By_Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Match_Columns", "arguments": {},"aliases": [],"description": "Columns are matched by Name."},
{"module": "Standard.Table.Match_Columns", "type": "Match_Columns", "name": "By_Position", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Match_Columns", "arguments": {},"aliases": [],"description": "Columns are matched by Position.\n\nNote: column names are not compared."},
{"module": "Standard.Table.Position", "type": "Position", "name": "Before_Other_Columns", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Position", "arguments": {},"aliases": [],"description": "Selected columns will be moved to the front of the output table."},
{"module": "Standard.Table.Position", "type": "Position", "name": "After_Other_Columns", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Position", "arguments": {},"aliases": [],"description": "Selected columns will be moved to the back of the output table."},
{"module": "Standard.Table.Prefix_Name", "type": "Prefix_Name", "name": "None", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Prefix_Name", "arguments": {},"aliases": [],"description": "Do not add a prefix to the column name."},
{"module": "Standard.Table.Prefix_Name", "type": "Prefix_Name", "name": "Column_Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Prefix_Name", "arguments": {},"aliases": [],"description": "Use the column name as a prefix."},
{"module": "Standard.Table.Prefix_Name", "type": "Prefix_Name", "name": "Custom", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Prefix_Name", "arguments": {"value": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Add a custom prefix to the new name."},
{"module": "Standard.Table.Prefix_Name", "type": "Prefix_Name", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As_Table", "name": "With_New_Column", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Return_As_Table", "arguments": {},"aliases": [],"description": "Returns a table with a new column `Value` containing the objects loaded\nfrom each file.\n\nWhen the source for files to load was a table, all columns from the\noriginal table are also retained. In case of name clashes, the newly\nadded columns will get a suffix.\n\nWhen the source was a simple Vector, the returned table will also contain\na `Path` column."},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As_Table", "name": "As_Merged_Table", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Return_As_Table", "arguments": {"columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true, "default": "..In_Any"}, "match": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}},"aliases": [],"description": "All files are interpreted as tables and then merged into a single table\nby a union operation.\n\nEach file is loaded according to the provided/detected format. If the\nformat reads it as something else than a table, then it is expanded in\nthe same way as `Table.from_objects`."},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As_Table", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As_Table", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As_Table", "name": "make_return", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Many_Files_List", "checked": true}, "objects": {"lazy": false, "type": "Vector Any", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Return_As_Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Row", "type": "Row", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Row", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "index": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Row", "type": "Row", "name": "column_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the set of column column_names"},
{"module": "Standard.Table.Row", "type": "Row", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the number of columns in the table."},
{"module": "Standard.Table.Row", "type": "Row", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Gets the value of the specified column.","arguments": "- column: The name or index of the column being looked up."},
{"module": "Standard.Table.Row", "type": "Row", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets the value of the specified column.","arguments": "- column: The name or index of the column being looked up.\n- if_missing: The value to use if the column isn't present."},
{"module": "Standard.Table.Row", "type": "Row", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Gets the row as a Vector."},
{"module": "Standard.Table.Row", "type": "Row", "name": "to_dictionary", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Gets the row as a Dictionary."},
{"module": "Standard.Table.Row", "type": "Row", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this row into a JS_Object."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "All_Rows", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rows_To_Read", "arguments": {},"aliases": [],"description": "Read all rows."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "First", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rows_To_Read", "arguments": {"rows": {"lazy": false, "type": "Integer", "checked": true, "default": "1000"}},"aliases": [],"description": "Read the first specified number of rows."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "First_With_Warning", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rows_To_Read", "arguments": {"rows": {"lazy": false, "type": "Integer", "checked": true, "default": "1000"}},"aliases": [],"description": "Read a limited number of rows, attaching warning if there is more.\nBy default, a 1000 rows are read.\nThis is the default for database reading."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "rows_to_read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer | Nothing", "arguments": {},"aliases": [],"description": "Gets the number of rows to read (or Nothing if all rows).\nFor the First_With_Warning case, the number of rows is one more than maximum rows."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "rows_to_write", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer | Nothing", "arguments": {},"aliases": [],"description": "Gets the number of rows to write (or Nothing if all rows)."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "attach_warning_vector", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector", "arguments": {"input": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "attach_warning", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"input": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Row_Limit", "type": "Row_Limit", "name": "No_Limit", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row_Limit", "arguments": {},"aliases": [],"description": "Allow unlimited."},
{"module": "Standard.Table.Row_Limit", "type": "Row_Limit", "name": "Limit", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row_Limit", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true, "default": "100"}},"aliases": [],"description": "Limit to a specific number of rows."},
{"module": "Standard.Table.Row_Limit", "type": "Row_Limit", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Row_Limit", "type": "Row_Limit", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Set_Mode", "type": "Set_Mode", "name": "Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Set_Mode", "arguments": {},"aliases": [],"description": "Add a new column to the table.\nIf already present an `Existing_Column` error is returned."},
{"module": "Standard.Table.Set_Mode", "type": "Set_Mode", "name": "Update", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Set_Mode", "arguments": {},"aliases": [],"description": "Update the column in the table.\nIf not present a `Missing_Column` error is returned."},
{"module": "Standard.Table.Set_Mode", "type": "Set_Mode", "name": "Add_Or_Update", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Set_Mode", "arguments": {},"aliases": [],"description": "Add the column to the table if not present, or update if present."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Expression", "name": "Simple_Expr", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Simple_Expression", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "..Index 0"}, "operation": {"lazy": false, "type": "Simple_Calculation", "checked": true, "default": "..Copy"}},"aliases": [],"description": "A simple expression based off an input column and an operation to perform."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Expression", "name": "From", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Simple_Expression", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "..Index 0"}, "operation": {"lazy": false, "type": "Simple_Calculation", "checked": true, "default": "..Copy"}},"aliases": [],"description": "A simple expression based off an input column and an operation to perform."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Expression", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Create a widget for operation"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Expression", "name": "evaluate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "use_input_name": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Interprets the `Simple_Expression` as operation on columns of a provided\ntable, resolving the column references.\nIt creates a new column instance which can be added to the table."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Left", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Takes the first characters from the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Right", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Takes the first characters from the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Length", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {},"aliases": [],"description": "Returns the character length of the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Trim", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Removes the specified characters, by default any whitespace, from the\nstart, the end, or both ends of the input."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Starts_With", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"prefix": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Does the input start with the specified prefix."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Ends_With", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"suffix": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Does the input end with the specified suffix."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Contains", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"substring": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Does the input contain the specified substring."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "create_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "evaluate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "table": {"lazy": false, "type": "Table_Ref", "checked": true}},"aliases": [],"description": "Evaluate the operation - will be passed a Column or DB_Column"},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Subtract", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "0"}},"aliases": [],"description": "Subtract two values/columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Multiply", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Multiply two values/columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Divide", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Divide a fixed value or column by another value or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Negate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {},"aliases": [],"description": "Negate a column."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Mod", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Compute the remainder of a fixed value or column divided by another\nvalue or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Power", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Raise a fixed value or column to the power of another value or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Round", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"precision": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Rounds values in the column to the specified precision."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Ceil", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {},"aliases": [],"description": "Rounds values in the column up to the nearest integer."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Floor", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {},"aliases": [],"description": "Rounds values in the column down to the nearest integer."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Truncate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {},"aliases": [],"description": "Truncates the fractional part of values in the column."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "create_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "evaluate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "table": {"lazy": false, "type": "Table_Ref", "checked": true}},"aliases": [],"description": "Evaluate the operation - will be passed a Column or DB_Column"},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Adds a period to a date/time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Part", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {"period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Returns part of a date/time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Diff", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {"end": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true, "default": "Missing_Argument.throw \"end\""}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Returns the difference between two date/time columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Truncate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Removes the Time portion of a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Year", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the year of a Date or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Month", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the month of a Date or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Day", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the day of a Date or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Hour", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the hour of a Time or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Minute", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the minute of a Time or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Second", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the second of a Time or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "create_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "evaluate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "table": {"lazy": false, "type": "Table_Ref", "checked": true}},"aliases": [],"description": "Evaluate the operation - will be passed a Column or DB_Column"},
{"module": "Standard.Table.Simple_Expression", "type": "Logical_Operation", "name": "Not", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Logical_Operation", "arguments": {},"aliases": [],"description": "Negate a boolean column."},
{"module": "Standard.Table.Simple_Expression", "type": "Logical_Operation", "name": "And", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Logical_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Boolean AND on two boolean columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Logical_Operation", "name": "Or", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Logical_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Boolean OR on two boolean columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Logical_Operation", "name": "create_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Simple_Expression", "type": "Logical_Operation", "name": "evaluate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "table": {"lazy": false, "type": "Table_Ref", "checked": true}},"aliases": [],"description": "Evaluate the operation - will be passed a Column or DB_Column"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Copy", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Creates a copy of the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Text", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"operation": {"lazy": false, "type": "Text_Operation", "checked": true, "default": "..Left 1"}},"aliases": [],"description": "Perform a Text Operation"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Math", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"operation": {"lazy": false, "type": "Math_Operation", "checked": true, "default": "..Subtract 0"}},"aliases": [],"description": "Perform a Math Operation"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Date", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"operation": {"lazy": false, "type": "Date_Operation", "checked": true, "default": "..Add"}},"aliases": [],"description": "Perform a Date Operation"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Logical", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"operation": {"lazy": false, "type": "Logical_Operation", "checked": true, "default": "..Not"}},"aliases": [],"description": "Perform a Logical Operation"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number|Text", "checked": true, "default": "Missing_Argument.throw \"rhs\""}},"aliases": [],"description": "Add two values/columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Subtract", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "0"}},"aliases": [],"description": "Subtract two values/columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Multiply", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Multiply two values/columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Divide", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Divide a fixed value or column by another value or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Mod", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Compute the remainder of a fixed value or column divided by another\nvalue or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Power", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Raise a fixed value or column to the power of another value or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Round", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"precision": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Rounds values in the column to the specified precision."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Ceil", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Rounds values in the column up to the nearest integer."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Floor", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Rounds values in the column down to the nearest integer."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Truncate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Truncates the fractional part of values in the column.\nIf a Date_Time, returns the Date."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Min", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "Missing_Argument.throw \"rhs\""}},"aliases": [],"description": "Returns the minimum value of two columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Max", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "Missing_Argument.throw \"rhs\""}},"aliases": [],"description": "Returns the maximum value of two columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Date_Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Adds a period to a date/time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Date_Part", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Returns part of a date/time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Date_Diff", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"end": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true, "default": "Missing_Argument.throw \"end\""}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Returns the difference between two date/time columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Not", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Negate a boolean column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "And", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Boolean AND on two boolean columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Or", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Boolean OR on two boolean columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "If", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition", "checked": true, "default": "..Equal True"}, "true_value": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "True"}, "false_value": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "False"}},"aliases": [],"description": "If input meets a condition return true value, otherwise false value.\nThe `true_value` and `false_value` can be either a constant or a column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Trim", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Removes the specified characters, by default any whitespace, from the\nstart, the end, or both ends of the input."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Text_Left", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Takes the first characters from the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Text_Right", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Takes the last characters from the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Text_Length", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Returns the character length of the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Format", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"format": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Formats a column with the specified format."},
{"module": "Standard.Table.Sort_Column", "type": "Sort_Column", "name": "Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Sort_Column", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"name\""}, "direction": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}},"aliases": [],"description": "A column to sort by, selected by its name.\n\nFor case insensitive column name matching, use the `Select_By_Name`\nselector."},
{"module": "Standard.Table.Sort_Column", "type": "Sort_Column", "name": "Index", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Sort_Column", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "direction": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}},"aliases": [],"description": "A column to sort by, selected by its index."},
{"module": "Standard.Table.Sort_Column", "type": "Sort_Column", "name": "Select_By_Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Sort_Column", "arguments": {"name": {"lazy": false, "type": "Text|Regex", "checked": true, "default": "Missing_Argument.throw \"name\""}, "direction": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Insensitive"}},"aliases": [],"description": "A selector allowing to match columns by their name.\n\nIt can do regex-based and case insensitive matching if requested.\nIt is possible for it to match multiple columns, in which case all the\nmatched columns will be placed in the ORDER BY clause at the position of\nthis selector. Their relative order between each other will be the same\nas in the table."},
{"module": "Standard.Table.Sort_Column", "type": "Sort_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Sort_Column", "type": "Sort_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Table", "type": "Table", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"internal_java_table": {"lazy": false}},"aliases": [],"description": "Internal constructor that should not be used directly.\nPlease use `from_java_table` if needed.","arguments": "- internal_java_table: The internal java representation of the table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Vector | Column)", "checked": true}},"aliases": [],"icon": "table_edit","description": "Creates a new table from a set of columns. This can either be provided as\na set of pairs of names and data, or existing Column objects.","arguments": "- columns: A set of either Column objects or pairs of name and data to\n  construct a column from. If passing name and data, the items can be\n  passed as a Vector, Range or a Date_Range.","returns": "- A Table of all of the input data.","examples": "> Example\n  Create a new table with the specified columns.\n\n      first_column = [\"count\", [1, 2, 3]]\n      second_column = [\"is_valid\", [True, False, True]]\n      Table.new [first_column, second_column]\n\n      ## Returns a table like:\n\n         | count | is_valid |\n         |-------|----------|\n         | 1     | True     |\n         | 2     | False    |\n         | 3     | True     |\n\n ? Unique Names\n Column names must be unique. If a column name is repeated, an error is\n thrown.\n\n ? Consistent Row Count\n All columns must have the same number of rows. If a column has a\n different number of entries, an error is thrown.","errors": "- A Table of all of the input data."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from_rows", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"header": {"lazy": false, "type": "Vector", "checked": true}, "rows": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"group": "Standard.Base.Constants","icon": "data_input","description": "Creates a new table from a vector of column names and a vector of vectors\nspecifying row contents.","arguments": "- header: A list of texts specifying the column names\n- rows: A vector of vectors, specifying the contents of each table row. The\n  length of each element of `rows` must be equal in length to `header`.","examples": "> Example\n  Create a table with 3 columns, named `foo`, `bar`, and `baz`, containing\n  `[1, 2, 3]`, `[True, False, True]`, and `['a', 'b', 'c']`, respectively.\n\n      from Standard.Table import Table\n\n      example_from_rows =\n          header = [ 'foo' , 'bar' , 'baz' ]\n          row_1 =  [ 1     , True  , 'a'   ]\n          row_2 =  [ 2     , False , 'b'   ]\n          row_3 =  [ 3     , True  , 'c'   ]\n          Table.from_rows header [row_1, row_2, row_3]"},
{"module": "Standard.Table.Table", "type": "Table", "name": "input", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Vector | Column)", "checked": true}},"aliases": [],"group": "Standard.Base.Constants","icon": "table_edit","suggested": 7,"description": "Creates a new table from a set of columns parsing the resulting table.","arguments": "- columns: A set of either Column objects or set of name, data and\n  optionally type to construct a column from. If the data is passed as\n  Vector Text then it will be parsed into the specified type (defaults\n  to auto detect).","returns": "- A Table of all of the input data.","errors": "- A Table of all of the input data."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from_union", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Illegal_Argument", "arguments": {"tables": {"lazy": false, "type": "Vector Table", "checked": true}, "columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true, "default": "..In_Any_Warn_On_Missing"}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "select_column","description": "Appends records from the vector of tables into a single table.","arguments": "- tables: A vector of tables to union  together. The\n  tables are concatenated in the order they are specified.\n- columns_to_keep: Specifies which columns to keep. Defaults to keeping\n  columns that are present in any of the tables, reporting a warning for\n  columns that are not present in all tables and adding `Nothing` values\n  for them.\n- match_columns: Specifies how to match the columns.\n  - If `Match_Columns.By_Name` - the columns are matched by name across\n    all provided tables.\n  - If `Match_Columns.By_Position` - the columns are mapped by position.\n    The names of each column come from the first table in which the given\n    column appears in.\n    The `List` option is not applicable when mapping columns by position.\n    Column names are taken from the first table if `In_All` and from the\n    first table that has the maximum number of columns if `In_Any`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","errors": "","remarks": "? Unifying Column Types\n\n  Numeric columns are unified by finding the smallest type that can fit\n  all of the columns. The biggest integer type will be chosen and if\n  integers and decimals are mixed, the decimal type will be chosen.\n  If boolean columns are mixed with numeric columns, they will be coerced\n  to the numeric type (and converted to 0 and 1).\n\n  Text types will are also unified by finding the smallest type that can\n  fit all the values. If constant-length texts of different lengths are\n  mixed, they will be coerced to a varying-length type.\n\n  If date and date-time columns are unified, this yields a date-time\n  column. In-memory, the date is promoted by adding a time of 00:00 and\n  the system time-zone. In other backends that behaviour may differ.\n\n  If one of the matched columns has `Mixed` type, that type will be used\n  regardless of types of other columns. Note that the `Mixed` type may\n  not be supported by most Database backends.\n\n  Finally, if no common type is found using the rules above, everything\n  is converted to text.\n\n\n? Ordering of Columns in the result\n\n  When matching columns by name, it is possible that the ordering of\n  columns may vary between input tables. The ordering is determined as\n  following: columns that are kept from the first table are in the order\n  they appear in that table. If there are columns that do not appear in\n  the first table, they are appended to the end of the resulting table in\n  the order they appear in the input."},
{"module": "Standard.Table.Table", "type": "Table", "name": "java_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A getter that is a workaround for bug https://github.com/enso-org/enso/issues/12180"},
{"module": "Standard.Table.Table", "type": "Table", "name": "display", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {"show_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "format_terminal": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Returns a text containing an ASCII-art table displaying this data.","arguments": "- show_rows: the number of initial rows that should be displayed.\n- format_terminal: whether ANSI-terminal formatting should be used","examples": "> Example\n  Convert the table to a pretty-printed representation.\n\n      import Standard.Examples\n\n      example_display = Examples.inventory_table.display"},
{"module": "Standard.Table.Table", "type": "Table", "name": "print", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Nothing", "arguments": {"show_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}},"aliases": [],"description": "Prints an ASCII-art table with this data to the standard output.","arguments": "- show_rows: the number of initial rows that should be displayed.","examples": "> Example\n  Convert the table to a pretty-printed representation and print it to\n  the console.\n\n      import Standard.Examples\n\n      example_print = Examples.inventory_table.print"},
{"module": "Standard.Table.Table", "type": "Table", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this table into a JS_Object.","examples": "> Example\n  Convert a table to a corresponding JavaScript JS_Object representation.\n\n      import Standard.Examples\n\n      example_to_json = Examples.inventory_table.to_js_object"},
{"module": "Standard.Table.Table", "type": "Table", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! No_Such_Column | Index_Out_Of_Bounds", "arguments": {"selector": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns the column with the given name or index.","arguments": "- selector: The name or index of the column being looked up.","returns": "- The column with the given name or index, or the `if_missing` value if\n  the column is not found.","examples": "> Example\n  Get the names of all of the items from the shop inventory.\n\n     table1 = Table.new [['Name', ['John', 'Paul']], ['Age', [25, 35]]]\n     column1 = table1.get 'Name'\n\n     ## Returns a Column\n        | Name |\n        |------|\n        | John |\n        | Paul |\n\n\n> Example\n  Get the last column.\n\n     table1 = Table.new [['Name', ['John', 'Paul']], ['Age', [25, 35]]]\n     column1 = table1.get -1\n\n     ## Returns a Column\n        | Age |\n        |-----|\n        | 25  |\n        | 35  |","errors": "- The column with the given name or index, or the `if_missing` value if\n  the column is not found."},
{"module": "Standard.Table.Table", "type": "Table", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column | Any", "arguments": {"selector": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "select_column","description": "Returns the column with the given name or index.","arguments": "- selector: The name or index of the column being looked up.\n- if_missing: The value to use if the selector isn't present.","returns": "- The column with the given name or index, or the `if_missing` value if\n  the column is not found.","examples": "> Example\n  Get the names of all of the items from the shop inventory.\n\n     table1 = Table.new [['Name', ['John', 'Paul']], ['Age', [25, 35]]]\n     column1 = table1.get 'Name'\n\n     ## Returns a Column\n        | Name |\n        |------|\n        | John |\n        | Paul |\n\n\n> Example\n  Get the last column.\n\n     table1 = Table.new [['Name', ['John', 'Paul']], ['Age', [25, 35]]]\n     column1 = table1.get -1\n\n     ## Returns a Column\n        | Age |\n        |-----|\n        | 25  |\n        | 35  |"},
{"module": "Standard.Table.Table", "type": "Table", "name": "get_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {"selector": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "0"}, "index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": ["cell value", "get cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets a value from the table.","arguments": "- selector: The name or index of the column.\n- index: The index of the value to get within the column.\n- if_missing: The value to use if the selector isn't present.","examples": "> Example\n  Get the names of all of the items from the shop inventory.\n\n      import Standard.Examples\n\n      example_at = Examples.inventory_table.get_value \"item_name\" 4"},
{"module": "Standard.Table.Table", "type": "Table", "name": "get_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row | Any", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": ["row"],"group": "Standard.Base.Selections","icon": "select_row","description": "Gets a row from the table.","arguments": "- index: The index of the row to get within the table.\n- if_missing: The value to use if the selector isn't present."},
{"module": "Standard.Table.Table", "type": "Table", "name": "first_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["first cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets the top left value from the table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "last_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["last cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets the bottom right value from the table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "first_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["first field"],"group": "Standard.Base.Selections","icon": "select_column","description": "Gets the first column."},
{"module": "Standard.Table.Table", "type": "Table", "name": "last_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["last field"],"group": "Standard.Base.Selections","icon": "select_column","description": "Gets the last column"},
{"module": "Standard.Table.Table", "type": "Table", "name": "column_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["field count"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the number of columns in the table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "select_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "reorder": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["select fields"],"group": "Standard.Base.Selections","icon": "select_column","suggested": 1,"description": "Creates a new table with a chosen subset of columns, as specified by the\n`columns`, from the input table. Any unmatched input columns will be\ndropped from the output.","arguments": "- columns: Specifies columns by a single instance or Vector of names;\n  indexes or regular expressions to match names; or a `By_Type` selector\n  to choose columns by type.\n- case_sensitivity: Controls whether to be case sensitive when matching\n  column names.\n- reorder: By default, or if set to `False`, columns in the output will\n  be in the same order as in the input table. If `True`, the order in the\n  output table will match the order in the columns list. If a column is\n  matched by multiple selectors in reorder mode, it will be placed at\n  the position of the first one matched.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","returns": "- A new table with the chosen subset of columns.","examples": "> Example\n  Select columns by name.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.select_columns [\"bar\", \"foo\"]\n\n      ## Returns a Table\n         | bar  | foo |\n         |------|-----|\n         | John | 25  |\n\n\n> Example\n  Select columns by name, reordering the result.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.select_columns [\"foo\", \"bar\"] reorder=True\n\n      ## Returns a Table\n         | foo  | bar  |\n         |------|------|\n         | 25   | John |\n\n\n> Example\n  Select columns matching a regular expression.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.select_columns [regex \"b.+\"]\n\n      ## Returns a Table\n         | bar  | buzz | bizz |\n         |------|------|------|\n         | John | abc  | 123  |\n\n\n> Example\n  Select the first two columns and the last column, moving the last one to front.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", 25,\"abc\",123]]\n      output = table.select_columns [-1, 0, 1] reorder=True\n\n      ## Returns a Table\n         | bizz | bar  | foo  |\n         |------|------|------|\n         | 123  | John | 25   |\n\n\n> Example\n  Select integer columns.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", 25,\"abc\",123]]\n      output = table.select_columns [..By_Type ..Integer]\n\n      ## Returns a Table\n         | foo  | bizz |\n         |------|------|\n         | 25   | 123  |","errors": "- A new table with the chosen subset of columns.","remarks": "? Selecting By Type\n\n  If selecting by type, then the length, scale and precision are ignored.\n  In other words, `..Text` will match any text column, regardless of its\n  length or being fixed or variable length. Similarly, `..Integer` will\n  match any integer column, regardless of its size."},
{"module": "Standard.Table.Table", "type": "Table", "name": "select_columns_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["select fields by type"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the chosen set of columns filtered by the type\nof the column.","arguments": "- types: The types of columns to select.\n- strict: If `True`, only columns with exactly the specified types will\n  be selected. If `False`, columns with related types will also be\n  selected (i.e. ignore size, precision)."},
{"module": "Standard.Table.Table", "type": "Table", "name": "remove_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["drop fields", "drop_columns", "remove fields", "select columns", "select fields"],"group": "Standard.Base.Selections","icon": "select_column","description": "Creates a new table with the chosen set of columns, as specified by the\n`columns`, removed from the input table. Any unmatched input columns will\nbe kept in the output. Columns are returned in the same order as in the\ninput.","arguments": "- columns: Specifies columns by a single instance or Vector of names;\n  indexes or regular expressions to match names; or a `By_Type` selector\n  to choose columns by type.\n- case_sensitivity: Controls whether to be case sensitive when matching\n  column names.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `False`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","returns": "- A new table with the chosen subset of columns removed.","examples": "> Example\n  Remove columns by name.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.remove_columns [\"bar\", \"foo\"]\n\n      ## Returns a Table\n         | buzz | bizz |\n         |------|------|\n         | abc  | 123  |\n\n\n> Example\n  Remove columns matching a regular expression.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.remove_columns [regex \"b.+\"]\n\n      ## Returns a Table\n         | foo  |\n         |------|\n         | 25   |\n\n\n> Example\n  Remove the first two columns and the last column\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", 25,\"abc\",123]]\n      output = table.select_columns [-1, 0, 1]\n\n      ## Returns a Table\n         | buzz |\n         |------|\n         | abc  |\n\n\n> Example\n  Remove integer columns.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", 25,\"abc\",123]]\n      output = table.remove_columns [..By_Type ..Integer]\n\n      ## Returns a Table\n         | bar  | buzz |\n         |------|------|\n         | John | abc  |","errors": "- A new table with the chosen subset of columns removed.","remarks": "? Selecting By Type\n\n  If selecting by type, then the length, scale and precision are ignored.\n  In other words, `..Text` will match any text column, regardless of its\n  length or being fixed or variable length. Similarly, `..Integer` will\n  match any integer column, regardless of its size."},
{"module": "Standard.Table.Table", "type": "Table", "name": "remove_columns_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["remove fields by type", "select columns by type", "select fields by type"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the chosen set of columns filtering out based\non the type of the column.","arguments": "- types: The types of columns to remove.\n- strict: If `True`, only columns with exactly the specified types will\n  be removed. If `False`, columns with related types will also be\n  removed (i.e. ignore size, precision)."},
{"module": "Standard.Table.Table", "type": "Table", "name": "select_blank_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["drop_empty_rows", "drop_missing_rows", "dropna", "filter_empty_rows", "remove_blank_rows", "remove_empty_rows", "remove_missing_rows"],"group": "Standard.Base.Selections","icon": "select_column","description": "Selects columns which are either all blank or contain blank values. If no\nrows are present, all columns are considered blank.","arguments": "- when: specifies whether to remove is all cells are blank or if any ones\n  are chosen. By default, only columns consisting of all blank cells are\n  selected.\n- treat_nans_as_blank: specified whether `Number.nan` is considered as\n  blank. By default, it is not.","returns": "- A new table of the blank columns.","examples": "> Example\nSelect completely blank columns from a table.\n\n   table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", 25,\"abc\",\"\"]]\n   output = table.select_blank_columns\n\n   ## Returns a Table\n      | bar  | foo | buzz |\n      |------|-----|------|\n      | John | 25  | abc  |","errors": "- A new table of the blank columns.","remarks": "? What is a blank value?\n  Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Table.Table", "type": "Table", "name": "remove_blank_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["drop_missing_columns", "drop_na", "filter_blank_columns", "select_blank_columns", "select_blank_fields", "select_missing_columns", "select_na"],"group": "Standard.Base.Selections","icon": "select_column","description": "Remove columns which are either all blank or contain blank values. If no\nrows are present, all columns are considered blank.","arguments": "- when: specifies whether to remove is all cells are blank or if any ones\n  are chosen. By default, only columns consisting of all blank cells are\n  selected.\n- treat_nans_as_blank: specified whether `Number.nan` is considered as\n  blank. By default, it is not.","returns": "- A new table with the blank columns removed.","examples": "> Example\nRemove completely blank columns from a table.\n\n   table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", 25,\"abc\",\"\"]]\n   output = table.remove_blank_columns\n\n   ## Returns a Table\n      | bar  | foo | buzz |\n      |------|-----|------|\n      | John | 25  | abc  |","errors": "- A new table with the blank columns removed.","remarks": "? What is a blank value?\n  Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Table.Table", "type": "Table", "name": "reorder_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "position": {"lazy": false, "type": "Position", "checked": true, "default": "..Before_Other_Columns"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Reorders the columns by moving the selected columns to the start (or end)\nof the Table. By default, the selected columns are moved to the front.\nOther columns are left in their original order.","arguments": "- columns: Specifies columns by a name, type, index or regular expression to\n  match names, or a Vector of these.\n- position: Specifies how to place the selected columns in relation to\n  the remaining columns which were not matched by `columns` (if any).\n- case_sensitivity: Controls whether to be case sensitive when matching\n  column names.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `False`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","returns": "- A new table with the columns reordered.","examples": "> Example\n  Move a column with a specified name to back.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.reorder_columns [\"foo\"] position=..After_Other_Columns\n\n      ## Returns a Table\n         | bar  | buzz | bizz | foo  |\n         |------|------|------|------|\n         | John | abc  | 123  | 25   |\n\n\n> Example\n  Move columns using names passed as a Vector.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.reorder_columns [\"bizz\", \"foo\"]\n\n      ## Returns a Table\n         | bizz | foo  | bar  | buzz |\n         |------|------|------|------|\n         | 123  | 25   | John | abc  |\n\n\n> Example\n  Move columns matching a regular expression to front, keeping columns matching \"f.+\" before columns matching \"ba.*\".\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.reorder_columns [(regex \"f.+\"), (regex \"ba.*\")] case_sensitivity=..Insensitive\n\n      ## Returns a Table\n         | foo  | bar  | buzz | bizz  |\n         |------|------|------|-------|\n         | 25   | John | abc  | 123   |\n\n\n> Example\n  Swap the first two columns.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.reorder_columns [1, 0] position=..Before_Other_Columns\n\n      ## Returns a Table\n         | foo  | bar  | buzz | bizz  |\n         |------|------|------|-------|\n         | 25   | John | abc  | 123   |\n\n\n> Example\n  Move the first column to back.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.reorder_columns [0] position=..After_Other_Columns\n\n      ## Returns a Table\n         | foo  | buzz | bizz | bar  |\n         |------|------|------|------|\n         | 25   | abc  | 123  | John |","errors": "- A new table with the columns reordered."},
{"module": "Standard.Table.Table", "type": "Table", "name": "sort_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"order": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Reorders the columns sorted by name in the specified order and the text\nordering method. By default, sorting will be according to case-sensitive\nascending order.","arguments": "- order: Whether sorting should be in ascending or descending order.\n- text_ordering: Specifies whether to use dictionary, case-insensitive or\n  case-sensitive ordering. By default, case-sensitive ordering is used.","examples": "> Example\n  Sort columns according to the default ordering.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.sort_columns\n\n      ## Returns a Table\n         | bar  | bizz | buzz | foo  |\n         |------|------|------|------|\n         | John | 123  | abc  | 25   |\n\n\n> Example\n  Sort columns according to the natural case-insensitive ordering.\n\n      table = Table.from_rows [\"Bar\",\"foo\",\"buzz\",\"Bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.sort_columns (..Case_Insensitive sort_digits_as_numbers=True)\n\n      ## Returns a Table\n         | Bar  | Bizz | buzz | foo  |\n         |------|------|------|------|\n         | John | 123  | abc  | 25   |\n\n\n> Example\n  Sort columns in descending order.\n\n      table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n      output = table.sort_columns ..Descending\n\n      ## Returns a Table\n         | foo  | buzz | bizz | bar  |\n         |------|------|------|------|\n         | 25   | abc  | 123  | John |","remarks": "? Unicode Normalization\n  The text ordering method uses Unicode normalization to ensure that the\n  text is sorted correctly. This means that text that looks the same but\n  is represented differently will be sorted in the same way."},
{"module": "Standard.Table.Table", "type": "Table", "name": "rename_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Missing_Input_Columns | Ambiguous_Column_Rename | Too_Many_Column_Names_Provided | Invalid_Column_Names | Duplicate_Output_Column_Names", "arguments": {"column_map": {"lazy": false, "type": "Table | Dictionary (Text | Integer | Regex) Text | Vector Text | Vector Vector", "checked": true, "default": "[\"Column\"]"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["rename_fields", "select_columns", "select_fields"],"group": "Standard.Base.Metadata","icon": "table_edit","description": "Returns a new table with the columns renamed based on either a mapping\nfrom the old name to the new or a positional list of new names.","arguments": "- column_map: Mapping from old column names to new or a vector of new\n  column names to apply by position. The mapping can be provided as a\n  `Dictionary` or a `Vector` of pairs of old and new names.\n  A `Table` can also be used either with a single column of new\n  names or two columns with old (first column) and new names (second\n  column).\n- case_sensitivity: Controls whether to be case sensitive when matching\n  column names.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","returns": "- A new table with the columns renamed based on the column_map.","examples": "> Example\n  Rename the \"Alpha\" column to \"Delta\"\n\n      table = Table.from_rows [\"Alpha\", \"Beta\"] [[\"John\", \"25\"]]\n      output = table.rename_columns [Pair.Value \"Alpha\" \"Delta\"]\n\n      ## Returns a Table\n         | Delta | Beta |\n         |-------|------|\n         | John  | 25   |\n\n\n> Example\n  Rename the last column to \"LastColumn\"\n\n      table = Table.from_rows [\"Alpha\", \"Beta\"] [[\"John\", \"25\"]]\n      output = table.rename_columns [Pair.Value -1 \"LastColumn\"]\n\n      ## Returns a Table\n         | Alpha | LastColumn |\n         |-------|------------|\n         | John  | 25         |\n\n\n> Example\n  Rename the \"Alpha\" column to \"Beta\" and last column to \"LastColumn\"\n\n      table = Table.from_rows [\"Alpha\", \"Age\", \"State\"] [[\"John\", 25, \"NY\"], [\"Paul\", 35, \"CA\"]]\n      output = table.rename_columns [Pair.Value \"Alpha\" \"Beta\", Pair.Value -1 \"LastColumn\"]\n\n      ## Returns a Table\n         | Beta | Age | LastColumn |\n         |------|-----|------------|\n         | John | 25  | NY         |\n         | Paul | 35  | CA         |\n\n\n> Example\n  Rename the first column to \"FirstColumn\" and second to \"SecondColumn\" using a positional list.\n\n      table = Table.from_rows [\"Alpha\", \"Age\", \"State\"] [[\"John\", 25, \"NY\"], [\"Paul\", 35, \"CA\"]]\n      output = table.rename_columns [\"FirstColumn\", \"SecondColumn\"]\n\n      ## Returns a Table\n         | FirstColumn | SecondColumn | State |\n         |-------------|--------------|-------|\n         | John        | 25           | NY    |\n         | Paul        | 35           | CA    |\n\n\n> Example\n  Add a prefix to all column names.\n\n       table = Table.from_rows [\"Alpha\", \"Age\", \"State\"] [[\"John\", 25, \"NY\"], [\"Paul\", 35, \"CA\"]]\n       output = table.rename_columns [Pair.Value (regex \"(.*)\"), \"prefix:$1\"]\n\n       ## Returns a Table\n          | prefix:Alpha | prefix:Age | prefix:State |\n          |--------------|------------|--------------|\n          | John         | 25         | NY           |\n          | Paul         | 35         | CA           |\n\n\n> Example\n  For all columns starting with the prefix `name=`, replace it with `key:`.\n\n      table = Table.from_rows [\"name=Alpha\", \"name=Beta\", \"name=Gamma\"] [[\"John\", \"25\", \"abc\"]]\n      output = table.rename_columns [Pair.Value (regex \"name=(.*)\"), \"key:$1\"]\n\n      ## Returns a Table\n         | key:Alpha | key:Beta | key:Gamma |\n         |-----------|----------|-----------|\n         | John      | 25       | abc       |","errors": "- A new table with the columns renamed based on the column_map.","remarks": "? Pattern based renaming\n\n`Regex` objects can be used within the column_map to do pattern based\nrenaming. Marked groups can be used in the new name by using `$1`, `$2`,\netc."},
{"module": "Standard.Table.Table", "type": "Table", "name": "use_first_row_as_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["header", "rename"],"group": "Standard.Base.Metadata","icon": "table_edit","description": "Returns a new table with the columns renamed based on entries in the\nfirst row, and then the first row is removed.","arguments": "- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","returns": "- A new table with the columns renamed based on the first row.","examples": "> Example\n  Rename the column based on the first row\n\n     table = Table.from_rows [\"bar\",\"foo\",\"buzz\",\"bizz\"] [[\"John\", \"25\",\"abc\",\"123\"]]\n     output = table.use_first_row_as_names\n\n     ## Returns a Table\n        | bar | foo | buzz | bizz |\n        |-----|-----|------|------|\n        | John| 25  | abc  | 123  |","errors": "- A new table with the columns renamed based on the first row."},
{"module": "Standard.Table.Table", "type": "Table", "name": "aggregate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Invalid_Aggregate_Column | Invalid_Column_Names | Duplicate_Output_Column_Names | Floating_Point_Equality | Invalid_Aggregation | Unquoted_Delimiter | Additional_Warnings", "arguments": {"group_by": {"lazy": false, "type": "Vector (Integer | Text | Regex | Aggregate_Column) | Text | Integer | Regex", "checked": true, "default": "[]"}, "columns": {"lazy": false, "type": "Vector Aggregate_Column", "checked": true, "default": "[]"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["average", "count", "count distinct", "first", "group by", "last", "longest", "maximum", "mean", "median", "minimum", "mode", "percentile", "shortest", "standard deviation", "sum", "summarize", "variance"],"group": "Standard.Base.Calculations","icon": "transform4","suggested": 7,"description": "Aggregates the rows in a table using `group_by` columns.\nThe columns argument specifies which additional aggregations to perform\nand to return.","arguments": "- group_by: A list of columns to group by. These will be included at the\n  start of the resulting table. If no columns are specified a single row\n  will be returned with the aggregate columns.\n- columns: The aggregate operations being performed specifying the\n  aggregated table. Expressions can be used within the aggregate column\n  to perform more complicated calculations.\n- error_on_missing_columns: Specifies if a missing columns in aggregates\n  should result in an error regardless of the `on_problems` settings.\n  Defaults to `False`, meaning that problematic aggregations will not be\n  included in the result and a problem reported.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Count all the rows\n\n      table = Table.from_rows [\"Name\",\"Location\"] [[\"John\", \"Massachusetts\"],[\"Paul\",\"London\"]]\n      grouped = table.aggregate columns=[Aggregate_Column.Count]\n\n      ## Returns a Table\n         | Count |\n         |-------|\n         | 2     |\n\n\n> Example\n  Group by the Key column, count the rows\n\n      table = Table.from_rows [\"Name\",\"Location\"] [[\"John\", \"Massachusetts\"],[\"Paul\",\"London\"]]\n      grouped = table.aggregate [\"Name\"] [Aggregate_Column.Count]\n\n      ## Returns a Table\n         | Name | Count |\n         |------|-------|\n         | John | 1     |\n         | Paul | 1     |","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Incomparable_Values | No_Input_Columns_Selected | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector Sort_Column | Sort_Column", "checked": true, "default": "[self.columns.first.name]"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["order_by"],"group": "Standard.Base.Selections","icon": "order","suggested": 8,"description": "Reorders the table by sorting them based on the specified columns.\nOptionally, the method of ordering text values can be specified allowing\nfor case-insensitively or dictionary ordering.","arguments": "- columns: The columns and order to sort the table.\n- text_ordering: The ordering method to use on text values.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","returns": "- A new table with the rows sorted as specified.","examples": "> Example\n  Sorting `table` in ascending order by the value in column `'Quantity'`.\n\n      table = Table.from_rows [\"Name\",\"Quantity\"] [[\"John\", 5],[\"Paul\", 3]]\n      sorted = table.sort ['Quantity']\n\n      ## Returns a Table\n         | Name | Quantity |\n         |------|----------|\n         | Paul | 3        |\n         | John | 5        |\n\n\n> Example\n  Sorting `table` in descending order by the value in column `'Name'`.\n\n      table = Table.from_rows [\"Name\",\"Quantity\"] [[\"John\", 5],[\"Paul\", 3]]\n      sorted = table.sort [..Name 'Name' ..Descending]\n\n      ## Returns a Table\n         | Name | Quantity |\n         |------|----------|\n         | Paul | 3        |\n         | John | 5        |\n\n\n> Example\n  Sorting `table` in ascending order by the value in column `'Quantity'`,\n  using the value in column `'Rating'` for breaking ties.\n\n      table = Table.from_rows [\"Name\",\"Quantity\",\"Rating\"] [[\"John\", 5, 3],[\"Paul\", 3, 5]]\n      sorted = table.sort ['Quantity', 'Rating']\n\n      ## Returns a Table\n         | Name | Quantity | Rating |\n         |------|----------|--------|\n         | Paul | 3        | 5      |\n         | John | 5        | 3      |\n\n\n> Example\n  Sorting `table` in ascending order by the value in column `'Quantity'`,\n  using the value in column `'Rating'` in descending order for breaking\n  ties.\n\n      table = Table.from_rows [\"Name\",\"Quantity\",\"Rating\"] [[\"John\", 5, 3],[\"Paul\", 3, 5]]\n      sorted = table.sort ['Quantity', ..Name 'Rating' ..Descending]\n\n      ## Returns a Table\n         | Name | Quantity | Rating |\n         |------|----------|--------|\n         | John | 5        | 3      |\n         | Paul | 3        | 5      |","errors": "- A new table with the rows sorted as specified.","remarks": "? Missing Values\n\n  Missing (`Nothing`) values are sorted as less than any other object."},
{"module": "Standard.Table.Table", "type": "Table", "name": "order_by", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table ! Incomparable_Values | No_Input_Columns_Selected | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Sort_Column) | Text", "checked": true, "default": "[self.columns.first.name]"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "order","description": "Deprecated - use `Table.sort` instead."},
{"module": "Standard.Table.Table", "type": "Table", "name": "distinct", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Missing_Input_Columns | No_Input_Columns_Selected | Floating_Point_Equality", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "self.column_names"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["deduplicate", "unique"],"group": "Standard.Base.Selections","icon": "preparation","suggested": 5,"description": "Returns the distinct set of rows within the specified columns from the\ninput table.\n\nWhen multiple rows have the same values within the specified columns, the\nfirst row of each such set is returned if possible, but in database\nbackends any row from each set may be returned (for example if the row\nordering is unspecified).\n\nFor the in-memory table, the unique rows will be in the order they\noccurred in the input (this is not guaranteed for database operations).\n\n\n\nReturns\n- A new table with the distinct rows.","arguments": "- columns: The columns of the table to use for distinguishing the rows.\n  Defaults to all columns.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default.","examples": "> Example\n  Select distinct by name\n\n      table = Table.from_rows [\"Name\",\"Location\"] [[\"John\", \"Massachusetts\"],[\"Paul\",\"London\"]]\n      distinct = table.distinct [\"Name\"]\n\n      ## Returns a Table\n         | Name |\n         |------|\n         | John |\n         | Paul |\n\n\n> Example\n  Select distinct by name and location\n\n      table = Table.from_rows [\"Name\",\"Location\"] [[\"John\", \"Massachusetts\"],[\"Paul\",\"London\"]]\n      distinct = table.distinct [\"Name\", \"Location\"]\n\n      ## Returns a Table\n         | Name | Location      |\n         |------|---------------|\n         | John | Massachusetts |\n         | Paul | London        |","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "duplicates", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Missing_Input_Columns | No_Input_Columns_Selected | Floating_Point_Equality", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "self.column_names"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "preparation","description": "Returns the set of rows which are duplicated within the specified columns from the\ninput table.\n\nWhen multiple rows have the same values within the specified columns all of those rows are \nreturned. Rows which are unique within the specified columns are removed.","arguments": "- columns: The columns of the table to use for distinguishing the rows.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "parse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "self.columns . filter (c-\u003e c.value_type.is_text) . map .name"}, "type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}, "format": {"lazy": false, "type": "Text | Data_Formatter", "checked": true, "default": "\u0027\u0027"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Parses columns within a `Table` into a more specific value type.\nBy default, it looks at all `Text` columns and attempts to deduce the\ntype (columns with other types are not affected).","arguments": "- columns: The columns to parse. If not specified, all text columns\n  will be parsed.\n- type: The type to parse the columns to. Defaults to `Auto` meaning that\n  the type will be inferred from the data.\n- format: The formatting settings to use when parsing the columns.\n  For `Date`, `Time_Of_Day` and `Date_Time`, a Java date time style\n  can be used. For `Boolean`, it should be two values that represent true\n  and false, separated by a `|`. Alternatively, a `Data_Formatter` can be\n  passed to provide complete customisation of the formatting. If\n  `Nothing` is provided, the default formatting settings of the backend\n  will be used. `Nothing` is currently the only setting accepted by the\n  Database backends.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default.","returns": "- A new table with the parsed columns replacing the original text ones.","examples": "> Example\n  Parse the last columns containing Yes/No values as booleans.\n\n      table = Table.from_rows [\"foo\",\"bar\",\"buzz\",\"bizz\"] [[\"25\", \"John\",\"abc\",\"Yes\"]]\n      output = table.parse columns=[-1] type=Value_Type.Boolean format=\"Yes|No\"\n\n      ## Returns a Table\n         | foo | bar  | buzz | bizz |\n         |-----|------|------|------|\n         | 25  | John | abc  | true |\n\n\n> Example\n  Parse dates in a column in the format `yyyy-MM-dd` (the default format).\n\n      table = Table.from_rows [\"Name\",\"Location\",\"Active\",\"Date\"] [[\"John\", \"Massachusetts\", True, \"2021-01-01\"]]\n      output = table.parse [\"Date\"] ..Date\n\n      ## Returns a Table\n         | Name | Location      | Active | Date       |\n         |------|---------------|--------|------------|\n         | John | Massachusetts | true   | 2021-01-01 |\n\n\n> Example\n  Parse dates in a column in the format `dd/MM/yyyy`.\n\n      table = Table.from_rows [\"Name\",\"Location\",\"Active\",\"Date\"] [[\"John\", \"Massachusetts\", True, \"21/12/2021\"]]\n      output = table.parse [\"Date\"] ..Date format=\"dd/MM/yyyy\"\n\n      ## Returns a Table\n         | Name | Location      | Active | Date       |\n         |------|---------------|--------|------------|\n         | John | Massachusetts | true   | 2021-12-21 |\n\n\n> Example\n  Parse all columns inferring their types, using `,` as the decimal point for numbers.\n\n      table = Table.from_rows [\"Name\",\"Location\",\"Active\",\"Value\"] [[\"John\", \"Massachusetts\", \"True\", \"1.234,56\"]]\n      output = table.parse [\"Value\"] ..Float\n\n      ## Returns a Table\n         | Name | Location      | Active | Value   |\n         |------|---------------|--------|---------|\n         | John | Massachusetts | True   | 1234.56 |","errors": "- A new table with the parsed columns replacing the original text ones.","remarks": "? Auto type detection\n\n  In the in-memory backend, if the `type` is `Auto, the process will\n  attempt to work out the type of the column.\n\n  The default parser only parse values where the process is reversible\n  (e.g., 0123 would not be converted to an integer as there is a leading\n  0). However, this can be overriden by providing a `Data_Formatter`.\n\n\n? In Database Support\n\n  In the Database backends, the default formatting settings of the\n  particular database are used. Custom formats are not currently\n  supported.\n\n  The target type must be specified explicitly, the `Auto` option is not\n  currently support there.\n\n\n? Default Number Parsing\n\n  If the type is set to a number, the default parser will attempt\n  to find the most appropriate format for the column. This is done by\n  finding the format that parses the longest set without an issue from\n  the first record.\n\n  It will try the following separators in British, German, French and\n  Swiss order. Thousand separators must be followed by groups of 3\n  numbers.\n\n  The following formats are supported:\n  - Sign (+/-) followed by Number (e.g. +1,234.56)\n  - Using brackets to indicate a negative number (e.g. (1,234.56))\n  - Currency symbols (if not in Auto mode) can be placed before or after\n    the sign and number.\n  - If using brackets, the currency symbol must be placed after the\n    opening bracket.\n\n  Scientific notation is only allowed on decimals and must be on a value\n  between -10 and 10. The notation is an `E` followed by an integer and\n  must be enabled on a `Data_Formatter`."},
{"module": "Standard.Table.Table", "type": "Table", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Date_Time_Format_Parse_Error | Illegal_Argument", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "format": {"lazy": false, "type": "Text | Date_Time_Formatter | Column", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Formats specified columns to text, optionally using a specified format.\nThe original columns are replaced by the formatted columns.","arguments": "- columns: The columns to format. The columns can have different types,\n  but all columns must be compatible with any provided `format` value.\n- format: The type-dependent format string to use to format the values.\n  If `format` is `\"\"` or `Nothing`, default value format is used.\n  In case of date/time columns, the format can also be a\n  `Date_Time_Formatter`. If `format` is a `Column`, it must be a text\n  column and each record is treat row by row.\n- locale: The locale in which the format should be interpreted.\n  If a `Date_Time_Formatter` is provided for `format`, then this locale\n  will override the locale in the formatter (unless it is `default`).\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default.","returns": "- A new table with the specified columns formatted.","examples": "> Example\n  Format Active and Date columns in the table using the default formatter.\n\n      table = Table.from_rows [\"Name\",\"Location\",\"Active\",\"Date\"] [[\"John\", \"Massachusetts\", True, Date.new 2020 1 1],[\"Paul\",\"London\", False, Date.new 2020 1 2]]\n      output = table.format columns=[\"Active\", \"Date\"]\n\n      ## Returns a Table\n         | Name | Location      | Active | Date       |\n         |------|---------------|--------|------------|\n         | John | Massachusetts | True   | 2020-01-01 |\n         | Paul | London        | False  | 2020-01-02 |\n\n\n> Example\n  Format the last boolean columns as 'Yes'/'No'.\n\n      table = Table.from_rows [\"Name\",\"Location\",\"Active\"] [[\"John\", \"Massachusetts\", True],[\"Paul\",\"London\", False]]\n      output = table.format columns=[-1] format=\"Yes|No\"\n\n      ## Returns a Table\n         | Name | Location      | Active |\n         |------|---------------|--------|\n         | John | Massachusetts | Yes    |\n         | Paul | London        | No     |\n\n\n> Example\n  Format dates in a column using the format `yyyyMMdd`.\n\n      table = Table.from_rows [\"Name\",\"Location\",\"Date\"] [[\"John\", \"Massachusetts\", Date.new 2020 1 1],[\"Paul\",\"London\", Date.new 2020 1 2]]\n      output = table.format columns=[\"Date\"] format=\"yyyyMMdd\"\n\n      ## Returns a Table\n         | Name | Location      | Date     |\n         |------|---------------|----------|\n         | John | Massachusetts | 20200101 |\n         | Paul | London        | 20200102 |","errors": "- A new table with the specified columns formatted.","remarks": "? Supported Types\n  - `Value_Type.Date`\n  - `Value_Type.Date_Time`\n  - `Value_Type.Time`\n  - `Value_Type.Integer`\n  - `Value_Type.Float`\n  - `Value_Type.Boolean`\n\n\n? `Value_Type.Date`, `Value_Type.Date_Time`, `Value_Type.Time` formats\n\n   See https://help.enso.org/docs/using-enso/custom-formats for details.\n\n\n? `Value_Type.Integer`, `Value_Type.Float` formats\n\n  Numeric format strings are specified by the Java DecimalFormat class.\n  See https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html\n  for a complete format specification.\n\n\n? `Value_Type.Boolean` format strings\n\n  Format strings for `Boolean` consist of two values that represent true\n  and false, separated by a `|`."},
{"module": "Standard.Table.Table", "type": "Table", "name": "cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Illegal_Argument | Inexact_Type_Coercion | Conversion_Failure", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "[0]"}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Cast the selected columns to a specific type.\n\nChange the value type of the selected columns with the specified type.","arguments": "- columns: The selection of columns to cast.\n- value_type: The `Value_Type` to cast the column to.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","returns": "- A new table with the specified columns cast to the desired type.","errors": "- A new table with the specified columns cast to the desired type.","remarks": "? Casting Rules\n\nIn the Database backend, this will boil down to a CAST operation.\n\nIn the in-memory backend, a conversion will be performed according to\nthe following rules:\n\n- Anything can be cast into the `Mixed` type.\n- Converting to a `Char` type, the elements of the column will be\n  converted to text. If it is fixed length, the texts will be trimmed or\n  padded on the right with the space character to match the desired\n  length.\n- Conversion between numeric types will replace values exceeding the\n  range of the target type with `Nothing`.\n- Converting decimal numbers into integers will truncate or round them,\n  depending on the backend. If more control is needed, use the various\n  rounding functions (such as `round` or `floor`).\n- Booleans may also be converted to numbers, with `True` being converted\n  to `1` and `False` to `0`. The reverse is not supported - use `iif`\n  instead.\n- A `Date_Time` may be converted into a `Date` or `Time` type - the\n  resulting value will be truncated to the desired type.\n- If a `Date` is to be converted to `Date_Time`, it will be set at\n  midnight of the default system timezone.\n- For a `Mixed` column being converted into a specific type, each row is\n  converted individually.\n\n\n? Inexact Target Type\n\n  If the backend does not support the requested target type, the closest\n  supported type is chosen and a `Inexact_Type_Coercion` problem is\n  reported.\n\n\n? Casting Text values\n\n  The `parse` method should be used to convert text values into other\n  types. Due to this, a Mixed column containing values `[2, \"3\"]` will\n  actually be converted into `[2, Nothing]` when casting to Integer type."},
{"module": "Standard.Table.Table", "type": "Table", "name": "auto_cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "self.column_names"}, "shrink_types": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["auto_value_types"],"group": "Standard.Base.Conversions","icon": "convert","description": "Automatically detect the appropriate data type and size for specified\ncolumns and change them, based on the contents.\n\nThis is most useful for Mixed types to narrow down the type if all values\ncould fit into one type.\n\n\n\nReturns\n- A new table with the specified columns converted to the most\n  appropriate type.","arguments": "- columns: The selection of columns to convert. Defaults to all columns.\n- shrink_types: If set `True`, smaller types will be chosen if possible,\n  according to the rules below. Defaults to `False`. For example, from a\n  64-bit integer to a 32-bit integer if all fit.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","remarks": "? Auto Type Selection Rules\n\n  - If a `Mixed` column can be assigned a single type, like `Char` or\n    `Integer`, that will be used.\n  - Text columns are not parsed. To do that, use the `parse` method.\n  - If a `Float` column contains only integers, it will be converted to\n    an Integer column.\n  - If a `Decimal` column contains only integers that could fit in a\n    64-bit integer storage, it will be converted to an Integer column.\n  - If `shrink_types` is `False` (default), no other transformations are\n    applied.\n  - However, if `shrink_types` is set to `True`, then:\n    - Integer columns will be assigned the smallest size that can fit all\n      values (down to 16-bit integers; converting to the `Byte` type has\n      to be done manually through `cast`).\n    - If all elements in a text column have the same length, the type\n      will become fixed length.\n    - Otherwise, if a text column is variable length, but all text\n      elements are no longer than 255 characters, the column will get a\n      max length of 255. Otherwise, the column size limit will stay\n      unchanged."},
{"module": "Standard.Table.Table", "type": "Table", "name": "auto_value_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "self.column_names"}, "shrink_types": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Deprecated: Use `auto_cast` instead.\n\nChange the value type of table columns to a more specific one, based on\ntheir contents.\n\nThis is most useful for `Mixed` type columns and will allow to narrow\ndown the type if all values in the column fit a more specific type.","arguments": "- columns: The selection of columns to convert.\n- shrink_types: If set `True`, smaller types will be chosen if possible,\n  according to the rules below. Defaults to `False`.\n- error_on_missing_columns: Specifies if a missing input column should\n  result in an error regardless of the `on_problems` settings. Defaults\n  to `True`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","remarks": "? Auto Type Selection Rules\n\n  - If a `Mixed` column can be assigned a single type, like `Char` or\n    `Integer`, that will be used.\n  - Text columns are not parsed. To do that, use the `parse` method.\n  - If a `Float` column contains only integers, it will be converted to\n    an Integer column.\n  - If a `Decimal` column contains only integers that could fit in a\n    64-bit integer storage, it will be converted to an Integer column.\n  - If `shrink_types` is `False` (default), no other transformations are\n    applied.\n  - However, if `shrink_types` is set to `True`, then:\n    - Integer columns will be assigned the smallest size that can fit all\n      values (down to 16-bit integers; converting to the `Byte` type has\n      to be done manually through `cast`).\n    - If all elements in a text column have the same length, the type\n      will become fixed length.\n    - Otherwise, if a text column is variable length, but all text\n      elements are no longer than 255 characters, the column will get a\n      max length of 255. Otherwise, the column size limit will stay\n      unchanged."},
{"module": "Standard.Table.Table", "type": "Table", "name": "split_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "delimiter": {"lazy": false, "type": "Text", "checked": true, "default": "\",\""}, "column_count": {"lazy": false, "type": "Columns_To_Add", "checked": true, "default": "..All_Columns"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["parse", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Creates a new table by splitting the chosen column of text, by the\nspecified delimiter into a set of new columns. The original column will\nbe removed from the table.\n\nThe new columns will be named with the name of the input column with a\nincrementing number after.\n\n\n\nReturns\n- Returns a Table with the newly split columns and the original removed.","arguments": "- column: The name or index of the column to split the text of.\n- delimiter: The term or terms used to split the text.\n- column_count: The number of columns to split to.\n  If `All_Columns` then columns will be added to fit all data.\n- on_problems: Specifies the behavior when a problem occurs, reporting\n  them as warnings by default.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "split_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "delimiter": {"lazy": false, "type": "Text", "checked": true, "default": "\",\""}},"aliases": ["parse", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Creates a new table by splitting the chosen column of text, by the\nspecified delimiter into a set of new rows.\n\nThe values of other columns are repeated for the new rows.\n\n\n\nReturns\n- Returns a Table with the newly generated rows.","arguments": "- column: The name or index of the column to split the text of.\n- delimiter: The term or terms used to split the text."},
{"module": "Standard.Table.Table", "type": "Table", "name": "tokenize_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "column_count": {"lazy": false, "type": "Columns_To_Add", "checked": true, "default": "..All_Columns"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["parse", "regex", "split"],"group": "Standard.Base.Conversions","icon": "split","description": "Creates a new Table with the chosen column of Text split by the `pattern`\nregular expression into a set of new columns. If the pattern contains\nmarked groups, the values are concatenated together; otherwise the whole\nmatch is returned.\n\nThe values of other columns are repeated for the new rows.\n\nFor details on Enso's Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).\n\n\n\nReturns\n- Returns a Table with the newly split columns.","arguments": "- column: The name or index of the column to tokenize the text of.\n- pattern: The pattern used to find within the text.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- column_count: The number of columns to split to.\n  If `Nothing` then columns will be added to fit all data.\n- on_problems: Specifies the behavior when a problem occurs.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "tokenize_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "at_least_one_row": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["parse", "regex", "split"],"group": "Standard.Base.Conversions","icon": "split","description": "Creates a new Table with the chosen column of Text split by the `pattern`\nregular expression into a set of new rows. If the pattern contains marked\ngroups, the values are concatenated together; otherwise the whole match\nis returned.\n\nThe values of other columns are repeated for the new rows.\n\nFor details on Enso's Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).\n\n\n\nReturns\n- Returns a Table with the newly split rows.","arguments": "- column: The name or index of the column to tokenize the text of.\n- pattern: The pattern used to find within the text.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- at_least_one_row: If True, a tokenization that returns no values will still\n  produce at least one row, with `Nothing` for the output column values.\n  Equivalent to converting a tokenization output of [] to [Nothing]."},
{"module": "Standard.Table.Table", "type": "Table", "name": "parse_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text | Regex", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "parse_values": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": ["regex", "split", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Converts a Text column into new columns using a regular expression\npattern.\n\nEach match becomes a row in the table.\nThe values of other columns are repeated for the new rows.\n\nIf there are no marked groups, a single column with whole content of\nmatch is added. Otherwise, each group becomes a column (with group name\nif named in Regex).","arguments": "- column: The column to split the text of.\n- pattern: The pattern used to search within the text.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- parse_values: Parse any values using the default value parser.","remarks": "? Column Names\n\nIf no marked group, the new column will have the same name as the input.\nIf the marked groups are named, the names will be used otherwise the column\nwill be named `<Input Column> <N>` where `N` is the number of the marked group.\nIf the new name is already in use it will be renamed following the normal\nsuffixing strategy."},
{"module": "Standard.Table.Table", "type": "Table", "name": "expand_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Type_Error | No_Such_Column | Index_Out_Of_Bounds", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "fields": {"lazy": false, "type": "(Vector Text) | Nothing", "checked": true, "default": "Nothing"}, "prefix": {"lazy": false, "type": "Prefix_Name", "checked": true, "default": "..Column_Name"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "split","description": "Expand a column of objects to a new set of columns.","arguments": "- column: The column to expand.\n- fields: The set fields to expand. If `Nothing` then all fields are added.\n- prefix: Prefix to add to the column names. By default the column name is used."},
{"module": "Standard.Table.Table", "type": "Table", "name": "expand_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Type_Error | No_Such_Column | Index_Out_Of_Bounds", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "at_least_one_row": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "split","description": "Expand aggregate values in a column to separate rows.\n\nFor each value in the specified column, if it is an aggregate (`Vector`,\n`Range`, etc.), expand it to multiple rows, duplicating the values in the\nother columns.\n\n\n\nThe following values are considered sequence-like:\n- `Array`\n- `Vector`\n- `List`\n- `Range`\n- `Date_Range`\n- `Pair`\n- `Table` (interpreted as a sequence of `Row`s)\n- `Column`\n\nSome aggregates, like dictionaries will expand into two columns - one for\nkey and one for the value.\n\nIf a value is not an aggregate, or has no defined way of being expanded,\nit is left as a single row containing that value unchanged.\n\nIn in-memory tables, it is permitted to mix values of different types.","arguments": "- column: The column to expand.\n- at_least_one_row: for an empty aggregate value, if `at_least_one_row` is\n  true, a single row is output with `Nothing` for the aggregates column; if\n  false, no row is output at all.","examples": "> Example\n  Expand a column of integer `Vectors` to a column of `Integer`\n\n  table = Table.new [[\"aaa\", [1, 2]], [\"bbb\", [[30, 31], [40, 41]]]]\n  # => Table.new [[\"aaa\", [1, 1, 2, 2]], [\"bbb\", [30, 31, 40, 41]]]"},
{"module": "Standard.Table.Table", "type": "Table", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Such_Column | Index_Out_Of_Bounds | Invalid_Value_Type", "arguments": {"column": {"lazy": false, "type": "Column | Expression | Text | Integer", "checked": true, "default": "Missing_Argument.throw \"column\""}, "filter": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true, "default": "Filter_Condition.Equal True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["filter rows", "regex", "where"],"group": "Standard.Base.Selections","icon": "preparation","suggested": 2,"description": "Filter is used to select data from a table using a condition. The rows\nthat meet the condition will remain after the filter. Filters can compare\ncolumns, compare against static values, or compare against an argument\nfrom another component.\n\n\n\n  - `action`:\n    This can be set to `Keep`, which keeps all rows which meet the\n    condition. It can also be set to `Remove`, which will instead only\n    keep the rows that do not meet the condition.\n    For example, `[people] Is Null` would keep all the rows where the\n    column `people` had a Null value. Changing this to `Remove` would\n    remove all of the rows where `people` had a Null value, leaving only\n    the records that are not null.\n\n- `on_problems`: specified how to report any issues encountered during\n   the operation.","arguments": "- `column`: The column our condition is tested against.\n  This can be a column name, the column's index or an expression.\n- `filter`: The filter to apply to the column. It can either be an\n  instance of `Filter_Condition` or a predicate taking a cell value and\n  returning a boolean value indicating whether the corresponding row\n  should be kept or not.","returns": "- Returns a Table of all of the rows that met the specified condition.","examples": "> Example\n  Filter where an Age is Greater than 30.\n\n      table1 = Table.new [['Name', ['John', 'Paul', 'Ringo']], ['Age', [25, 35, 40]]]\n      filter1 = table1.filter 'Age' (..Greater 30)\n\n      ## Returns a Table\n         | Name  | Age |\n         |-------|-----|\n         | Paul  | 35  |\n         | Ringo | 40  |\n\n\n> Example\n  Filter where an Age is Between 30 and 39.\n\n      table1 = Table.new [['Name', ['John', 'Paul', 'Ringo']], ['Age', [25, 35, 40]]]\n      filter1 = table1.filter 'Age' (..Between 30 39)\n\n      ## Returns a Table\n         | Name | Age |\n         |------|-----|\n         | Paul | 35  |\n\n\n> Example\n  Select rows where more than 50% of the stock is sold.\n\n      table2 = Table.new [['Name', ['John', 'Paul']], ['sold_stock', [20, 30]], ['total_stock', [50, 50]]]\n      filter3= table2.filter 'sold_stock' (..Greater (expr '[total_stock]/2'))\n\n      ## Returns a Table\n         | Name | sold_stock | total_stock |\n         |------|------------|-------------|\n         | Paul | 30         | 50          |\n\n\n> Example\n  Select people celebrating a jubilee.\n\n      table3 = Table.new [['Name', ['John', 'Paul', 'Ringo']], ['Age', [25, 35, 40]]]\n      filter4 = table3.filter (expr '[Age] % 10 = 0') ..Is_True\n\n      ## Returns a Table\n         | Name  | Age |\n         |-------|-----|\n         | Ringo | 40  |","errors": "- Returns a Table of all of the rows that met the specified condition.","remarks": "? Nothing Equality\n\nWhen comparing `Nothing` values, filter follows the ANSI SQL conventions\nthat `Nothing ==  Nothing` results in a `Nothing`. This includes both\n`Equal` and `Is_In` conditions. If you want to filter out `Nothing` use\n`Is_Not_Nothing` condition (or `Is_Nothing` to filter out non-`Nothing`)."},
{"module": "Standard.Table.Table", "type": "Table", "name": "filter_by_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table ! No_Such_Column | Invalid_Value_Type | Expression_Error", "arguments": {"expression": {"lazy": false, "type": "Text", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["filter rows"],"group": "Standard.Base.Selections","icon": "preparation","description": "Selects only the rows of this table that correspond to `True` values of\n`filter`.","arguments": "- expression: The expression to evaluate to filter the rows.\n- on_problems: Specifies how to handle non-fatal problems, attaching a\n  warning by default.","examples": "> Example\n  Select people celebrating a jubilee.\n\n      people.filter_by_expression \"[age] % 10 == 0\"","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Standard.Base.Selections","icon": "select_row","description": "Creates a new Table with the specified range of rows from the input\nTable.","arguments": "- range: The selection of rows from the table to return.","returns": "- Returns a Table with the selected rows.","examples": "> Example\n  Take first 10 rows of the table.\n\n      table.take (..First 10)\n\n\n> Example\n  Take rows from the top of the table as long as their values sum to 10.\n\n      table.take (While row-> row.to_vector.compute Statistic.Sum == 10)","remarks": "? Supported Range Types\n\n  Database backends support all range types except `While` and `Sample`\n  In-memory tables support all range types.\n\n\n? While\n\n  For the purposes of the `Index_Sub_Range.While` predicate a single\n  \"element\" of the table is represented by the `Row` type."},
{"module": "Standard.Table.Table", "type": "Table", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Standard.Base.Selections","icon": "select_row","description": "Creates a new Table from the input with the specified range of rows\nremoved.\n\n\n\nFor the purposes of the `Index_Sub_Range.While` predicate a single\n\"element\" of the table is represented by the `Row` type.","arguments": "- range: The selection of rows from the table to remove.","examples": "> Example\n  Drop first 10 rows of the table.\n\n      table.drop (..First 10)\n\n\n> Example\n  Drop rows from the top of the table as long as their values sum to 10.\n\n      table.drop (While row-> row.to_vector.compute Statistic.Sum == 10)","remarks": "? Supported Range Types\n\n  Database backends support all range types except `While` and `Sample`\n\n  In-memory tables support all range types."},
{"module": "Standard.Table.Table", "type": "Table", "name": "remove_all_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Filter out all rows."},
{"module": "Standard.Table.Table", "type": "Table", "name": "add_row_number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Row\""}, "from": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "group_by": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add index column", "rank", "record id"],"group": "Standard.Base.Values","icon": "column_add","suggested": 6,"description": "Adds a new column to the table enumerating the rows.","arguments": "- name: The name of the new column. Defaults to \"Row\".\n- from: The starting value for the enumeration. Defaults to 0.\n- step: The amount to increment the enumeration by. Defaults to 1.\n- group_by: Specifies the columns to group by. The row numbers are\n  counted separately for each group. By default, all rows are treated as\n  a single group.\n- order_by: Specifies the columns to order by. Defaults to the order of\n  the rows in the table. The row numbers are assigned according to the\n  specified ordering.","errors": "","remarks": "? Ordering of rows\n\n  Note that the ordering of rows from the original table is preserved in\n  all cases. The grouping and ordering settings affect how the row\n  numbers are assigned to each row, but the order of the rows itself is\n  not changed by this operation."},
{"module": "Standard.Table.Table", "type": "Table", "name": "add_group_number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"grouping_method": {"lazy": false, "type": "Grouping_Method", "checked": true, "default": "Missing_Argument.throw \"grouping_method\""}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Group\""}, "from": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add group column", "bucket", "group id", "tile"],"group": "Standard.Base.Values","icon": "column_add","description": "Adds a new column to the table enumerating groups of rows, assigning each\nrow to one group number. All rows in each group will get the same number.","arguments": "- grouping_method: Specifies how to group the rows; see \"Grouping\n  Methods\", below.\n- name: The name of the new column. Defaults to \"Group\".\n- from: The starting value for the enumeration. Defaults to 0.\n- step: The amount to increment the enumeration by. Defaults to 1.","examples": "> Example\n  Assign group numbers based on unique values of the first two columns.\n\n     ## table:\n         x | y | z\n        ---+---+---\n         1 | 0 | 2\n         0 | 1 | 0\n         1 | 2 | 0\n         0 | 1 | 1\n         1 | 0 | 1\n         1 | 2 | 1\n     table = table_builder [['x', [1, 0, 1, 0, 1, 1]], ['y', [0, 1, 2, 1, 0, 2]], ['z' [2, 0, 0, 1, 1, 1]]]\n     table2 = table.add_group_number (..Unique group_by=['x', 'y']) \"g\"\n     table2.at 'g' . to_vector\n     # => [0, 1, 2, 1, 0, 2]\n     ## table2:\n         x | y | z | g\n        ---+---+---+---\n         1 | 0 | 2 | 0\n         0 | 1 | 0 | 1\n         1 | 2 | 0 | 2\n         0 | 1 | 1 | 1\n         1 | 0 | 1 | 0\n         1 | 2 | 1 | 2\n\n\n> Example\n  Divide rows into three groups.\n     ## table:\n         x | y\n        ---+---\n         1 | 5\n         2 | 4\n         3 | 3\n         4 | 2\n         5 | 1\n     table = table_builder [['x', [1, 2, 3, 4, 5]], ['y', [5, 4, 3, 2, 1]]]\n     table2 = tabble.add_group_number (..Equal_Count 3) \"g\"\n     table2.at 'g' . to_vector\n     # => [0, 0, 1, 1, 2]\n     ## table2:\n         x | y | g\n        ---+---+---\n         1 | 5 | 0\n         2 | 4 | 0\n         3 | 3 | 1\n         4 | 2 | 1\n         5 | 1 | 2","errors": "","remarks": "? Grouping Methods\n\n  The following grouping methods are supported:\n  - `Unique`: Group rows by the specified columns.\n  - Equal_Count: Create the specified number of groups with the same\n    number of rows in each group (except possibly the last one).\n\n\n? Ordering of rows\n\n  In the in-memory database, the ordering of rows from the original table\n  is preserved in all cases. The grouping and ordering settings can\n  affect how the group numbers are assigned, depending on the grouping\n  method.  The order of the rows itself is not changed by this operation.\n\n  In the database backends, the ordering of rows is backend-dependent."},
{"module": "Standard.Table.Table", "type": "Table", "name": "set", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Existing_Column | Missing_Column | No_Such_Column | Expression_Error", "arguments": {"value": {"lazy": false, "type": "Text | Expression | Column | Constant_Column | Simple_Expression", "checked": true}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add_Or_Update"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add column", "expression", "formula", "new column", "update column"],"group": "Standard.Base.Values","icon": "column_add","suggested": 3,"description": "Sets the column value at the given name.","arguments": "- value: The value, expression or column to create column.\n- as: Optional new name for the column.\n- set_mode: Specifies the expected behaviour in regards to existing\n  column with the same name.\n- on_problems: Specifies how to handle problems with expression\n  evaluation.","examples": "> Example\n  Create a table where the values of the total stock in the inventory is\n  doubled.\n\n      import Standard.Examples\n\n      example_set =\n          table = Examples.inventory_table\n          double_inventory = table.at \"total_stock\" * 2\n          table.set double_inventory as=\"total_stock\"\n          table.set (expr \"2 * [total_stock]\") as=\"total_stock_expr\"","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "evaluate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Text | Expression", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Given an expression, create a derived column where each value is the\nresult of evaluating the expression for the row.","arguments": "- expression: The expression to evaluate.\n- on_problems: Specifies how to handle non-fatal problems, attaching a\n  warning by default.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "make_table_from_dictionary", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dict": {"lazy": false}, "key_column_name": {"lazy": false}, "value_column_name": {"lazy": false}},"aliases": [],"description": "A helper that creates a two-column table from a Dictionary.\n\nThe keys of the `Dictionary` become the first column, with name\n`key_column_name`, and the values become the second column, with name\n`value_column_name`.\n\nFor the in-memory database, the `Dictionary` can be empty. For the\ndatabase backends, it must not be empty.","arguments": "- dict: The `Dictionary` to create the table from.\n- key_column_name: The name to use for the first column.\n- value_column_name: The name to use for the second column."},
{"module": "Standard.Table.Table", "type": "Table", "name": "make_table_from_vectors", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_vectors": {"lazy": false}, "column_names": {"lazy": false}},"aliases": [],"description": "A helper that creates a literal table from `Vector`s.\n\nFor the in-memory database, the columns can be empty. For the database\nbackends, they must not be empty.","arguments": "- column_vectors: A `Vector` of `Vector`s; each inner `Vector` becomes a\n  column of the table.\n- column_names: The names of the columns of the new table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "make_constant_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Create a constant column from a value."},
{"module": "Standard.Table.Table", "type": "Table", "name": "make_temp_column_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a unique temporary column name."},
{"module": "Standard.Table.Table", "type": "Table", "name": "columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": [],"icon": "convert","description": "Returns the vector of columns contained in this table.","examples": "> Example\n  Get a vector containing the columns in the table.\n\n      import Standard.Examples\n\n      example_columns = Examples.inventory_table.columns"},
{"module": "Standard.Table.Table", "type": "Table", "name": "column_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the vector of column names contained in this table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Row", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": [],"icon": "select_row","description": "Returns a vector of rows contained in this table.\n\nIn the database backend, it first materializes the table to in-memory.","arguments": "- max_rows: specifies the maximum number of rows to read."},
{"module": "Standard.Table.Table", "type": "Table", "name": "first_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns the first row of the table.\n\nIn the database backend, it first materializes the table to in-memory."},
{"module": "Standard.Table.Table", "type": "Table", "name": "last_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns the last row of the table.\n\nIn the database backend, it first materializes the table to in-memory."},
{"module": "Standard.Table.Table", "type": "Table", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"right": {"lazy": false, "type": "Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "join_kind": {"lazy": false, "type": "Join_Kind", "checked": true, "default": "..Left_Outer"}, "on": {"lazy": false, "type": "Vector (Join_Condition | Text) | Text | Join_Condition", "checked": true, "default": "[Join_Condition.Equals self.column_names.first]"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["hlookup", "lookup", "merge", "vlookup", "xlookup"],"group": "Standard.Base.Calculations","icon": "join","suggested": 4,"description": "Joins two tables according to the specified join conditions.","arguments": "- right: The table to join with.\n- join_kind: The `Join_Kind` for the joining the two tables. It defaults\n  to `Left_Outer`.\n- on: A set of conditions on which to correlate rows from the two tables.\n  If multiple conditions are supplied, rows are correlated only if all\n  are true. By default, the join is performed on the first column of the\n  left table correlated with a column in the right table with the same\n  name.\n- right_prefix: The prefix added to right table column names in case of\n  name conflict.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","returns": "- Returns a new table with the rows from the two tables joined according\n  to the specified conditions.","examples": "> Example\n  Inner Join on Name from a table with Name and Location to a table with\n  Name and Age.\n\n      left_table = Table.from_rows [\"Name\",\"Location\"] [[\"John\", \"Massachusetts\"],[\"Paul\",\"London\"]]\n      right_table = Table.from_rows [\"Name\",\"Age\"] [[\"John\", 20],[\"Paul\",30]]\n      join_table = left_table.join right_table ..Inner [..Equals Name]\n\n      ## Returns a Table\n         | Name | Location      | Right Name | Age |\n         |------|---------------|------------|-----|\n         | John | Massachusetts | John       | 20  |\n         | Paul | London        | Paul       | 30  |\n\n\n> Example\n  Left Outer Join on Name from a table with Name and Location to a table\n  with Name and Age.\n\n      left_table = Table.from_rows [\"Name\",\"Location\"] [[\"John\", \"Massachusetts\"],[\"Paul\",\"London\"],[\"Ringo\",\"Paris\"]]\n      right_table = Table.from_rows [\"Name\",\"Age\"] [[\"John\", 20],[\"Paul\",30]]\n      join_table = left_table.join right_table ..Left_Outer [..Equals Name]\n\n      ## Returns a Table\n         | Name  | Location      | Right Name | Age       |\n         |-------|---------------|------------|-----------|\n         | John  | Massachusetts | John       | 20        |\n         | Paul  | London        | Paul       | 30        |\n         | Ringo | Paris         | _Nothing_  | _Nothing_ |","errors": "- Returns a new table with the rows from the two tables joined according\n  to the specified conditions.","remarks": "? Join Kind\n\n  Enso supports the following join kinds:\n\n   - `..Inner` - Only the records that matched from the left and right\n     tables.\n   - `..Left_Outer` - all records from the left table, and the matched\n     values from the right.\n   - `..Right_Outer` - all records from the right table, and the matched\n     values from the left.\n   - `..Full` - all records, matched or unmatched.\n   - `..Left_Exclusive` - only the records that did not match from the\n     left table.\n   - `..Right_Exclusive` - only the records that did not match from the\n     right table.\n\n  It is possible to do a cartesian join (where every row from the left\n  table is paired with every row from the right table) as well, by using\n  the `cross_join` function.\n\n\n? Column Renaming\n\n  If columns from the two tables have colliding names, a prefix (by\n  default `Right_`) is added to the name of the column from the right\n  table. The left column remains unchanged. It is possible that the new\n  name will be in use, in this case it will be resolved using the normal\n  renaming strategy - adding subsequent `_1`, `_2` etc.\n\n\n? Nothing Equality\n\n  When comparing `Nothing` values, filter follows the ANSI SQL\n  conventions that `Nothing ==  Nothing` results in a `Nothing`. This\n  means that in a join this `Nothing` values will not match each other.\n\n\n? Result Ordering\n\n  The ordering of rows in the resulting table is not specified.\n\n\n? Joining on equality of columns with the same name\n\n  When performing an Inner join on two columns with the same name and an\n  equality condition, only one copy of column will be included in the\n  output (as these two columns would have the exact same content, so they\n  would be redundant).\n\n\n? Same-name column join shorthand\n\n  As a shorthand, providing a column name or a list of column names\n  allows to join the two tables on equality of corresponding columns with\n  the same name.\n\n  So `table.join other on=[\"A\", \"B\"]` is a shorthand for:\n\n      `table.join other on=[..Equals \"A\" \"A\", ..Equals \"B\" \"B\"]`"},
{"module": "Standard.Table.Table", "type": "Table", "name": "cross_join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"right": {"lazy": false, "type": "Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "right_row_limit": {"lazy": false, "type": "Row_Limit", "checked": true, "default": "..Limit 100"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["append", "cartesian"],"group": "Standard.Base.Calculations","icon": "join","description": "Joins tables by pairing every row of the left table with every row of the\nright table.\n\n\n\n  - If the `right` table has more rows than the `right_row_limit` allows,\n    a `Cross_Join_Row_Limit_Exceeded` is reported. In warning/ignore\n    mode, the join is still executed.","arguments": "- right: The table to join with.\n- right_row_limit: If the number of rows in the right table exceeds this,\n  then a `Cross_Join_Row_Limit_Exceeded` problem is raised. The check\n  exists to avoid exploding the size of the table by accident. This check\n  can be disabled by setting this parameter to `All_Rows`.\n- right_prefix: The prefix added to right table column names in case of\n  name conflict. See \"Column Renaming\" below for more information.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","remarks": "? Column Renaming\n\n  If columns from the two tables have colliding names, a prefix (by\n  default `Right_`) is added to the name of the column from the right\n  table. The left column remains unchanged. It is possible that the new\n  name will be in use, in this case it will be resolved using the normal\n  renaming strategy - adding subsequent `_1`, `_2` etc.\n\n\n? Result Ordering\n\n  Rows in the result are first ordered by the order of the corresponding\n  rows from the left table and then the order of rows from the right\n  table. This applies only if the order of the rows was specified (for\n  example, by sorting the table; in-memory tables will keep the memory\n  layout order while for database tables the order may be unspecified)."},
{"module": "Standard.Table.Table", "type": "Table", "name": "merge", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Missing_Input_Columns | Non_Unique_Key | Unmatched_Rows_In_Lookup", "arguments": {"lookup_table": {"lazy": false, "type": "Table", "checked": true, "default": "Missing_Argument.throw \"lookup_table\""}, "key_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "add_new_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "allow_unmatched_rows": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["hlookup", "join", "lookup", "vlookup", "xlookup"],"group": "Standard.Base.Calculations","icon": "join","description": "Merges this table with a lookup table\nNew values are looked up in the lookup table based on the `key_columns`.\nColumns that exist in the lookup table where a match was found are\nreplaced by values from the lookup table. Columns not found are left\nunchanged.\nThis operation is similar to `Table.update_rows`, but just returns a new\n`Table` instance, instead of updating the table in-place (which is only\npossible for Database tables).","arguments": "- lookup_table: The table to use for looking up values.\n- key_columns: Specifies the columns to use for correlating rows between\n  the two tables. Must identify values uniquely within `lookup_table`.\n- add_new_columns: Specifies if new columns from the lookup table should\n  be added to the result. If `False`, an `Unexpected_Extra_Columns`\n  problem is reported.\n- allow_unmatched_rows: Specifies how to handle missing rows in the lookup.\n  If `False` (the default), an `Unmatched_Rows_In_Lookup` error is raised.\n  If `True`, the unmatched rows are left unchanged. Any new columns will\n  be filled with `Nothing`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","errors": "","remarks": "? Result Ordering\n\n  When operating in-memory, this operation preserves the order of rows\n  from this table (unlike `join`).\n  In the Database backend, there are no guarantees related to ordering of\n  results."},
{"module": "Standard.Table.Table", "type": "Table", "name": "replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Missing_Input_Columns | Non_Unique_Key | Unmatched_Rows_In_Lookup", "arguments": {"lookup_table": {"lazy": false, "type": "Table | Dictionary", "checked": true}, "columns": {"lazy": false, "type": "Text | Integer | Regex | By_Type | Vector (Text | Integer | Regex | By_Type)", "checked": true}, "from_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "to_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "allow_unmatched_rows": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["find replace"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces values in the columns using `lookup_table` to specify a mapping\nfrom old to new values.","arguments": "- lookup_table: the table to use as a mapping from old to new values. A\n  `Map` can also be used here (in which case passing `from_column` or\n  `to_column` is disallowed and will throw an `Illegal_Argument` error.\n- columns: the column or columns within `self` to perform the replace on.\n- from_column: the column within `lookup_table` to match against\n  `columns` in `self`.\n- to_column: the column within `lookup_table` to get new values from.\n- allow_unmatched_rows: Specifies how to handle missing rows in the lookup.\n  If `False` (the default), an `Unmatched_Rows_In_Lookup` error is raised.\n  If `True`, the unmatched rows are left unchanged. Any new columns will\n  be filled with `Nothing`.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Replace values in column 'x' using a lookup table.\n\n      table = Table.new [['x', [1, 2, 3, 4]], ['y', ['a', 'b', 'c', 'd']], ['z', ['e', 'f', 'g', 'h']]]\n      #      | x | y | z\n      #   ---+---+---+---\n      #    0 | 1 | a | e\n      #    1 | 2 | b | f\n      #    2 | 3 | c | g\n      #    3 | 4 | d | h\n\n      lookup_table = Table.new [['x', [1, 2, 3, 4]], ['new_x', [10, 20, 30, 40]]]\n      #      | old_x | new_x\n      #   ---+-------+-------\n      #    0 | 1     | 10\n      #    1 | 2     | 20\n      #    2 | 3     | 30\n      #    3 | 4     | 40\n\n      result = table.replace lookup_table 'x'\n      #      | x  | y | z\n      #   ---+----+---+---\n      #    0 | 10 | a | e\n      #    1 | 20 | b | f\n      #    2 | 30 | c | g\n      #    3 | 40 | d | h","errors": "","remarks": "? Result Ordering\n\n  When operating in-memory, this operation preserves the order of rows\n  from this table (unlike `join`).\n\n  In the Database backend, there are no guarantees related to ordering of\n  results."},
{"module": "Standard.Table.Table", "type": "Table", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"right": {"lazy": false, "type": "Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "keep_unmatched": {"lazy": false, "type": "Boolean | Report_Unmatched", "checked": true, "default": "Report_Unmatched"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["join by row position"],"group": "Standard.Base.Calculations","icon": "join2-1","description": "Joins two tables by zipping rows from both tables table together - the\nfirst row of the left table is correlated with the first one of the right\none etc.\n\n\n\n  - If the tables have different number of rows and `keep_unmatched` is\n    set to `Report_Unmatched`, the join will report `Row_Count_Mismatch`.","arguments": "- right: The table to join with.\n- keep_unmatched: If set to `True`, the result will include as many rows\n  as the larger of the two tables - the last rows of the larger table\n  will have nulls for columns of the smaller one. If set to `False`, the\n  result will have as many rows as the smaller of the two tables - the\n  additional rows of the larger table will be discarded. The default\n  value is `Report_Unmatched` which means that the user expects that two\n  tables should have the same amount of rows; if they do not, the\n  behaviour is the same as if it was set to `True` - i.e. the unmatched\n  rows are kept with `Nothing` values for the other table, but a\n  `Row_Count_Mismatch` problem is also reported.\n- right_prefix: The prefix added to right table column names in case of\n  name conflict. See \"Column Renaming\" below for more information.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","remarks": "? Column Renaming\n\n  If columns from the two tables have colliding names, a prefix (by\n  default `Right `) is added to the name of the column from the right\n  table. The left column remains unchanged. It is possible that the new\n  name will be in use, in this case it will be resolved using the normal\n  renaming strategy - adding subsequent ` 1`, ` 2` etc.\n\n\n? Row Ordering For In-Memory Tables\n\n  This operation requires a well-defined order of rows in the input\n  tables. In-memory tables rely on the ordering stemming directly from\n  their layout in memory. Database tables may not impose a deterministic\n  ordering. If the table defines a primary key, it is used to by default\n  to ensure deterministic ordering. That can be overridden by specifying\n  a different ordering using `Table.sort`. If no primary key was\n  defined nor any ordering was specified explicitly by the user, the\n  order of columns is undefined and the operation will fail, reporting a\n  `Undefined_Column_Order` problem and returning an empty table.\n\n\n? Row Ordering For Database Tables\n\n  The ordering of rows in the resulting table is not specified."},
{"module": "Standard.Table.Table", "type": "Table", "name": "union", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"tables": {"lazy": false, "type": "Table | Vector", "checked": true}, "columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true, "default": "..In_Any_Warn_On_Missing"}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["append", "concat", "join"],"group": "Standard.Base.Calculations","icon": "union","description": "Appends records from other table(s) to this table.","arguments": "- tables: A single table or a vector of tables to append to this one. The\n  tables are concatenated in the order they are specified, with `self`\n  being the first one.\n- columns_to_keep: Specifies which columns to keep. Defaults to keeping\n  columns that are present in any of the tables, reporting a warning for\n  columns that are not present in all tables and adding `Nothing` values\n  for them.\n- match_columns: Specifies how to match the columns.\n  - If `Match_Columns.By_Name` - the columns are matched by name across\n    all provided tables.\n  - If `Match_Columns.By_Position` - the columns are mapped by position.\n    The names of each column come from the first table in which the given\n    column appears in.\n    The `List` option is not applicable when mapping columns by position.\n    Column names are taken from the first table if `In_All` and from the\n    first table that has the maximum number of columns if `In_Any`\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","errors": "","remarks": "? Unifying Column Types\n\n  Numeric columns are unified by finding the smallest type that can fit\n  all of the columns. The biggest integer type will be chosen and if\n  integers and decimals are mixed, the decimal type will be chosen.\n  If boolean columns are mixed with numeric columns, they will be coerced\n  to the numeric type (and converted to 0 and 1).\n\n  Text types will are also unified by finding the smallest type that can\n  fit all the values. If constant-length texts of different lengths are\n  mixed, they will be coerced to a varying-length type.\n\n  If date and date-time columns are unified, this yields a date-time\n  column. In-memory, the date is promoted by adding a time of 00:00 and\n  the system time-zone. In other backends that behaviour may differ.\n\n  If one of the matched columns has `Mixed` type, that type will be used\n  regardless of types of other columns. Note that the `Mixed` type may\n  not be supported by most Database backends.\n\n  Finally, if no common type is found using the rules above, everything\n  is converted to text.\n\n\n? Ordering of Columns in the result\n\n  When matching columns by name, it is possible that the ordering of\n  columns may vary between input tables. The ordering is determined as\n  following: columns that are kept from the first table are in the order\n  they appear in that table. If there are columns that do not appear in\n  the first table, they are appended to the end of the resulting table in\n  the order they appear in the input."},
{"module": "Standard.Table.Table", "type": "Table", "name": "filter_blank_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..Any_Cell"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["drop_empty_rows", "drop_missing_rows", "dropna", "filter_empty_rows", "remove_blank_rows", "remove_empty_rows", "remove_missing_rows"],"group": "Standard.Base.Selections","icon": "preparation","description": "Remove rows which are all blank or containing blank values.","arguments": "- when: If Blank_Selector.Any_Cell, then remove any row containing\n any blank values.\n  If Blank_Selector.All_Cells, then only remove rows with all blank values.\n- treat_nans_as_blank: If `True`, then `Number.nan` is considered as blank.","remarks": "? Blank values\n  Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Table.Table", "type": "Table", "name": "row_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["count"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the number of rows in this table.","examples": "> Example\n  Count the number of rows in the table.\n\n      import Standard.Examples\n\n      example_row_count = Examples.inventory_table.row_count"},
{"module": "Standard.Table.Table", "type": "Table", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": [],"icon": "data_input","description": "Returns a materialized dataframe containing rows of this table.\n\nIn the in-memory backend, this returns the same table, truncated to\n`max_rows`. This is only kept for API compatibility between database and\nin-memory tables. The `read` operation can be used to ensure that the\ntable is now in-memory, regardless of its origin.","arguments": "- max_rows: specifies the maximum number of rows to read."},
{"module": "Standard.Table.Table", "type": "Table", "name": "column_info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": ["column types", "field info", "metadata"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a Table describing this table's contents.\n\nThe table lists all columns, counts of non-null items and value types of\neach column.","examples": "> Example\n  Get information about a table.\n\n      import Standard.Examples\n\n      example_info = Examples.inventory_table.column_info"},
{"module": "Standard.Table.Table", "type": "Table", "name": "transpose", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Missing_Input_Columns | Duplicate_Output_Column_Names", "arguments": {"key_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "attribute_column_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Name\""}, "value_column_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Value\""}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["pivot", "unpivot"],"group": "Standard.Base.Calculations","icon": "map_row","suggested": 10,"description": "Returns a new table with a chosen subset of columns left unchanged and\nthe other columns pivoted to rows with a single name field and a single\nvalue field.","arguments": "- key_columns: Set of fields to remain as columns. These values will be\n  repeated for each data field that is pivoted.\n- attribute_column_name: The name of the field that will contain the\n  names of the pivoted fields. If this name is already in use, it will be\n  renamed with a numeric suffix.\n- value_column_name: The name of the field that will contain the values\n  of the pivoted fields. If this name is already in use, it will be\n  renamed with a numeric suffix.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Transpose Operation\n\n  Input Table `table`:\n\n     Id | Name    | Country\n    ----|---------|---------\n     A  | Example | France\n     B  | Another | Germany\n\n  Result `table.transpose ['Id'] 'Attribute' 'Value'`:\n\n     Id | Attribute | Value\n    ----|-----------|---------\n     A  | Name      | Example\n     A  | Country   | France\n     B  | Name      | Another\n     B  | Country   | Germany","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "cross_tab", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Missing_Input_Columns | Invalid_Aggregate_Column | Floating_Point_Equality | Invalid_Aggregation | Unquoted_Delimiter | Additional_Warnings | Invalid_Column_Names", "arguments": {"group_by": {"lazy": false, "type": "Vector (Integer | Text | Regex | Aggregate_Column) | Text | Integer | Regex", "checked": true, "default": "[]"}, "names": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "self.column_names.first"}, "values": {"lazy": false, "type": "Aggregate_Column | Vector Aggregate_Column", "checked": true, "default": "..Count"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["pivot", "unpivot"],"group": "Standard.Base.Calculations","icon": "column_add","suggested": 11,"description": "Returns a new table using a chosen field as the column header and then\naggregating the rows within each value as specified. Optionally, a set of\nfields can be used to group the rows.","arguments": "- group_by: Set of fields to group by. If not provided, a single row will\n  be produced.\n- name_column: The field to use as the column header. If this field is\n  not found, then each value will be a single column.\n- values: The aggregation to perform on each set of rows. Can be a single\n  aggregation or a vector of aggregations. Expressions can be used within\n  the aggregation to perform more complicated calculations.\n- on_problems: Specifies how to handle problems if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  Cross Tab Operation\n\n  Input Table `table`:\n\n     Id | B       | C\n    ----|---------|---------\n     A  | Name    | Example\n     A  | Country | France\n\n  Result `table.cross_tab ['Id'] 'B' (Aggregate_Column.First 'C')`:\n\n     Id | Name    | Country\n    ----|---------|---------\n     A  | Example | France","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "slice", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": [],"description": "Returns a table with a continuous sub-range of rows taken."},
{"module": "Standard.Table.Table", "type": "Table", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "order","description": "Returns a table containing the rows of `self` table with their order\nreversed.","examples": "> Example\n  Reverse the rows in a table.\n\n      import Standard.Examples\n\n      example_reverse = Examples.inventory_table.reverse"},
{"module": "Standard.Table.Table", "type": "Table", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "File | Any ! Column_Count_Mismatch | Illegal_Argument | File_Error", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "format": {"lazy": false, "default": "Auto_Detect"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Backup"}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["export", "output", "save", "to_file"],"group": "Standard.Base.File","icon": "data_output","suggested": 9,"description": "This function writes a table from memory into a file.\n\nThe specific behavior of the various `File_Format`s is specified below.","arguments": "- path: The path to the output file.\n- format: The format of the file.\n  If `Auto_Detect` is specified; the provided file determines the\n  specific type and configures it appropriately. Details of this type are\n  below.\n- on_existing_file: Specified how to handle if the file already exists.\n- match_columns: Specifies how to match columns against an existing file.\n  If `Match_Columns.By_Name` - the columns are mapped by name against an\n  existing file. If there is a mismatch, then a `Column_Name_Mismatch`\n  error is raised.\n  If `Match_Columns.By_Position` - the columns are mapped by position\n  against an existing file. If there is a mismatch, then a\n  `Column_Count_Mismatch` error is raised.\n- on_problems: Specifies how to handle if a problem occurs, raising as a\n  warning by default. The specific issues depend on the `File_Format`\n  argument.","returns": "- If an unsupported `File_Format` is specified, an\n  `Illegal_Argument` is raised.\n- If the path to the parent location cannot be found or the filename is\n  invalid, a `File_Error.Not_Found` is raised.\n- If another IO error occurs, such as access denied, an\n  `File_Error.IO_Error` is raised.\n- If appending and the columns do not match, a `Column_Mismatch` is\n  raised.\n- Other specific errors or warnings that can be raised depend on the\n  format argument.\n- On success, a `File` object for the written file is returned.","examples": "> Example\n  Write a table to a CSV file, without writing the header.\n\n      import Standard.Examples\n\n      example_to_csv = Examples.inventory_table.write (Enso_Project.data / \"example_csv_output.csv\") (..Delimited delimiter=\",\" headers=False)\n\n\n> Example\n  Write a table to an XLSX file.\n\n      import Standard.Examples\n      from Standard.Table import all\n\n      example_to_xlsx = Examples.inventory_table.write (enso_project.data / \"example_xlsx_output.xlsx\") (..Sheet \"MySheetName\")","remarks": "? `File_Format` write behaviors\n\n  - `Auto_Detect`: The file format is determined by the provided file.\n  - `Bytes` and `Plain_Text`: The Table does not support these types in\n    the `write` function. If passed as format, an\n    `Illegal_Argument` is raised. To write out the table as plain\n    text, the user needs to convert the Table to Text\n    (e.g. using `to_delimited` method) and then use the `Text.write`\n    function."},
{"module": "Standard.Table.Table", "type": "Table", "name": "to_csv", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Creates a text representation of the table using the CSV format."},
{"module": "Standard.Table.Table", "type": "Table", "name": "to_xml", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "XML_Document", "arguments": {"element_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "self.column_names"}, "attribute_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "value_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "root_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Table\""}, "row_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Row\""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Returns an `XML_Document` representation of the table.","arguments": "- element_columns: Columns to be used as elements in the XML.\n- attribute_columns: Columns to be used as attributes in the XML.\n- value_column: Column to be used as the value for the row tag in the XML.\n- root_name: The name of the root tag in the XML.\n- row_name: The name of the row tag in the XML.\n- on_problems: Specifies how to handle warnings if they occur, reporting\n  them as warnings by default.","examples": "> Example\n  to_xml Operation\n\n  Input Table `table`:\n\n     Title                  | Author              | Price | Year\n    ------------------------+---------------------+-------+------\n     A Tale Of Two Cities   | Charles Dickens     | 9.99  | 1859\n     The Great Gatsby       | F. Scott Fitzgerald | 5.99  | 1925\n\n  Result `r = t.to_xml [\"Year\"] [\"Author\", \"Price\"] \"Title\" \"Books\" \"Book\"`:\n\n     <Books>\n       <Book Author=\"Charles Dickens\" Price=\"9.99\">\n         A Tale Of Two Cities\n         <Year>1859</Year>\n       </Book>\n       <Book Author=\"F. Scott Fitzgerald\" Price=\"5.99\">\n         The Great Gatsby\n         <Year>1925</Year>\n       </Book>\n     </Books>","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "columns_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Table", "type": "Table", "name": "fill_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "default": {"lazy": false, "type": "Column | Column_Ref | Expression | Previous_Value | Any", "checked": true}},"aliases": ["fill missing", "if_nothing"],"group": "Standard.Base.Values","icon": "table_clean","description": "Returns a new table where missing values in the specified columns have\nbeen replaced with the provided default(s).","arguments": "- columns: Specifies columns by a name, index or regular expression to\n  match names, or a Vector of these.\n- default: The value to replace missing values with. If this argument\n  is a column, the value from `default` at the corresponding position\n  will be used. If this argument is `Previous_Value`, the missing values\n  will be replaced with the previous value in the column. Note that the\n  first rows may stay `Nothing` if they do not have a previous value to\n  use.","examples": "> Example\n  Fill missing values in two columns with the value 20.5.\n\n      fill_nothing = table.fill_nothing [\"col0\", \"col1\"] 20.5"},
{"module": "Standard.Table.Table", "type": "Table", "name": "fill_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "default": {"lazy": false, "type": "Column | Column_Ref | Expression | Previous_Value | Any", "checked": true}},"aliases": ["fill empty", "if_empty"],"group": "Standard.Base.Values","icon": "table_clean","description": "Returns a new column where empty Text values have been replaced with the\nprovided default(s).","arguments": "- columns: Specifies columns by a name, index or regular expression to\n  match names, or a Vector of these.\n- default: The value to replace empty values with. If this argument\n  is a column, the value from `default` at the corresponding position\n  will be used. If this argument is `Previous_Value`, the empty values\n  will be replaced with the previous value in the column. Note that the\n  first rows may stay empty if they do not have a previous value to use.","examples": "> Example\n  Fill empty values in two columns with the value \"hello\".\n\n      fill_empty = table.fill_empty [\"col0\", \"col1\"] \"hello\""},
{"module": "Standard.Table.Table", "type": "Table", "name": "text_replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "term": {"lazy": false, "type": "Text | Column | Column_Ref | Expression | Regex", "checked": true, "default": "\"\""}, "new_text": {"lazy": false, "type": "Text | Column | Column_Ref | Expression", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["regex", "substitute"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces the first, or all occurrences of `term` with `new_text` in each\nrow of the specified column. If `term` is empty, the function returns the\ntable unchanged.\n\nThis method follows the exact replacement semantics of the\n`Text.replace` method.\n\nIf regex is used the replacement string can contain references to groups\nmatched. The following syntaxes are supported:\n    $0: the entire match string\n    $&: the entire match string\n    $n: the nth group\n    $&lt;foo&gt;: Named group `foo`\n\nFor details on Enso's Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","arguments": "- columns: The column(s) to replace values on.\n- term: The term to find. Can be `Text`, `Regex`, or a `Column` of\n  strings.\n- replacement: The text to replace matches with.\n- case_sensitivity: Specifies if the text values should be compared case\n  sensitively.\n- only_first: If True, only replace the first match.","examples": "> Example\n  Replace dashes with underscores.\n\n      table.text_replace [\"Input\"] \"-\" \"_\"\n\n\n> Example\n  Remove leading and trailing spaces from cells.\n\n      table.text_replace [\"Input\"] \"^\\s*(.*?)\\s*$\".to_regex \"$1\"\n\n\n> Example\n  Replace texts in quotes with parentheses.\n\n      table.text_replace [\"Input\"] '\"(.*?)\"'.to_regex '($1)'"},
{"module": "Standard.Table.Table", "type": "Table", "name": "text_cleanse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"from": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type)", "checked": true}, "remove": {"lazy": false, "type": "Vector Named_Pattern", "checked": true, "default": "[]"}},"aliases": [],"group": "Standard.Base.Text","icon": "column_add","description": "Applies the specified cleansing operations to text values in each column\nspecified in `from`.","arguments": "- from: The column(s) to cleanse.\n- remove: The list of operations being performed - which elements to\n  remove. These are performed in the order specified. The same operation\n  can be performed multiple times.\n  The operations are:\n  - ..Leading_Whitespace: Removes all whitespace from the start.\n  - ..Trailing_Whitespace: Removes all whitespace from the end.\n  - ..Duplicate_Whitespace: Removes all duplicate whitespace replacing it\n    with the first whitespace character of the duplicated block.\n  - ..All_Whitespace: Removes all whitespace.\n  - ..Newlines: Removes all newline characters. Line Feed and Carriage\n    Return characters are considered newlines.\n  - ..Leading_Numbers: Removes all numbers from the start.\n  - ..Trailing_Numbers: Removes all numbers from the end.\n  - ..Non_ASCII: Removes all non-ascii characters.\n  - ..Tabs: Removes all tab characters.\n  - ..Letters: Removes all letters.\n  - ..Numbers: Removes all numbers.\n  - ..Punctuation: Removes all characters in the set ``,.!?():;'\"`.\n  - ..Symbols: Removes anything that isn't letters, numbers or whitespace\n    from the string.","returns": "- A Table of all records, with the cleansing operations performed on the\n  specified columns. Original columns are removed and replaced with the\n  cleansed columns.","examples": "> Example\n  Remove leading and trailing spaces from cells.\n\n     table = Table.new [[\"Input\"], [\"  Hello  \"], [\"  World  \"]]\n     cleansed = table.text_cleanse [\"Input\"] [..Leading_Whitespace, ..Trailing_Whitespace]\n\n     ## Returns a Table\n        | Input |\n        |-------|\n        | Hello |\n        | World |"},
{"module": "Standard.Table.Table", "type": "Table", "name": "running", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}, "of": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "group_by": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector (Text | Sort_Column) | Text", "checked": true, "default": "[]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["count", "cumulative", "maximum", "mean", "minimum", "product", "standard deviation", "sum", "sum", "total", "variance"],"group": "Standard.Base.Values","icon": "column_add","description": "Adds a new column to the table with a running calculation.","arguments": "- statistic: The running statistic to calculate.\n- of: The existing column to run the statistic over.\n- as: The name of the new column.\n- set_mode: Specifies the expected behaviour in regards to existing\n  column with the same name.\n- group_by: Specifies the columns to group by. The running statistic is\n  calculated separately for each group. By default, all rows are treated as\n  a single group.\n- order_by: Specifies the columns to order by. Defaults to the order of\n  the rows in the table. The running statistic is calculated according to the\n  specified ordering.","errors": "","remarks": "? Ordering of rows\n\n  Note that the ordering of rows from the original table is preserved in\n  all cases. The grouping and ordering settings affect how the running statistic is\n  calculated for each row, but the order of the rows itself is\n  not changed by this operation."},
{"module": "Standard.Table.Table", "type": "Table", "name": "offset", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type)", "checked": true, "default": "Missing_Argument.throw \"columns\""}, "n": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}, "fill_with": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}, "group_by": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["displace", "lag", "lead", "shift", "slide"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a table with new columns offset by n rows, where missing values have been replaced with the\nprovided fill_with strategy.","arguments": "- columns: The columns to offset\n- n: The number of rows to offset the new columns by. Negative n slides the values down in the columns' order adding records at the start. \n     Positive n slides the values up in the columns' order adding records at the end. Defaults to -1.\n- fill_with: The value to replace missing values with. Defaults to adding Nothing Values.\n- - ..Nothing - Add Nothing values in the spaces created by sliding the existing values.\n- - ..Closest_Value - If n is negative the first value gets used, if n is negative the last value gets used.\n- - ..Wrap_Around - In this mode values that slide off the top or bottom reappear at the other end. So no values get lost they are just rotated.\n- group_by: Applies the offset to each group as a separate batch of records.\n- order_by: The order to slide the records through. The actual record order remains the same but the records move as per the order defined by these columns.\n- set_mode: By default creates new columns, but choosing Update replaces the existing fields being offset.\n- on_problems: Missing columns are always an error. Other warnings like grouping on floating point numbers can be ignored or made an error with this argument.","returns": "- A Table of all records, with the selected columns offset by the number specifed by n.","errors": "- A Table of all records, with the selected columns offset by the number specifed by n.","remarks": "? Ordering of rows\n\n  Note that the ordering of rows from the original table is preserved in\n  all cases. The grouping and ordering settings affect how the values move as they are offset, but the order of the rows itself is\n  not changed by this operation."},
{"module": "Standard.Table.Table", "type": "Table", "name": "generate_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"over": {"lazy": false, "type": "Generate_Rows_Range", "checked": true, "default": "Missing_Argument.throw \"over\""}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["duplicate", "expand", "repeat", "replicate"],"group": "Standard.Base.Values","icon": "row_add","description": "Generates additional rows of data by repeating existing rows based on a provided range.","arguments": "- over: The range of values to use for the generation. This can be: ..Integer_Range or ..Date_Range\n   - from: The starting value for the range. (Constant, existing column or expression)\n   - to: The ending value for the range. (Constant, existing column or expression)\n   - include_end: Whether to include the end value in the range. (Defaults to False)\n   - step: The column with the step value for the range. (Defaults to 1 or ..Day)\n- as: Optional new name for the expanded range column.\n- on_problems: Missing columns are always an error. Other warnings like grouping on floating point numbers can be ignored or made an error with this argument.","returns": "- A Table of records with each incoming record duplicated by the number of times specified in the range.","errors": "- A Table of records with each incoming record duplicated by the number of times specified in the range."},
{"module": "Standard.Table.Table", "type": "Table", "name": "column_naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Table", "type": "Table", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Table", "type": "Table", "name": "to_delimited", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"delimiter": {"lazy": false, "type": "Delimited_Format|Text", "checked": true, "default": "\u0027\\t\u0027"}, "quote_style": {"lazy": false, "type": "Quote_Style", "checked": true, "default": "..With_Quotes"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "value_formatter": {"lazy": false, "type": "Data_Formatter|Nothing", "checked": true, "default": "Data_Formatter.Value"}, "line_endings": {"lazy": false, "type": "Line_Ending_Style|Infer", "checked": true, "default": "Infer"}},"aliases": [],"description": "Converts all table contents to a text value in delimited format.","arguments": "- format: Allows to customize the delimiter and other settings of the\n  format. Defaults to tab-separated values."},
{"module": "Standard.Table.Table", "type": "", "name": "slice_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "ranges": {"lazy": false}},"aliases": [],"description": "A helper to create a new table consisting of slices of the original table."},
{"module": "Standard.Table.Table", "type": "", "name": "make_join_helpers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left_table": {"lazy": false}, "right_table": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Column."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}, "format": {"lazy": false, "default": "Delimited_Format.Delimited \u0027\\t\u0027"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Converts a Text value into a Table.\n\nThe format of the text is determined by the `format` argument.","arguments": "- that: The text to convert.\n- format: The format of the text.\n- on_problems: What to do if there are problems reading the text."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}, "fields": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Conversion method to a Table from a Vector."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}, "fields": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Conversion method to a Table from a JS_Object."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Range\""}},"aliases": [],"description": "Conversion method to a Column from a Vector."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "that.default_column_name"}},"aliases": [],"description": "Conversion method to a Column from a Vector."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "XML_Element", "checked": true}},"aliases": [],"description": "Convert an `XML_Element` into a `Table`\n\nGenerates a single-row table with columns for the tag's contents.\n\n\n\nThe columns generated are:\n- Name: the root tag name\n- @[attribute name]: the attribute with that name.\n- Children: the children of the tag, including `XML_Element`s and text\n  elements. This is only generated if the tag has `XML_Element` children\n- Value: the text content of the tag. This is only generated if the tag does\n  not have `XML_Element` children\n\nEither `Children` or `Value` will be generated, but not both.","arguments": "- that: The XML_Element to convert"},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "XML_Document", "checked": true}},"aliases": [],"description": "Convert an `XML_Document` into a `Table`\n\nGenerates a single-row table with columns for the root tag's contents.\n\n\n\nThe columns generated are:\n- Name: the root tag name\n- @[attribute name]: the attribute with that name\n- Children: the children of the tag, including `XML_Element`s and text\n  elements. This is only generated if the tag has `XML_Element` children\n- Value: the text content of the tag. This is only generated if the tag does\n  not have `XML_Element` children\n\nEither `Children` or `Value` will be generated, but not both.","arguments": "- that: The XML_Document to convert"},
{"module": "Standard.Table.Table", "type": "", "name": "make_fill_nothing_default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "cache": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Table.Table", "type": "", "name": "from_java_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"java_table": {"lazy": false}},"aliases": [],"description": "Helper method for internal use to make a Table from a Java Table."},
{"module": "Standard.Table.Table", "type": "Many_Files_List", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "Bits_16", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bits", "arguments": {},"aliases": [],"description": "16-bit (2 byte) value"},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "Bits_32", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bits", "arguments": {},"aliases": [],"description": "32-bit (4 byte) value"},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "Bits_64", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bits", "arguments": {},"aliases": [],"description": "64-bit (8 byte) value"},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "from_integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bits": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "to_integer", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the text representation of the bit-size."},
{"module": "Standard.Table.Value_Type", "type": "Bits_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Bits_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Bits_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Bits_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Boolean", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "Boolean or Bit value: 0 or 1.\n\nANSI SQL: BIT / BOOLEAN"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Byte", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "Integer value: 0 to 255\n\nANSI SQL: TINYINT"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Integer", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"size": {"lazy": false, "type": "Bits", "checked": true, "default": "Bits.Bits_64"}},"aliases": [],"description": "Integer value:\n\n16-bit: -32,768 to 32,767\n32-bit: -2,147,483,648 to -2,147,483,648\n64-bit: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\nANSI SQL: SMALLINT (16-bit), INT (32-bit), BIGINT (64-bit)","arguments": "- size: the amount of bits used to store the values."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Float", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"size": {"lazy": false, "type": "Bits", "checked": true, "default": "Bits.Bits_64"}},"aliases": [],"description": "Floating point value.\n\nANSI SQL: REAL, FLOAT, DOUBLE","arguments": "- size: the amount of bits used to store the values."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Decimal", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"precision": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}, "scale": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Arbitrary precision numerical value with a scale and precision.\n\nANSI SQL: NUMERIC, DECIMAL","arguments": "- precision: the total number of digits in the number.\n- scale: the number of digits after the decimal point."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Char", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"size": {"lazy": false, "type": "Positive_Integer | Nothing", "checked": true, "default": "Nothing"}, "variable_length": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Character string.\n\nANSI SQL: CHAR, VARCHAR, TEXT, LONGVARCHAR, NCHAR, NVARCHAR, TEXT, CLOB, NCLOB","arguments": "- size: the maximum number of characters that can be stored in the\n  column. It can be nothing to indicate no limit. It cannot be 0.\n- variable_length: whether the size is a maximum or a fixed length.\n  A fixed length string must have a non-nothing size.","remarks": "! Counting Characters\n\n  Note that different backends may count the text in different ways.\n  The in-memory backend treats a single grapheme cluster (e.g. 💡) as a\n  single character unit. In most database systems more complex grapheme\n  clusters may be counted as multiple characters. So there isn't a 1-1\n  correspondence between these limits across backends which may cause\n  strings to be truncated if they contain such characters and are close\n  to the limit."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Date", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "Date\n\nANSI SQL: DATE"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Date_Time", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"with_timezone": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Date and Time\n\nANSI SQL: TIMESTAMP / DateTime","arguments": "- with_timezone: whether the values contain the timezone."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Time", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "Time of day\n\nANSI SQL: TIME, TIME WITHOUT TIME ZONE"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Binary", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"size": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}, "variable_length": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Binary data.\n\nANSI SQL: BINARY, VARBINARY, LONGVARBINARY, BLOB","arguments": "- size: the maximum number of bytes that can be stored in the\n  column.\n- variable_length: whether the size is a maximum or a fixed length."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Unsupported_Data_Type", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"type_name": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}, "underlying_type": {"lazy": false, "type": "Any|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Unsupported SQL type.\n\nFallback provided to allow describing types that are not supported by\nEnso at this time."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Mixed", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "A mix of values can be stored in the Column.\n\nIn-Memory and SQLite tables support this."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Null", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "A special type indicating no values present.\n\nIt can be used when a column does not have any values, so no proper type \ncould be inferred for it. Columns of this type cannot hold any values \nother than `Nothing`. \n\nBecause the column with type `Null` contains no values, it can be used in \nany operation.","remarks": "? Implementation Note\n\n  The `is_*` methods will return `False` for this type, as they require \n  more precision. E.g. `Value_Type.Null.is_boolean` will return `False`. \n  However, the sibling `expect_*` methods will accept a `Value_Type.Null` \n  column."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "are_comparable", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"type_1": {"lazy": false}, "type_2": {"lazy": false}},"aliases": [],"description": "Specifies if values of the given type can be compared for ordering."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_comparable", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arg1": {"lazy": false}, "arg2": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks that both arguments can be compared for ordering and runs the\nfollowing action or reports an error."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) is of\na text type and runs the following action or reports a type error."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_boolean", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) is of\na text type and runs the following action or reports a type error."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_numeric", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) is of\na numeric type and runs the following action or reports a type error."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_floating_point", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) is of\na floating point type and runs the following action or reports a type\nerror."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) is of\nan integer type and runs the following action or reports a type error."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_has_date", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) has\ntype `Date` or `Date_Time`."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_has_time", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) has\ntype `Time_Of_Day` or `Date_Time`."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "predicate": {"lazy": false}, "type_kind": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "A helper for generating the `Value_Type.expect_` checks."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_null", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a null type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_boolean", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a boolean type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_floating_point", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a floating-point number type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a text type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_numeric", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents any numeric type - integer, byte,\nfloating point or decimal."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_integer", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents an integer type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_decimal", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a decimal type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_date", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a Date type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a Time type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_mixed", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a Mixed type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_date_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a Date_Time type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "has_date", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a type that holds a date.\n\nIt will return true for both `Date` and `Date_Time` types."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "has_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a type that holds a time of day.\n\nIt will return true for both `Time_Of_Day` and `Date_Time` types."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_date_or_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a date/time type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "has_ordering", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies if values of the given type can be compared for ordering."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "can_be_widened_to", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target_type": {"lazy": false}},"aliases": [],"description": "Checks if this type can be widened to the provided type.\n\nThe widening is permitted if the target type is in a way 'larger' than\nthe source type, so that there is no loss of information. In practice,\nthere are cases where widening can still lose information - notably\nintegers can be widened into floats and big enough integers may not be\nable to be exactly represented in floats."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a text representation of the `Value_Type` meant for\ndisplaying to the user."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a JS object representation for use in visualizations."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "to_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the constructor name"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_same_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Check if the same type of value ignoring size, precision and scale."},
{"module": "Standard.Table.Value_Type", "type": "Auto", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Auto", "arguments": {},"aliases": [],"description": "The type representing inferring the column type automatically based on values\npresent in the column.\n\nThe most specific type which is valid for all values in a column is chosen:\n- if all values are integers, `Integer` is chosen,\n- if all values are decimals or integers, `Decimal` is chosen,\n- if the values are all the same time type (a date, a time or a date-time),\n  the corresponding type is chosen, `Date`, `Time_Of_Day` or `Date_Time`,\n  respectively,\n- if all values are booleans, `Boolean` is chosen,\n- otherwise, `Text` is chosen as a fallback and the column is kept as-is\n  without parsing."},
{"module": "Standard.Table.Value_Type", "type": "By_Type", "name": "By_Type", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "By_Type", "arguments": {"type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "The type representing the column type being explicitly selected by the user.","arguments": "- type: The type of columns to select."},
{"module": "Standard.Table.Value_Type", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Bits", "checked": true}},"aliases": []},
{"module": "Standard.Tableau.Internal.Telemetry", "type": "", "name": "log", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {"logger_name": {"lazy": false, "type": "Text", "checked": true}, "msg": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Schedules a single telemetry message for sending.","arguments": "- logger_name: Name of the (telemetry) logger\n- msg: Message. Must be of format `<msg>: <args>`, where `<args>` has\n  `<argname>=<argvalue>` mapping separated by `,`, for example\n  \"my message: arg1=1, arg2=2\".\n  See org.enso.logging.service.logback.telemetry.LogFormatter\n- args: Arguments passed to the LoggingEvent object"},
{"module": "Standard.Tableau.Internal.Telemetry", "type": "", "name": "_root_logger_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Hyper_Column", "type": "Hyper_Column", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hyper_Column", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "nullable": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Tableau.Hyper_Column", "type": "Hyper_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Hyper_Column", "type": "Hyper_Column", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Hyper_Errors", "type": "Hyper_Table_Not_Found", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hyper_Table_Not_Found", "arguments": {"schema": {"lazy": false, "type": "Text", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Tableau.Hyper_Errors", "type": "Query_Failed", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query_Failed", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}, "query": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Tableau.Hyper_Errors", "type": "", "name": "handle_java_exceptions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hyper_File", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "internal_schema": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A representation of a Tableau Hyper Extract file."},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027*\u0027"}},"aliases": [],"icon": "data_input","description": "Creates a Hyper_File","arguments": "- file: The file to read.\n- schema: The schema to read or `*` for all schemas."},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema.\n`*` represents all schemas."},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "set_schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Hyper_File with the specified schema set as default.","arguments": "- schema: The name of the schema to connect to."},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false, "type": "Text", "checked": true, "default": "self.schema"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the list of tables for the connection within the current database (or catalog)."},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Text", "checked": true}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "self.schema"}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": ["get", "import", "load", "open", "sheet"],"group": "Standard.Base.Input","icon": "data_input","description": "Read a table from the Hyper_File into a Table.","arguments": "- table: table name to read from.\n- schema: the schema to read from.\n- limit: the maximum number of rows to read."},
{"module": "Standard.Tableau.Hyper_File", "type": "", "name": "make_schema_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"hyper_file": {"lazy": false, "type": "Hyper_File", "checked": true}, "include_any": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": []},
{"module": "Standard.Tableau.Hyper_File", "type": "", "name": "make_table_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"hyper_file": {"lazy": false, "type": "Hyper_File", "checked": true}, "cache": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hyper_Table", "arguments": {"file": {"lazy": false, "type": "Hyper_File", "checked": true}, "internal_schema": {"lazy": false, "type": "Text", "checked": true}, "internal_table": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Represents a Tableau Hyper Table."},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "The schema of the table."},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "The name of the table."},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "column_metadata", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Reads The Columns for the Table"},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "column_info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a Table describing this table's contents.\n\nThe table lists all columns and value types of each column."},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": ["import", "load", "open"],"group": "Standard.Base.Input","icon": "data_input","description": "Reads the Table into Enso Table","arguments": "- max_rows: specifies the maximum number of rows to read."},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "Hyper_File", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Tableau_Format", "arguments": {"schema": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027*\u0027"}},"aliases": [],"description": "Read the file to a `Hyper_File` object.","arguments": "- schema: The schema to read or `*` for all schemas."},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance.\nNot currently supported."},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Test.Internal.Stack_Trace_Helpers", "type": "", "name": "decorate_stack_trace_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"project_root": {"lazy": false, "type": "File", "checked": true}, "decorator": {"lazy": false, "type": "Text -> Text", "checked": true}, "stack_trace_text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Phase_Conf", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Phase_Conf", "arguments": {"iterations": {"lazy": false, "type": "Integer", "checked": true}, "seconds": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"arguments": "- iterations: The number of iterations of the phase.\n- seconds: The minimal number of seconds per one iteration."},
{"module": "Standard.Test.Bench", "type": "Phase_Conf", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Phase_Conf", "name": "validate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Validates the config and throws a Panic if it is invalid."},
{"module": "Standard.Test.Bench", "type": "Bench_Options", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Bench_Options", "arguments": {"warmup": {"lazy": false, "type": "Phase_Conf", "checked": true}, "measure": {"lazy": false, "type": "Phase_Conf", "checked": true}},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Bench_Options", "name": "set_warmup", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"warm": {"lazy": false, "type": "Phase_Conf", "checked": true}},"aliases": [],"description": "Sets the warmup phase."},
{"module": "Standard.Test.Bench", "type": "Bench_Options", "name": "set_measure", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"meas": {"lazy": false, "type": "Phase_Conf", "checked": true}},"aliases": [],"description": "Sets the measurement phase."},
{"module": "Standard.Test.Bench", "type": "Bench_Options", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Bench_Options", "name": "validate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Validates the config and throws a Panic if it is invalid."},
{"module": "Standard.Test.Bench", "type": "Bench_Builder", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Bench_Builder", "arguments": {"builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Bench_Builder", "name": "group", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "configuration": {"lazy": false, "type": "Bench_Options", "checked": true}, "fn": {"lazy": false}},"aliases": [],"description": "Add a group to the builder."},
{"module": "Standard.Test.Bench", "type": "Group_Builder", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Group_Builder", "arguments": {"name": {"lazy": false}, "builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Group_Builder", "name": "specify", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "benchmark": {"lazy": true}},"aliases": [],"description": "Adds a benchmark specification to the group.","arguments": "- name: The name of the benchmark. Must be a valid Java identifier."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "All", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bench", "arguments": {"groups": {"lazy": false, "type": "Vector Bench", "checked": true}},"aliases": [],"description": "A set of groups of benchmarks."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "Group", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bench", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "configuration": {"lazy": false, "type": "Bench_Options", "checked": true}, "specs": {"lazy": false, "type": "Vector Bench", "checked": true}},"aliases": [],"description": "A single group of benchmarks sharing configuration."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "Spec", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bench", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "code": {"lazy": false, "type": "Any -> Any", "checked": true}},"aliases": [],"description": "A specific single benchmark."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "build", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fn": {"lazy": false}},"aliases": [],"description": "Construct a Bench object."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "options", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default options for benchmarks."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "phase_conf", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"iterations": {"lazy": false, "default": "2"}, "seconds": {"lazy": false, "default": "3"}},"aliases": [],"description": "Returns the default phase configuration.\n\nThe default used for the JMH library are 5 iterations for 10 seconds\neach. However, our defaults are lower to make the benchmarks run faster.","arguments": "- iterations: The number of iterations of the phase.\n- seconds: The minimal number of seconds per one iteration."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "measure", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "warmup_conf": {"lazy": false, "type": "Phase_Conf", "checked": true}, "measure_conf": {"lazy": false, "type": "Phase_Conf", "checked": true}, "act": {"lazy": true}},"aliases": [],"description": "Measure the amount of time it takes to execute a given computation.","arguments": "- label: A name for the benchmark.\n- warmup_conf: Warmup phase configuration.\n- measure_conf: Measurement phase configuration.\n- act: The action to perform.","examples": "> Example\n  Measure a computation called \"foo\" with an iteration size of 2 and a number\n  of iterations of 1.\n\n      import Standard.Examples\n      from Standard.Test import Bench\n\n      example_measure =\n          Bench.measure \"foo\" warmup_iters=2 measurement_iters=1 Examples.get_boolean"},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "single_call", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"act": {"lazy": true}},"aliases": [],"description": "Measure the amount of time in ns it takes to execute a given suspended\ncomputation."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "run_phase", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "phase_name": {"lazy": false, "type": "Text", "checked": true}, "conf": {"lazy": false, "type": "Phase_Conf", "checked": true}, "act": {"lazy": true}},"aliases": [],"description": "Run a single phase of the benchmark.\n\nThe total run time of the phase is computed as `conf.seconds * conf.iterations`,\nso that it is the same as in JMH.","arguments": "- label: A name for the benchmark.\n- phase_name: The name of the phase.\n- conf: The phase configuration.\n- act: Method that should be measured - benchmark body."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "summarize_phase", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "phase_name": {"lazy": false, "type": "Text", "checked": true}, "invocations": {"lazy": false, "type": "Integer", "checked": true}, "average_time": {"lazy": false, "type": "Float", "checked": true}, "time_stddev": {"lazy": false, "type": "Float", "checked": true}, "phase_duration": {"lazy": false, "type": "Duration", "checked": true}},"aliases": [],"description": "This is a very simple implementation of summarizing the benchmark\nresults.\n\nWe may want to improve it later, but it gets the job done to give us\nsimple summary that can be analysed more easily than logs."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "validate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Validates the benchmark and throws a Panic if it is invalid. Returns self\nif the benchmark is valid."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "fn": {"lazy": false}},"aliases": [],"description": "Fold over the set of benchmarks merging using the specified function."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "total_specs", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Counts all the specs in the benchmark."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "estimated_runtime", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Estimates the runtime based on configurations."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "run_main", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Run the specified set of benchmarks."},
{"module": "Standard.Test.Bench", "type": "", "name": "validate_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Checks whether the given name is a valid benchmark name - either group name\nor a spec name. The name should be a valid Java identifier.\nThrow a Panic error if the validation fails."},
{"module": "Standard.Test.Bench", "type": "", "name": "get_benchmark_report_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Clue", "type": "Clue", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Clue", "arguments": {"add_clue": {"lazy": false}},"aliases": [],"description": "Represents a clue as to why a test failed","arguments": "- add_clue: either Nothing or a function which modifies a failure message"},
{"module": "Standard.Test.Execution_Context_Helpers", "type": "", "name": "run_with_and_without_output", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Runs the action twice, once with the Output context enabled and once with it\ndisabled, to check that the behaviour is the same regardless of context."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_fail_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"matcher": {"lazy": false}, "unwrap_errors": {"lazy": false, "default": "True"}},"aliases": [],"description": "Expect a function to fail with the provided dataflow error.","arguments": "- matcher: The expected type of dataflow error contained in `self`.\n- unwrap_errors: If true, remove any wrapping errors from the result before\n  checking against the expected warning.","examples": "> Example\n  Assert that a computation should return an error of a given type.\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_fail_with =\n         Examples.throw_error . should_fail_with Examples.My_Error"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_fail_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"matcher": {"lazy": false}, "unwrap_errors": {"lazy": false, "default": "True"}},"aliases": [],"description": "Expect a function to fail with the provided dataflow error.","arguments": "- matcher: The expected type of dataflow error contained in `self`.\n- unwrap_errors: If true, remove any wrapping errors from the result before\n  checking against the expected warning.","examples": "> Example\n  Assert that a computation should return an error of a given type.\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_fail_with =\n         Examples.throw_error . should_fail_with Examples.My_Error"},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is equal to the expected value.","arguments": "- that: The value to check `self` for equality with.","examples": "> Example\n  Assert that one value should equal another,\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_equal = Examples.add_1_to 1 . should_equal 2"},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_equal_type", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is equal to the expected type value.","arguments": "- that: The type to check `self` for equality with.","examples": "> Example\n  Assert that some type is equal to another.,\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_equal = Examples.some_type . should_equal_type Vector"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_equal_type", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Added so that dataflow errors are not silently lost."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_not_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is not equal to the expected value.","arguments": "- that: The value to check `self` for equality with.","examples": "> Example\n  Assert that one value should equal another,\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_not_equal = Examples.add_1_to 1 . should_not_equal 2"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_not_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Added so that dataflow errors are not silently lost."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_not_equal_type", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is not equal to the expected type value.","arguments": "- that: The type to check `self` for equality with.","examples": "> Example\n  Assert that some type is equal to another.,\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_not_equal = Examples.some_type . should_not_equal_type Vector"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_not_equal_type", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Added so that dataflow errors are not silently lost."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_start_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is a Text value and starts with `that`.","arguments": "- that: The value to check `self` starts with.","examples": "> Example\n  Assert that one value should start with another.\n\n      from Standard.Test import Test\n\n      example_should_start_with = \"Hello World!\" . should_start_with \"Hello\""},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_end_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is a Text value and ends with `that`.","arguments": "- that: The value to check `self` ends with.","examples": "> Example\n  Assert that one value should end with another.\n\n      from Standard.Test import Test\n\n      example_should_end_with = \"Hello World!\" . should_end_with \"ld!\""},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_start_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is a Text value and starts with `that`.","arguments": "- that: The value to check `self` starts with.","examples": "> Example\n  Assert that one value should start with another.\n\n      from Standard.Test import Test\n\n      example_should_start_with = \"Hello World!\" . should_start_with \"Hello\""},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_end_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is a Text value and ends with `that`.","arguments": "- that: The value to check `self` ends with.","examples": "> Example\n  Assert that one value should end with another.\n\n      from Standard.Test import Test\n\n      example_should_end_with = \"Hello World!\" . should_end_with \"ld!\""},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is equal to the expected value.","arguments": "- _: The value to check `self` for equality with.","examples": "> Example\n  Assert that one value should equal another,\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_equal = Examples.add_1_to 1 . should_equal 2"},
{"module": "Standard.Test.Extensions", "type": "Number", "name": "should_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}, "epsilon": {"lazy": false, "default": "0"}},"aliases": [],"description": "Asserts that `self` is within `epsilon` from `that`.","arguments": "- that: The value to compare `self` for equality with.\n- epsilon: The epsilon for comparing two float numbers.","examples": "> Example\n  Compare two float values.\n\n      from Standard.Test import Test\n\n      example_should_equal = 1.1 . should_equal 1.1\n\n\n> Example\n  Compare two float values with an epsilon (tolerance).\n\n      from Standard.Test import Test\n\n      example_should_equal =\n         1.00000001 . should_equal 1.00000002 epsilon=0.0001"},
{"module": "Standard.Test.Extensions", "type": "Decimal", "name": "should_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}, "epsilon": {"lazy": false, "default": "0"}},"aliases": [],"description": "Asserts that `self` is within `epsilon` from `that`.","arguments": "- that: The value to compare `self` for equality with.\n- epsilon: The epsilon for comparing two float numbers."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_succeed", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that `self` value is not an error.\n\nIt returns the original value, so that it can be inspected further.","examples": "> Example\n  Assert that a given action did not result in errors or warnings.\n\n      \"foobar\".write (enso_project.data / \"f.txt\") . should_succeed"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_succeed", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that `self` value is not an error.\n\nIt returns the original value, so that it can be inspected further.","examples": "> Example\n  Assert that a given action did not result in errors or warnings.\n\n      \"foobar\".write (enso_project.data / \"f.txt\") . should_succeed"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_be_a", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"typ": {"lazy": false}},"aliases": [],"description": "Handles an unexpected dataflow error."},
{"module": "Standard.Test.Extensions", "type": "Boolean", "name": "should_be_true", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that the given `Boolean` is `True`","examples": "> Example\n  Assert that a boolean value is true.\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_be_true = Examples.get_boolean . should_be_true"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_be_true", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that the given `Boolean` is `True`.","examples": "> Example\n  Assert that a boolean value is true.\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_be_true = Examples.get_boolean . should_be_true"},
{"module": "Standard.Test.Extensions", "type": "Boolean", "name": "should_be_false", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that the given `Boolean` is `False`","examples": "> Example\n  Assert that a boolean value is false.\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_be_false = Examples.get_boolean . should_be_false"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_be_false", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that the given `Boolean` is `False`","examples": "> Example\n  Assert that a boolean value is false.\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_be_false = Examples.get_boolean . should_be_false"},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_be_a", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"typ": {"lazy": false}},"aliases": [],"description": "Asserts that a value is of a given type.","arguments": "- typ: The type to assert that `self` is a value of.","examples": "> Example\n  Assert that 1 is of type Boolean.\n\n      from Standard.Test import Test\n\n      example_should_be_a = 1.should_be_a Boolean"},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_equal_ignoring_order", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains the same elements as `that`.\n\nIt only checks that all elements from one collection are also present in the\nother one. Arities of elements are not checked, so the collections can still\ndiffer in length by containing duplicate elements.\n\nIt will work on any collection which supports the methods\n`each : (Any -> Nothing) -> Any` and `contains : Any -> Boolean`.","arguments": "- that: The collection to compare.","examples": "> Example\n  Assert that one vector should contain the same elements as another.\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_equal = [1, 2] . should_equal_ignoring_order [2, 1]"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_equal_ignoring_order", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains the same elements as `that`.\n\nIt only checks that all elements from one collection are also present in the\nother one. Arities of elements are not checked, so the collections can still\ndiffer in length by containing duplicate elements.\n\nIt will work on any collection which supports the methods\n`each : (Any -> Nothing) -> Any` and `contains : Any -> Boolean`.","arguments": "- _: The collection to compare.","examples": "> Example\n  Assert that one vector should contain the same elements as another.\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_equal = [1, 2] . should_equal_ignoring_order [2, 1]"},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_only_contain_elements_in", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains only elements in `that`.\n\nIt checks that all elements from `self` are also present in `that`. It does\nnot require that all elements of `that` are contained in `self`. Arities of\nelements are not checked, so `self` may still contain more elements than\n`that` by containing duplicates.\n\nIt will work on any collection which supports the methods\n`each : (Any -> Nothing) -> Any` and `contains : Any -> Boolean`.","arguments": "- that: The collection to compare.","examples": "> Example\n  Assert that one vector should contain only elements in another.\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_equal = [1, 2] . should_only_contain_elements_in  [1, 2, 3, 4]"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_only_contain_elements_in", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains only elements in `that`.\n\nIt checks that all elements from `self` are also present in `that`. It does\nnot require that all elements of `that` are contained in `self`. Arities of\nelements are not checked, so the collections can still differ in length by\ncontaining duplicate elements.\n\nIt will work on any collection which supports the methods\n`each : (Any -> Nothing) -> Any` and `contains : Any -> Boolean`.","arguments": "- that: The collection to compare.","examples": "> Example\n  Assert that one vector should contain only elements in another.\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_should_equal = [1, 2] . should_only_contain_elements_in  [1, 2, 3, 4]"},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_contain", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains an element.\n\n\n\nThis method delegates to the `contains` method of `self` and will use the\nrules of the particular type - be it a `Vector`, `Text` or any custom type\nimplementing a method `contains : a -> Boolean`.","arguments": "- element: The element to check.","examples": "> Example\n  Assert that a string contains a substring.\n\n      from Standard.Test import Test\n\n      example_should_equal = \"foobar\".should_contain \"foo\""},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_contain", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains an element.\n\n\n\nThis method delegates to the `contains` method of `self` and will use the\nrules of the particular type - be it a `Vector`, `Text` or any custom type\nimplementing a method `contains : a -> Boolean`.","arguments": "- element: The element to check.","examples": "> Example\n  Assert that a string contains a substring.\n\n      from Standard.Test import Test\n\n      example_should_equal = \"foobar\".should_contain \"foo\""},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_not_contain", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value does not contain an element.\n\n\n\nThis method delegates to the `contains` method of `self` and will use the\nrules of the particular type - be it a `Vector`, `Text` or any custom type\nimplementing a method `contains : a -> Boolean`.","arguments": "- element: The element to check."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_not_contain", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value does not contain an element.\n\n\n\nThis method delegates to the `contains` method of `self` and will use the\nrules of the particular type - be it a `Vector`, `Text` or any custom type\nimplementing a method `contains : a -> Boolean`.","arguments": "- element: The element to check."},
{"module": "Standard.Test.Extensions_Helpers", "type": "", "name": "rhs_error_check", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "A helper that ensures that the expected value provided in some of the Test\noperations is not an error.\nThe left-hand side may be an error and that will cause a test failure.\nBut the right-hand side being an error is bad test design and should be fixed."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Faker", "arguments": {"generator": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "upper_case_letters", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Set of upper case letters."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "lower_case_letters", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Set of lower case letters."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "digits", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Set of numerical digits."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"seed": {"lazy": false, "default": "0"}},"aliases": [],"icon": "random","description": "Creates a new Faker which can be used for creating test values.","arguments": "- seed: Optional seed value to make the sequence deterministic"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "text_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"template": {"lazy": false}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Creates a random Text based on a template of character sets.","arguments": "- template: Vector of vectors that represent the possible characters for each\n  letter, as UTF-16 code units or a Text value made up of `A` for upper case,\n  `a` for lower case, `0` for digits, and any other character for itself.","examples": "> Example\n  Creates a fake UK National Insurance number:\n\n         l = \"ABCEGHJKLMNOPRSTWXYZ\".char_vector\n         n = \"0123456789\".char_vector\n         s = \"ABCDFMP \".char_vector\n         template = [l, l, n, n, n, n, n, s]\n         ni_number = Faker.new . text_value template"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "alpha", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false, "default": "1"}, "upper_case": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Generates a Text consisting of lower/upper case characters.","arguments": "- length: length of text to generate\n- upper_case: use upper_case letters"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "alpha_numeric", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false, "default": "1"}, "upper_case": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Generates a Text consisting of lower/upper case characters and digits.","arguments": "- length: length of text to generate\n- upper_case: use upper_case letters"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "hexadecimal", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false, "default": "1"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Generates a Text for a hexadecimal number","arguments": "- length: length of text to generate"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "boolean", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random Boolean value"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "integer", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"minimum": {"lazy": false, "default": "0"}, "maximum": {"lazy": false, "default": "100"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random Integer value"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "large_integer", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"bit_length": {"lazy": false}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random large Integer value (represented internally as a Java\n`BigInteger`.\n\nThe values provided by this method are selected from a sparse set within\nthe specified range. For example, with `bit_length=4`, the possible range\nis -16 to 16, but the actual values only include 9, 11, 13 and 15.\n\nArguments\n- bit_length: specifies the range of values to select from. The values\n  will be between -2^bit_length and 2^bit_length."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "decimal", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"bit_length": {"lazy": false}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random Decimal value (represented internally as a Java\n`BigDecimal`.\n\nThis generator uses `large_integer` to generate an `Integer`, and then\nadds a random `Float`. See `large_integer` for a description of the range\nof values that this can return.\n\nArguments\n- bit_length: specifies the range of values to select from. The values\n  will be between -2^bit_length and 2^bit_length."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "float", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"minimum": {"lazy": false, "default": "0.0"}, "maximum": {"lazy": false, "default": "1.0"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random Float value"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "float_full_range_exp", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random Float value in full range of allowed values,\nexponentially distributed (exponents are uniformly distributed)."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "vector_item", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"items": {"lazy": false}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Picks an item at Random from a list","arguments": "- items: Vector of items to pick from\n- generator: Random number generator"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "make_some_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "chance": {"lazy": false, "default": "0.1"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Randomly converts some values to Nothing"},
{"module": "Standard.Test.Frame_Hider", "type": "", "name": "hide", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Hides the stack frames of the contained code from `get_top_stack_frame`.\n\n > Example\n     Wrap the body of a test utility to hide its stack frames.\n\n     Any.should_equal self that = Frame_Hider.hide <|\n         ...\n         Error.throw (\"Not equal at \" + Frame_Hider.get_top_stack_frame)"},
{"module": "Standard.Test.Frame_Hider", "type": "", "name": "unhide", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Unhides the stack frames of the call to the user-supplied callback\n application.\n\n > Example\n     Wrap a callback invocation to unhide its stack frames.\n\n     test_utility test_predicate x =\n         ...\n         Frame_Hider.unhide (test_predicate x)"},
{"module": "Standard.Test.Frame_Hider", "type": "", "name": "unhide_1", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}, "x": {"lazy": false}},"aliases": [],"description": "Unhides the stack frames of the call to the user-supplied callback\n application, uncurried for one argument.\n\n `unhide_1 f x` is Equivalent to `unhide (f x)`.\n\n > Example\n     Wrap a callback invocation to unhide its stack frames.\n\n     test_utility test_predicate x =\n         ...\n         Frame_Hider.unhide_1 test_predicate x"},
{"module": "Standard.Test.Frame_Hider", "type": "", "name": "unhide_2", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}, "x": {"lazy": false}, "y": {"lazy": false}},"aliases": [],"description": "Unhides the stack frames of the call to the user-supplied callback\n application, uncurried for two arguments.\n\n `unhide_1 f x y` is Equivalent to `unhide (f x y)`.\n\n > Example\n     Wrap a callback invocation to unhide its stack frames.\n\n     test_utility test_predicate x y =\n         ...\n         Frame_Hider.unhide_2 test_predicate x y"},
{"module": "Standard.Test.Frame_Hider", "type": "", "name": "get_top_stack_frame", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Identify the correct top stack frame by skipping over the stack frames\n inside test utilities."},
{"module": "Standard.Test.Group", "type": "Group_Builder", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Group_Builder", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "builder": {"lazy": false, "default": "Builder.new"}, "teardown_ref": {"lazy": false, "default": "Ref.new (_ -\u003e Nothing)"}},"aliases": [],"arguments": "- name: The name of the group.\n- builder: Vector builder used for storing specs.\n- teardown_ref: A reference to a teardown method."},
{"module": "Standard.Test.Group", "type": "Group_Builder", "name": "specify", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "code": {"lazy": true, "type": "Any", "checked": true}, "pending": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Specifies a single test.","arguments": "- name: The name of the test spec. Should be unique within the group.\n- code: A thunk that takes no arguments.\n- pending: Contains a reason for why the test should be ignored. If Nothing, the test\n           is not ignored."},
{"module": "Standard.Test.Group", "type": "Group_Builder", "name": "teardown", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"code": {"lazy": true, "type": "Any", "checked": true}},"aliases": [],"description": "Provide a teardown of a group - a method that will be called once all the tests from the\ngroup are finished.\n\nIf called multiple times, the teardown operations will be chained.","arguments": "- code: A function that does the teardown of a group. This function does not take any arguments,\n        and its return value is ignored."},
{"module": "Standard.Test.Group", "type": "Group", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Group", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "teardown": {"lazy": false, "type": "Any -> Any", "checked": true}, "specs": {"lazy": false, "type": "Vector Spec", "checked": true}, "pending": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Test.Group", "type": "Group", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Group", "type": "Group", "name": "is_pending", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Test.Group", "type": "Group_Comparator", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Group_Comparator", "arguments": {},"aliases": [],"description": "Group is used as a key inside a map, so we define its comparator which uses only the\n`name` field."},
{"module": "Standard.Test.Group", "type": "Group_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "(Ordering | Nothing)", "arguments": {"g1": {"lazy": false, "type": "Group", "checked": true}, "g2": {"lazy": false, "type": "Group", "checked": true}},"aliases": []},
{"module": "Standard.Test.Group", "type": "Group_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"g": {"lazy": false, "type": "Group", "checked": true}},"aliases": []},
{"module": "Standard.Test.Group", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Group", "checked": true}},"aliases": []},
{"module": "Standard.Test.Helpers", "type": "Finished_With", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Finished_With", "arguments": {"err": {"lazy": false}, "stack_trace_text": {"lazy": false}},"aliases": [],"description": "An error describing that a test finished with an unexpected error.","arguments": "- err: The payload of the error that triggered this error.\n- stack_trace_text: A textual representation of the stack trace for the\n  error."},
{"module": "Standard.Test.Helpers", "type": "", "name": "run_specs_from_group", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"specs": {"lazy": false, "type": "Vector Spec", "checked": true}, "group": {"lazy": false, "type": "Group", "checked": true}, "progress_reporter": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Helpers", "type": "", "name": "group_contains_spec", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"group": {"lazy": false, "type": "Group", "checked": true}, "spec": {"lazy": false, "type": "Spec", "checked": true}},"aliases": []},
{"module": "Standard.Test.Helpers", "type": "", "name": "run_spec", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"spec": {"lazy": false, "type": "Spec", "checked": true}},"aliases": []},
{"module": "Standard.Test.Helpers", "type": "", "name": "execute_spec_code", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"spec_code": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Problems", "type": "", "name": "get_attached_warnings", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false}},"aliases": [],"description": "Returns values of warnings attached to the value."},
{"module": "Standard.Test.Problems", "type": "", "name": "test_problem_handling", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"action": {"lazy": false}, "expected_problems": {"lazy": false}, "result_checker": {"lazy": false}, "unwrap_errors": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "ignore_warning_cardinality": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Tests how a specific operation behaves depending on the requested\n`Problem_Behavior`.","arguments": "- action: The action to execute. It takes a `Problem_Behavior` which\n  specifies whether it should ignore problems, report them as warnings or\n  raise a dataflow error on the first encountered problem.\n- expected_problems: a list of expected problems, in the order that they are\n  expected to be reported. It should not be empty. The problems are assumed\n  to be Atoms.\n- result_checker: A function which should verify that the result generated by\n  the action is correct. It does not return anything, instead it should use\n  the standard testing approach, like `x.should_equal y`.\n- unwrap_errors: If true, remove any wrapping errors from errors and warnings\n  before checking them.\n- ignore_warning_cardinality: If true, the reported warnings may be\n  duplicated and that will be accepted. If false (default), the warning count\n  has to match the counts in `expected_problems`."},
{"module": "Standard.Test.Problems", "type": "", "name": "test_advanced_problem_handling", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"action": {"lazy": false}, "error_checker": {"lazy": false}, "warnings_checker": {"lazy": false}, "result_checker": {"lazy": false}},"aliases": [],"description": "Tests how a specific operation behaves depending on the requested\n`Problem_Behavior`. A variant that allows more customization over how\nexpected problems are checked.","arguments": "- action: The action to execute. It takes a `Problem_Behavior` which\n  specifies whether it should ignore problems, report them as warnings or\n  raise a dataflow error on the first encountered problem.\n- error_checker: A function which should verify that the returned error is as\n  expected.\n- warnings_checker: A function which should verify that the returned warnings\n  are as expected.\n- result_checker: A function which should verify that the result generated by\n  the action is correct. It does not return anything, instead it should use\n  the standard testing approach, like `x.should_equal y`."},
{"module": "Standard.Test.Problems", "type": "", "name": "assume_no_problems", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"result": {"lazy": false}},"aliases": [],"description": "Checks if the provided value does not have any attached problems."},
{"module": "Standard.Test.Problems", "type": "", "name": "expect_warning", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"expected_warning": {"lazy": false}, "result": {"lazy": false}, "unwrap_errors": {"lazy": false, "default": "True"}},"aliases": [],"description": "Checks if the provided value has a specific warning attached.\nIt allows other warnings to be present also.","arguments": "- expected_warning: The expected warning. It can either by a warning type or\n  a concrete value.\n- result: The value to check.\n- unwrap_errors: If true, remove any wrapping errors from the result before\n  checking against the expected warning."},
{"module": "Standard.Test.Problems", "type": "", "name": "expect_only_warning", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"expected_warning": {"lazy": false}, "result": {"lazy": false}, "unwrap_errors": {"lazy": false, "default": "True"}},"aliases": [],"description": "Checks if the provided value has a specific warning attached and if there are\nno other warnings.\n\nAs a utility, it also returns the found warning.","arguments": "- expected_warning: The expected warning. It can either by a warning type or\n  a concrete value.\n- result: The value to check.\n- unwrap_errors: If true, remove any wrapping errors from the result before\n  checking against the expected warning."},
{"module": "Standard.Test.Problems", "type": "", "name": "not_expect_warning", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"expected_warning_type": {"lazy": false}, "result": {"lazy": false}},"aliases": [],"description": "Checks if the provided value does _not_ have a warning of the specified type.\n\nIt allows other warnings to be present also."},
{"module": "Standard.Test.Should_Reach", "type": "Should_Reach", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Should_Reach", "arguments": {"reached_ref": {"lazy": false, "type": "Ref Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Test.Should_Reach", "type": "Should_Reach", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a new Should_Reach test object."},
{"module": "Standard.Test.Should_Reach", "type": "Should_Reach", "name": "reached", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {},"aliases": [],"description": "Records that a point has been reached."},
{"module": "Standard.Test.Should_Reach", "type": "Should_Reach", "name": "should_have_reached", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Spec_Result", "arguments": {},"aliases": [],"description": "Checks if a point was reached in execution."},
{"module": "Standard.Test.Spec", "type": "Spec", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Spec", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "code": {"lazy": false, "type": "Any -> Any", "checked": true}, "pending": {"lazy": false, "type": "Nothing | Text", "checked": true}},"aliases": []},
{"module": "Standard.Test.Spec", "type": "Spec", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "Success", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Spec_Result", "arguments": {},"aliases": [],"description": "Represents a successful behavioral test."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "Failure", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Spec_Result", "arguments": {"message": {"lazy": false}, "details": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Represents a failing behavioral test.","arguments": "- message: The reason why the test failed.\n- details: Additional context of the error, for example the stack trace."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "Pending", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Spec_Result", "arguments": {"reason": {"lazy": false}},"aliases": [],"description": "Represents a pending behavioral test.","arguments": "- reason: Text describing why the test is pending."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "is_pending", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the Spec_Result is pending."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "is_fail", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the Spec_Result is a failure."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "is_success", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the Spec_Result is a success."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Suite", "type": "Suite_Builder", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Suite_Builder", "arguments": {"builder": {"lazy": false}},"aliases": [],"arguments": "- builder: Vector builder that holds all the groups."},
{"module": "Standard.Test.Suite", "type": "Suite_Builder", "name": "group", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "fn": {"lazy": false, "type": "Group_Builder -> Any", "checked": true}, "pending": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Add a group to the suite builder.","arguments": "- name: Name of the group. When collecting multiple groups into a single suite, all the\n  group names must be unique. Otherwise, a panic is thrown.\n- fn: A callback function that takes `Group_Builder` as an argument. You can call the\n  `specify` method on group builder. See its docs.\n- pending: Contains a reason for why the test group should be ignored. If Nothing, the test\n  is not ignored."},
{"module": "Standard.Test.Suite", "type": "Suite", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Suite", "arguments": {"groups": {"lazy": false, "type": "Vector Group", "checked": true}},"aliases": []},
{"module": "Standard.Test.Suite", "type": "Suite", "name": "run_with_filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "(Boolean | Nothing)", "arguments": {"filter": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "should_exit": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Run only tests that match the provided filter.","arguments": "- filter: Either text or Nothing. If Nothing, matches all the specs and all the groups.\n  If `filter` is text, it is first compiled into a regex and all the groups or the\n  specs that match the regex are run.\n- should_exit: If true, executes `System.exit` at the end, so the method does not return.\n  If false, return boolean from the method indicating whether some tests failed.","returns": "Boolean if `should_exit` is False, otherwise exits the process."},
{"module": "Standard.Test.Suite", "type": "Suite", "name": "group_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the names of all the groups in this suite."},
{"module": "Standard.Test.Suite", "type": "Suite", "name": "print_all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Print the structure of the suite to the console."},
{"module": "Standard.Test.Suite", "type": "", "name": "name_matches", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "filter": {"lazy": false, "type": "Text | Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Test.Suite_Config", "type": "Suite_Config", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Suite_Config", "arguments": {"print_only_failures": {"lazy": false, "type": "Boolean", "checked": true}, "output_path": {"lazy": false, "type": "File | Nothing", "checked": true}, "use_ansi_colors": {"lazy": false, "type": "Boolean", "checked": true}, "caller_project_root": {"lazy": false, "type": "File | Nothing", "checked": true}},"aliases": [],"description": "Construct a configuration","arguments": "- print_only_failures: Should only failures be printed.\n- output_path: The path to the JUnit XML file to write to. If Nothing, no JUnit XML file\n  will be written.\n- use_ansi_colors: Should ANSI colors be used in the output.\n- caller_project_root: The root project path of the caller."},
{"module": "Standard.Test.Suite_Config", "type": "Suite_Config", "name": "from_environment", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates an Suite_Config based off environment and caller location"},
{"module": "Standard.Test.Suite_Config", "type": "Suite_Config", "name": "should_output_junit", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Should the results be written to JUnit XML file."},
{"module": "Standard.Test.Suite_Config", "type": "", "name": "find_project_root", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Suite_Config", "type": "", "name": "find_caller_script", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stack": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test", "type": "Test", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Test", "arguments": {},"aliases": [],"description": "Contains only static methods"},
{"module": "Standard.Test.Test", "type": "Test", "name": "build", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fn": {"lazy": false}},"aliases": [],"description": "Construct a Test Suite object"},
{"module": "Standard.Test.Test", "type": "Test", "name": "expect_panic_with", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}, "matcher": {"lazy": false}},"aliases": [],"description": "Expect a function to fail with the provided panic.\n\nIt returns the caught panic if it matches the expected panic type,\notherwise it fails the test.","arguments": "- action: The action to evaluate that is expected to fail with a panic.\n- matcher: The expected type of the panic thrown by `action`.","examples": "> Example\n  Expect that a computation should panic as part of a test.\n\n      import Standard.Examples\n      from Standard.Test import Test\n\n      example_expect_panic_with =\n          Test.expect_panic_with Examples.throw_panic Examples.My_Error"},
{"module": "Standard.Test.Test", "type": "Test", "name": "expect_panic", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"matcher": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Expect a function to fail with the provided panic.\n\nAn alternative API to `expect_panic_with` where the order of arguments is\nmore natural - as it allows blocks without reordering the arguments.","arguments": "- matcher: The expected type of the panic thrown by `action`.\n- action: The action to evaluate that is expected to fail with a panic.","examples": "> Example\n  Expect that a computation should panic as part of a test.\n\n       import Standard.Examples\n       from Standard.Test import Test\n\n       example_expect_panic_with =\n           Test.expect_panic_with Examples.My_Error <|\n               IO.println 'hello'\n               Examples.throw_panic\n\n               IO.println 'this is not reached'"},
{"module": "Standard.Test.Test", "type": "Test", "name": "assert_no_problems", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks that the provided action returns without any errors or warnings.\n\nIf you just want to check for errors, usage of the `.should_succeed`\nextension function is preferred."},
{"module": "Standard.Test.Test", "type": "Test", "name": "fail", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": false}, "details": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Fail a test with the given message.","arguments": "- message: The message printed when failing the test.","examples": "> Example\n  Failing a test manually.\n\n      from Standard.Test import Test\n\n      example_fail = Test.fail \"Something went wrong.\""},
{"module": "Standard.Test.Test", "type": "Test", "name": "enrich_message_with_clue", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test", "type": "Test", "name": "fail_match_on_unexpected_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Reports an unexpected dataflow error has occurred."},
{"module": "Standard.Test.Test", "type": "Test", "name": "with_clue", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"clue": {"lazy": true}, "behavior": {"lazy": true}},"aliases": [],"description": "Executes the block of code passed as behavior and adds a clue modifier which\nchanges how assertion failures are reported.\n\nNesting with_clue invocations results in clue aggregation.","arguments": "- clue: either a text which gets prepended to the failure or a function which transforms the failure message\n- behavior: the behavior to test","examples": "> Example\n  Add a clue to a test\n     from Standard.Test import Test, Test_Suite\n     import Standard.Test.Extensions\n     main = Test_Suite.run_main <|\n         Test.group \"Tests\" <|\n             Test.specify \"some property\" <|\n                 xs = Vector.new 100 (n -> n)\n                 xs.each x->\n                     Test.with_clue (\"[\"+x.to_text+\"] \") <|\n                         x . should_equal 0"},
{"module": "Standard.Test.Test", "type": "Test", "name": "with_retries", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "A helper method that retries the action a few times if it panics.\nIt allows to make flaky tests more robust.\n\nIt waits for a short period of time between retries (in case the failures\nare related e.g. to network conditions or propagation delays).\n\nThis function should be placed inside of the `specify` block. It can be\nused to retry the whole test, or it can be applied to a specific block\ninside of the test to only re-run that specific block (in such case, any\nside-effects must be considered carefully).\n\nThe method returns the first successful value returned by the action,\nor fails with the last error thrown by the action after exhausting retry\nattempts."},
{"module": "Standard.Test.Test_Environment", "type": "", "name": "unsafe_with_environment_override", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED UNSTABLE", "returnType": "", "arguments": {"key": {"lazy": false}, "value": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Runs a given action with an environment variable modified to a given value.\nThe environment variable is restored to its original value after the action.\nThe environment variable override is only visible to the Enso\n`Environment.get` method, the environment as seen from a direct\n`System.getenv` Java call remains unchanged."},
{"module": "Standard.Test.Test_Reporter", "type": "Ignore_Progress_Reporter", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ignore_Progress_Reporter", "arguments": {},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Ignore_Progress_Reporter", "name": "clear", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Ignore_Progress_Reporter", "name": "report_progress", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"status_text": {"lazy": false, "type": "Text", "checked": true}, "increment": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Command_Line_Progress_Reporter", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Command_Line_Progress_Reporter", "arguments": {"current_progress": {"lazy": false}, "total_count": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Command_Line_Progress_Reporter", "name": "make", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"total_expected": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Command_Line_Progress_Reporter", "name": "report_progress", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"status_text": {"lazy": false, "type": "Text", "checked": true}, "increment": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Command_Line_Progress_Reporter", "name": "clear", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "wrap_junit_testsuites", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"config": {"lazy": false}, "builder": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Write the JUnit XML header."},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "red", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "green", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "highlighted", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "grey", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "maybe_red_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "maybe_green_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "maybe_highlighted_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "maybe_grey_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "print_single_result", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group_name": {"lazy": false, "type": "Text", "checked": true}, "test_result": {"lazy": false, "type": "Test_Result", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}},"aliases": [],"description": "Print result for a single Spec run"},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "report_github_error_message", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"title": {"lazy": true, "type": "Text", "checked": true}, "message": {"lazy": true, "type": "Text", "checked": true}},"aliases": [],"description": "Reports an error message to show up as a note in GitHub Actions,\nonly if running in the GitHub Actions environment."},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "generate_github_error_annotation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"title": {"lazy": false, "type": "Text", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Generates a GitHub Actions annotation for a failing test."},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "print_report", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"test_results": {"lazy": false, "type": "Vector Test_Result", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}, "builder": {"lazy": false, "type": "StringBuilder | Nothing", "checked": true}},"aliases": [],"description": "Prints all the results, optionally writing them to a jUnit XML output.","arguments": "- test_results: Vector of `Test_Result`. Can be empty. Can contain results from multiple\n                groups.\n- builder: StringBuilder or Nothing. If StringBuilder, then a jUnit XML format is appended to\n           that StringBuilder."},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "print_pending_group", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false}, "config": {"lazy": false}, "builder": {"lazy": false}},"aliases": [],"description": "Prints a pending group, optionally writing it to a jUnit XML output."},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "print_group_report", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group_name": {"lazy": false}, "test_results": {"lazy": false}, "config": {"lazy": false}, "builder": {"lazy": false}},"aliases": [],"description": "Prints report for test_results from a single group.","arguments": "- test_results: Test test_results from a single group"},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "escape_xml", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false}, "inside_attribute": {"lazy": false, "default": "False"}},"aliases": [],"description": "Escape Text for XML"},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "progress_width", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "print_progress", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current_progress": {"lazy": false}, "total_count": {"lazy": false}, "status_text": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "clear_progress", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "is_terminal_interactive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Checks if the current process is running in an interactive terminal session."},
{"module": "Standard.Test.Test_Result", "type": "Test_Result", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Test_Result", "arguments": {"group_name": {"lazy": false, "type": "Text", "checked": true}, "spec_name": {"lazy": false, "type": "Text", "checked": true}, "spec_result": {"lazy": false, "type": "Spec_Result", "checked": true}, "time_taken": {"lazy": false, "type": "Duration", "checked": true}},"aliases": []},
{"module": "Standard.Test.Test_Result", "type": "Test_Result", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Render as Test_Result as Text."},
{"module": "Standard.Test.Test_Result", "type": "Test_Result", "name": "is_pending", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Was the test pending?"},
{"module": "Standard.Test.Test_Result", "type": "Test_Result", "name": "is_success", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Was the test successful?"},
{"module": "Standard.Test.Test_Result", "type": "Test_Result", "name": "is_fail", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Was the test a failure?"},
{"module": "Standard.Visualization.SQL.Visualization", "type": "", "name": "prepare_visualization", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Prepares the database table for visualization.\n\n\n\nFor each interpolation it provides its value, its actual type name, its\nexpected SQL type name and if it was possible to infer it, its expected Enso\ntypename.\n\nExpected Enso types are inferred based on known SQL types and their mapping\nto Enso types.","arguments": "- x: The database table to prepare for visualization."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "prepare_visualization", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"y": {"lazy": false}, "max_rows": {"lazy": false, "default": "1000"}},"aliases": [],"description": "Prepares a table or column for visualization.\n\n\n\nIn case of Database backed data, it materializes a fragment of the data.","arguments": "- y: The table to prepare for visualization.\n- max_rows: The maximum number of rows to display."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "max_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Column Limit"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Render Error to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"row": {"lazy": false}},"aliases": [],"description": "Render Vector to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "max_rows": {"lazy": false}},"aliases": [],"description": "Render Vector to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_matrix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current": {"lazy": false}, "vector": {"lazy": false}, "idx": {"lazy": false, "default": "0"}},"aliases": [],"description": "Render Vector of Vector / Array to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_object_matrix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current": {"lazy": false}, "vector": {"lazy": false}, "idx": {"lazy": false, "default": "0"}},"aliases": [],"description": "Render Vector of Objects to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_dictionary", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dict": {"lazy": false}, "max_items": {"lazy": false}},"aliases": [],"description": "Render Dictionary to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_js_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"js_object": {"lazy": false}, "max_items": {"lazy": false}},"aliases": [],"description": "Render JS_Object to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_xml_element", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"xml_element": {"lazy": false}, "max_items": {"lazy": false}, "type": {"lazy": false, "type": "Text", "checked": true, "default": "\"XML_Element\""}},"aliases": [],"description": "Render XML_Element to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dataframe": {"lazy": false}, "max_rows": {"lazy": false}, "all_rows_count": {"lazy": false}, "is_db_table": {"lazy": false}},"aliases": [],"description": "Creates a JSON representation for the visualizations.","arguments": "- dataframe: the dataframe containing (possibly just a fragment of) the data\n  to display.\n- all_rows_count: the number of all rows in the underlying data, useful if\n  only a fragment is displayed."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "get_distinct_values_for_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "column_index": {"lazy": false}},"aliases": [],"description": "gets the distinct values of a column, used for filter options","arguments": "- table: table containing columns \n- column_index: the index of the column to get the distinct values for"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "apply_sort_to_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "sort_col_index_list": {"lazy": false}, "sort_direction_list": {"lazy": false}},"aliases": [],"description": "applies the sort model to the table.","arguments": "- x: table to sort\n- sort_col_index_list: indexes of columns to sort\n- sort_direction_list: list of sort directions 1 for ascending -1 for descending"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "apply_single_filter_to_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "filter_col": {"lazy": false}, "filter_action": {"lazy": false}, "filter_val": {"lazy": false}},"aliases": [],"description": "applies one filter to the table.","arguments": "- table: table to sort\n- filter_col: the column index to filter\n- filter_action: filter action\n- filter_val: values to filter"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "apply_filter_to_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "i": {"lazy": false}, "filter_col": {"lazy": false}, "filter_action": {"lazy": false}, "filter_val": {"lazy": false}},"aliases": [],"description": "applies the filter model to the table.","arguments": "- table: table to sort\n- i: initially 0 and incremented for number of filters\n- filter_col: indexes of columns with sorts applies\n- filter_action: list of filter actions \n- filter_val: values to filter"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "get_rows_for_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "start_number": {"lazy": false}, "sort_col_index_list": {"lazy": false, "default": "Nothing"}, "sort_direction_list": {"lazy": false, "default": "Nothing"}, "filter_col": {"lazy": false, "default": "Nothing"}, "filter_action": {"lazy": false, "default": "Nothing"}, "filter_val": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Prepares the row data table for visualizations using the server side row model.","arguments": "- start_number: the start index of the next 100 rows to get"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_other", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Create JSON serialization of values."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": false}, "level": {"lazy": false, "default": "0"}},"aliases": [],"description": "Create JSON serialization of values for the table."},
{"module": "Standard.Visualization.AI", "type": "", "name": "goal_placeholder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.AI", "type": "Table", "name": "build_ai_prompt", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.AI", "type": "", "name": "build_ai_prompt", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"subject": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.AI", "type": "", "name": "print", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"subject": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.File_Upload", "type": "File_Being_Uploaded", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Being_Uploaded", "arguments": {"file_path": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Visualization.File_Upload", "type": "", "name": "file_uploading", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false}},"aliases": [],"description": "A function that throws an error to indicate that a file is being uploaded to\n`path`.","arguments": "- `path`: The path to which the file is being uploaded."},
{"module": "Standard.Visualization.Geo_Map", "type": "", "name": "json_from_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": [],"description": "Construct JSON describing table geo map visualization.","arguments": "- table: the Table to be visualized."},
{"module": "Standard.Visualization.Geo_Map", "type": "", "name": "process_to_json_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Default preprocessor for the geo map visualization, generating JSON text\ndescribing the geo map visualization.","arguments": "- value: the value to be visualized."},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies that the builtin Table visualization should be used for any type,\nunless specified otherwise."},
{"module": "Standard.Visualization.Helpers", "type": "JS_Object", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies that the builtin JSON visualization should be used for any JS_Objects"},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a Text used to display this value in the IDE.\n\nThe particular representation is left unspecified and subject to change in\nthe future. The current implementation uses JSON serialization as the\ndefault.\n\nTypes defining their own versions of this method should ensure that the\nresult is reasonably small and that the operation is quick to compute.","examples": "> Example\n  Converting the number `2` into visualization data.\n\n      2.to_default_visualization_data"},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "when_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": true}},"aliases": [],"description": "Returns the given value if this is not an error. Propagates error otherwise.","arguments": "- val: a value that will be evaluated and returned if `self` is an error."},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "is_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the value is not an error."},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "map_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Maps over non-error value.","arguments": "- f: a function that will be used to generate return value from a non-error\n     `self` value."},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "catch_", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": true}},"aliases": [],"description": "Recovers from the error by returning the parameter value.\n\nThe error contents will be ignored.","arguments": "- val: a value that will be evaluated and returned if `self` is an error."},
{"module": "Standard.Visualization.Helpers", "type": "Nothing", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a Text used to display this value in the IDE."},
{"module": "Standard.Visualization.Helpers", "type": "Error", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a display representation of the dataflow error on which it is called.","examples": "> Example\n  Displaying a dataflow error.\n\n      import Standard.Examples\n\n      example_display = Examples.throw_error.to_default_visualization_data"},
{"module": "Standard.Visualization.Helpers", "type": "Error", "name": "when_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": true}},"aliases": [],"description": "Returns the given value if this is not an error. Propagates error otherwise.","arguments": "- val: a value that will be evaluated and returned if `self` is an error."},
{"module": "Standard.Visualization.Helpers", "type": "Error", "name": "is_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the value is not an error."},
{"module": "Standard.Visualization.Helpers", "type": "Error", "name": "map_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Maps over non-error value.","arguments": "- _: a function that will be used to generate return value from a non-error\n     `self` value."},
{"module": "Standard.Visualization.Helpers", "type": "Error", "name": "catch_", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": true}},"aliases": [],"description": "Recovers from the error by returning the parameter value.\n\nThe error contents will be ignored.","arguments": "- val: a value that will be evaluated and returned if `self` is an error."},
{"module": "Standard.Visualization.Helpers", "type": "Vector", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Guides the visualization system to display the most suitable graphical\nrepresentation for this table."},
{"module": "Standard.Visualization.Helpers", "type": "Vector", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Transform the vector into text for displaying as part of its default\nvisualization."},
{"module": "Standard.Visualization.Helpers", "type": "", "name": "render_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}, "depth": {"lazy": false, "default": "0"}, "max_depth": {"lazy": false, "default": "5"}, "max_length": {"lazy": false, "default": "100"}},"aliases": [],"description": "Internal function to convert a Vector to a JSON string."},
{"module": "Standard.Visualization.Helpers", "type": "Array", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Guides the visualization system to display the most suitable graphical\nrepresentation for this table."},
{"module": "Standard.Visualization.Helpers", "type": "Array", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a Text used to display this value in the IDE.\n\nThe particular representation is left unspecified and subject to change in\nthe future. The current implementation uses JSON serialization as the\ndefault.","examples": "> Example\n  Converting an array to its default visualization representation.\n\n      [1, 2, 3, 4].to_array.to_default_visualization_data"},
{"module": "Standard.Visualization.Helpers", "type": "Table", "name": "lookup_ignore_case", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Looks for a column by a given name.\n\nUnlike `Table.at` looks into index columns and name comparison is case-insensitive.","arguments": "- text: the case-insensitive name of the searched column."},
{"module": "Standard.Visualization.Helpers", "type": "Table", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Guides the visualization system to display the most suitable graphical\nrepresentation for this table."},
{"module": "Standard.Visualization.Helpers", "type": "Table", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a Text used to display this table in the IDE by default.\n\nReturns a JSON object containing useful metadata and previews of column\nvalues."},
{"module": "Standard.Visualization.Helpers", "type": "Column", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Guides the visualization system to display the most suitable graphical\nrepresentation for this Column."},
{"module": "Standard.Visualization.Helpers", "type": "Column", "name": "is_numeric", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the column stores numbers."},
{"module": "Standard.Visualization.Helpers", "type": "", "name": "make_lazy_visualization_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Returns the data requested to render a lazy view of the default visualization. Decides\nwhether to return a simplified version of the lazy data format."},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "to_lazy_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Returns the data requested to render a lazy view of the default visualization."},
{"module": "Standard.Visualization.Helpers", "type": "Text", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the data requested to render a lazy view of the default visualization."},
{"module": "Standard.Visualization.Helpers", "type": "Text", "name": "to_lazy_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Returns the data requested to render a lazy view of the default visualization."},
{"module": "Standard.Visualization.Helpers", "type": "Column", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Shows a JSON serialization of a truncated version of this column, for the\nbenefit of visualization in the IDE."},
{"module": "Standard.Visualization.Helpers", "type": "Row", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Guides the visualization system to display the most suitable graphical\nrepresentation for this Row."},
{"module": "Standard.Visualization.Helpers", "type": "Row", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a Text used to display this table in the IDE by default.\n\nReturns a JSON object containing useful metadata and previews of column\nvalues."},
{"module": "Standard.Visualization.Helpers", "type": "Table", "name": "to_lazy_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_cell_position": {"lazy": false}, "text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Returns the data requested to render a lazy view of the default visualization."},
{"module": "Standard.Visualization.Helpers", "type": "", "name": "truncate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": false}, "max_length": {"lazy": false, "default": "256"}, "suffix": {"lazy": false, "default": "\u0027...\u0027"}},"aliases": [],"description": "Truncate message to the provided max length."},
{"module": "Standard.Visualization.Histogram", "type": "Update", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Update", "arguments": {"values": {"lazy": false}, "label": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Histogram", "type": "Update", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generate JSON that can be consumed by the visualization."},
{"module": "Standard.Visualization.Histogram", "type": "Table", "name": "first_numeric", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get first numeric column of the table."},
{"module": "Standard.Visualization.Histogram", "type": "Table", "name": "value_column", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get the value column - the column that will be used to create histogram."},
{"module": "Standard.Visualization.Histogram", "type": "", "name": "from_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Histogram", "type": "", "name": "from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Histogram", "type": "", "name": "from_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Histogram", "type": "", "name": "process_to_json_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Default preprocessor for the histogram visualization.\n\nGenerates JSON text describing the histogram visualization.","arguments": "- value: the value to be visualized."},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "Builtin", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Id", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "A builtin visualization, implemented in the graphical interface and not\nimported from any library."},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "Library", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Id", "arguments": {"project": {"lazy": false}, "name": {"lazy": false}},"aliases": [],"description": "A visualization implemented in a library."},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin JSON visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "scatter_plot", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Scatter Plot visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "histogram", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Histogram visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "heatmap", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Heatmap visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Table visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "sql_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin SQL Query visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "geo_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Geo Map visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "image", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Image visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "from_module", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"module": {"lazy": false}, "visualization_name": {"lazy": false}},"aliases": [],"description": "Creates an ID for a library-defined visualization","arguments": "- module: the module defining this visualization\n- visualization_name: the name of the visualization","examples": "> Example\n  Identify the `\"My Visualization\"` visualization defined in `Standard.Base`.\n\n         import Standard.Base\n         import Standard.Visualization\n\n         example_id = Visualization.Id.from_module Base \"My Visualization\""},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Serializes this ID to a JSON format understandable by the graphical\ninterface."},
{"module": "Standard.Visualization.Preprocessor", "type": "", "name": "default_preprocessor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Default visualization preprocessor."},
{"module": "Standard.Visualization.Preprocessor", "type": "", "name": "lazy_preprocessor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Lazy visualization preprocessor."},
{"module": "Standard.Visualization.Preprocessor", "type": "", "name": "error_preprocessor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Error visualization preprocessor."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "X", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Y", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Y_multi", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {"number": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Color", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Shape", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Label", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Size", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Row_Number", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "all_fields", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns all recognized point data fields."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "recognized_names", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "iota", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false}},"aliases": [],"description": "Returns a vector of subsequent integers beginning from 0."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "is_recognized", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "fallback_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "lookup_in", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "No_Fallback_Column", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Fallback_Column", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "No_Fallback_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Extreme", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Extreme", "arguments": {"min_x": {"lazy": false}, "max_x": {"lazy": false}, "min_y": {"lazy": false}, "max_y": {"lazy": false}},"aliases": [],"description": "Create an extreme range of points."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "index_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the index column that may be generated to plot against."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "data_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "axis_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "label_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Table", "name": "point_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"all_fields": {"lazy": false}},"aliases": [],"description": "Generates JSON that describes points data."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Table", "name": "numeric_column_count", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the number of numeric columns for the plot."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Table", "name": "axes", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"all_fields": {"lazy": false}},"aliases": [],"description": "Generates JSON that describes plot axes."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Vector", "name": "point_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "bound_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bounds": {"lazy": false}, "data": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "limit_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}, "data": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "get_axes_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"number_of_numeric": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "get_x_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": [],"description": "Returns whether the x axis should be time/date. This is either a column named 'X' or the left most column"},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "json_from_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "bounds": {"lazy": false}, "limit": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "json_from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vec": {"lazy": false}, "bounds": {"lazy": false}, "limit": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "process_to_json_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "bounds": {"lazy": false, "default": "Nothing"}, "limit": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Default preprocessor for the scatter-plot visualization.\n\nGenerates JSON text describing the scatter-plot visualization.","arguments": "- value: the value to be visualized."},
{"module": "Standard.Visualization.Table", "type": "Table_Specification_Update", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Specification_Update", "arguments": {"row_heights": {"lazy": false, "type": "Vector Number", "checked": true}, "column_widths": {"lazy": false, "type": "Vector Number", "checked": true}, "column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "row_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Visualization.Table", "type": "Table_Update", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Update", "arguments": {"chunks": {"lazy": false}, "table_specification_update": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Table", "type": "Table_Update", "name": "to_json", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generate JSON that can be consumed by the visualization."},
{"module": "Standard.Visualization.Table", "type": "", "name": "get_lazy_visualization_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "table_cell_position": {"lazy": false}, "text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Return a sub-window of a table. The window is defined by a cell row/col and line/chunk\ncoordinate as origin and the extent of the window in text chunks and lines. The size of\na chunk (the characters in it) is defined by `chunk_width`. The output is formatted as a message\nthat can be sent to the IDE's lazy text visualization."},
{"module": "Standard.Visualization.Table", "type": "", "name": "compute_table_update", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "table_cell_position": {"lazy": false}, "text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Compute the table visualization update. The table update contains information about the table\nlayout and the table content."},
{"module": "Standard.Visualization.Table", "type": "", "name": "compute_vertical_indices", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "start_row": {"lazy": false}, "end_row": {"lazy": false}, "start_line": {"lazy": false}, "lines_to_get": {"lazy": false}},"aliases": [],"description": "Returns a vector that contains a pairs of row index and vector of corresponding lines indices."},
{"module": "Standard.Visualization.Table", "type": "", "name": "get_chunks_for_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "row_ix": {"lazy": false}, "line_ix": {"lazy": false}, "initial_chunk_offset": {"lazy": false}, "column_range": {"lazy": false}, "chunk_size": {"lazy": false}, "chunks_to_get": {"lazy": false}},"aliases": [],"description": "Compute the text chunks for the row/line defined by the given indices limited to the given\ncolumn indices. The number of chunks to get is defined by `chunks_to_get`."},
{"module": "Standard.Visualization.Table", "type": "", "name": "max", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": [],"description": "Return the max value in the given vector."},
{"module": "Standard.Visualization.Table", "type": "", "name": "get_longest_line", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "Return the longest line in the given text."},
{"module": "Standard.Visualization.Table", "type": "", "name": "get_column_width", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Return the length of the longest line in the given column."},
{"module": "Standard.Visualization.Table", "type": "", "name": "get_row_height", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "row_ix": {"lazy": false}},"aliases": [],"description": "Return the height of the row defined by the given index."},
{"module": "Standard.Visualization.Table", "type": "", "name": "find_first_over_cum_sum", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"items": {"lazy": false}, "target": {"lazy": false}},"aliases": [],"description": "Return the index of the first item in the given vector that brings the cummulative sum of items\nabove the target value. If no such item exists, return `Nothing`."},
{"module": "Standard.Visualization.Table", "type": "", "name": "find_end_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "start_column_ix": {"lazy": false}, "chunks": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Return the index of the column that is at the end of the given text width, when starting from the\ngiven start column index."},
{"module": "Standard.Visualization.Table", "type": "", "name": "find_end_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "start_row_ix": {"lazy": false}, "max_height": {"lazy": false}},"aliases": [],"description": "Return the index of the row that is at the end of the given text height, when starting from the\ngiven start row index."},
{"module": "Standard.Visualization.Table", "type": "", "name": "fold_map_inner", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}, "acc": {"lazy": false}, "item": {"lazy": false}},"aliases": [],"description": "Helper for fold_map that takes a function, an accumulator value and the current item and returns\na tuple of the new accumulator value and the result of the function."},
{"module": "Standard.Visualization.Table", "type": "", "name": "fold_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"acc": {"lazy": false}, "f": {"lazy": false}, "iterable": {"lazy": false}},"aliases": [],"description": "Map a function over a vectors, but also pass on a accumulator value from one step to the next.\nThe function must return a tuple of the result of the function and the new accumulator value."},
{"module": "Standard.Visualization.Table", "type": "", "name": "map_to_cumulative_sum", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"iterable": {"lazy": false}},"aliases": [],"description": "Return a vector of the cumulative sum of the given vector."},
{"module": "Standard.Visualization.Table", "type": "", "name": "enumerate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": [],"description": "Return the given vector where each item is mapped to itself and its index in the vector."},
{"module": "Standard.Visualization.Text", "type": "Message", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Message", "arguments": {"chunks": {"lazy": false}, "line_count": {"lazy": false}, "max_line_length": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Text", "type": "Message", "name": "to_json", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generate JSON that can be consumed by the visualization."},
{"module": "Standard.Visualization.Text", "type": "", "name": "get_lazy_visualization_text_window", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "pos": {"lazy": false}, "size": {"lazy": false}, "chunk_width": {"lazy": false}},"aliases": [],"description": "Return a sub-window of a string. The window is defined by line/chunk coordinates. The size of\na chunk is defined by `chunk_width`. The output is formatted as a message that can be sent to\nthe IDE's lazy text visualization."},
{"module": "Standard.Visualization.Text", "type": "", "name": "make_grid_visualization_response", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"chunks": {"lazy": false}, "lines": {"lazy": false}, "max_line_length": {"lazy": false}},"aliases": [],"description": "Format a chunk of text and meta information for the lazy visualization."},
{"module": "Standard.Visualization.Text", "type": "", "name": "get_item_from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "chunk_size": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "Return a chunk of text from a string. The chunk is defined by a its size and a line/chunk index\ncoordinate."},
{"module": "Standard.Visualization.Text", "type": "", "name": "get_chunk_from_line", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "chunk_size": {"lazy": false}, "ix": {"lazy": false}},"aliases": [],"description": "Return a chunk of text from a line. The chunk is defined by a its size and a chunk index."},
{"module": "Standard.Visualization.Warnings", "type": "", "name": "process_to_json_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Default preprocessor for the warnings visualization.\n\nGenerates JSON text describing the warnings visualization.","arguments": "- value: the value to be visualized."},
{"module": "Standard.Visualization.Widgets", "type": "", "name": "get_widget_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "call_name": {"lazy": false}, "argument_names": {"lazy": false}, "uuids": {"lazy": false, "default": "\"{}\""}},"aliases": [],"description": "Basic preprocessor for widgets metadata visualization.\n\nReturns full annotation data for all requested arguments."}
]
