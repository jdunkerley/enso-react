[
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Redshift_Dialect", "arguments": {"dialect_operations": {"lazy": false}},"aliases": [],"description": "The dialect for Redshift connections."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation according to the specific dialect."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part\u0027s that determine what order each part gets written in for the final SQL output If you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "wrap_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps and possibly escapes the identifier so that it can be used in a generated query regardless of what characters it contains. The quotes used will depend on the dialect."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "make_table_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": [],"description": "Generates a SQL expression for a table literal."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.  One of the purposes of this method is to verify if the expected ordering settings are supported by the given database backend."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso `Value_Type`."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "cast_op_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of certain operations with certain arguments.  It is used when the normal type inference provided by the database engine needs to be adjusted.  In most cases this method will just return the expression unchanged, it is used only to override the type in cases where the default one that the database uses is not what we want."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "cast_aggregate_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of aggregate operations. Some DBs do CAST(SUM(x) AS FLOAT) others do SUM(CAST(x AS FLOAT))."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.  Returns `Nothing` if the key is not defined."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "needs_literal_table_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "Redshift_Dialect", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Dialect", "type": "", "name": "redshift", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect for Redshift connections."},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Error_Mapper", "type": "Redshift_Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Redshift_Error_Mapper", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Error_Mapper", "type": "Redshift_Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Error_Mapper", "type": "Redshift_Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Internal.Redshift_Error_Mapper", "type": "Redshift_Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Database.Redshift.Redshift_Details", "type": "Redshift_Details", "name": "Redshift", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Redshift_Details", "arguments": {"host": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"host\""}, "port": {"lazy": false, "type": "Integer", "checked": true, "default": "5439"}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "db_user": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "credentials": {"lazy": false, "type": "Credentials|AWS_Credential", "checked": true, "default": "..Profile"}, "use_ssl": {"lazy": false, "type": "SSL_Mode", "checked": true, "default": "..Require"}, "client_cert": {"lazy": false, "type": "Client_Certificate|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Connect to a AWS Redshift database."},
{"module": "Standard.AWS.Database.Redshift.Redshift_Details", "type": "Redshift_Details", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.AWS.Database.Redshift.Redshift_Details", "type": "Redshift_Details", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}},"aliases": [],"description": "Build the Connection resource."},
{"module": "Standard.AWS.Database.Redshift.Redshift_Details", "type": "Redshift_Details", "name": "jdbc_url", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the jdbc url for the connection."},
{"module": "Standard.AWS.Database.Redshift.Redshift_Details", "type": "Redshift_Details", "name": "jdbc_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the properties for the connection."},
{"module": "Standard.AWS.Internal.Data_Link_Helpers", "type": "", "name": "decode_aws_credential", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "AWS_Credential", "arguments": {"json": {"lazy": false}},"aliases": [],"description": "Decodes the JSON representation of `AWS_Credential` as defined in `dataLinkSchema.json#/$defs/AwsAuth`."},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Path_Entry", "name": "Directory", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Path_Entry", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Path_Entry", "name": "File", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Path_Entry", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Path_Entry", "name": "is_directory", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path", "arguments": {"parts": {"lazy": false, "type": "Vector Path_Entry", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "join", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path", "arguments": {"paths": {"lazy": false, "type": "Vector Decomposed_S3_Path", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Reconstructs the original path."},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "normalize", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "parent", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path | Nothing", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "first_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Path_Entry | Nothing", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Decomposed_S3_Path", "type": "Decomposed_S3_Path", "name": "drop_first_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decomposed_S3_Path", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.Request_Body", "type": "", "name": "from_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "instance", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "create_dry_run_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "copy_original": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "remote_write_with_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "existing_file_behavior": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "s3_backup", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": [],"description": "A backup strategy tailored for S3. Since S3 does not support a cheap \u0027move\u0027 operation, the standard backup strategy that mostly relies on it does not work too well. Instead, S3 relies on a simpler strategy: 1. If the destination file exists, copy it to a backup location    (overwriting a previous backup file, if it was present). 2. Write the new file.   i. If the write succeeded, that\u0027s it.      ii. If the write failed, \u0027restore\u0027 from the backup - copy the backup          back to the original location and delete the backup file (as it\u0027s no          longer needed because the original file is back with the old contents)."},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "copy_from_local", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "S3_File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "with_failure_handler", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"failure_action": {"lazy": true}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_File_Write_Strategy", "type": "", "name": "recover_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true}, "key": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path ! Illegal_Argument", "arguments": {"uri": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "delimiter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "The delimiter used for path emulation.  S3 does not treat `/` in any special way, it allows using any character as a path delimiter. In the future we could allow customizing it."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "is_root", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Checks if this path represents the root directory of a bucket."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "is_directory", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Checks if this path represents a directory."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "set_new_path", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {"new_path": {"lazy": false, "type": "Decomposed_S3_Path", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {"subpath": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Resolves a subdirectory entry. This only makes logical sense for paths for which `path.is_directory == True`, but it is not forbidden to call it on other types of paths.  Note that the newly returned path will be a directory or not depending on if `subpath` ends with the delimiter."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "join", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {"subpaths": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "parent", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path | Nothing", "arguments": {},"aliases": [],"description": "Returns the parent directory. It will return `Nothing` for the root directory."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "file_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Returns the \u0027file name\u0027 of this path. If the path is a regular file, it will be its name. If the path is a directory, it will be the name of that directory, without the trailing delimiter."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "is_descendant_of", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"other": {"lazy": false, "type": "S3_Path", "checked": true}},"aliases": [],"description": "Checks if the given other path is inside of this path. A directory is not a descendant of itself."},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "bucket_root", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Internal.S3_Path", "type": "S3_Path", "name": "without_trailing_slash", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Path", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "list_buckets", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}},"aliases": [],"icon": "data_input","description": "Gets the list of the S3 bucket names.","returns": "- A vector of bucket names (as Text).","errors": "- A vector of bucket names (as Text)."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "list_objects", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"bucket\""}, "prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}, "max_count": {"lazy": false, "type": "Integer", "checked": true, "default": "1000"}},"aliases": [],"icon": "data_input","description": "Gets the list of the items inside a bucket.","returns": "- A vector of object keys (as Text) (including the prefix).","errors": "- A vector of object keys (as Text) (including the prefix)."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "get_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"bucket": {"lazy": false}, "key": {"lazy": false}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}, "delimiter": {"lazy": false, "default": "\"/\""}},"aliases": [],"icon": "data_input","description": "Gets an object from an S3 bucket. Returns a raw stream which can be read once."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "head", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"bucket\""}, "key": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}},"aliases": [],"icon": "data_input","description": "Gets the metadata of a bucket or object.","returns": "- A Dictionary of the associated metadata of a bucket or object.","errors": "- A Dictionary of the associated metadata of a bucket or object."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "raw_head", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bucket": {"lazy": false}, "key": {"lazy": false}, "credentials": {"lazy": false}},"aliases": [],"description": "Gets the raw metadata of a bucket or object."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "read_bucket", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bucket": {"lazy": false}, "prefix": {"lazy": false, "default": "\"\""}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}, "delimiter": {"lazy": false, "default": "\"/\""}, "max_count": {"lazy": false, "default": "1000"}},"aliases": [],"description": "Reads an S3 bucket returning a pair of vectors, one with common prefixes and one with object keys."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "put_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true}, "key": {"lazy": false, "type": "Text", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}, "request_body": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "upload_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"local_file": {"lazy": false, "type": "File", "checked": true}, "bucket": {"lazy": false, "type": "Text", "checked": true}, "key": {"lazy": false, "type": "Text", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "delete_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true}, "key": {"lazy": false, "type": "Text", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}},"aliases": [],"description": "Deletes the object. It will not raise any errors if the object does not exist."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "copy_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_bucket": {"lazy": false, "type": "Text", "checked": true}, "source_key": {"lazy": false, "type": "Text", "checked": true}, "target_bucket": {"lazy": false, "type": "Text", "checked": true}, "target_key": {"lazy": false, "type": "Text", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "AWS_Credential.Default"}},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "handle_s3_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}, "bucket": {"lazy": false, "default": "\"\""}, "key": {"lazy": false, "default": "\"\""}},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "make_client", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false, "type": "AWS_Credential", "checked": true}},"aliases": [],"description": "Makes a client for the default region."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "make_client_for_bucket", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bucket_name": {"lazy": false, "type": "Text", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true}},"aliases": [],"description": "Makes a client using the region in which the specified bucket is located. This is necessary, because if we are fetching the wrong region, we will get `PermanentRedirect` errors."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "handle_io_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Utility method for running an action with Java exceptions mapping."},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "scheme", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3", "type": "", "name": "uri_prefix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Data_Link", "arguments": {"uri": {"lazy": false, "type": "Text", "checked": true}, "format_json": {"lazy": false}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "as_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_File", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "default_format", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any ! Illegal_State", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "S3_Data_Link", "name": "as_writable_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_File", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "Data_Link_With_Input_Stream", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "Data_Link_With_Output_Stream", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "Writable_Data_Link", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_Data_Link", "type": "File_Like_Data_Link", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_File", "arguments": {"s3_path": {"lazy": false, "type": "S3_Path", "checked": true}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "Text", "checked": true, "default": "S3.uri_prefix"}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}},"aliases": [],"icon": "data_input","description": "Given an S3 URI, create a file representation.","returns": "- An `S3_File` object representing the file.","errors": "- An `S3_File` object representing the file."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new output stream for this file and runs the specified action on it.  The created stream is automatically closed when `action` returns (even if it returns exceptionally)."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new input stream for this file and runs the specified action on it.  The created stream is automatically closed when `action` returns (even if it returns exceptionally)."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["import", "load", "open"],"group": "Standard.Base.Input","icon": "data_input","description": "Read a file using the specified file format","returns": "- The contents of the file read using the specified `File_Format`.","errors": "- The contents of the file read using the specified `File_Format`."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "list", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_filter": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Lists files contained in the directory denoted by this file. Note, as S3 does not have a native notion of directories, this operation will return an empty Vector if the folder does not exist.","returns": "- A vector of `S3_File` objects representing the files in the directory.","errors": "- A vector of `S3_File` objects representing the files in the directory."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "read_bytes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["load bytes", "open bytes"],"icon": "data_input","description": "Reads all bytes in this file into a byte vector.","returns": "- The contents of the file as a vector of bytes.","errors": "- The contents of the file as a vector of bytes."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "read_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load text", "open text"],"icon": "data_input","description": "Reads the whole file into a `Text`, with specified encoding.","returns": "- The contents of the file as `Text` decoded with the specified encoding.","errors": "- The contents of the file as `Text` decoded with the specified encoding."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "copy_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Copies the S3 file to the specified destination.","returns": "- The destination file if the operation was successful.","errors": "- The destination file if the operation was successful."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "move_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Moves the file to the specified destination.","returns": "- The destination file if the operation was successful.","errors": "- The destination file if the operation was successful.","remarks": "! S3 Move is a Copy and Delete    Since S3 does not support moving files, this operation is implemented   as a copy followed by delete. Keep in mind that the space usage of the   file will briefly be doubled and that the operation may not be as fast   as a local move often is."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "delete", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Deletes the object.","errors": "","remarks": "? Data Links   If the file is a data link, this will delete the link itself, not   affecting its target."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "delete_if_exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Deletes the file if it had existed.","errors": ""},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "create_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Output","icon": "folder_add","description": "Within S3 the concept of creating directories has slightly different meaning than on other filesystems.  The `create_directory` method is provided on `S3_File` only for compatibility - to allow easy switching between file-systems.  It does not perform any actual operation. Note that in S3 a directory is treated as existing if it contains any entries. Thus, even after calling this `create_directory` method, the `exists` method may still yield `False` until the directory is populated with some files.  To warn about this specific behaviour, a warning is attached to the result."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"subpath": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "folder","description": "Join two path segments together, normalizing the `..` and `.` sub-paths.","returns": "- An `S3_File` representing the joined and normalised path, with the same   credentials.","remarks": "! S3 Directory Handling    Note that regular S3 buckets do not have a \u0027native\u0027 notion of   directories, instead they are emulated using prefixes and a delimiter   (in Enso, the delimiter is set to \"/\").    The trailing slash determines if the given path is treated as a   directory or as a regular file.    However, for ease-of-use, if a path without a trailing slash is used   with the `/` operator it will be accepted and the sub paths will be   resolved, even though such a path would not be treated as a directory   by any other operations.    See: https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-folders.html"},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "resolve_single_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"part": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An internal helper method that resolves a single part (subpath) of a path."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"subpaths": {"lazy": false, "type": "Vector | Text", "checked": true}},"aliases": [],"group": "Standard.Base.Calculations","icon": "folder","description": "Join two or more path segments together, normalizing the `..` and `.` subpaths.","returns": "- An `S3_File` representing the joined and normalised path, with the same   credentials.","remarks": "! S3 Directory Handling    Note that regular S3 buckets do not have a \u0027native\u0027 notion of   directories, instead they are emulated using prefixes and a delimiter   (in Enso, the delimiter is set to \"/\").    The trailing slash determines if the given path is treated as a   directory or as a regular file.    However, for ease-of-use, if a path without a trailing slash is used   with the `/` operator it will be accepted and the sub paths will be   resolved, even though such a path would not be treated as a directory   by any other operations.    See: https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-folders.html"},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the name of this file."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "extension", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the extension of the file."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "path", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the path of this file."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "uri", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the URI of this file The URI is in the form `s3://bucket/path/to/file`."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the folder or file exists","returns": "- `True` if the bucket or object exists, `False` otherwise.","errors": "- `True` if the bucket or object exists, `False` otherwise.","remarks": "? Data Links   If the file is a data link, this checks if the data link itself exists.    It does not tell anything about existence of the data link target."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "size", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the size of a file in bytes.","errors": "","remarks": "? Data Links   If the file is a data link that points to a file, the size of the    target file will be returned."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "creation_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the creation time of a file.","returns": "- An `S3_Error` error as only the last modified time is available for S3   objects.","remarks": "? Data Links   If the file is a data link, this returns the creation time of the data    link."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "last_modified_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the last modified time of a file.","errors": "","remarks": "? Data Links   If the file is a data link, this returns the modification time of the    data link."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "is_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if this is a folder.","returns": "- `True` if the S3 path represents a folder, `False` otherwise.","remarks": "! S3 Directory Handling    Note that regular S3 buckets do not have a \u0027native\u0027 notion of   directories, instead they are emulated using prefixes and a delimiter   (in Enso, the delimiter is set to \"/\").    The trailing slash determines if the given path is treated as a   directory or as a regular file. \n\n? Data Links   If the file is a data link, this checks whether the target of the data    link is a directory."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "is_directory_no_follow_links", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if this file is a directory, not following links."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "is_regular_file", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if this is a regular file.","returns": "- `True` if the S3 path represents a file, `False` otherwise.","remarks": "! S3 Directory Handling    Note that regular S3 buckets do not have a \u0027native\u0027 notion of   directories, instead they are emulated using prefixes and a delimiter   (in Enso, the delimiter is set to \"/\").    The trailing slash determines if the given path is treated as a   directory or as a regular file. \n\n? Data Links   If the file is a data link, this checks whether the target of the data    link is a regular file."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "is_data_link", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "parent", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Resolves the parent of this file.","returns": "- The parent of this file as an `S3_File` object or if a top level then   `Nothing`."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "is_descendant_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if `self` is a descendant of `other`.","returns": "- `True` if `self` is a descendant of `other`, `False` otherwise."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Return the absolute path of this S3_File."},
{"module": "Standard.AWS.S3.S3_File", "type": "S3_File", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this S3_File."},
{"module": "Standard.AWS.S3.S3_File", "type": "File_Format_Metadata", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "File_Like", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "Writable_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "Data_Link_From_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_translate_file_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"related_file": {"lazy": false}, "result": {"lazy": false}},"aliases": [],"description": "A helper that translates lower level S3 errors to file-system errors."},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_without_trailing_slash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_File", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": [],"description": "Ensure the file has no trailing slash. This is needed when treating a possible directory as a data link entity - to find its S3 object we need to strip the trailing slash if it has one."},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_s3_file_as_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_check_is_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": [],"description": "If the file _may_ be a data link we now need to verify it further. On S3 this is complicated because there is no direct notion of directories, so a path `s3://Bucket/a.datalink/b` can mean both that `a.datalink` is a data link file, or just that `b` is a regular file inside a weirdly named \u0027directory\u0027 `a.datalink`.  To distinguish these scenarios we use the following heuristics: - if the entity under the given path `s3://Bucket/a.datalink`   exists, that means there is a file, so we treat it as a data link. - if that entity does not exist, but there are entities under the   path `s3://Bucket/a.datalink/`, we treat it as a directory. - if that entity does not exist and there are no \u0027child entities\u0027   we determine the treatment based on the exact path containing a   trailing slash character - if the path was   `s3://Bucket/a.datalink`, that will be a data link (e.g. this   may be passed as destination of a write method while creating a   new link), but if it contains a slash   (`s3://Bucket/a.datalink/`) that will be treated as a directory.  We acknowledge an edge case where both objects `s3://Bucket/a.datalink` and `s3://Bucket/a.datalink/b` exist (since the concept of directories in S3 is \u0027simulated\u0027 and there is nothing preventing such aliasing). In that case, we treat the first object (`s3://Bucket/a.datalink`) as a data link, thus rendering `s3://Bucket/a.datalink/b` inaccessible. This is not ideal, but we report a warning. Note that the user cannot create such situation from Enso because once the entity starts to exist (either as data link or as directory) it cannot be interpreted as the other one. We can still encounter such scenarios in buckets created externally."},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_exists_entity_direct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": [],"description": "Checks if an object exists under the given key _directly_. This is different from `exists` which will be true if any child objects exist under a given directory key. This method, however, will only return true if an object with the exact key exists and is not just an empty marker (as used sometimes to mark directories)."},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_has_children_entities", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.S3.S3_File", "type": "", "name": "_invalidate_caches_on_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "type": "S3_File", "checked": true}},"aliases": []},
{"module": "Standard.AWS.AWS", "type": "AWS", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS", "arguments": {},"aliases": [],"description": "Methods for interacting with AWS services."},
{"module": "Standard.AWS.AWS", "type": "AWS", "name": "signed_fetch", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true, "default": "Missing_Argument.throw \"uri\""}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "format": {"lazy": false, "default": "Auto_Detect"}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}, "region_service": {"lazy": false, "type": "AWS_Region_Service", "checked": true, "default": "AWS.resolve_region_and_service uri"}},"aliases": ["download", "http get"],"icon": "data_input","description": "Fetches from an AWS URI signing the request with the necessary headers, and returns the response, parsing the body if the content-type is recognised. Returns an error if the status code does not represent a successful response."},
{"module": "Standard.AWS.AWS", "type": "AWS", "name": "signed_post", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true, "default": "Missing_Argument.throw \"uri\""}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Post"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "response_format": {"lazy": false, "default": "Auto_Detect"}, "credentials": {"lazy": false, "type": "AWS_Credential", "checked": true, "default": "..Default"}, "region_service": {"lazy": false, "type": "AWS_Region_Service", "checked": true, "default": "AWS.resolve_region_and_service uri"}},"aliases": ["http post", "upload"],"icon": "data_upload","description": "Writes the provided data to the provided AWS URI signing the request with the necessary headers. Returns the response, parsing the body if the content-type is recognised. Returns an error if the status code does not represent a successful response."},
{"module": "Standard.AWS.AWS", "type": "AWS", "name": "hash_bytes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bytes": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Hash a Vector of bytes using SHA256 (as used by AWS)."},
{"module": "Standard.AWS.AWS", "type": "AWS", "name": "resolve_region_and_service", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true, "default": "Missing_Argument.throw \"uri\""}},"aliases": [],"description": "Resolve the region and service from an AWS based URI. Splits a standard form AWS URI into the region and service.  The URI must be in the forms: - `https://(*.)\u003cservice\u003e.\u003cregion\u003e.amazonaws.com`. - `https://(*.)\u003cregion\u003e.\u003cservice\u003e.amazonaws.com`."},
{"module": "Standard.AWS.AWS", "type": "AWS_Region_Service", "name": "Region_Service", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Region_Service", "arguments": {"region": {"lazy": false, "type": "Text", "checked": true}, "service": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Holds the region and service of an AWS URI."},
{"module": "Standard.AWS.AWS", "type": "", "name": "_make_client", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false}, "region_service": {"lazy": false}, "http": {"lazy": false}, "hash": {"lazy": false}},"aliases": []},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "Default", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Credential", "arguments": {},"aliases": [],"description": "Access AWS using the default credential method."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "Profile", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Credential", "arguments": {"profile": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027default\u0027"}},"aliases": [],"description": "Access using IAM via an AWS profile."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "Key", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Credential", "arguments": {"access_key_id": {"lazy": false, "type": "Text|Enso_Secret", "checked": true, "default": "Missing_Argument.throw \"access_key_id\""}, "secret_access_key": {"lazy": false, "type": "Text|Enso_Secret", "checked": true, "default": "Missing_Argument.throw \"secret_access_key\""}},"aliases": [],"description": "Access using IAM via an AWS access key ID and secret access key."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "With_Configuration", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "AWS_Credential", "arguments": {"base_credential": {"lazy": false, "type": "AWS_Credential", "checked": true}, "default_region": {"lazy": false, "type": "AWS_Region", "checked": true}},"aliases": [],"description": "Allows to override additional configuration associated with the credential."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "profile_names", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "cloud","description": "Returns a vector of the available profile names."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "is_default_credential_available", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "A helper method that checks if default AWS credentials are available. This method returns `True` if and only if the `AWS_Credential.Default` will be able to resolve to some credentials. If this method returns `False`, operations relying on `AWS_Credential.Default` will fail."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "with_default_override", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"override": {"lazy": false, "type": "AWS_Credential", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Runs the action with the default credentials overridden.  This method is mainly meant to be used for testing, but it can also be used by users if they do not have means to override the default credentials in their environment."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"add_user_password": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "as_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generates a Java representation of the credential.  Note that this ignores the additional properties that may be set by `With_Configuration` constructor. These are expected to be handled separately."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "with_default_region", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Credential", "arguments": {"region": {"lazy": false, "type": "AWS_Region", "checked": true, "default": "Missing_Argument.throw \"region\""}},"aliases": [],"icon": "metadata","description": "Sets the default region for operations that need it but do not specify it explicitly."},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "get_default_region", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "AWS_Region", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Credential", "type": "AWS_Credential", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "Default", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Region", "arguments": {},"aliases": [],"description": "The default AWS region is inferred based on the following settings: 1. If `AWS_REGION` environment variable is set, it is used as the default. 2. If the `~/.aws` configuration specifies a region, it is used. 3. If running in the Enso Cloud or on any EC2 instance, the region is inferred from the instance metadata. 4. If the region cannot be inferred in any way, `eu-west-1` is used as a fallback."},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "Default_With_Profile", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Region", "arguments": {"profile_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Resolves default region in the same manner as `Default`, but in step (2), it uses the specified profile instead of a default one."},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "Region", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "AWS_Region", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "AWS Region specified by its id."},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "all_region_ids", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "resolve_id", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Region", "type": "AWS_Region", "name": "as_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Java_Region", "arguments": {},"aliases": []},
{"module": "Standard.AWS.AWS_Region", "type": "", "name": "fallback_region", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The fallback region used if all other methods cannot determine the default region."},
{"module": "Standard.AWS.Errors", "type": "Invalid_AWS_URI", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_AWS_URI", "arguments": {"uri": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "Invalid_AWS_URI", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "AWS_SDK_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "AWS_SDK_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "AWS_SDK_Error", "name": "handle_java_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "AWS_SDK_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Error", "arguments": {"message": {"lazy": false, "type": "Text|Nothing", "checked": true}, "code": {"lazy": false, "type": "Text|Nothing", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Bucket_Not_Found", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Bucket_Not_Found", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Bucket_Not_Found", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Key_Not_Found", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Key_Not_Found", "arguments": {"bucket": {"lazy": false, "type": "Text", "checked": true}, "key": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Key_Not_Found", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "More_Records_Available", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "More_Records_Available", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "More_Records_Available", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Warning", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "S3_Warning", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Warning", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.AWS.Errors", "type": "S3_Warning", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Download.Download_Mode", "type": "Download_Mode", "name": "If_Not_Exists", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Download_Mode", "arguments": {},"aliases": [],"description": "Download the file if it does not already exist on disk."},
{"module": "Standard.Base.Data.Download.Download_Mode", "type": "Download_Mode", "name": "If_Older_Than", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Download_Mode", "arguments": {"age": {"lazy": false, "type": "Duration", "checked": true}},"aliases": [],"description": "Download the file if it is older than the specified age."},
{"module": "Standard.Base.Data.Download.Download_Mode", "type": "Download_Mode", "name": "Always", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Download_Mode", "arguments": {},"aliases": [],"description": "Always download."},
{"module": "Standard.Base.Data.Download.Download_Mode", "type": "Download_Mode", "name": "should_download", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "Determine if a file should be downloaded, based on the file type, download mode, and file age."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Any", "name": "to_json", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts the given value to a JSON serialized value."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Error", "name": "to_json", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serialized value."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Text", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object. For Nothing, booleans, numbers and strings, this is the value itself. For arrays or vectors, the elements are converted recursively. For atoms and maps, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Number", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object. For Nothing, booleans, numbers and strings, this is the value itself. For arrays or vectors, the elements are converted recursively. For atoms and maps, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Integer", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Converts a JS_Object to an Integer."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Decimal", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Converts a JS_Object to a Decimal."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Boolean", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object. For Nothing, booleans, numbers and strings, this is the value itself. For arrays or vectors, the elements are converted recursively. For atoms and maps, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Nothing", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object. For Nothing, booleans, numbers and strings, this is the value itself. For arrays or vectors, the elements are converted recursively. For atoms and maps, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Array", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object. For Nothing, booleans, numbers and strings, this is the value itself. For arrays or vectors, the elements are converted recursively. For atoms and maps, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Vector", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object. For Nothing, booleans, numbers and strings, this is the value itself. For arrays or vectors, the elements are converted recursively. For atoms, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Any", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object. For Nothing, booleans, numbers and strings, this is the value itself. For arrays or vectors, the elements are converted recursively. For atoms, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Error", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object. For Nothing, booleans, numbers and strings, this is the value itself. For arrays or vectors, the elements are converted recursively. For atoms, the object is converted to a JS_Object."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Locale", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object. Custom serialization for Locale, serializes the language, country and variant."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Dictionary", "name": "to_js_object", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the given value to a JSON serializable object. For Map, this is serialized as a Vector of Key-Value pairs.  Enso Maps support arbitrary types as map keys, so we cannot serialize them into JS Objects because there only strings are accepted as keys."},
{"module": "Standard.Base.Data.Json.Extensions", "type": "Text", "name": "parse_fast_json", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Extension for Text to allow use. Deprecated: The `parse_json` method uses a faster implementation now by default"},
{"module": "Standard.Base.Data.Numeric.Internal.Decimal_Internal", "type": "Decimal_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decimal_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Numeric.Internal.Decimal_Internal", "type": "Decimal_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Decimal", "checked": true}, "y": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numeric.Internal.Decimal_Internal", "type": "Decimal_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numeric.Math_Context", "type": "Unlimited", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Unlimited", "arguments": {},"aliases": [],"description": "Specifies infinite precision in a `Math_Context`."},
{"module": "Standard.Base.Data.Numeric.Math_Context", "type": "Math_Context", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Math_Context", "arguments": {"math_context": {"lazy": false, "type": "MathContext", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numeric.Math_Context", "type": "Math_Context", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"precision": {"lazy": false, "type": "Integer | Unlimited", "checked": true}, "rounding_mode": {"lazy": false, "type": "Rounding_Mode", "checked": true, "default": "Rounding_Mode.half_up"}},"aliases": [],"icon": "math","description": "Construct a `Math_Context` value."},
{"module": "Standard.Base.Data.Numeric.Rounding_Mode", "type": "Rounding_Mode", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Rounding_Mode", "arguments": {"rounding_mode": {"lazy": false, "type": "RoundingMode", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numeric.Rounding_Mode", "type": "Rounding_Mode", "name": "half_up", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "Round towards positive infinity for positive numbers, and negative infinity for negative numbers. (This is the default.)"},
{"module": "Standard.Base.Data.Numeric.Rounding_Mode", "type": "Rounding_Mode", "name": "bankers", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "Rownd towards the nearest neighbor, with ties broken by rounding towards the nearest even neighbor."},
{"module": "Standard.Base.Data.Ordering.Natural_Order", "type": "", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"text1": {"lazy": false}, "text2": {"lazy": false}, "case_sensitivity": {"lazy": false, "default": "Case_Sensitivity.Sensitive"}},"aliases": [],"description": "Compares two text values according to the natural dictionary ordering."},
{"module": "Standard.Base.Data.Ordering.Vector_Lexicographic_Order", "type": "", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"vector1": {"lazy": false}, "vector2": {"lazy": false}, "element_comparator": {"lazy": false, "default": "Ordering.compare _ _", "comment": "- element_comparator (optional): A custom compare function defining the order   between particular elements. Uses the default ordering by default."}},"aliases": [],"description": "Compares two Vectors according to the lexicographic ordering. \n\n Returns whether `vector1` is less, equal or greater than `vector2` according to the lexicographic ordering. The ordering is defined as follows: - If `vector1` is empty and `vector2` is not, than `Less` is returned;   similarly if `vector1` is non-empty, but `vector2` is empty, `Greater` is   returned. - If the first element of `vector1` is less or greater than the first element   of `vector2` than this is specifies the ordering between the vectors. If   the first element is equal, the tails of both vectors are compared   according to the same algorithm."},
{"module": "Standard.Base.Data.Range.Extensions", "type": "Integer", "name": "up_to", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": ["range"],"group": "Input","icon": "input_number","description": "Creates an increasing range of integers from `self` to `n`."},
{"module": "Standard.Base.Data.Range.Extensions", "type": "Integer", "name": "down_to", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": ["range"],"group": "Input","icon": "input_number","description": "Creates a decreasing right-exclusive range of integers from `self` to `n`."},
{"module": "Standard.Base.Data.Read.Many_Files_List", "type": "Many_Files_List", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Many_Files_List", "arguments": {"original_value": {"lazy": false}, "paths_to_load": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Read.Many_Files_List", "type": "Many_Files_List", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Many_Files_List", "type": "Many_Files_List", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Many_Files_List", "type": "Many_Files_List", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Return_As", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "make_return", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Many_Files_List", "checked": true}, "objects": {"lazy": false, "type": "Vector (Any | Failed_To_Load)", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Base", "name": "As_Vector", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Return_As_Base", "arguments": {},"aliases": [],"description": "Will return a Vector of objects that were loaded. The order of the returned Vector is the same as in the input."},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Base", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Base", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Base", "name": "make_return", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Many_Files_List", "checked": true}, "objects": {"lazy": false, "type": "Vector (Any | Failed_To_Load)", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Table_Mock", "name": "As_Merged_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Return_As_Table_Mock", "arguments": {"columns_to_keep": {"lazy": false, "default": "Nothing"}, "match": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As_Table_Mock", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "", "name": "_get_known_return_classes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Read.Return_As", "type": "", "name": "replace_with_nothing_and_propagate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false, "type": "Vector (Any | Failed_To_Load)", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "A helper method that takes a Vector and replaces `Failed_To_Load` with `Nothing`, raising them as warnings."},
{"module": "Standard.Base.Data.Read.Return_As", "type": "Return_As", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Return_As_Base", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Statistics.Extensions", "type": "Vector", "name": "compute", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}},"aliases": [],"group": "Statistics","icon": "transform4","description": "Compute a single statistic on the vector (ignoring Nothing and NaN values)."},
{"module": "Standard.Base.Data.Statistics.Extensions", "type": "Vector", "name": "compute_bulk", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"statistics": {"lazy": false, "type": "Vector", "checked": true, "default": "[..Count, ..Sum]"}},"aliases": [],"icon": "column_add","description": "Compute statistics on the vector (ignoring Nothing and NaN values)."},
{"module": "Standard.Base.Data.Statistics.Extensions", "type": "Vector", "name": "running", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}},"aliases": ["count", "cumulative", "maximum", "mean", "minimum", "product", "standard deviation", "sum", "total", "variance"],"group": "Statistics","icon": "math","description": "Compute a single running statistic on the vector (ignoring Nothing and NaN values)."},
{"module": "Standard.Base.Data.Statistics.Extensions", "type": "Vector", "name": "running_bulk", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"statistics": {"lazy": false, "type": "Vector Statistic", "checked": true, "default": "[..Count, ..Sum]"}},"aliases": [],"icon": "math","description": "Compute a set running statistics on the vector (ignoring Nothing and NaN values)."},
{"module": "Standard.Base.Data.Statistics.Extensions", "type": "Vector", "name": "rank_data", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"method": {"lazy": false, "type": "Rank_Method", "checked": true, "default": "..Average"}},"aliases": [],"group": "Statistics","icon": "column_add","description": "Assigns a rank to each value of data, dealing with equal values according to the method."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Match_Iterator", "arguments": {"pattern": {"lazy": false, "type": "Regex", "checked": true}, "input": {"lazy": false, "type": "Text", "checked": true}, "cursor": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}, "input": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator", "name": "next", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Return the next match, or the last filler string if there is no additional match.  Also returns the next iterator, if there was a match."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator", "name": "early_exit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the remainder of the string, unmatched."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator_Value", "name": "Next", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Match_Iterator_Value", "arguments": {"filler": {"lazy": false, "type": "Utf_16_Span", "checked": true}, "match": {"lazy": false, "type": "Match", "checked": true}, "next_iterator": {"lazy": false, "type": "Match_Iterator", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator", "type": "Match_Iterator_Value", "name": "Last", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Match_Iterator_Value", "arguments": {"filler": {"lazy": false, "type": "Utf_16_Span", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "Replacer", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Replacer", "arguments": {"replacement": {"lazy": false, "type": "Vector Replacement", "checked": true}},"aliases": [],"description": "Implements a replacement for a regular expression.  Regex.replace uses a Replacer to replace each regex match with a replacement string. This string can contain references to match groups from the original regex.  The `new` smart constructor parses a Text into a vector of Replacements. Each Replacement is either a literal string or a group number. To provide a replacement for a regex match, the Replacer iterates through the Replacement vector, substitutes the match group contents for each group number, and concatenates all the strings together to form the full replacement string."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "Replacer", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replacement_string": {"lazy": false}, "pattern": {"lazy": false}},"aliases": [],"description": "Creates a new Replacer."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "Replacer", "name": "replace", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"match": {"lazy": false}},"aliases": [],"description": "Build a replacement string from a match."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "Replacement", "name": "Literal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Replacement", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A string literal to replace with."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "Replacement", "name": "Substitution", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Replacement", "arguments": {"group_number": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Target group to insert."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "get_lru_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get the size of the Replacer LRU cache. For testing."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "replacer_cache_lookup", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replacement_string": {"lazy": false}},"aliases": [],"description": "Look up a replacement string in the Replacer LRU cache. For testing."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "group_reference_regex", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "build_replacement_vector_cached", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replacement_string": {"lazy": false}, "pattern": {"lazy": false}},"aliases": [],"description": "Build a replacement vector.  Parse the replacement string into an alternating series of literal strings and group reference numbers.  Uses Replacement_Cache to avoid rebuilding the vector for recently used replacement strings."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "build_replacement_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replacement_string": {"lazy": false}, "pattern": {"lazy": false}},"aliases": [],"description": "Build a replacement vector.  Parse the replacement string into an alternating series of literal strings and group reference numbers."},
{"module": "Standard.Base.Data.Text.Regex.Internal.Replacer", "type": "", "name": "parse_group_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}, "match": {"lazy": false}},"aliases": [],"description": "Parse a capture group reference. \n\n Returns a Replacement: a group number, or, in the case of `$$`, a literal.  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Match", "arguments": {"pattern": {"lazy": false, "type": "Regex", "checked": true}, "internal_regex_result": {"lazy": false, "type": "Any", "checked": true}, "input": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "internal_regex_result : RegexResult (Truffle) (See https://github.com/oracle/graal/blob/master/regex/docs/README.md)"},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the `Match`."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "internal_start", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false}},"aliases": [],"description": "Returns the start UTF16 character index of a group.  This method goes directly to the internal match object. It does not take group names, and does not have a default."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "internal_end", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false}},"aliases": [],"description": "Returns the end UTF16 character index, plus one, of a group.  This method goes directly to the internal match object. It does not take group names, and does not have a default."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "utf_16_start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}},"aliases": [],"icon": "metadata","description": "Returns the start UTF16 character index of a group."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "utf_16_end", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}},"aliases": [],"icon": "metadata","description": "Returns the end UTF16 character index, plus one, of a group."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the start grapheme index of a group.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "end", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the end grapheme index, plus one, of a group.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "utf_16_span", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}, "default": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "metadata","description": "Gets the UTF16 span matched by the group with the provided identifier, or a default value if the group did not participate in the match. If no such group exists for the provided identifier, a `No_Such_Group` is returned.","remarks": "? The Full Match   The group with index 0 is always the full match of the pattern. \n\n? Named Groups by Index   If the regex contained named groups, these may also be accessed by   index based on their position in the pattern. \n\n! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications.  Note that it is possible for a group to \"not participate in the match\", for example with a disjunction. In the example below, the \"(d)\" group does not participate -- it neither matches nor fails.       \"ab((c)|(d))\".find \"abc\"  In this case, the group id for \"(d)\", which is 3, is a valid group id and (Regex.lookup_group 3) will return 3. If the caller tries to get group 3, Match.utf_16_span will return the default value."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "span", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}, "default": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the grapheme span matched by the group with the provided identifier, or a default value if the group did not participate in the match. If no such group exists for the provided identifier, a `No_Such_Group` is returned.","remarks": "? The Full Match   The group with index 0 is always the full match of the pattern. \n\n? Named Groups by Index   If the regex contained named groups, these may also be accessed by   index based on their position in the pattern. \n\n! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications.  Note that it is possible for a group to \"not participate in the match\", for example with a disjunction. In the example below, the \"(d)\" group does not participate -- it neither matches nor fails.       \"ab((c)|(d))\".find \"abc\"  In this case, the group id for \"(d)\", which is 3, is a valid group id and (Regex.lookup_group 3) will return 3. If the caller tries to get group 3, Match.span will return the default value."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false, "default": "0"}, "default": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the Text matched by the group with the provided identifier, or a default value if the group did not participate in the match. If no such group exists for the provided identifier, a `No_Such_Group` is returned.","remarks": "? The Full Match   The group with index 0 is always the full match of the pattern. \n\n? Named Groups by Index   If the regex contained named groups, these may also be accessed by   index based on their position in the pattern.  Note that it is possible for a group to \"not participate in the match\", for example with a disjunction. In the example below, the \"(d)\" group does not participate -- it neither matches nor fails.       \"ab((c)|(d))\".find \"abc\"  In this case, the group id for \"(d)\", which is 3, is a valid group id and (Regex.lookup_group 3) will return 3. If the caller tries to get group 3, Match.text will return the default value."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "groups", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"default": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets a vector containing the Text of _all_ of the capturing groups in the pattern, replacing the value of groups that did not participate in the match with `default`. This vector includes group 0, which contains the entire match.","remarks": "? The Full Match   The group with index 0 is always the full match of the pattern. \n\n? Named Groups by Index   If the regex contained named groups, these may also be accessed by   index based on their position in the pattern.  Note that it is possible for a group to \"not participate in the match\", for example with a disjunction. In the example below, the \"(d)\" group does not participate -- it neither matches nor fails.       \"ab((c)|(d))\".find \"abc\"  In this case, the group id for \"(d)\", which is 3, is a valid group id and (Regex.lookup_group 3) will return 3. `groups` will return the default value for groups that do not participate."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "named_groups", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"default": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets a Dictionary containing the named capturing groups for the pattern, replacing the value for groups that did not participate in the match with `default`. \n\n Note that it is possible for a group to \"not participate in the match\", for example with a disjunction. In the example below, the \"(d)\" group does not participate -- it neither matches nor fails.       \"ab((c)|(d))\".find \"abc\"  In this case, the group id for \"(d)\", which is 3, is a valid group id and (Regex.lookup_group 3) will return 3. `named_groups` will map a named group that does not participate to the default value."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "split","description": "Gets the grapheme span matched by the group with the provided index, or a default value if the group did not participate in the match. If the identifier is invalid then `if_missing` is returned."},
{"module": "Standard.Base.Data.Text.Regex.Match", "type": "Match", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "split","description": "Gets the grapheme span matched by the group with the provided index, or a default value if the group did not participate in the match. If the identifier is invalid then Index_Out_Of_Bounds is thrown."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Leading_Whitespace", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more whitespace characters at the beginning of a string."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Trailing_Whitespace", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more whitespace characters at the end of a string."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Duplicate_Whitespace", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more whitespace characters that are preceded by another whitespace character."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "All_Whitespace", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more whitespace characters anywhere in a string."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Newlines", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more newline characters."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Leading_Numbers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more digits at the beginning of a string."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Trailing_Numbers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches one or more digits at the end of a string."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Non_ASCII", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any character that is not in the ASCII range (0x00-0x7F)."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Tabs", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any tab characters."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Letters", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any alphabetic characters (both lowercase and uppercase)."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Numbers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any digits."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Punctuation", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any punctuation characters from the set: comma, period, exclamation mark, question mark, colon, semicolon, single quote, double quote, parenthesis."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "Symbols", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Named_Pattern", "arguments": {},"aliases": [],"description": "Matches any characters that are not an alphabetic character, digit, or whitespace."},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Named_Pattern", "name": "regex_pattern", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex.Named_Pattern", "type": "Regex", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Named_Pattern", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Case", "type": "Case", "name": "Lower", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case", "arguments": {},"aliases": [],"description": "All letters in lower case."},
{"module": "Standard.Base.Data.Text.Case", "type": "Case", "name": "Upper", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case", "arguments": {},"aliases": [],"description": "All letters in upper case."},
{"module": "Standard.Base.Data.Text.Case", "type": "Case", "name": "Title", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case", "arguments": {},"aliases": [],"description": "First letter of each word in upper case, rest in lower case."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "Default", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case_Sensitivity", "arguments": {},"aliases": [],"description": "Use the default case-sensitivity for the environment. For in-memory operations, it will be case sensitive. For database operations, it will follow the collation default."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "Sensitive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case_Sensitivity", "arguments": {},"aliases": [],"description": "Represents a case-sensitive comparison mode."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "Insensitive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Case_Sensitivity", "arguments": {"locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"description": "Represents a case-insensitive comparison mode."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "folding_strategy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"case_sensitivity": {"lazy": false}},"aliases": [],"description": "Creates a Java `TextFoldingStrategy` from the case sensitivity setting."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Case_Sensitivity to a friendly string."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "is_case_insensitive_in_memory", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Is case insensitive when in memory. This requires that, if case-insensitive, that the locale be the default locale, and if it\u0027s not, throws Illegal_Argument."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "to_explicit_sensitivity_in_memory", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to either Sensitive or Insensitive, for the in-memory case."},
{"module": "Standard.Base.Data.Text.Case_Sensitivity", "type": "Case_Sensitivity", "name": "disallow_non_default_locale", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Throws an error if self is Insensitive with a non-default locale"},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "Default", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Encoding", "arguments": {},"aliases": [],"description": "A default encoding that will try to guess the encoding based on some heuristics. See `Encoding.default`."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Encoding", "arguments": {"internal_character_set": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An encoding identified by its Java name."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Gets the default drop down option for Encoding."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "all_character_sets", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get all available character sets from Java as Encodings. Used to provide auto completion in the UI."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "all_encodings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get all available Encodings."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "from_name", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"icon": "convert","description": "Create an Encoding from a Text."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "from_java_charset", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Encoding", "arguments": {"charset": {"lazy": false, "type": "Charset", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "default", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Encoding", "arguments": {},"aliases": [],"icon": "convert","description": "A default encoding that will try to guess the encoding based on some heuristics.  If a BOM is present, it will be used to determine UTF-8 or UTF-16 encoding. Otherwise, the input is decoded using UTF-8 unless it contains invalid UTF-8 sequences, in which case Windows-1252 is used as a fallback.  When used for encoding, it will either use the same encoding detection heuristics as in read in case of Append mode. When writing a new file, it will always use UTF-8.  This encoding cannot be passed to some functions that require a Java Charset."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "ascii", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for ASCII."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "utf_8", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Unicode UTF-8."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "utf_16_le", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Unicode UTF-16 Little Endian."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "utf_16_be", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Unicode UTF-16 Big Endian."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "utf_32_le", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Unicode UTF-32 Little Endian."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "utf_32_be", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Unicode UTF-32 Big Endian."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1250", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Central European (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1251", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Cyrillic (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1252", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["iso-8859-1"],"icon": "convert","description": "Encoding for Western European (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1253", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Greek (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1254", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["iso-8859-9"],"icon": "convert","description": "Encoding for Turkish (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1255", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Hebrew (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1256", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Arabic (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1257", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Baltic (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "windows_1258", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Encoding for Vietnamese (Windows)."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "to_java_charset", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert an Encoding to it\u0027s corresponding Java Charset, if applicable. This method should be used in places not aware of special logic for the Default encoding. In such places, usage of Default encoding will be forbidden."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "to_java_charset_or_null", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert an Encoding to it\u0027s corresponding Java Charset or null if it is the Default encoding. This method should only be used in places where a null Charset is expected - i.e. places aware of the Default encoding."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "character_set_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text ! Illegal_Argument", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the name of the character set."},
{"module": "Standard.Base.Data.Text.Encoding", "type": "Encoding", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Encoding to a friendly string."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "reverse", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Text","icon": "text","description": "Returns a new `Text` object with the characters in the reverse order of the input.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "each", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies the provided `function` to each character in `self`. \n\n This method does not return the results, so it is only useful for performing computations with side-effects.  If the function returns a dataflow error, the error is converted to a panic and thrown immediately stopping further processing.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "at", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": ["get character"],"group": "Selections","icon": "split","description": "Returns a character from the text at the specified index (0-based).","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "get", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": ["get character"],"icon": "split","description": "Returns a character from the text at the specified index (0-based). If the index is invalid then `if_missing` is returned.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "first", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "split","description": "Returns the first character from the text.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "second", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "split","description": "Returns the second character from the text.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "last", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "split","description": "Returns the last character from the text.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "characters", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["get characters"],"group": "Text","icon": "convert","description": "Returns a vector containing all characters in the given text.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "find", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Regex | Text", "checked": true, "default": "\".*\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["match"],"group": "Selections","icon": "find","description": "Find the regular expression `pattern` in `self`, returning the first match if present or `Nothing` if not found.  For details on Enso\u0027s Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","errors": ""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "find_all", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Text|Regex", "checked": true, "default": "\".*\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["matches"],"group": "Selections","icon": "find","description": "Finds all the matches of the regular expression `pattern` in `self`, returning a Vector. If not found, will be an empty Vector.  For details on Enso\u0027s Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","errors": ""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "match", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean ! Regex_Syntax_Error | Illegal_Argument", "arguments": {"pattern": {"lazy": false, "type": "Text|Regex", "checked": true, "default": "\".*\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["check matches", "like", "regex"],"group": "Text","icon": "preparation","description": "Checks if the whole text in `self` matches a provided `pattern`.  For details on Enso\u0027s Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","errors": ""},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "to_regex", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"case_insensitive": {"lazy": false, "default": "False"}},"aliases": [],"group": "Text","icon": "text","description": "Compile the text into a regex pattern that can be used for matching. \n\n If an empty regex is used, `compile` throws an `Illegal_Argument` error.","remarks": "? Why Compile?   While many regex engines are able to cache ad-hoc patterns, it is often   useful to be able to manually retain a pattern that you have computed. This   function exists so you can hold onto the resultant `Pattern` object,   instead of immediately proceeding to match using it."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "split", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"delimiter": {"lazy": false, "default": "\",\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "use_regex": {"lazy": false, "default": "False"}},"aliases": ["parse", "tokenize"],"group": "Conversions","icon": "split","description": "Takes a delimiter and returns the vector that results from splitting `self` on each of its occurrences."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "tokenize", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Text|Regex", "checked": true, "default": "Missing_Argument.throw \"pattern\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["parse", "regex", "split"],"group": "Conversions","icon": "split","description": "Takes an input string and and a pattern and returns all the matches as a `Vector Text`. If the pattern contains marked groups, the values are concatenated together; otherwise the whole match is returned."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "replace", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text | Regex", "checked": true}, "replacement": {"lazy": false, "type": "Text", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "Case_Sensitivity.Default"}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["replace text"],"group": "Text","icon": "text","description": "Perform a text or regex replace.  Returns the text with all matched elements replaced by the provided replacement. If `input` is empty, the function returns the input unchanged.  The replacement string can contain references to groups matched by the regex. The following syntaxes are supported:     $0: the entire match string     $\u0026: the entire match string     $n: the nth group     $\u0026lt;foo\u0026gt;: Named group `foo`  For details on Enso\u0027s Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","errors": "","remarks": "! Matching Grapheme Clusters   In case-insensitive mode, a single character can match multiple characters,   for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match   `ffi` or `f` etc. Thus in this mode, it is sometimes possible for a term to   match only a part of some single grapheme cluster, for example in the text   `ﬃa` the term `ia` will match just one-third of the first grapheme `ﬃ`.   Since we do not have the resolution to distinguish such partial matches, a   match which matched just a part of some grapheme cluster is extended and   treated as if it matched the whole grapheme cluster. Thus the whole   grapheme cluster may be replaced with the replacement text even if just a   part of it was matched."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "cleanse", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"remove": {"lazy": false}},"aliases": [],"group": "Text","icon": "text","description": "Applies the specified cleansings to the text."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Cleansable_Text", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "words", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"keep_whitespace": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["get words"],"group": "Text","icon": "text","description": "Returns a vector containing all words in the given text.","remarks": "! What is a Word?   A word is defined based on the definition of Word Boundaries in the Unicode   Standard Annex 29, supplemented by language-specific dictionaries for   Chinese, Japanese, Thai, and Khmer."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "lines", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"keep_endings": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["get lines"],"group": "Text","icon": "text","description": "Splits the text into lines, based on \u0027\\n\u0027, \u0027\\r\u0027 or \u0027\\r\\n\u0027 line endings.  Empty lines are added for leading newlines. Multiple consecutive newlines will also yield additional empty lines. A line ending at the end of the line is not required, but if it is present it will not cause an empty line to be added at the end."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "insert", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true}, "that": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Text","icon": "text_input","description": "Inserts text value at the specified index.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "is_digit", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Logical","icon": "metadata","description": "Returns if a character from the text at the specified index (0-based) is a digit (0-9).","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "is_whitespace", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the text consists only of whitespace characters."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "bytes", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"icon": "convert","description": "Returns a vector containing bytes representing the specified encoding of the input text.  This is useful for low-level operations, such as binary data encoding."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "from_bytes", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"bytes": {"lazy": false}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "convert","description": "Takes a vector of bytes and returns Text resulting from decoding it using the specified encoding."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "utf_8", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"icon": "convert","description": "Returns a vector containing bytes representing the UTF-8 encoding of the input text.  This is useful for low-level operations, such as binary data encoding and decoding."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "from_utf_8", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"bytes": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "convert","description": "Takes a vector of bytes and returns Text resulting from decoding it as UTF-8. \n\n This is useful for low-level operations, such as binary data encoding and decoding."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "char_vector", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Returns a vector containing the UTF-16 characters that encode the input text.  This is useful for low-level operations, such as binary data encoding and decoding."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "from_char_vector", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"chars": {"lazy": false}},"aliases": [],"icon": "convert","description": "Takes a vector of characters and returns the text that results from it. \n\n This is useful for low-level operations, such as binary data encoding and decoding."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "codepoints", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Returns a vector containing integers representing the Unicode codepoints of the input text.  This is useful for low-level operations, such as binary data encoding and decoding."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "from_codepoints", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"codepoints": {"lazy": false}},"aliases": [],"icon": "convert","description": "Takes an array of numbers and returns the text resulting from interpreting it as a sequence of Unicode codepoints.  This is useful for low-level operations, such as binary data encoding and decoding."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "starts_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "type": "Text", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["check prefix"],"group": "Text","icon": "preparation","description": "Checks whether `self` starts with `prefix`.","remarks": "! Unicode Equality   The definition of equality includes Unicode canonicalization. I.e. two   texts are equal if they are identical after canonical decomposition. This   ensures that different ways of expressing the same character in the   underlying binary representation are considered equal.        \u0027ś\u0027 . starts_with \u0027s\u0027 == False       \u0027s\\u{301}\u0027 . starts_with \u0027s\u0027 == False       \u0027s\\u{301}\u0027 . starts_with \u0027ś\u0027 == True       \u0027ś\u0027 . starts_with \u0027s\\u{301}\u0027 == True"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "ends_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"suffix": {"lazy": false, "type": "Text", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["check suffix"],"group": "Text","icon": "preparation","description": "Checks whether `self` ends with `suffix`.","remarks": "! Unicode Equality   The definition of equality includes Unicode canonicalization. I.e. two   texts are equal if they are identical after canonical decomposition. This   ensures that different ways of expressing the same character in the   underlying binary representation are considered equal."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "contains", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["contains"],"group": "Logical","icon": "preparation","description": "Checks whether `self` contains `sequence` as its substring.","returns": "`True` if term is found within `self`. `False` otherwise.","remarks": "! Unicode Equality   The definition of equality includes Unicode canonicalization. I.e. two   texts are equal if they are identical after canonical decomposition. This   ensures that different ways of expressing the same character in the   underlying binary representation are considered equal.        \u0027ś\u0027 . contains \u0027s\u0027 == False       \u0027s\\u{301}\u0027 . contains \u0027s\u0027 == False       \u0027s\\u{301}\u0027 . contains \u0027ś\u0027 == True       \u0027ś\u0027 . contains \u0027s\\u{301}\u0027 == True"},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "*", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Operators","icon": "text","description": "Takes an integer and returns a new text, consisting of `count` concatenated copies of `self`."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "repeat", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"group": "Calculations","icon": "text","description": "Takes an integer and returns a new text, consisting of `count` concatenated copies of `self`."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "take", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Text_Sub_Range | Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "left", "limit", "mid", "right", "slice", "substring", "tail", "top"],"group": "Selections","icon": "split","description": "Creates a new Text by selecting the specified range of the input.  This can select a section of text from the beginning, end, or middle of the input using various criteria defined by the range parameter.","returns": "The part of the input as specified by the range parameter."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "drop", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Text_Sub_Range | Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Selections","icon": "split","description": "Creates a new Text by removing the specified range of the input.  This can select a section of text from the beginning, end, or middle of the input using various criteria defined by the range parameter.","returns": "The part of the input as specified by the range parameter."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "to_case", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"case_option": {"lazy": false, "type": "Case", "checked": true, "default": "..Lower"}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": ["lower", "proper", "title", "upper"],"group": "Text","icon": "text","description": "Converts each character in `self` to the specified case.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications. \n\n! What is title case?   Title case capitalizes the first letter of every word and ensures that all   the remaining letters are in lower case. Some definitions of title case   avoid capitalizing minor words (like the article \"the\" in English) but this   implementation treats all words in the same way."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "pad", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "with_pad": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027 \u0027"}, "at": {"lazy": false, "type": "Location", "checked": true, "default": "..Right"}},"aliases": [],"group": "Calculations","icon": "text","description": "Returns the input padded to the specified `length`, using the `with_pad` string repeated at the start or the end."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "trim", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "default": "_.is_whitespace"}},"aliases": [],"group": "Text","icon": "text","description": "This function removes the specified `trim_characters`, by default any whitespace, from the start, the end, or both ends of the input."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "locate", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "mode": {"lazy": false, "default": "Matching_Mode.First"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["position_of", "span_of"],"group": "Text","icon": "find","description": "Find the location of the `term` in the input. Returns a Span representing the location at which the term was found, or `Nothing` if the term was not found in the input.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications. \n\n! Match Length   The  function returns not only the index of the match but a `Span` instance   which contains both the start and end indices, allowing to determine the   length of the match. This is useful for case insensitive matching. In   case-insensitive mode, a single character can match multiple characters,   for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match   `ffi` or `f` etc. Thus in case-insensitive mode, the length of the match   can be shorter or longer than the term that was being matched, so it is   extremely important to not rely on the length of the matched term when   analysing the matches as they may have different lengths. \n\n! Matching Grapheme Clusters   In case-insensitive mode, a single character can match multiple characters,   for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match   `ffi` or `f` etc. Thus in this mode, it is sometimes possible for a term to   match only a part of some single grapheme cluster, for example in the text   `ﬃa` the term `ia` will match just one-third of the first grapheme `ﬃ`.   Since we do not have the resolution to distinguish such partial matches   (as that would require non-integer indices), so a match which matched just   a part of some grapheme cluster is extended and treated as if it matched   the whole grapheme cluster."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "locate_all", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": ["index_of_all", "position_of_all", "span_of_all"],"group": "Text","icon": "find","description": "Finds all the locations of the `term` in the input. If not found, the function returns an empty Vector.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications. \n\n! Match Length   The  function returns not only the index of the match but a `Span` instance   which contains both the start and end indices, allowing to determine the   length of the match. This is useful for case insensitive matching. In   case-insensitive mode, a single character can match multiple characters,   for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match   `ffi` or `f` etc. Thus in case-insensitive mode, the length of the match   can be shorter or longer than the term that was being matched, so it is   extremely important to not rely on the length of the matched term when   analysing the matches as they may have different lengths. \n\n! Matching Grapheme Clusters   In case-insensitive mode, a single character can match multiple characters,   for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match   `ffi` or `f` etc. Thus in this mode, it is sometimes possible for a term to   match only a part of some single grapheme cluster, for example in the text   `ﬃa` the term `ia` will match just one-third of the first grapheme `ﬃ`.   Since we do not have the resolution to distinguish such partial matches   (as that would require non-integer indices), so a match which matched just   a part of some grapheme cluster is extended and treated as if it matched   the whole grapheme cluster."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "index_of", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": [],"group": "Values","icon": "find","description": "Find the first index of the `term` in the input. Returns `Nothing` if the term was not found in the input.  Using `locate` is preferred as then you can also get the length of the match which may not necessarily be equal to the length of the searched term - not only in case of regex matching but also in case insensitive mode. See the Match Length section of `locate` for an explanation.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "last_index_of", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"term": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "start": {"lazy": false, "default": "-1"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}},"aliases": [],"group": "Values","icon": "find","description": "Find the last index of the `term` in the input. Returns `Nothing` if the term was not found in the input.  Using `locate` is preferred as then you can also get the length of the match which may not necessarily be equal to the length of the searched term - not only in case of regex matching but also in case insensitive mode. See the Match Length section of `locate` for an explanation.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_float", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false, "default": "Locale.default"}},"aliases": ["float from text", "to_float"],"group": "Conversions","icon": "convert","description": "Parses a textual representation of a float into a float number, returning a `Number_Parse_Error` if the text does not represent a valid float."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_integer", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Number_Parse_Error", "arguments": {"radix": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}},"aliases": ["integer from text", "to_integer"],"group": "Conversions","icon": "convert","description": "Parses a textual representation of an integer into an integer number, returning a `Number_Parse_Error` if the text does not represent a valid integer."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_json", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["json from text"],"group": "Conversions","icon": "convert","description": "Parse a Text value into a `JS_Object` or an Enso primitive value (like `Text`, `Number`, `Boolean`, `Nothing`), or a `Vector` of values."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_date", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.iso_date"}},"aliases": ["date from text", "to_date"],"group": "Conversions","icon": "convert","description": "Converts text containing a date into a Date object.  This method will return a `Time_Error` if the provided time cannot be parsed.","remarks": "? Default Date Formatting   Unless you provide a custom format, the text must represent a valid date   that can be parsed using the ISO-8601 extended local date format. The   format consists of:    - Four digits or more for the year. Years in the range 0000 to 9999     will be pre-padded by zero to ensure four digits. Years outside     that range will have a prefixed positive or negative symbol.   - A dash   - Two digits for the month-of-year. This is pre-padded by zero to ensure     two digits.   - A dash   - Two digits for the day-of-month. This is pre-padded by zero to ensure two     digits. \n\n? Pattern Syntax   If the pattern is provided as `Text`, it is parsed using the format   described below. See `Date_Time_Formatter` for more options.   - y: Year. The number of pattern letters determines the minimum number of     digits.     - y: The year using any number of digits.     - yy: The year, using at most two digits. The default range is       1950-2049, but this can be changed by including the end year in       braces e.g. `yy{2099}`.     - yyyy: The year, using exactly four digits.   - M: Month of year. The number of pattern letters determines the format:     - M: Any number (1-12).     - MM: Month number with zero padding required (01-12).     - MMM: Short name of the month (Jan-Dec).     - MMMM: Full name of the month (January-December).     The month names depend on the selected locale.   - d: Day. The number of pattern letters determines the format:     - d: Any number (1-31).     - dd: Day number with zero padding required (01-31).     - ddd: Short name of the day of week (Mon-Sun).     - dddd: Full name of the day of week (Monday-Sunday).     The weekday names depend on the selected locale.     Both day of week and day of month may be included in a single pattern -     in such case the day of week is used as a sanity check.   - Q: Quarter of year.     If only year and quarter are provided in the pattern, when parsing a     date, the result will be the first day of that quarter."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_date_time", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.default_enso_zoned_date_time"}},"aliases": ["date_time from text"],"group": "Conversions","icon": "convert","description": "Obtains an instance of `Date_Time` from a text such as \"2007-12-03T10:15:30+01:00 Europe/Paris\".  This method will return a `Time_Error` if the provided time cannot be parsed.","remarks": "? Default Date_Time Format   Unless you provide a custom format, the text must represent a valid   date-time as defined by the ISO-8601 format (see https://en.wikipedia.org/wiki/ISO_8601).   If a time zone is present, it must be in the ISO-8601 Extended Date/Time   Format (EDTF) (see https://en.wikipedia.org/wiki/ISO_8601#EDTF). The time   zone format consists of:    - The ISO offset date time.   - If the zone ID is not available or is a zone offset then the format is     complete.   - An open square bracket \u0027[\u0027.   - The zone ID. This is not part of the ISO-8601 standard. Parsing is case     sensitive.   - A close square bracket \u0027]\u0027. \n\n? Pattern Syntax   If the pattern is provided as `Text`, it is parsed using the format   described below. See `Date_Time_Formatter` for more options.   - y: Year. The number of pattern letters determines the minimum number of     digits.     - y: The year using any number of digits.     - yy: The year, using at most two digits. The default range is       1950-2049, but this can be changed by including the end year in       braces e.g. `yy{2099}`.     - yyyy: The year, using exactly four digits.   - M: Month of year. The number of pattern letters determines the format:     - M: Any number (1-12).     - MM: Month number with zero padding required (01-12).     - MMM: Short name of the month (Jan-Dec).     - MMMM: Full name of the month (January-December).     The month names depend on the selected locale.   - d: Day. The number of pattern letters determines the format:     - d: Any number (1-31).     - dd: Day number with zero padding required (01-31).     - ddd: Short name of the day of week (Mon-Sun).     - dddd: Full name of the day of week (Monday-Sunday).     The weekday names depend on the selected locale.     Both day of week and day of month may be included in a single pattern -     in such case the day of week is used as a sanity check.   - Q: Quarter of year.     If only year and quarter are provided in the pattern, when parsing a     date, the result will be the first day of that quarter.   - H: 24h hour of day (0-23).   - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate     between AM and PM.   - m: Minute of hour.   - s: Second of minute.   - f: Fractional part of the second. The number of pattern letters     determines the number of digits. If one letter is used, any number of     digits will be accepted.   - a: AM/PM marker.   - T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,     -08:30), otherwise - Time zone name (e.g. Central European Time, CET).   - Z: Zone offset (e.g. +0000, -0830, +08:30:15)."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_time_of_day", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.iso_time"}},"aliases": ["time_of_day from text", "to_time_of_day"],"group": "Conversions","icon": "convert","description": "Obtains an instance of `Time_Of_Day` from a text such as \"10:15\".  This method will return a `Time_Error` if the provided time cannot be parsed.","remarks": "? Default Time Format   Unless you provide a custom format, the text must represent a valid time   and is parsed using the ISO-8601 extended local time format.   The format consists of:    - Two digits for the hour-of-day. This is pre-padded by zero to ensure two     digits.   - A colon   - Two digits for the minute-of-hour. This is pre-padded by zero to ensure     two digits.   - If the second-of-minute is not available then the format is complete.   - A colon   - Two digits for the second-of-minute. This is pre-padded by zero to ensure     two digits.   - If the nano-of-second is zero or not available then the format is     complete.   - A float point   - One to nine digits for the nano-of-second. As many digits will be output     as required. \n\n? Pattern Syntax   If the pattern is provided as `Text`, it is parsed using the format   described below. See `Date_Time_Formatter` for more options.   - H: 24h hour of day (0-23).   - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate     between AM and PM.   - m: Minute of hour.   - s: Second of minute.   - f: Fractional part of the second. The number of pattern letters     determines the number of digits. If one letter is used, any number of     digits will be accepted.   - a: AM/PM marker."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "parse_time_zone", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["time_zone from text", "to_time_zone"],"group": "Conversions","icon": "convert","description": "This method parses the ID producing a `Time_Zone`."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "to_decimal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"scale": {"lazy": false, "type": "Integer | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this `Text` to a `Decimal`."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "Text", "name": "substring", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false, "type": "Integer", "checked": true}, "length": {"lazy": false, "type": "Integer", "checked": true, "default": "self.length"}},"aliases": ["mid", "slice", "substring"],"group": "Selections","icon": "split","description": "Creates a new Text by selecting the specified range of the input.","returns": "Part of the selected Text starting at start and stopping after length."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "", "name": "_slice_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "char_ranges": {"lazy": false}},"aliases": [],"description": "Returns a new Text constructed by slicing the input according to the provided ranges. The ranges are assumed to have step equal to 1 and bounds within the input\u0027s range.  The input ranges are in UTF-16 code unit space."},
{"module": "Standard.Base.Data.Text.Extensions", "type": "", "name": "_split_find_delimiters", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false}, "delimiter": {"lazy": false}, "case_sensitivity": {"lazy": false}},"aliases": [],"description": "Find occurrences of delimiters in a string."},
{"module": "Standard.Base.Data.Text.Line_Ending_Style", "type": "Line_Ending_Style", "name": "Unix", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Line_Ending_Style", "arguments": {},"aliases": [],"description": "Unix-style endings. Used, among others, on Linux and modern MacOS. The text equivalent is `\u0027\\n\u0027`."},
{"module": "Standard.Base.Data.Text.Line_Ending_Style", "type": "Line_Ending_Style", "name": "Windows", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Line_Ending_Style", "arguments": {},"aliases": [],"description": "Windows-style endings. The text equivalent is `\u0027\\r\\n\u0027`."},
{"module": "Standard.Base.Data.Text.Line_Ending_Style", "type": "Line_Ending_Style", "name": "Mac_Legacy", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Line_Ending_Style", "arguments": {},"aliases": [],"description": "Legacy MacOS endings. Only used on very old Mac systems. The text equivalent is `\u0027\\r\\n\u0027`."},
{"module": "Standard.Base.Data.Text.Line_Ending_Style", "type": "Line_Ending_Style", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the text equivalent of the line ending."},
{"module": "Standard.Base.Data.Text.Location", "type": "Location", "name": "Left", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Location", "arguments": {},"aliases": [],"description": "Indicates the beginning of a text."},
{"module": "Standard.Base.Data.Text.Location", "type": "Location", "name": "Right", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Location", "arguments": {},"aliases": [],"description": "Indicates the end of a text."},
{"module": "Standard.Base.Data.Text.Location", "type": "Location", "name": "Both", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Location", "arguments": {},"aliases": [],"description": "Indicates both the beginning and end of a text."},
{"module": "Standard.Base.Data.Text.Matching_Mode", "type": "Matching_Mode", "name": "First", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Matching_Mode", "arguments": {},"aliases": [],"description": "Matches the first found instance."},
{"module": "Standard.Base.Data.Text.Matching_Mode", "type": "Matching_Mode", "name": "Last", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Matching_Mode", "arguments": {},"aliases": [],"description": "Matches the last found instance."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "NFC", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Normalization", "arguments": {},"aliases": [],"description": "Unicode NFC normalization mode."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "NFD", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Normalization", "arguments": {},"aliases": [],"description": "Unicode NFD normalization mode."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "NFKC", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Normalization", "arguments": {},"aliases": [],"description": "Unicode NFKC normalization mode."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "NFKD", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Normalization", "arguments": {},"aliases": [],"description": "Unicode NFKD normalization mode."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "NFKCCasefold", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Normalization", "arguments": {},"aliases": [],"description": "Unicode NFKC_CF normalization mode."},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "get_java_mode", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Normalization", "type": "Normalization", "name": "get_mode_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Prim_Text_Helper", "type": "", "name": "optimize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "Forces flattening of a text value."},
{"module": "Standard.Base.Data.Text.Prim_Text_Helper", "type": "", "name": "compile_regex", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}, "options": {"lazy": false}},"aliases": [],"description": "Compile the regex using the Truffle regex library.  Returns a Java RegexObject (Truffle) (See https://github.com/oracle/graal/blob/master/regex/docs/README.md)"},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Regex", "arguments": {"case_insensitive": {"lazy": false, "type": "Boolean", "checked": true}, "internal_regex_object": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "internal_regex_object : RegexObject (Truffle) (See https://github.com/oracle/graal/blob/master/regex/docs/README.md)"},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "compile", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Regex | Text", "checked": true}, "case_insensitive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "text","description": "Compile the provided `expression` into a `Regex` that can be used for matching.  For details on Enso\u0027s Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","errors": ""},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "escape", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}},"aliases": [],"icon": "text","description": "Escape the special characters in `expression` such that the result is a valid literal pattern for the original string."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "pattern", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the original pattern used to create this `Regex`."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the `Regex`."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "matches", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Text","icon": "preparation","description": "Returns `True` if the input matches against the pattern described by `self`, otherwise `False`."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "match", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Text","icon": "find","description": "Tries to match the provided `input` against the pattern `self`.  Returns a `Match` containing the matched text and its match groups, or `Nothing` if the match failed."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "match_all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Text","icon": "find","description": "Tries to match the provided `input` against the pattern `self`.  Returns a `Vector Match` object, each containing the matched text and its match groups."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["match"],"group": "Selections","icon": "find","description": "Tries to match the provided `input` against the pattern `self`.  Returns a `Text` containing the matched text, or `Nothing` if the match failed."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "find_all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["matches"],"group": "Selections","icon": "find","description": "Tries to match the provided `input` against the pattern `self`.  Returns a `Vector Text`, each containing the matched text. If the pattern does not match, an empty `Vector` is returned."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "split", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["parse", "tokenize"],"group": "Conversions","icon": "split","description": "Splits the `input` text based on the pattern described by `self`.  This method will _always_ return a vector. If no splits take place, the vector will contain a single element (equal to the original string)."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "tokenize", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["parse", "split"],"group": "Conversions","icon": "split","description": "Takes an input string and returns all the matches as a `Vector Text`. If the pattern contains marked groups, the values are concatenated together; otherwise the whole match is returned. Non-participating groups are omitted."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Text", "checked": true}, "replacement": {"lazy": false, "type": "Text", "checked": true}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Text","icon": "text","description": "Replace all occurrences of the pattern described by `self` in the `input` with the specified `replacement`.  If this method performs no replacements it will return the `input` text unchanged.  The replacement string can contain references to groups matched by the regex. The following syntaxes are supported:     $0: the entire match string     $\u0026: the entire match string     $n: the nth group     $\u0026lt;foo\u0026gt;: Named group `foo`"},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "lookup_group", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"id": {"lazy": false}},"aliases": [],"description": "Look up a match group name or number, and check that it is valid.","returns": "A group number.  A group number is invalid if it is outside the range of groups that were in the original pattern.  A group name is invalid if it was not defined in the original pattern.  A group name is an alias for a group number; if a name is passed to this method, it returns the corresponding group number.  If a group number is passed to `lookup_group` and it is valid, it will simply return the group number.  Note that it is possible for a group to \"not participate in the match\", for example with a disjunction. In the example below, the \"(d)\" group does not participate -- it neither matches nor fails.       \"ab((c)|(d))\".find \"abc\"  In this case, the group id for \"(d)\", which is 3, is a valid group id and (Regex.lookup_group 3) will return 3. If the caller tries to get group 3, Match.group will return Nothing."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "iterator", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false}},"aliases": [],"description": "Return a lazy iterator over matches against a string."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "group_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Return the number of groups in the underlying RegexObject. Note, the count includes group 0 (the whole match) as well."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "named_groups", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Return a vector of all named group names."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "group_nums_to_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Return a Dictionary from group number to group name. Only includes named groups."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex", "name": "recompile", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}},"aliases": [],"description": "Recompile the underlying regex string; used to change the case-sensitivity of a compiled Regex."},
{"module": "Standard.Base.Data.Text.Regex", "type": "No_Such_Group", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Group", "arguments": {"id": {"lazy": false, "type": "Text | Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex", "type": "No_Such_Group", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the `No_Such_Group`."},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex_Syntax_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Regex_Syntax_Error", "arguments": {"message": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex", "type": "Regex_Syntax_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the `Regex_Syntax_Error`."},
{"module": "Standard.Base.Data.Text.Regex", "type": "", "name": "polyglot_map_to_dictionary", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"map": {"lazy": false}},"aliases": [],"description": "Convert the polyglot map to a Dictionary."},
{"module": "Standard.Base.Data.Text.Regex", "type": "", "name": "read_group_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"polyglot_map": {"lazy": false}, "name": {"lazy": false}},"aliases": [],"description": "Get the named group from the polyglot map."},
{"module": "Standard.Base.Data.Text.Regex", "type": "", "name": "match_to_group_maybe", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"match": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text.Regex", "type": "", "name": "build_tokenization_output_from_match", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}, "match": {"lazy": false}},"aliases": [],"description": "Build an output string from a Match resulting from `tokenize`. See `tokenize`."},
{"module": "Standard.Base.Data.Text.Regex", "type": "", "name": "regex", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "text","description": "Shorthand to create a regular expression from a Text value.  If an empty regex is used, throws an Illegal_Argument error."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Span", "arguments": {"range": {"lazy": false, "type": "Range", "checked": true}, "parent": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A representation of a span of characters in Enso\u0027s `Text` type.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The index of the first character included in the span.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "end", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The index of the first character after `start` that is _not_ included in the span.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The length of the span in extended grapheme clusters.","remarks": "! What is a Character?   A character is defined as an Extended Grapheme Cluster, see Unicode   Standard Annex 29. This is the smallest unit that still has semantic   meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the part of the text that this span covers."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "to_utf_16_span", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Converts the span of extended grapheme clusters to a corresponding span of UTF-16 code units."},
{"module": "Standard.Base.Data.Text.Span", "type": "Span", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Span."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Utf_16_Span", "arguments": {"range": {"lazy": false, "type": "Range", "checked": true}, "parent": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A representation of a span of UTF-16 code units in Enso\u0027s `Text` type."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The index of the first code unit included in the span."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "end", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The index of the first code unit after `start` that is _not_ included in the span."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The length of the span in UTF-16 code units."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the part of the text that this span covers."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "to_grapheme_span", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Returns a span of extended grapheme clusters which is the closest approximation of this span of code units.  The resulting span is extended in such a way that every code unit that was contained by the original span is also contained in a new span. Since some grapheme clusters consist of multiple code units, after the span was extended it may also contain code units which were not contained inside of the original span."},
{"module": "Standard.Base.Data.Text.Span", "type": "Utf_16_Span", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Span."},
{"module": "Standard.Base.Data.Text.Span", "type": "", "name": "range_to_char_indices", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "range": {"lazy": false}},"aliases": [],"description": "Utility function taking a range pointing at grapheme clusters and converting to a range on the underlying code units."},
{"module": "Standard.Base.Data.Text.Text_Cleanse", "type": "Text_Cleanse", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text_Cleanse", "arguments": {"named_pattern": {"lazy": false, "type": "Named_Pattern", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Cleanse", "type": "Text_Cleanse", "name": "apply", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"input": {"lazy": false, "type": "Cleansable_Text", "checked": true}},"aliases": [],"description": "Apply the cleanse operation to the text."},
{"module": "Standard.Base.Data.Text.Text_Cleanse", "type": "Cleansable_Text", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Cleansable_Text", "arguments": {"replace": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Ordering", "type": "Text_Ordering", "name": "Default", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Ordering", "arguments": {"sort_digits_as_numbers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Specifies the ordering of text values.  For the In-memory backend, the default ordering is case-sensitive. In databases, the default ordering depends on the database configuration."},
{"module": "Standard.Base.Data.Text.Text_Ordering", "type": "Text_Ordering", "name": "Case_Sensitive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Ordering", "arguments": {"sort_digits_as_numbers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Case sensitive ordering of values.  It will ensure case-sensitive ordering regardless of backend defaults. This may make database queries more complicated and may result in being unable to rely on existing indices, thus potentially making the queries much slower. The `Default` ordering is preferred wherever possible."},
{"module": "Standard.Base.Data.Text.Text_Ordering", "type": "Text_Ordering", "name": "Case_Insensitive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Ordering", "arguments": {"locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}, "sort_digits_as_numbers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Case insensitive ordering of values.  It will ensure case-insensitive ordering regardless of backend defaults. This may make database queries more complicated and may result in being unable to rely on existing indices, thus potentially making the queries much slower. The `Default` ordering is preferred wherever possible."},
{"module": "Standard.Base.Data.Text.Text_Ordering", "type": "Text_Ordering", "name": "case_sensitivity", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns this ordering\u0027s case sensitivity setting."},
{"module": "Standard.Base.Data.Text.Text_Ordering", "type": "Text_Ordering", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Text_Ordering to a friendly string."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "Before", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Sub_Range", "arguments": {"delimiter": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Select characters until the first instance of `delimiter`. Select an empty string if `delimiter` is empty. Select the entire string if the input does not contain `delimiter`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "Before_Last", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Sub_Range", "arguments": {"delimiter": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Select characters until the last instance of `delimiter`. Select an empty string if `delimiter` is empty. Select the entire string if the input does not contain `delimiter`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "After", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Sub_Range", "arguments": {"delimiter": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Select characters after the first instance of `delimiter`. Select an empty string if the input does not contain `delimiter`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "After_Last", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Sub_Range", "arguments": {"delimiter": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Select characters after the last instance of `delimiter`. Select an empty string if the input does not contain `delimiter`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "default_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "The widget for `Text_Sub_Range` also displays options for `Index_Sub_Range` since the former is supposed to \u0027expand\u0027 the latter and is always used together with it."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Text_Sub_Range", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this `Text_Sub_Range`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Codepoint_Ranges", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Codepoint_Ranges", "arguments": {"ranges": {"lazy": false, "type": "Vector Range", "checked": true}, "is_sorted_and_distinct": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "A list of codepoint ranges corresponding to the matched parts of the input."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Codepoint_Ranges", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "range": {"lazy": false, "type": "Text_Sub_Range | Index_Sub_Range | Range | Integer", "checked": true}},"aliases": [],"description": "Finds code-point indices corresponding to the part of the input matching the range specified by one of the types: `Text_Sub_Range`, `Index_Sub_Range`, `Range`.  This method may return either a single range instance or a vector of ranges.  While the input ranges may have varying steps, they are processed and split in such a way that the ranges returned by this method always have a step equal to 1."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "Codepoint_Ranges", "name": "sorted_and_distinct_ranges", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a new sorted list of ranges where intersecting ranges have been merged.  Empty ranges are not discarded."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "find_sub_range_end", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "predicate": {"lazy": false}},"aliases": [],"description": "Utility function to find char indices for Text_Sub_Range.","returns": "Either a Pair of char indices for current grapheme cluster or Pair Nothing (char array length) if not found."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "resolve_index_or_range", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "descriptor": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "character_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "Returns an array of UTF-16 code-unit indices corresponding to the beginning and end of each consecutive grapheme cluster.  These indices are consistent with the vector returned by `Text.char_vector`."},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "batch_resolve_indices_or_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "descriptors": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "panic_on_non_positive_step", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Text.Text_Sub_Range", "type": "", "name": "normalize_range", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false}, "length": {"lazy": false}},"aliases": [],"description": "Ensures that the range is valid and trims it to the length of the collection."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date", "arguments": {},"aliases": [],"description": "This type represents a date, often viewed as year-month-day.  For example, the value \"2nd October 2007\" can be stored in a `Date`.  This class does not store or represent a time or timezone. Instead, it is a description of the date, as used for birthdays. It cannot represent an instant on the time-line without additional information such as an offset or timezone."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "today", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["current date", "now"],"group": "DateTime","icon": "time","description": "Obtains the current date from the system clock in the system timezone."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"year": {"lazy": false, "type": "Integer", "checked": true}, "month": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "day": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"group": "DateTime","icon": "time","description": "Constructs a new Date from a year, month, and day. \n\n Returns a `Time_Error` if the provided time is not valid."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.iso_date"}},"aliases": ["date from text"],"group": "Conversions","icon": "convert","description": "Converts text containing a date into a Date object. \n\n Returns a `Time_Error` if the provided `text` cannot be parsed using the provided `format`.","remarks": "? Default Date Formatting   Unless you provide a custom format, the text must represent a valid date   that can be parsed using the ISO-8601 extended local date format. The   format consists of:    - Four digits or more for the year. Years in the range 0000 to 9999     will be pre-padded by zero to ensure four digits. Years outside     that range will have a prefixed positive or negative symbol.   - A dash   - Two digits for the month-of-year. This is pre-padded by zero to ensure     two digits.   - A dash   - Two digits for the day-of-month. This is pre-padded by zero to ensure two     digits. \n\n? Pattern Syntax   If the pattern is provided as `Text`, it is parsed using the format   described below. See `Date_Time_Formatter` for more options.   - y: Year. The number of pattern letters determines the minimum number of     digits.     - y: The year using any number of digits.     - yy: The year, using at most two digits. The default range is       1950-2049, but this can be changed by including the end year in       braces e.g. `yy{2099}`.     - yyyy: The year, using exactly four digits.   - M: Month of year. The number of pattern letters determines the format:     - M: Any number (1-12).     - MM: Month number with zero padding required (01-12).     - MMM: Short name of the month (Jan-Dec).     - MMMM: Full name of the month (January-December).     The month names depend on the selected locale.   - d: Day. The number of pattern letters determines the format:     - d: Any number (1-31).     - dd: Day number with zero padding required (01-31).     - ddd: Short name of the day of week (Mon-Sun).     - dddd: Full name of the day of week (Monday-Sunday).     The weekday names depend on the selected locale.     Both day of week and day of month may be included in a single pattern -     in such case the day of week is used as a sanity check.   - Q: Quarter of year.     If only year and quarter are provided in the pattern, when parsing a     date, the result will be the first day of that quarter."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"include_today": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Gets the default drop down option for Date."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the year field."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the month of year field, as a number from 1 to 12."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "day", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the day of month field."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "week_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false, "default": "Nothing"}},"aliases": [],"icon": "metadata","description": "Returns the number of week of year this date falls into.  Produces a warning for a Date that is before epoch start.","remarks": "! Locale Dependency   Note that this operation is locale-specific. It varies both by the   local definition of the first day of week and the definition of the   first week of year. For example, in the US, the first day of the week   is Sunday and week 1 is the week containing January 1. In the UK on the   other hand, the first day of the week is Monday, and week 1 is the week   containing the first Thursday of the year. Therefore it is important to   properly specify the `locale` argument."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "is_leap_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns if the date is in a leap year.  Produces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "length_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns the number of days in the year represented by this date.  Produces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "century", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the century of the date."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "quarter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the quarter of the year the date falls into."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "length_of_month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns the number of days in the month represented by this date.  Produces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "day_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the day of the year."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "day_of_week", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the day of the week.  Produces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "start_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Date_Period.Month"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the first date within the `Date_Period` containing self."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "end_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Date_Period.Month"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the last date within the `Date_Period` containing self."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "next", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "type": "Date_Period", "checked": true, "default": "..Day"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the next date adding the `Date_Period` to self.  Produces a warning for a Date that is before epoch start. See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "previous", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "type": "Date_Period", "checked": true, "default": "..Day"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the previous date subtracting the `Date_Period` from self.  Produces a warning for a Date that is before epoch start. See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "until", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false}},"aliases": [],"group": "DateTime","icon": "time","description": "Creates a `Period` between self and the provided end date.  Produces a warning for a Date that is before epoch start. See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "days_until", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false}, "include_end_date": {"lazy": false, "default": "False"}},"aliases": [],"group": "DateTime","icon": "time","description": "Counts the days between self (inclusive) and the provided end date (exclusive, or inclusive if include_end_date=True).  Produces a warning for a Date that is before epoch start. See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "date_part", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "type": "Date_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns a requested date part as integer.  Produces a warning for a Date that is before epoch start. See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "date_diff", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false, "type": "Date", "checked": true}, "period": {"lazy": false, "type": "Date_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Computes a time difference between the two dates.  It returns an integer expressing how many periods fit between the two dates.  The difference will be positive if `end` is greater than `self`.  Produces a warning for a Date that is before epoch start. See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "date_add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Integer", "checked": true}, "period": {"lazy": false, "type": "Date_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Shifts the date by a specified period.  Produces a warning for a Date that is before epoch start. See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "work_days_until", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false}, "holidays": {"lazy": false, "default": "[]"}, "include_end_date": {"lazy": false, "default": "False"}},"aliases": [],"group": "DateTime","icon": "time","description": "Counts workdays between self (inclusive) and the provided end date (exclusive).  Produces a warning for a Date that is before epoch start. See `Date_Time.enso_epoch_start`.","remarks": "? Including the end date   To be consistent with how we usually represent intervals (in an   end-exclusive manner), by default the end date is not included in the   count. This has the nice property that for example to count the work   days within the next week you can do   `date.work_days_until (date + (Period.new days=7))` and it will look at   the 7 days starting from the current `date` and not 8 days. This also   gives us a property that   `date.work_days_until (date.add_work_days N) == N` for any non-negative   N. On the other hand, sometimes we may want the end date to be included   in the count, so we provide the `include_end_date` argument for that   purpose. Setting it to `True` should make the result consistent with   the `NETWORKDAYS` function in Excel and similar products."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "to_date_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"time_of_day": {"lazy": false, "default": "Time_Of_Day.new"}, "zone": {"lazy": false, "default": "Time_Zone.system"}},"aliases": ["date to time"],"group": "Conversions","icon": "convert","description": "Combine this date with time of day to create a point in time."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Period | Date_Period", "checked": true}},"aliases": ["add period"],"group": "Operators","icon": "time","description": "Add the specified amount of time to this instant to get another date."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "up_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false, "type": "Date", "checked": true}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Date_Period|Period", "checked": true, "default": "Date_Period.Day"}},"aliases": ["date range"],"group": "Input","icon": "time","description": "Creates an increasing range of dates from `self` to `end`."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "down_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false, "type": "Date", "checked": true}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Date_Period|Period", "checked": true, "default": "Date_Period.Day"}},"aliases": ["date range"],"group": "Input","icon": "time","description": "Creates a decreasing range of dates from `self` to `end`."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "add_work_days", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"days": {"lazy": false, "default": "1"}, "holidays": {"lazy": false, "default": "[]"}},"aliases": [],"group": "DateTime","icon": "time","description": "Shift the date by the specified amount of business days.  For the purpose of this method, the business days are defined to be Monday through Friday.  Produces a warning for a Date that is before epoch start. See `Date_Time.enso_epoch_start`.  This method always returns a day which is a business day - if the shift amount is zero, the closest following business day is returned. For the purpose of calculating the shift, the holidays are treated as if we were starting at the next business day after them, for example counting the shift starting on Saturday or Sunday works as if we were counting the shift from Monday (for positive shifts). So shifting Sunday by zero days will return Monday, but shifting it by one day will return a Tuesday (so that there is the full work day - Monday) within the interval. For negative shifts, shifting either Saturday or Sunday one day backwards will return Friday, but shifting Monday one day backwards will return a Friday. The whole logic is made consistent with `work_days_until`, so that the following properties hold:     date.work_days_until (date.add_work_days N) == N for any N \u003e= 0     (date.add_work_days N).work_days_until date == -N for any N \u003c 0"},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "internal_add_work_days", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"days": {"lazy": false, "default": "1"}, "holidays": {"lazy": false, "default": "[]"}},"aliases": [],"description": "ensure_in_epoch breaks tail call annotation and causes stack overflow. That is why `add_work_days` method is split into two methods."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Period | Date_Period", "checked": true}},"aliases": ["subtract period"],"group": "Operators","icon": "time","description": "Subtract the specified amount of time from this instant to get another date."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Date."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JS_Object representing this Date."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.iso_date"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Format this date using the provided format specifier.","remarks": "? Pattern Syntax   If the pattern is provided as `Text`, it is parsed using the format   described below. See `Date_Time_Formatter` for more options.   - y: Year. The number of pattern letters determines the minimum number of     digits.     - y: The year using any number of digits.     - yy: The year, using at most two digits. The default range is       1950-2049, but this can be changed by including the end year in       braces e.g. `yy{2099}`.     - yyyy: The year, using exactly four digits.   - M: Month of year. The number of pattern letters determines the format:     - M: Any number (1-12).     - MM: Month number with zero padding required (01-12).     - MMM: Short name of the month (Jan-Dec).     - MMMM: Full name of the month (January-December).     The month names depend on the selected locale.   - d: Day. The number of pattern letters determines the format:     - d: Any number (1-31).     - dd: Day number with zero padding required (01-31).     - ddd: Short name of the day of week (Mon-Sun).     - dddd: Full name of the day of week (Monday-Sunday).     The weekday names depend on the selected locale.     Both day of week and day of month may be included in a single pattern -     in such case the day of week is used as a sanity check.   - Q: Quarter of year.     If only year and quarter are provided in the pattern, when parsing a     date, the result will be the first day of that quarter."},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Time.Date", "type": "", "name": "new_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"year": {"lazy": false}, "month": {"lazy": false}, "day": {"lazy": false}},"aliases": [],"description": "Constructs a new Date from a year, month, and day. \n\n Recommended to use `Date.new` instead which handles potential exceptions."},
{"module": "Standard.Base.Data.Time.Date", "type": "", "name": "week_days_between", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date", "type": "", "name": "is_weekend", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date", "type": "", "name": "fits_in_range", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date", "type": "Date", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date", "type": "", "name": "make_day_picker", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "cache": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "Year", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Period", "arguments": {},"aliases": [],"description": "Represents a date period of a calendar year.  Its length in days will depend on context (accounting for leap years)."},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "Quarter", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Period", "arguments": {},"aliases": [],"description": "Represents a date period of a quarter - 3 calendar months."},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "Month", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Period", "arguments": {},"aliases": [],"description": "Represents a date period of a month.  Its length in days will depend on context of what month it is used."},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "Week", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Period", "arguments": {"first_day": {"lazy": false, "type": "Day_Of_Week", "checked": true, "default": "Day_Of_Week.Monday"}},"aliases": [],"description": "Represents a 7-day week starting at a given day.  By default, the first day of the week is Monday, but this can be adjusted to any other day.  The starting day will be ignored for methods that just compute the time differences. It only matters for methods that need to find a beginning or end of a specific period (like `start_of` or `end_of`).  The `date_part` method will return the ISO 8601 week of year number, regardless of the starting day."},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "Day", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a single calendar day."},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "adjust_start", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "adjust_end", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "to_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Period", "type": "Date_Period", "name": "to_java_unit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "Internal_Constructor", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Date_Range", "arguments": {"start": {"lazy": false, "type": "Date", "checked": true}, "end": {"lazy": false, "type": "Date", "checked": true}, "step": {"lazy": false, "type": "Period", "checked": true}, "increasing": {"lazy": false, "type": "Boolean", "checked": true}, "cached_length": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Never use the constructor directly to construct a range, as it does not allow to verify invariants and may lead to unexpected behavior."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false, "default": "Date.today"}, "end": {"lazy": false, "default": "Date.today"}, "step": {"lazy": false, "default": "Date_Period.Day"}},"aliases": [],"icon": "time","description": "Create a representation of a right-exclusive range of dates.  The range is increasing or decreasing, depending on if the start date is before or after the end date."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "new_internal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "increasing": {"lazy": false}, "step": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "with_step", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_step": {"lazy": false, "type": "Date_Period|Period", "checked": true}},"aliases": [],"group": "Calculations","icon": "time","description": "Creates a copy of this range with a changed step."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a textual representation."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Returns the first element that is included within the range or `Nothing` if the range is empty."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Returns the second element that is included within the range or `Nothing` if the range has less than 2 element"},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Returns the last element that is included within the range or `Nothing` if the range is empty."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the number of elements in the range."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the range at a specified index (0-based)."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the range at a specified index (0-based). If the index is invalid then `if_missing` is returned."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "internal_at", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"i": {"lazy": false}},"aliases": [],"description": "Generates the i-th element of the range.  This method does no bounds checking, it should be used only internally."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Applies a function to each element in the range, producing a vector of results."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts the range to a vector containing the dates in the range."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this range is empty."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this range is not empty."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Filter_Condition | (Date -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Returns a vector of all elements of this range which satisfy a condition."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "partition", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Date -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Partitions the range into `Vector`s of elements which satisfy a given condition and ones that do not.  Returns a `Pair` whose `first` element is the `Vector` of elements satisfying the predicate and the `second` element is a `Vector` of elements which did not satisfy it.  The relative order of elements kept in each returned list is the same as in the input."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function for each element in the range.  This method does not return the results, so it is only useful for performing computations with side-effects.  If the function returns a dataflow error, the error is converted to a panic and thrown immediately stopping further processing."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "each_with_index", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the range.  Essentially acts like `range.to_vector.each_with_index`, but it is more efficient."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines all the elements of the range, by iteratively applying the passed function with next elements of the range."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "running_fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the range, by iteratively applying the passed function with the next element of the range. After each step the value is stored resulting in a new Vector of the same size as self."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Date -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition is satisfied for all dates in this range."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Date -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition is satisfied for any date in this range."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Date -> Boolean)", "checked": true}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Gets the first index when a condition is satisfied this range. If no index satisfies the predicate, returns `if_missing`."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks if the range contains the specified value."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of an element in the range. Returns Nothing if the element is not found."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of an element in the range. Returns Nothing if the element is not found."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the range, returning a vector with the same elements as the original range, but in the opposite order.","remarks": "? Returning a `Vector`    This method cannot return back a `Date_Range`, as some ranges are not   reversible. For example, the range `(Date.new 2020 02 29).up_to (Date.new 2023) . with_step Date_Period.Year`   will have `2022-02-28` as its last entry. But if we create a   range starting at `2022-02-28` and going backwards by a year, its last   element will be `2020-02-28` and not `2020-02-29` as in the original.   Thus, to preserve the contents we need to return a vector."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "if_empty": {"lazy": true, "default": "Error.throw (Empty_Error.Error Date_Range)"}},"aliases": [],"icon": "preparation","description": "Combines all the elements of a non-empty range using a binary operation. If the range is empty, returns `if_empty`."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Date_Range", "name": "default_column_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Default column name based on step."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "compute_length_and_verify", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "step": {"lazy": false}, "increasing": {"lazy": false}},"aliases": [],"description": "Computes the length of the range and verifies its invariants.  If any of the invariants are violated, a dataflow error is raised."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "is_period_positive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "compute_length_step_days", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "step": {"lazy": false}, "increasing": {"lazy": false}},"aliases": [],"description": "Assumes that the range is not empty."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "compute_length_step_months", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "step": {"lazy": false}, "increasing": {"lazy": false}},"aliases": [],"description": "Assumes that the range is not empty."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "nth_element_of_range", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "step": {"lazy": false}, "increasing": {"lazy": false}, "n": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "compute_length_step_brute_force", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "step": {"lazy": false}, "increasing": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "unify_condition_for_index_of", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Date | Filter_Condition | Function", "checked": true}},"aliases": [],"description": "This adds an additional type check."},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "", "name": "date_range_default_filter_condition_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Range", "type": "Vector", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Date_Time", "arguments": {},"aliases": [],"description": "A date-time with a timezone in the ISO-8601 calendar system, such as \"2007-12-03T10:15:30+01:00 Europe/Paris\".  Time is a representation of a date-time with a timezone. This class stores all date and time fields, to a precision of nanoseconds, and a timezone, with a zone offset used to handle ambiguous local date-times.  For example, the value \"2nd October 2007 at 13:45.30.123456789 +02:00 in the Europe/Paris timezone\" can be stored as `Time`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "enso_epoch_start", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "time","description": "Obtains the start of the epoch for Enso.","remarks": "? Start of the epoch For Enso, start of the epoch is equal to the start of the Gregorian calendar, which is on 15th October 1582.  Invoking some Gregorian calendar related functionalities, like `is_leap_year`, is computed for all the date times, including those before an epoch start, with today\u0027s rules. Trying to get some Gregorian calendar related properties for a historical date times that is defined before the epoch is likely an error, as the Gregorian calendar had not yet been introduced. Therefore, for such historical date times, a warning is attached to the result."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "now", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["current time"],"group": "DateTime","icon": "time","description": "Obtains the current date-time from the system clock in the system timezone."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"year": {"lazy": false, "type": "Integer", "checked": true, "default": "Missing_Argument.throw \"year\""}, "month": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "day": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "hour": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "minute": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "second": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "millisecond": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "microsecond": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "nanosecond": {"lazy": false, "default": "0"}, "zone": {"lazy": false, "type": "Time_Zone", "checked": true, "default": "Time_Zone.system"}},"aliases": [],"group": "DateTime","icon": "time","description": "Obtains an instance of `Date_Time` from a year, month, day, hour, minute, second, nanosecond and timezone. \n\n Returns a `Time_Error` if the provided time cannot be represented."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.default_enso_zoned_date_time"}},"aliases": ["time from text"],"group": "Conversions","icon": "convert","description": "Obtains an instance of `Time` from a text such as \"2007-12-03T10:15:30+01:00 Europe/Paris\".  This method will return a `Time_Error` if the provided time cannot be parsed.","remarks": "? Pattern Syntax   If the pattern is provided as `Text`, it is parsed using the format   described below. See `Date_Time_Formatter` for more options.   - y: Year. The number of pattern letters determines the minimum number of     digits.     - y: The year using any number of digits.     - yy: The year, using at most two digits. The default range is       1950-2049, but this can be changed by including the end year in       braces e.g. `yy{2099}`.     - yyyy: The year, using exactly four digits.   - M: Month of year. The number of pattern letters determines the format:     - M: Any number (1-12).     - MM: Month number with zero padding required (01-12).     - MMM: Short name of the month (Jan-Dec).     - MMMM: Full name of the month (January-December).     The month names depend on the selected locale.   - d: Day. The number of pattern letters determines the format:     - d: Any number (1-31).     - dd: Day number with zero padding required (01-31).     - ddd: Short name of the day of week (Mon-Sun).     - dddd: Full name of the day of week (Monday-Sunday).     The weekday names depend on the selected locale.     Both day of week and day of month may be included in a single pattern -     in such case the day of week is used as a sanity check.   - Q: Quarter of year.     If only year and quarter are provided in the pattern, when parsing a     date, the result will be the first day of that quarter.   - H: 24h hour of day (0-23).   - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate     between AM and PM.   - m: Minute of hour.   - s: Second of minute.   - f: Fractional part of the second. The number of pattern letters     determines the number of digits. If one letter is used, any number of     digits will be accepted.   - a: AM/PM marker.   - T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,     -08:30), otherwise - Time zone name (e.g. Central European Time, CET).   - Z: Zone offset.     - Z, ZZ, ZZZ: A short offset form (+HHmm).       No offset is indicated by \"+0000\". This can be customized by setting       an alternative no offset string in curly braces, e.g. `zz{Z}`.     - ZZZZ: Localized offset (e.g. GMT-08:00).     - ZZZZZ: A full offset form (+HH:mm:ss).       No offset is indicated by \"Z\". This can be customized as above, e.g.       `ZZZZZ{0}`. \n\n? Default Date_Time Format   Unless you provide a custom format, the text must represent a valid   date-time as defined by the ISO-8601 format (see https://en.wikipedia.org/wiki/ISO_8601).   If a time zone is present, it must be in the ISO-8601 Extended   Date/Time Format (EDTF) (see https://en.wikipedia.org/wiki/ISO_8601#EDTF).   The time zone format consists of:    - The ISO offset date time.   - If the zone ID is not available or is a zone offset then the format is     complete.   - An open square bracket \u0027[\u0027.   - The zone ID. This is not part of the ISO-8601 standard. Parsing is case     sensitive.   - A close square bracket \u0027]\u0027."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "from_unix_epoch_seconds", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"seconds": {"lazy": false, "type": "Integer", "checked": true}, "nanoseconds": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"icon": "convert","description": "Creates a new `Date_Time` from a Unix epoch timestamp in seconds (and optional nanoseconds)."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "from_unix_epoch_milliseconds", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"milliseconds": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"icon": "convert","description": "Creates a new `Date_Time` from a Unix epoch timestamp in milliseconds."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the year portion of the time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the month portion of the time as a number from 1 to 12."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "day", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the day portion of the time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "hour", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the hour portion of the time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "minute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the minute portion of the time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the second portion of the time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "millisecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the millisecond portion of the time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "microsecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the microsecond portion of the time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "nanosecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"include_milliseconds": {"lazy": false, "default": "False"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the nanosecond portion of the time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "zone", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Get the timezone for the time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_unix_epoch_seconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Return the number of seconds from the Unix epoch start (1.1.1970)  If this Date_Time is before the epoch start, returns a negative number."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_unix_epoch_milliseconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Return the number of milliseconds from the Unix epoch start.  If this Date_Time is before an epoch start, returns a negative number."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_enso_epoch_seconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Return the number of seconds from the Enso epoch start.  See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_enso_epoch_milliseconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Return the number of milliseconds from the Enso epoch start.  See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "time_of_day", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Convert this point in time to time of day, discarding the time zone information."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "week_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false, "default": "Nothing"}},"aliases": [],"icon": "metadata","description": "Returns the number of week of year this date falls into.  Produces a warning for a Date that is before epoch start.","remarks": "! Locale Dependency   Note that this operation is locale-specific. It varies both by the   local definition of the first day of week and the definition of the   first week of year. For example, in the US, the first day of the week   is Sunday and week 1 is the week containing January 1. In the UK on the   other hand, the first day of the week is Monday, and week 1 is the week   containing the first Thursday of the year. Therefore it is important to   properly specify the `locale` argument."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "is_leap_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns if the date is in a leap year.  Produces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "length_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns the number of days in the year represented by this date.  Produces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "century", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the century of the date."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "quarter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the quarter of the year the date falls into."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "length_of_month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Returns the number of days in the month represented by this date.  Produces a warning for a Date that is before epoch start."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "day_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the day of the year."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "day_of_week", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the day of the week."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "start_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Date_Period.Month"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the first date within the `Time_Period` or `Date_Period` containing self."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "end_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Date_Period.Month"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the last date within the `Time_Period` or `Date_Period` containing self."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "date", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["time to date"],"group": "DateTime","icon": "metadata","description": "Convert this point in time to date, discarding the time of day information."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "at_zone", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"zone": {"lazy": false}},"aliases": ["change time zone"],"group": "DateTime","icon": "time","description": "Convert the time instant to the same instant in the provided time zone."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "date_part", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns a requested date-time part as integer.  Produces a warning for a Date_Time that is before epoch start. See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "date_diff", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false, "type": "Date_Time", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Computes a time difference between the two date-times.  It returns an integer expressing how many periods fit between the two date-times.  The difference will be positive if `end` is greater than `self`.  Produces a warning for a Date_Time that is before epoch start. See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "date_add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Integer", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Shifts the date-time by a specified period.  Produces a warning for a Date_Time that is before epoch start. See `Date_Time.enso_epoch_start`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Duration | Period | Time_Period | Date_Period", "checked": true}},"aliases": ["add duration", "add period"],"group": "Operators","icon": "time","description": "Add the specified amount of time to this instant to produce a new instant."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "add_work_days", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"days": {"lazy": false, "default": "1"}, "holidays": {"lazy": false, "default": "[]"}},"aliases": [],"group": "DateTime","icon": "time","description": "Shift the date by the specified amount of business days.  For the purpose of this method, the business days are defined to be Monday through Friday.  Produces a warning if called on a Date_Time that is before an epoch start. See `Date_Time.enso_epoch_start`.  This method always returns a day which is a business day - if the shift amount is zero, the closest following business day is returned. For the purpose of calculating the shift, the holidays are treated as if we were starting at the next business day after them, for example counting the shift starting on Saturday or Sunday works as if we were counting the shift from Monday (for positive shifts). So shifting Sunday by zero days will return Monday, but shifting it by one day will return a Tuesday (so that there is the full work day - Monday) within the interval. For negative shifts, shifting either Saturday or Sunday one day backwards will return Friday, but shifting Monday one day backwards will return a Friday. The whole logic is made consistent with `work_days_until`, so that the following properties hold:     date.work_days_until (date.add_work_days N) == N for any N \u003e= 0     (date.add_work_days N).work_days_until date == -N for any N \u003c 0  The time of day is preserved, only the date is shifted."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Duration | Period | Time_Period | Date_Period", "checked": true}},"aliases": ["subtract duration", "subtract period"],"group": "Operators","icon": "time","description": "Subtract the specified amount of time from this instant to get a new instant.  Produces a warning if the resulting date time is before an Enso epoch."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Date_Time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing a Date_Time."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true}},"aliases": [],"group": "Conversions","icon": "convert","description": "Format this time as text using the specified format specifier.","remarks": "? Pattern Syntax   If the pattern is provided as `Text`, it is parsed using the format   described below. See `Date_Time_Formatter` for more options.   - y: Year. The number of pattern letters determines the minimum number of     digits.     - y: The year using any number of digits.     - yy: The year, using at most two digits. The default range is       1950-2049, but this can be changed by including the end year in       braces e.g. `yy{2099}`.     - yyyy: The year, using exactly four digits.   - M: Month of year. The number of pattern letters determines the format:     - M: Any number (1-12).     - MM: Month number with zero padding required (01-12).     - MMM: Short name of the month (Jan-Dec).     - MMMM: Full name of the month (January-December).     The month names depend on the selected locale.   - d: Day. The number of pattern letters determines the format:     - d: Any number (1-31).     - dd: Day number with zero padding required (01-31).     - ddd: Short name of the day of week (Mon-Sun).     - dddd: Full name of the day of week (Monday-Sunday).     The weekday names depend on the selected locale.     Both day of week and day of month may be included in a single pattern -     in such case the day of week is used as a sanity check.   - Q: Quarter of year.     If only year and quarter are provided in the pattern, when parsing a     date, the result will be the first day of that quarter.   - H: 24h hour of day (0-23).   - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate     between AM and PM.   - m: Minute of hour.   - s: Second of minute.   - f: Fractional part of the second. The number of pattern letters     determines the number of digits. If one letter is used, any number of     digits will be accepted.   - a: AM/PM marker.   - T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,     -08:30), otherwise - Time zone name (e.g. Central European Time, CET).   - Z: Zone offset.     - Z, ZZ, ZZZ: A short offset form (+HHmm).       No offset is indicated by \"+0000\". This can be customized by setting       an alternative no offset string in curly braces, e.g. `zz{Z}`.     - ZZZZ: Localized offset (e.g. GMT-08:00).     - ZZZZZ: A full offset form (+HH:mm:ss).       No offset is indicated by \"Z\". This can be customized as above, e.g.       `ZZZZZ{0}`."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "", "name": "unix_epoch_start", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "", "name": "ensure_in_epoch", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "", "name": "new_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"year": {"lazy": false}, "month": {"lazy": false}, "day": {"lazy": false}, "hour": {"lazy": false}, "minute": {"lazy": false}, "second": {"lazy": false}, "nanosecond": {"lazy": false}, "zone": {"lazy": false}},"aliases": [],"description": "Obtains an instance of `Date_Time` from a year, month, day, hour, minute, second, nanosecond and timezone. \n\n Recommended to use `Date_Time.new` instead which handles potential exceptions."},
{"module": "Standard.Base.Data.Time.Date_Time", "type": "Date_Time", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Date_Time_Formatter", "arguments": {"underlying": {"lazy": false, "type": "EnsoDateTimeFormatter", "checked": true}, "deferred_parsing_warnings": {"lazy": true, "default": "[]"}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "from_simple_pattern", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"icon": "convert","description": "Creates a formatter from a simple date-time format pattern.  Every letter in the pattern is interpreted as a pattern character as described in the table below. Any character that is not a letter in the pattern is treated as a literal character. If a sequence of letters needs to be put in as a literal, it can be escaped using single quotes. Use two single quotes in a row to represent a single quote in the result. As explained below, curly braces can have special meaning (see \u0027yy\u0027); to enter a literal curly brace, put it inside a quoted literal.  Pattern characters are interpreted case insensitively, with the exception of `M/m\u0027 and \u0027H/h\u0027.","remarks": "? Date pattern characters  - y: Year. The number of pattern letters determines the minimum number of   digits.   - y: The year using any number of digits.   - yy: The year, using at most two digits. The default range is     1950-2049, but this can be changed by including the end year in     braces e.g. `yy{2099}`.   - yyyy: The year, using exactly four digits. - M: Month of year. The number of pattern letters determines the format:   - M: Any number (1-12).   - MM: Month number with zero padding required (01-12).   - MMM: Short name of the month (Jan-Dec).   - MMMM: Full name of the month (January-December).   The month names depend on the selected locale. - d: Day. The number of pattern letters determines the format:   - d: Any number (1-31).   - dd: Day number with zero padding required (01-31).   - ddd: Short name of the day of week (Mon-Sun).   - dddd: Full name of the day of week (Monday-Sunday).   The weekday names depend on the selected locale.   Both day of week and day of month may be included in a single pattern -   in such case the day of week is used as a sanity check. - e: An alternative notation: single `e` maps to `ddd` and `ee` or more   map to `dddd` meaning name of day of week. - Q: Quarter of year.   If only year and quarter are provided in the pattern, when parsing a   date, the result will be the first day of that quarter. \n\n? Time pattern characters  - H: 24h hour of day (0-23). - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate   between AM and PM. - m: Minute of hour. - s: Second of minute. - f: Fractional part of the second. The number of pattern letters   determines the number of digits. If one letter is used, any number of   digits will be accepted. - a: AM/PM marker. \n\n? Time zone pattern characters  - T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,   -08:30), otherwise - Time zone name (e.g. Central European Time, CET). - Z: Zone offset.   - Z, ZZ, ZZZ: A short offset form (+HHmm).     No offset is indicated by \"+0000\". This can be customized by setting     an alternative no offset string in curly braces, e.g. `zz{Z}`.   - ZZZZ: Localized offset (e.g. GMT-08:00).   - ZZZZZ: A full offset form (+HH:mm:ss).     No offset is indicated by \"Z\". This can be customized as above, e.g.     `ZZZZZ{0}`. - v: Time zone name (same as TTTT). - V: Time zone ID (same as T).  Some parts, like fractions of a second may not be required. The square brackets `[]` can be used to surround such optional sections."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "from_iso_week_date_pattern", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Text", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"icon": "convert","description": "Creates a formatter from a pattern for the ISO 8601 leap week calendar.  The ISO 8601 leap week calendar is a variation of the ISO 8601 calendar that defines a leap week as the week that contains the 29th of February. This calendar is used by some European and Middle Eastern countries.  The pattern is a sequence of letters and symbols that are interpreted as follows: - Y: The week based year.   - In case the year is parsed in two digit mode (`YY`), the default     range is 1950-2049, but this can be changed by including the end year     in braces e.g. `YY{2099}` - w: Week of year. - d: Day of week.   - d: Numeric day of week (1-7). 1 is Monday.   - dd: Numeric day of week with zero padding (01-07).   - ddd: Short name of the day of week (Mon-Sun).   - dddd: Full name of the day of week (Monday-Sunday).   The weekday names depend on the selected locale. - e: An alternative notation: single `e` maps to `ddd` and `ee` or more   map to `dddd` meaning name of day of week.  Moreover, all time and timezone pattern characters like in `Simple` case are supported too - in case you need to parse a date time value with the date part in ISO week date format.  The same as in the `Simple` pattern, the single quotes can be used to escape letter literals and square brackets can be used to indicate optional sections."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "from_java", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"pattern": {"lazy": false}, "locale": {"lazy": false, "type": "Locale | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"icon": "convert","description": "Creates a formatter from a Java `DateTimeFormatter` instance or a text pattern parsed using the Java parser: `DateTimeFormatter.ofPattern`.  See the Java documentation for explanation of the pattern format: https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html#patterns"},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "default_enso_zoned_date_time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The default format for date-time used in Enso. It acts as `ISO_Zoned_Date_Time` but both offset and timezone are optional.  For example, it may parse date of the form `2011-12-03 10:15:30+01:00[Europe/Paris]`, as well as `2011-12-03T10:15:30` assuming the default timezone."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "iso_zoned_date_time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The ISO 8601 format for date-time with offset and timezone. The date and time parts may be separated by a single space or a `T`.  For example, it may parse date of the form `2011-12-03 10:15:30+01:00[Europe/Paris]`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "iso_offset_date_time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The ISO 8601 format for date-time with offset. The date and time parts may be separated by a single space or a `T`.  For example, it may parse date of the form `2011-12-03 10:15:30+01:00`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "iso_local_date_time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The ISO 8601 format for date-time without a timezone. The date and time parts may be separated by a single space or a `T`.  For example, it may parse date of the form `2011-12-03 10:15:30`. The timezone will be set to `Time_Zone.system`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "iso_date", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The ISO 8601 format for date.  For example, it may parse date of the form `2011-12-03`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "iso_time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "The ISO 8601 format for time.  For example, it may parse time of the form `10:15:30`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a text representation of this formatter."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Parses a human-readable representation of this formatter."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "with_locale", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false, "type": "Locale", "checked": true}},"aliases": [],"icon": "convert","description": "Returns a copy of this formatter with a changed locale."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "handle_java_errors", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "parse_date", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "parse_date_time", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "parse_time", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "format_date", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false, "type": "Date", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "format_date_time", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date_time": {"lazy": false, "type": "Date_Time", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "format_time", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"time": {"lazy": false, "type": "Time_Of_Day", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "with_parsing_warnings", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"continuation": {"lazy": true}},"aliases": [],"description": "Adds parsing warnings, if any, to the result of `continuation`."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "get_java_formatter_for_parsing", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the `underlying` formatter, also ensuring that parse-only warnings are attached to it, to be propagated."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "pattern_approximation_as_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a pattern that is associated with this formatter.  For formatters created using `from_simple_pattern` and `from_iso_week_date_pattern` or `from_java` with a Text pattern this will just be the pattern. For constants, it will be a pattern that best resembles that constant. For formatters created from a Java formatter instance, this will be the text representation of that formatter."},
{"module": "Standard.Base.Data.Time.Date_Time_Formatter", "type": "Date_Time_Formatter", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Sunday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Sunday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Monday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Monday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Tuesday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Tuesday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Wednesday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Wednesday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Thursday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Thursday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Friday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Friday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "Saturday", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Day_Of_Week", "arguments": {},"aliases": [],"description": "Day_Of_Week representing Saturday."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "to_integer", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"first_day": {"lazy": false, "default": "Day_Of_Week.Sunday"}, "start_at_zero": {"lazy": false, "default": "False"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert the Day_Of_Week to an Integer."},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Day_Of_Week_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Day_Of_Week", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Day_Of_Week", "type": "Day_Of_Week", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}, "first_day": {"lazy": false, "type": "Day_Of_Week", "checked": true, "default": "Day_Of_Week.Sunday"}, "start_at_zero": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Convert from an integer to a Day_Of_Week"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Duration", "arguments": {},"aliases": [],"description": "Represents the amount of time between two points in time."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "between", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"start_inclusive": {"lazy": false}, "end_exclusive": {"lazy": false}, "timezone_aware": {"lazy": false, "default": "True"}},"aliases": [],"icon": "time","description": "Create an interval representing the duration between two points in time."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"hours": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "minutes": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "seconds": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "milliseconds": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "nanoseconds": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "DateTime","icon": "time","description": "Create a duration from time units."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "zero", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "time","description": "Create a zero (empty) duration."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "time_execution", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": true}},"aliases": [],"icon": "time","description": "Time the evaluation of a function, return a Pair of Duration and Result"},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["add duration"],"group": "Operators","icon": "time","description": "Add the specified amount of time to this duration."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["subtract duration"],"group": "Operators","icon": "time","description": "Subtract the specified amount of time from this duration."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "nanoseconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the portion of the duration expressed in nanoseconds."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "milliseconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the portion of the duration expressed in milliseconds."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "seconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the portion of the duration expressed in seconds."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "minutes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the portion of the duration expressed in minutes."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "hours", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the portion of the duration expressed in hours."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "total_milliseconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "convert","description": "Convert the duration to total milliseconds."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "total_seconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "convert","description": "Convert the duration to total seconds."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "total_minutes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "convert","description": "Convert the duration to total minutes."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "total_hours", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "convert","description": "Convert the duration to total minutes."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing a Duration."},
{"module": "Standard.Base.Data.Time.Duration", "type": "Duration", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Duration to a friendly string."},
{"module": "Standard.Base.Data.Time.Duration", "type": "", "name": "between_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start_inclusive": {"lazy": false}, "end_exclusive": {"lazy": false}, "timezone_aware": {"lazy": false}},"aliases": [],"description": "Create an interval representing the duration between two points in time. \n\n Recommended to use `Duration.between` instead which provides defaults."},
{"module": "Standard.Base.Data.Time.Duration", "type": "", "name": "new_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"hours": {"lazy": false}, "minutes": {"lazy": false}, "seconds": {"lazy": false}, "milliseconds": {"lazy": false}, "nanoseconds": {"lazy": false}},"aliases": [],"description": "Create a duration from time units. \n\n Recommended to use `Duration.new` instead which provides defaults."},
{"module": "Standard.Base.Data.Time.Duration", "type": "", "name": "ensure_duration", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Errors", "type": "Date_Time_Format_Parse_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Date_Time_Format_Parse_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates an error during parsing of a date time format pattern."},
{"module": "Standard.Base.Data.Time.Errors", "type": "Date_Time_Format_Parse_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Errors", "type": "Suspicious_Date_Time_Format", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Suspicious_Date_Time_Format", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates a warning when parsing a date time format."},
{"module": "Standard.Base.Data.Time.Errors", "type": "Suspicious_Date_Time_Format", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Period", "arguments": {"internal_period": {"lazy": false, "type": "Java_Period", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "between", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"start_date_inclusive": {"lazy": false}, "end_date_exclusive": {"lazy": false}},"aliases": [],"icon": "time","description": "Create a Period representing the time interval between two dates."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"years": {"lazy": false, "default": "0"}, "months": {"lazy": false, "default": "0"}, "days": {"lazy": false, "default": "0"}},"aliases": [],"group": "DateTime","icon": "time","description": "Create a new Period from years, months and days."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "years", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "time","description": "Get the portion of the period expressed in years."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "months", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "time","description": "Get the portion of the period expressed in months."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "total_months", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "time","description": "Get the portion of the period coming from months and years as months (every year is translated to 12 months)."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "days", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "time","description": "Get the portion of the period expressed in days."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other_period": {"lazy": false}},"aliases": ["add period"],"group": "Operators","icon": "time","description": "Add the specified amount of time to this period."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other_period": {"lazy": false}},"aliases": ["subtract period"],"group": "Operators","icon": "time","description": "Subtract a specified amount of time from this period."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"factor": {"lazy": false}},"aliases": ["multiply", "times"],"group": "Operators","icon": "time","description": "Multiply the amount of time in this period by the specified scalar."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "negate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Operators","icon": "operators","description": "Negate all amounts in the period.  This is useful when a period used for going forward in time needs to be used for going backwards instead."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Period to a friendly string."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing a Period."},
{"module": "Standard.Base.Data.Time.Period", "type": "Period", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Time.Period", "type": "", "name": "ensure_period", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}, "action": {"lazy": true}, "error_msg": {"lazy": false, "default": "\"Cannot use Duration as a parameter\""}},"aliases": []},
{"module": "Standard.Base.Data.Time.Period", "type": "", "name": "catch_java_exceptions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"operation": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Of_Day", "arguments": {},"aliases": [],"description": "This type is a date-time object that represents a time, often viewed as hour-minute-second.  Time is represented to nanosecond precision. For example, the value \"13:45.30.123456789\" can be stored in a `Time_Of_Day`."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "now", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "time","description": "Obtains the current time from the system clock in the default time-zone."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"hour": {"lazy": false, "default": "0"}, "minute": {"lazy": false, "default": "0"}, "second": {"lazy": false, "default": "0"}, "millisecond": {"lazy": false, "default": "0"}, "microsecond": {"lazy": false, "default": "0"}, "nanosecond": {"lazy": false, "default": "0"}},"aliases": [],"group": "DateTime","icon": "time","description": "Obtains an instance of `Time_Of_Day` from an hour, minute, second and nanosecond. \n\n Returns a `Time_Error` if the provided time is not a valid time."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true, "default": "Date_Time_Formatter.iso_time"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Obtains an instance of `Time_Of_Day` from a text such as \"10:15\". \n\n Returns a `Time_Error` if the provided text cannot be parsed using the default format.","remarks": "? Default Time Format   Unless you provide a custom format, the text must represent a valid   time and is parsed using the ISO-8601 extended local time format.   The format consists of:    - Two digits for the hour-of-day. This is pre-padded by zero to ensure two     digits.   - A colon   - Two digits for the minute-of-hour. This is pre-padded by zero to ensure     two digits.   - If the second-of-minute is not available then the format is complete.   - A colon   - Two digits for the second-of-minute. This is pre-padded by zero to ensure     two digits.   - If the nano-of-second is zero or not available then the format is     complete.   - A decimal point   - One to nine digits for the nano-of-second. As many digits will be output     as required. \n\n? Pattern Syntax   If the pattern is provided as `Text`, it is parsed using the format   described below. See `Date_Time_Formatter` for more options.   - H: 24h hour of day (0-23).   - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate     between AM and PM.   - m: Minute of hour.   - s: Second of minute.   - f: Fractional part of the second. The number of pattern letters     determines the number of digits. If one letter is used, any number of     digits will be accepted.   - a: AM/PM marker."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"include_now": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Gets the default drop down option for Time_Of_Day."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "hour", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the hour portion of the time of day."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "minute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the minute portion of the time of day."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the second portion of the time of day."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "millisecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the millisecond portion of the time of day."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "microsecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the microsecond portion of the time of day."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "nanosecond", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"include_milliseconds": {"lazy": false, "default": "False"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the nanosecond portion of the time of day."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "start_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Time_Period.Hour"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the first time within the `Time_Period` containing self."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "end_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "default": "Time_Period.Hour"}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns the last time within the `Time_Period` containing self."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "to_seconds", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Extracts the time as the number of seconds, from 0 to 24 * 60 * 60 - 1."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "to_date_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}, "zone": {"lazy": false, "default": "Time_Zone.system"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Combine this time of day with a date to create a point in time."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "date_part", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false, "type": "Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Returns a requested time part as integer."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "date_diff", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"end": {"lazy": false, "type": "Time_Of_Day", "checked": true}, "period": {"lazy": false, "type": "Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Computes a time difference between the two times of day.  It returns an integer expressing how many periods fit between the two times of day.  The difference will be positive if `end` is greater than `self`."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "date_add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Integer", "checked": true}, "period": {"lazy": false, "type": "Time_Period", "checked": true}},"aliases": [],"group": "DateTime","icon": "time","description": "Shifts the time of day by a specified period."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Duration | Time_Period", "checked": true}},"aliases": ["add duration"],"group": "Operators","icon": "time","description": "Add the specified amount of time to this instant to get a new instant."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"amount": {"lazy": false, "type": "Duration | Time_Period", "checked": true}},"aliases": ["subtract duration"],"group": "Operators","icon": "time","description": "Subtract the  specified amount of time from this instant to get a new instant."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this Time_Of_Day."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Time_Of_Day."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Date_Time_Formatter", "checked": true}},"aliases": [],"group": "Conversions","icon": "convert","description": "Format this time of day using the provided formatter pattern.","remarks": "? Pattern Syntax   If the pattern is provided as `Text`, it is parsed using the format   described below. See `Date_Time_Formatter` for more options.   - H: 24h hour of day (0-23).   - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate     between AM and PM.   - m: Minute of hour.   - s: Second of minute.   - f: Fractional part of the second. The number of pattern letters     determines the number of digits. If one letter is used, any number of     digits will be accepted.   - a: AM/PM marker."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "", "name": "new_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"hour": {"lazy": false}, "minute": {"lazy": false}, "second": {"lazy": false}, "nanosecond": {"lazy": false}},"aliases": [],"description": "Obtains an instance of `Time_Of_Day` from an hour, minute, second and nanosecond. \n\n Recommended to use `Time_Of_Day.new` instead which handles potential exceptions."},
{"module": "Standard.Base.Data.Time.Time_Of_Day", "type": "Time_Of_Day", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Hour", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of an hour."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Minute", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a minute."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Second", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a second."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Millisecond", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a millisecond."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Microsecond", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a microsecond."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "Nanosecond", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Period", "arguments": {},"aliases": [],"description": "Represents a time period of a nanosecond."},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "to_java_unit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "adjust_start", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "adjust_end", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Period", "type": "Time_Period", "name": "to_duration", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Zone", "arguments": {},"aliases": [],"description": "A type representing a time zone. \n\n A time zone can be eiter offset-based like \"-06:00\" or id-based like \"Europe/Paris\"."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "system", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "time","description": "The system default timezone."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "local", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["current time zone"],"icon": "time","description": "The system\u0027s local timezone."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "utc", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["utc time zone"],"icon": "time","description": "The UTC timezone."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"hours": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "minutes": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "seconds": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"icon": "time","description": "Obtains an instance of `Time_Zone` using an offset in hours, minutes and seconds from the UTC zone."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["time zone from text"],"group": "Conversions","icon": "convert","description": "This method parses the ID producing a `Time_Zone`."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Gets the default drop down option for Time_Zone."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "zone_names", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "time","description": "Gets a list of all the time zone names that are predefined."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "zone_id", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "DateTime","icon": "metadata","description": "Get the unique timezone ID."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "offset", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"at": {"lazy": false}},"aliases": [],"group": "DateTime","icon": "metadata","description": "Get the offset in seconds at given date time."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this Time_Zone."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Time_Zone."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "", "name": "new_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"hours": {"lazy": false}, "minutes": {"lazy": false}, "seconds": {"lazy": false}},"aliases": [],"description": "Obtains an instance of `Time_Zone` using an offset in hours, minutes and seconds from the UTC zone. \n\n Recommended to use `Time_Zone.new` instead which provides defaults."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "", "name": "parse_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "This method parses the ID producing a `Time_Zone`. \n\n Recommended to use `Time_Zone.parse` instead which handles potential exceptions."},
{"module": "Standard.Base.Data.Time.Time_Zone", "type": "Time_Zone", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "XML_Format", "arguments": {},"aliases": [],"description": "A `File_Format` for reading and writing XML files."},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.Data.XML.XML_Format", "type": "XML_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Array", "arguments": {},"aliases": [],"description": "The type of primitive mutable arrays."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the array at a specified index (0-based)."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of elements stored in this array."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "to_array", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Identity. This method is implemented purely for completeness with the runtime\u0027s primitive array protocol."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"order": {"lazy": false, "default": "Sort_Direction.Ascending"}, "on": {"lazy": false, "default": "Nothing"}, "by": {"lazy": false, "default": "Nothing"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Ignore"}},"aliases": ["order_by"],"group": "Calculations","icon": "order","description": "Sort the array. \n\n By default, elements are sorted in ascending order.  This is a stable sort, meaning that items that compare the same will not have their order changed by the sorting process.","remarks": "! Computational Complexity   The complexities for this sort are:   - *Worst-Case Time:* `O(n * log n)`   - *Best-Case Time:* `O(n)`   - *Average Time:* `O(n * log n)`   - *Worst-Case Space:* `O(n)` additional \n\n? Incomparable values   Incomparable values are either values with different comparators or with   the same comparator returning `Nothing` from its `compare` method.   See the documentation of the `Ordering` module for more info. \n\n? Implementation Note   The sort implementation is based upon an adaptive, iterative mergesort   that requires far fewer than `n * log(n)` comparisons when the array   is partially sorted. When the array is randomly ordered, the   performance is equivalent to a standard mergesort. \n\n? Multiple comparators   Elements with different comparators are incomparable by definition.   This case is handled by first grouping the `self` array into groups   with the same comparator, recursively sorting these groups, and then   merging them back together. The order of the sorted groups in the   resulting array is based on the order of fully qualified names of   the comparators in the `self` array, with the exception of the group   for the default comparator, which is always the first group.    Additionally, an `Incomparable_Values` dataflow error will be returned   if the `on_problems` parameter is set to `Report_Error`, or a warning   attached if the `on_problems` parameter is set to `Report_Warning` in   case of encountering incomparable values.    It takes equal advantage of ascending and descending runs in the array,   making it much simpler to merge two or more sorted arrays: simply   concatenate them and sort."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Selections","icon": "parse3","description": "Creates a new `Vector` with only the specified range of elements from the input, removing any elements outside the range."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Selections","icon": "parse3","description": "Creates a new `Vector`, removing any elements from the specified range."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "insert", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"at": {"lazy": false, "default": "self.length"}, "item": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Calculations","icon": "row_add","description": "Inserts the given item into the array at the given index."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "remove", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"at": {"lazy": false, "default": "-1"}},"aliases": [],"group": "Selections","icon": "table_clean","description": "Removes the item at the given index from the array."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the first element from the array, or an `Index_Out_Of_Bounds` if the array is empty."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the second element from the array, or a `Index_Out_Of_Bounds` if the array doesn\u0027t have a second element.  Useful when tuples are implemented as arrays."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get the last element of the array, or an `Index_Out_Of_Bounds` if the array is empty."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of an element in the array. Returns Nothing if the element is not found."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of an element in the array. Returns `Nothing` if the element is not found."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this array is empty."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "to_list", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Converts the array to a list with the same elements."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "distinct", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on": {"lazy": false, "default": "x-\u003ex"}},"aliases": ["deduplicate", "unique"],"group": "Selections","icon": "preparation","description": "Keeps only unique elements within the array, removing any duplicates. \n\n The returned unique elements are kept in the same order as they appeared in the input.  Out of multiple equivalent (equal up to the `on` projection) elements, always the one appearing first in the input is kept."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "duplicates", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on": {"lazy": false, "default": "x-\u003ex"}},"aliases": ["duplicates"],"group": "Selections","icon": "preparation","description": "Returns only non-unique elements within the array. \n\n The returned duplicate elements are kept in the same order as the first duplicate appeared in the input."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "column_add","description": "Applies a function to each element of the array, returning the `Vector` of results.","errors": ""},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "flat_map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "union","description": "Applies a function to each element of the array, returning the `Vector` that contains all results concatenated.","errors": ""},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Selects all elements of this array which satisfy a condition."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "flatten", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Calculations","icon": "union","description": "Transforms an array of arrays into a `Vector` of inner elements - removes one layer of nesting from a stack of nested arrays."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "short_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"max_entries": {"lazy": false, "default": "10"}},"aliases": []},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "running_fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the array, by iteratively applying the passed function with the next element of the array. After each step the value is stored resulting in a new array of the same size as self."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the array, by iteratively applying the passed function with next elements of the array. \n\n In general, the result of     [l0, l1, ..., ln].to_array . fold init f is the same as     f (...(f (f init l0) l1)...) ln"},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "fold_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the array, by iteratively applying the passed function with next elements of the array."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "pad", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "elem": {"lazy": false}},"aliases": [],"group": "Calculations","icon": "union","description": "Extend `self` array to the length of `n` appending elements `elem` to the end. \n\n If the new length `n` is less than existing length, `self` array is returned."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "partition", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "split","description": "Partitions the array into `Vector`s of elements which satisfy a given condition and ones that do not.  Returns a `Pair` whose `first` element is the `Vector` of elements satisfying the predicate and the `second` element is a `Vector` of elements which did not satisfy it.  The relative order of elements kept in each returned list is the same as in the input array."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "partition_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"icon": "preparation","description": "Partitions the array into `Vector`s of elements which satisfy a given predicate and ones that do not.  Returns a `Pair` whose `first` element is the `Vector` of elements satisfying the predicate and the `second` element is a `Vector` of elements which did not satisfy it.  The relative order of elements kept in each returned list is the same as in the input array."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "transpose", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "map_row","description": "Swaps the rows and columns of a matrix represented by an array of arrays.","errors": ""},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "map_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "column_add","description": "Applies a function to each element of the array, returning the `Vector` of results. \n\n The function is called with both the element index as well as the element itself.","errors": ""},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "slice", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": [],"description": "Creates a new array with the skipping elements until `start` and then continuing until `end` index."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Returns the first element of the array that satisfies the condition or `if_missing` if no elements of the array satisfy it."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the array at a specified index (0-based). If the index is invalid then `if_missing` is returned."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this array is not empty."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "filter_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"group": "Selections","icon": "preparation","description": "Selects all elements of this array which satisfy a predicate."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"separator": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- separator (optional): The text to use to join the textual elements of the array."}, "prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- prefix (optional): The prefix to add at the beginning."}, "suffix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- suffix (optional): The suffix to add at the end."}},"aliases": [],"group": "Calculations","icon": "join","description": "When `self` is an array of text values, concatenates all the values by interspersing them with `separator`."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generates a human-readable text representation of the array."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "if_empty": {"lazy": true, "default": "Error.throw (Empty_Error.Error Array)"}},"aliases": [],"icon": "column_add","description": "Combines all the elements of a non-empty array using a binary operation. If the array is empty, it returns `if_empty`."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a predicate holds for at least one element of self array."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition holds for all elements in this array."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"elem": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether this array contains a given value as an element."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}, "function": {"lazy": false, "default": "[_,_]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": ["combine", "join by row position", "merge"],"group": "Calculations","icon": "join2-1","description": "Performs a pair-wise operation passed in `function` on consecutive elements of `self` and `that`. \n\n The result of this function is a `Vector` of length being the shorter of `self` and `that`, containing results of calling `function`.","errors": ""},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Returns the array as a `Vector`."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the array, returning a `Vector` with the same elements, but in the opposite order."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the array.  Unlike `map`, this method does not return the individual results, therefore it is only useful for side-effecting computations.  If the function returns a dataflow error, the error is converted to a panic and thrown immediately stopping further processing."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "each_with_index", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the array. \n\n The function is called with both the element index as well as the element itself.  Unlike `map`, this method does not return the individual results, therefore it is only useful for side-effecting computations."},
{"module": "Standard.Base.Data.Array", "type": "Array", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["append", "concatenate", "union"],"group": "Operators","icon": "union","description": "Concatenates two arrays, resulting in a new `Vector`, containing all the elements of `self`, followed by all the elements of `that`."},
{"module": "Standard.Base.Data.Array_Proxy", "type": "Array_Proxy", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Array_Proxy", "arguments": {"ignore": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Array_Proxy", "type": "Array_Proxy", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"length": {"lazy": false}, "at": {"lazy": false}},"aliases": [],"description": "Creates a new `Array_Proxy` from a length and a callback."},
{"module": "Standard.Base.Data.Array_Proxy", "type": "Array_Proxy", "name": "from_proxy_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"proxy": {"lazy": false}},"aliases": [],"description": "Creates a new `Array_Proxy` from an object providing `length` and `at` methods."},
{"module": "Standard.Base.Data.Base_64", "type": "Base_64", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Base_64", "arguments": {},"aliases": [],"description": "A helper utility for handling base64 encoding."},
{"module": "Standard.Base.Data.Base_64", "type": "Base_64", "name": "encode_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}},"aliases": [],"icon": "convert","description": "Converts a string to bytes using the specified encoding, and encodes that to base64."},
{"module": "Standard.Base.Data.Base_64", "type": "Base_64", "name": "decode_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text ! Encoding_Error", "arguments": {"encoded_text": {"lazy": false, "type": "Text", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}},"aliases": [],"icon": "convert","description": "Decodes a base64 encoded string, using the provided encoding."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "True", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "The boolean value representing true."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "False", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "The boolean value representing false."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "&&", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": true}},"aliases": ["and"],"group": "Logical","icon": "operators","description": "Computes the logical and (conjunction) of two booleans.","remarks": "! Short Circuiting   This method is implemented in a short-circuiting manner. This means   that if this is False, it will no longer evaluate that."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "||", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": true}},"aliases": ["or"],"group": "Logical","icon": "operators","description": "Computes the logical or (disjunction) of two booleans.","remarks": "! Short Circuiting   This method is implemented in a short-circuiting manner. This means   that if this is True, it will no longer evaluate that."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "not", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "operators","description": "Computes the logical negation of this."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "if_then_else", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on_true": {"lazy": true}, "on_false": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "The if-then-else control flow operator that executes one of two branches based on a conditional. \n\n Both of the arguments to this method are _lazy_, meaning that they will only be evaluated if they are needed (based on the condition)."},
{"module": "Standard.Base.Data.Boolean", "type": "Boolean", "name": "if_then", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on_true": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "The if-then control flow operator that executes a branch if the condition is true, and otherwise returns Nothing. \n\n The argument to this method is _lazy_, meaning that it will only be evaluated if the this evaluates to True."},
{"module": "Standard.Base.Data.Color", "type": "Color", "name": "HCL", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Color", "arguments": {"hue": {"lazy": false, "type": "Integer", "checked": true}, "chroma": {"lazy": false, "type": "Integer", "checked": true}, "lightness": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "A color represented in the HCL color space."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decimal", "arguments": {"big_decimal": {"lazy": false, "type": "BigDecimal", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "From_Float", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Decimal", "arguments": {"big_decimal": {"lazy": false, "type": "BigDecimal", "checked": true}, "original_value": {"lazy": false, "type": "Float", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error | Number_Parse_Error", "arguments": {"x": {"lazy": false, "type": "Text | Integer | Float", "checked": true}, "mc": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"icon": "input_number","description": "Construct a `Decimal` from a `Text`, `Integer` or `Float`.","errors": "","remarks": "? Number Format    The textual format for a Decimal is defined at   https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#BigDecimal-java.lang.String-. \n\n? Creating `Decimal`s and Converting to `Decimal`    When creating a `Decimal` from a literal floating-point value, the   preferred method is to express the literal as a string and use   `Decimal.from_text`, since this will give a `Decimal` that matches the   value precisely.    To convert a `Float` or `Integer` to a `Decimal`, use its `.to_decimal`   method.    You can also use the convenience method `dec` to convert any `Integer`,   `Float`, or `Text` value to a `Decimal`. `dec` does not attach a   warning."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Number_Parse_Error", "arguments": {"s": {"lazy": false, "type": "Text", "checked": true}, "mc": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Construct a `Decimal` from a `Text`.","errors": "","remarks": "? Number Format    The textual format for a Decimal is defined at   https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#BigDecimal-java.lang.String-. \n\n? Creating `Decimal`s and Converting to `Decimal`    When creating a `Decimal` from a literal floating-point value, the   preferred method is to express the literal as a string and use   `Decimal.from_text`, since this will give a `Decimal` that matches the   value precisely.    To convert a `Float` or `Integer` to a `Decimal`, use its `.to_decimal`   method.    You can also use the convenience method `dec` to convert any `Integer`,   `Float`, or `Text` value to a `Decimal`. `dec` does not attach a   warning."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from_integer", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"i": {"lazy": false, "type": "Integer", "checked": true}, "mc": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "conversions","icon": "convert","description": "Construct a `Decimal` from an `Integer`.","errors": "","remarks": "? Creating `Decimal`s and Converting to `Decimal`    When creating a `Decimal` from a literal floating-point value, the   preferred method is to express the literal as a string and use   `Decimal.from_text`, since this will give a `Decimal` that matches the   value precisely.    To convert a `Float` or `Integer` to a `Decimal`, use its `.to_decimal`   method.    You can also use the convenience method `dec` to convert any `Integer`,   `Float`, or `Text` value to a `Decimal`. `dec` does not attach a   warning."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from_float", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error | Illegal_Argument", "arguments": {"f": {"lazy": false, "type": "Float", "checked": true}, "mc": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}, "explicit": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"group": "conversions","icon": "convert","description": "Construct a `Decimal` from a `Float`.","errors": "","remarks": "? Precision Loss    A `Decimal` can represent any `Float` precisely. However, some `Float`   literals, such as `0.1`, cannot be represented exactly to infinite   precision by a `Float`. For this reason, constructing a `Decimal` from   a `Float` always attaches a `Loss_Of_Numeric_Precision` warning to the   result. \n\n? Creating `Decimal`s and Converting to `Decimal`    When creating a `Decimal` from a literal floating-point value, the   preferred method is to express the literal as a string and use   `Decimal.from_text`, since this will give a `Decimal` that matches the   value precisely.    To convert a `Float` or `Integer` to a `Decimal`, use its `.to_decimal`   method.    You can also use the convenience method `dec` to convert any `Integer`,   `Float`, or `Text` value to a `Decimal`. `dec` does not attach a   warning."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Number_Parse_Error | Illegal_Argument", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}, "format": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": ["from text"],"group": "conversions","icon": "convert","description": "Parses a string into a `Decimal`, returning a `Number_Parse_Error` if the text does not represent a valid `Decimal`.","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["greater than"],"group": "Operators","icon": "operators","description": "Checks if this is greater than that."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["greater than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is greater than or equal to that."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["less than"],"group": "Operators","icon": "operators","description": "Checks if this is less than that."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["less than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is less than or equal to that."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}, "math_context": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["plus"],"group": "Operators","icon": "math","description": "Adds a `Decimal` to another `Decimal` or other kind of number. A `Math_Context` value can be specified to set the precision and `Rounding_Mode`. \n\n Arguments to `add` will undergo automatic conversions such that you need not convert other numeric types to `Decimal` manually."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["plus"],"group": "Operators","icon": "math","description": "Adds a `Decimal` to another `Decimal` or other kind of number. \n\n Arguments to `+` will undergo automatic conversions such that you need not convert other numeric types to `Decimal` manually."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "subtract", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}, "math_context": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["minus"],"group": "Operators","icon": "math","description": "Subtract a `Decimal` or other kind of number from another `Decimal`, or subtract  a `Decimal` from another kind of number. A `Math_Context` value can be specified to set the precision and `Rounding_Mode`. \n\n Arguments to `subtract` will undergo automatic conversions such that you need not convert other numeric types to `Decimal` manually."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["minus"],"group": "Operators","icon": "math","description": "Subtract a `Decimal` or other kind of number from another `Decimal`, or subtract  a `Decimal` from another kind of number. \n\n Arguments to `-` will undergo automatic conversions such that you need not convert other numeric types to `Decimal` manually."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "multiply", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}, "math_context": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["times"],"group": "Operators","icon": "math","description": "Multiplies a `Decimal` by another `Decimal` or other kind of number. A `Math_Context` value can be specified to set the precision and `Rounding_Mode`. \n\n Arguments to `multiply` will undergo automatic conversions such that you need not convert other numeric types to `Decimal` manually."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["times"],"group": "Operators","icon": "math","description": "Multiplies a `Decimal` by another `Decimal` or other kind of number. \n\n Arguments to `*` will undergo automatic conversions such that you need not convert other numeric types to `Decimal` manually."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "divide", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}, "math_context": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Operators","icon": "math","description": "Divide a `Decimal` by another `Decimal` or other kind of number, or divide another kind of number by a `Decimal`. A `Math_Context` value can be specified to set the precision and `Rounding_Mode`. \n\n Arguments to `divide` will undergo automatic conversions such that you need not convert other numeric types to `Decimal` manually.","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": [],"group": "Operators","icon": "math","description": "Divides a `Decimal` by another `Decimal` or other kind of number, or divides another kind of number by a `Decimal`. \n\n Arguments to `/` will undergo automatic conversions such that you need not convert other numeric types to `Decimal` manually."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "remainder", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["modulo", "modulus"],"group": "Operators","icon": "math","description": "Computes the remainder when dividing this by that. \n\n Arguments to `remainder` will undergo automatic conversions such that you need not convert other numeric types to `Decimal` manually.","remarks": "? Negative Arguments    When the first argument to `remainder` is negative, the result will   also be negative."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "%", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": ["modulo", "modulus", "remainder"],"group": "Operators","icon": "math","description": "Computes the remainder when dividing this by that. \n\n Arguments to `%` will undergo automatic conversions such that you need not convert other numeric types to `Decimal` manually.","remarks": "? Negative Arguments    When the first argument to `%` is negative, the result will also be   negative."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "div", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": [],"group": "Math","icon": "math","description": "Computes the integer division of this by that. \n\n Integer division of Decimals rounds down to the nearest integer.  Arguments to `div` will undergo automatic conversions such that you need not convert other numeric types to `Decimal` manually.","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "pow", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"exp": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["power"],"group": "Operators","icon": "math","description": "Compute the result of raising this to the positive integer power `exp`.","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"exp": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["power"],"group": "Operators","icon": "math","description": "Compute the result of raising this to the positive integer power `exp`.","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "negate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {},"aliases": [],"group": "Operators","icon": "operators","description": "Compute the negation of this."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "abs", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {},"aliases": [],"group": "Math","icon": "math","description": "Computes the absolute value of this.  The absolute value of a positive number is itself, while the absolute value of a negative number is that number multiplied by -1."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "signum", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Math","icon": "math","description": "Returns the sign of the number."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "min", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": [],"group": "Math","icon": "transform4","description": "Returns the smaller value of `self` and `that`."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "max", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": [],"group": "Math","icon": "transform4","description": "Returns the larger value of `self` and `that`."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "to_integer", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this to an `Integer`.  Conversion to `Integer` uses truncation: the fractional portion is dropped.  If the conversion resulted in a loss of precision, a `Loss_Of_Numeric_Precision` warning is attached."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "to_float", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this to a `Float`.","errors": "","remarks": "? Precision Loss    While any `Float` can be precisely represented by a `Decimal`, not   every `Decimal` can be accurange represented by a `Float`, so this   conversion can lose precision. For this reason, converting a   `Decimal` to a `Float` always attaches a `Loss_Of_Numeric_Precision`   warning to the result. \n\n? Representable Values    If the `Decimal` is outside the representable range of `Float` (which   is `(-Double.MAX_VALUE, Double.MAX_VALUE)`, inclusive), `+/-Inf` is   returned, and an `Out_Of_Range` warning is attached."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "round", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Rounding","icon": "math","description": "Round to a specified number of decimal places.  By default, rounding uses \"symmetric round-half-up\", also known as \"half-up.\" If use_bankers=True, then it uses \"round-half-even\", also known as \"banker\u0027s rounding\".","errors": "","remarks": "? Negative decimal place counts   Rounding to `n` digits can be thought of as \"rounding to the nearest   multiple of 10^(-n)\". For negative decimal counts, this results in   rounding to the nearest positive integer power of 10."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "ceil", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest `Integer` equal to or above this number."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "floor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest `Integer` equal to or below this number."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "truncate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["int"],"group": "Rounding","icon": "math","description": "Truncate a number to an `Integer` to by dropping the fractional part. This is equivalent to \"round-toward-zero\"."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"format": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts a `Decimal` to a string, using the Java `DecimalFormat` formatter.  For details about the `DecimalFormat` format specifier, see https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "precision", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "scale", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "set_scale", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Decimal", "arguments": {"new_scale": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Math","icon": "input_number","description": "Change the scale of a Decimal.  A `Decimal` value is represented internally by a Java `BigInteger` \"unscaled value\" and a \"scale value\". The numerical value of the `Decimal` is `(unscaledValue * 10^(-scale))`. Scale values are maintained automatically by the constructors and numerical operations, but can also be set explicitly.  Scale values can allow distinctions between values that would be identical as `Float`s. For example, the following values have different internal representations:      a = Decimal.new \"2.0\"     b = Decimal.new \"2.00\"     a == b     # =\u003e True  These two values have different internal representations, but they are still considered the same value by `==`.","errors": ""},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "unscaled_value", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "internal_representation", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Integer", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Note: the underlying Java `BigDecimal` implementation is not affected by locale."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Note: the underlying Java `BigDecimal` implementation is not affected by locale."},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "to_text_without_scientific_notation", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Note: the underlying Java `BigDecimal` implementation is not affected by locale."},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "dec", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal ! Arithmetic_Error | Number_Parse_Error", "arguments": {"x": {"lazy": false, "type": "Text | Integer | Float", "checked": true}, "mc": {"lazy": false, "type": "Math_Context | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Math","icon": "input_number","description": "Construct a `Decimal` from a `Text`, `Integer` or `Float`.","errors": "","remarks": "? Number Format      The textual format for a Decimal is defined at     https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#BigDecimal-java.lang.String-."},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "handle_number_format_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "handle_precision_loss", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"original_value": {"lazy": false}, "conversion_result": {"lazy": false, "type": "ConversionResult", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "attach_loss_of_numeric_precision", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"orig": {"lazy": false}, "value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}, "extra_message": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "handle_unsupported_argument_types", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Float", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "Float", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "get_big_decimal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Decimal", "checked": true}},"aliases": [],"description": "Helper method allowing access to the backing field."},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "from_big_decimal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Create a Decimal from the Java backing field."},
{"module": "Standard.Base.Data.Decimal", "type": "", "name": "error_if_from_float", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left": {"lazy": false}, "right": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Dictionary", "arguments": {},"aliases": [],"description": "A key-value store. It is possible to use any type as keys and values and mix them in one Dictionary. Keys are checked for equality based on their hash code and `==` operator, which is both an internal part of Enso. Enso is capable of computing a hash code, and checking for equality any objects that can appear in Enso - primitives, Atoms, values coming from different languages, etc.  For keys that are not reflexive, like `Number.nan`, [Same Value equality specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality) is used. This means that both `Number.nan` and types with comparators that violate reflexivity (e.g. their `compare` method always returns `Nothing`) can be used as keys in the Dictionary.  A single key-value pair is called an *entry*.  It is possible to pass a Dictionary created in Enso to foreign functions, where it will be treated as appropriate map structures - in Python that is a dictionary, and in JavaScript, it is a `Map`. And likewise, it is possible to pass a foreign map into Enso, where it will be treated as a Dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "empty", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "array_new2","description": "Returns an empty dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "singleton", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"icon": "array_new2","description": "Returns a single-element dictionary with the given key and value. A Call to `Dictionary.singleton key value` is the same as a call to `Dictionary.empty.insert key value`."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "from_keys_and_values", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"keys": {"lazy": false, "type": "Vector", "checked": true}, "values": {"lazy": false, "type": "Vector", "checked": true}, "error_on_duplicates": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": ["dictionary", "lookup table"],"group": "Constants","icon": "array_new2","description": "Builds a dictionary from two Vectors. The first vector contains the keys, and the second vector contains the values. The two vectors must be of the same length."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "from_vector", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"vec": {"lazy": false}, "error_on_duplicates": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": ["dictionary", "lookup table"],"group": "Constants","icon": "array_new2","description": "Builds a dictionary from a vector of key-value pairs, with each key-value pair represented as a 2 element vector."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Returns True if the Dictionary is empty, i.e. does not have any entries."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Returns True if the Dictionary is not empty, i.e. has at least one entry."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "size", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of entries in this dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of entries in this dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "insert", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "default": "Missing_Argument.throw \"key\""}, "value": {"lazy": false, "default": "Missing_Argument.throw \"value\""}, "no_warning": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Calculations","icon": "row_add","description": "Inserts a key-value mapping into this dictionary, overriding any existing instance of `key` with the new `value`.  Note that since the return type is also a `Dictionary`, multiple `insert` calls can be chained, e.g., `dictionary.insert \"A\" 1 . insert \"B\" 2`.  Due to the limitation of the current implementation, inserts with a key that is already contained in the dictionary, or insert on a dictionary instance that is re-used in other computations, have a linear time complexity. For all the other cases, the time complexity of this method is constant.","errors": ""},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "remove", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "default": "Missing_Argument.throw \"key\""}},"aliases": [],"group": "Selections","icon": "table_clean","description": "Removes an entry specified by the given key from this dictionary, and returns a new dictionary without this entry. Throw `No_Such_Key.Error` if `key` is not present."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets the value associated with `key` in this dictionary, or throws a `No_Such_Key.Error` if `key` is not present.  This method has a constant time complexity."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets the value associated with `key` in this dictionary, or returns `if_missing` if it isn\u0027t present.  This method has a constant time complexity."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "contains_key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Returns True iff the Dictionary contains the given `key`."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "keys", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_column","description": "Returns an unsorted vector of all the keys in this Dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "values", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_column","description": "Returns an unsorted vector of all the values in this Dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Maps a function over each value in this dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "map_with_key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Maps a function over each key-value pair in the dictionary, transforming the value."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "map_keys", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Maps a function over each key in this dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "transform", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Transforms the map\u0027s keys and values to create a new dictionary.","errors": ""},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines the values in the dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "fold_with_key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines the key-value pairs in the dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function to each value in the dictionary. \n\n This method does not return the results, so it is only useful for performing computations with side-effects.  If the function returns a dataflow error, the error is converted to a panic and thrown immediately stopping further processing."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "each_with_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function to each key-value pair in the dictionary. \n\n This method does not return the results, so it is only useful for performing computations with side-effects."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Returns an unsorted vector of key-value pairs (nested 2 element vectors). `Dictionary.from_vector` method is an inverse method, so the following expression is true for all dictionaries: `Dictionary.from_vector dictionary.to_vector == dictionary`."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a text representation of this Dictionary."},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "get_builtin", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "if_missing": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Dictionary", "type": "", "name": "key_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"dict": {"lazy": false, "type": "Dictionary", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Dictionary", "type": "", "name": "key_value_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Dictionary", "type": "Dictionary", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Less", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"than": {"lazy": false, "default": "Missing_Argument.throw \"than\""}},"aliases": [],"description": "Is less than a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Equal_Or_Less", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"than": {"lazy": false, "default": "Missing_Argument.throw \"than\""}},"aliases": [],"description": "Is less than or equal to a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Equal", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"to": {"lazy": false, "default": "Missing_Argument.throw \"to\""}},"aliases": [],"description": "Is equal to a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Equal_Or_Greater", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"than": {"lazy": false, "default": "Missing_Argument.throw \"than\""}},"aliases": [],"description": "Is greater than or equal to a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Greater", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"than": {"lazy": false, "default": "Missing_Argument.throw \"than\""}},"aliases": [],"description": "Is greater than a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Not_Equal", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"to": {"lazy": false, "default": "Missing_Argument.throw \"to\""}},"aliases": [],"description": "Is not equal to a value (or another column, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Between", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"lower": {"lazy": false, "default": "Missing_Argument.throw \"lower\""}, "upper": {"lazy": false, "default": "Missing_Argument.throw \"upper\""}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Is between (inclusive) two values (or columns, in case of Table operations)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Equal_Ignore_Case", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"to": {"lazy": false, "default": "Missing_Argument.throw \"to\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Is equal to another value, ignoring case (Text only)?","remarks": "? Table Operations   It accepts a Text value to check if the value equals to it. In case of   Table operations, it can accept another column - then the corresponding   values from the source column and the provided column are checked. \n\n! Unicode Equality   The definition of equality includes Unicode canonicalization. I.e. two   texts are equal if they are identical after canonical decomposition.   This ensures that different ways of expressing the same character in   the underlying binary representation are considered equal."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Starts_With", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"prefix": {"lazy": false, "default": "Missing_Argument.throw \"prefix\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "Case_Sensitivity.Default"}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Does the value start with a prefix (Text only)?","remarks": "? Table Operations   It accepts a Text value to check if the value contains it. In case of   Table operations, it can accept another column - then the corresponding   values from the source column and the provided column are checked."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Ends_With", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"suffix": {"lazy": false, "default": "Missing_Argument.throw \"suffix\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "Case_Sensitivity.Default"}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Does the value end with a suffix (Text only)?","remarks": "? Table Operations   It accepts a Text value to check if the value contains it. In case of   Table operations, it can accept another column - then the corresponding   values from the source column and the provided column are checked."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Contains", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"substring": {"lazy": false, "default": "Missing_Argument.throw \"substring\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "Case_Sensitivity.Default"}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Does the value contain the substring (Text only)?","remarks": "? Table Operations   It accepts a Text value to check if the value contains it. In case of   Table operations, it can accept another column - then the corresponding   values from the source column and the provided column are checked."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_Nothing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is equal to Nothing?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Not_Nothing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is not equal to Nothing?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_Nan", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value a NaN (Number only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Not_Nan", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value not a NaN (Number only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_Infinite", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value infinite (Number only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_Finite", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value finite (Number only)? Finite numbers are ones that are not infinite nor NaN."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_True", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value equal to True (Boolean only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_False", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is the value equal to False (Boolean only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is equal to \"\" or Nothing (Text only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Not_Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {},"aliases": [],"description": "Is not equal to \"\" and Nothing (Text only)?"},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Like", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"pattern": {"lazy": false, "default": "Missing_Argument.throw \"pattern\""}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Does the value match the SQL pattern (Text only)?  The pattern is interpreted according to the standard SQL convention: - the `%` character matches any sequence of characters, - the `_` character matches any single character, - any other character is matched literally.","remarks": "? Table Operations   It accepts a Text value to check if the value contains it. In case of   Table operations, it can accept another column - then the corresponding   values from the source column and the provided column are checked. \n\n! Known Limitations.   The Truffle regex engine does not transparently handle normalization.   Due to this limitation, Unicode normalization has been disabled for   this function, so beware that some equivalent graphemes like \u0027ś\u0027 and   \u0027s\\u0301\u0027 will not be matched."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Regex_Match", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"pattern": {"lazy": false, "default": "Missing_Argument.throw \"pattern\""}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Does the value match the regular expression pattern (Text only)?","remarks": "? Table Operations   It accepts a Text value to check if the value contains it. In case of   Table operations, it can accept another column - then the corresponding   values from the source column and the provided column are checked. \n\n! Known Limitations.   The Truffle regex engine does not transparently handle normalization.   Due to this limitation, Unicode normalization has been disabled for   this function, so beware that some equivalent graphemes like \u0027ś\u0027 and   \u0027s\\u0301\u0027 will not be matched."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "Is_In", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Condition", "arguments": {"values": {"lazy": false, "default": "[]"}, "keep_or_remove": {"lazy": false, "type": "Filter_Action", "checked": true, "default": "..Keep"}},"aliases": [],"description": "Is the value contained in `values`?","remarks": "? Table Operations   It accepts a `Vector` of values. In case of Table operations, it can   also accept another column - then it acts as if `column.to_vector` was   passed - i.e. every element of the original table\u0027s column is checked   if it is contained in the provided column. The columns can have   different lengths.    Using Columns can be particularly useful for Database operations, as   uploading a temporary table and using its column for an `Is_In` check   will likely be faster than using the vector directly."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "resolve_auto_scoped", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false}},"aliases": [],"description": "Resolves a possibly auto-scoped value to a concrete value."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"include_comparable": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_text": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_boolean": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_nullable": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_numeric": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_date": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_date_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Creates a Single_Choice Widget for Filter_Conditions."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "action", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The action to perform on the matched items."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "to_predicate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Converts a `Filter_Condition` condition into a predicate taking an element and returning a value indicating whether the element should be accepted by the filter.  The predicate can handle `Nothing` values in all cases. However, the predicate will raise an error if the value is not of the expected type."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Condition", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Filter_Condition."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Action", "name": "Keep", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Action", "arguments": {},"aliases": [],"description": "Items matching the filter are kept."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "Filter_Action", "name": "Remove", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Filter_Action", "arguments": {},"aliases": [],"description": "Items matching the filter are removed."},
{"module": "Standard.Base.Data.Filter_Condition", "type": "", "name": "sql_like_to_regex", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_pattern": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Filter_Condition", "type": "", "name": "unify_condition_or_predicate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"condition_or_predicate": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Filter_Condition", "type": "", "name": "unify_condition_predicate_or_element", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Filter_Condition", "type": "", "name": "handle_nothing", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Extends the provided predicate to handle `Nothing` values without error. The new predicate will return `False` for `Nothing`."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hashset", "arguments": {"underlying_dictionary": {"lazy": false, "type": "Dictionary Any Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"vector": {"lazy": false, "type": "Vector", "checked": true}, "error_on_duplicates": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Constructs a new set from a vector."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Constructs an empty set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Returns a vector containing all elements of this set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "size", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of elements in this set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of elements in this set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the set is empty."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the set is not empty."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks if this set contains a given value."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "contains_relational", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks if this set contains a given value, treating Nothing as a relational NULL.  If the argument is non-Nothing and exists in `value`, return true.  If the argument is non-Nothing and does not exist in `value`, return false if `value` does not contain a Nothing, or Nothing if `value` does contain a Nothing.  If the argument is Nothing, return Nothing if `value` is non-empty, or false if `value` is empty."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "insert", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": ["add"],"group": "Calculations","icon": "row_add","description": "Adds a value to this set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "union", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false, "type": "Hashset", "checked": true}},"aliases": [],"group": "Calculations","icon": "union","description": "Creates a union of the two sets."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "intersection", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false, "type": "Hashset", "checked": true}},"aliases": [],"group": "Calculations","icon": "join","description": "Creates an intersection of the two sets."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "difference", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false, "type": "Hashset", "checked": true}},"aliases": [],"icon": "join","description": "Computes a set difference.  Returns the set that contains all elements of this set that are not in the other set."},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hashset_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Hashset", "type": "Hashset_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "First", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Select the first `count` items.  Selects no items if `count` is less than or equal to 0. Selects all items  if `count` is greater than the length of the input."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "Last", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Select the last `count` characters.  Selects no items if `count` is less than or equal to 0. Selects all items  if `count` is greater than the length of the input."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "While", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"predicate": {"lazy": false, "type": "Any -> Boolean", "checked": true, "default": "Missing_Argument.throw \"predicate\""}},"aliases": [],"description": "Select elements from the start while the predicate returns `True`."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "By_Index", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"indexes": {"lazy": false, "type": "Integer | Range | Vector (Integer | Range)", "checked": true, "default": "Missing_Argument.throw \"indexes\""}},"aliases": [],"description": "Selects specific indexes (starting from 0) either as an `Integer` or a `Range`.  If the index or start of the Range is out of bounds, an error is reported. If the end of the Range is out of bounds, all items until the end of the input are selected.  Only ranges with positive step and positive indices are supported. Individual integer indices can be negative which allows for indexing from the end of the collection."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "Sample", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "seed": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"description": "Gets a random sample of entries, without repetitions.  If `count` is greater than the length of the input, a random permutation of all elements from the input is selected."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "Every", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Index_Sub_Range", "arguments": {"step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "first": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"description": "Gets every Nth entry."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "default_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "It includes all constructors of `Index_Sub_Range` but also `Range`, since the `Index_Sub_Range` type is by default used in sum types containing `Range` too."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"count": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "Index_Sub_Range", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Index_Sub_Range."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "resolve_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ranges": {"lazy": false}, "length": {"lazy": false}},"aliases": [],"description": "Resolves a vector of ranges or indices into a vector of ranges that fit within a sequence."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "normalize_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"descriptors": {"lazy": false}},"aliases": [],"description": "Takes a list of descriptors and returns a new one where ranges with non-unitary step have been replaced with series of ranges covering the same set of indices with step equal to 1, and indices have been replaced with single-element ranges."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "invert_range_selection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ranges": {"lazy": false}, "length": {"lazy": false}, "needs_sorting": {"lazy": false}},"aliases": [],"description": "Inverts the selection determined by the input list of ranges.  The input ranges are assumed to be normalized (i.e. all of them have step equal to 1)."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "sort_and_merge_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ranges": {"lazy": false}},"aliases": [],"description": "Returns a new sorted list of ranges where intersecting ranges have been merged.  Empty subranges are discarded."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "take_helper", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "at": {"lazy": false}, "single_slice": {"lazy": false}, "slice_ranges": {"lazy": false}, "range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true}},"aliases": [],"description": "A helper that implements taking from an arbitrary collection using a set of callbacks."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "drop_helper", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "at": {"lazy": false}, "single_slice": {"lazy": false}, "slice_ranges": {"lazy": false}, "range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true}},"aliases": [],"description": "A helper that implements dropping from an arbitrary collection using a set of callbacks."},
{"module": "Standard.Base.Data.Index_Sub_Range", "type": "", "name": "handle_unmatched_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expected_types": {"lazy": false}, "actual_value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Interval", "type": "Bound", "name": "Inclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bound", "arguments": {"n": {"lazy": false}},"aliases": [],"description": "A bound that includes the value `n`."},
{"module": "Standard.Base.Data.Interval", "type": "Bound", "name": "Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bound", "arguments": {"n": {"lazy": false}},"aliases": [],"description": "A bound that excludes the value `n`."},
{"module": "Standard.Base.Data.Interval", "type": "Interval_Type", "name": "Inclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Interval_Type", "arguments": {},"aliases": [],"description": "Both the start and end bounds are included."},
{"module": "Standard.Base.Data.Interval", "type": "Interval_Type", "name": "Start_Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Interval_Type", "arguments": {},"aliases": [],"description": "The start bound is included, but the end bound is excluded."},
{"module": "Standard.Base.Data.Interval", "type": "Interval_Type", "name": "End_Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Interval_Type", "arguments": {},"aliases": [],"description": "The start bound is excluded, but the end bound is included."},
{"module": "Standard.Base.Data.Interval", "type": "Interval_Type", "name": "Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Interval_Type", "arguments": {},"aliases": [],"description": "Both the start and end bounds are excluded."},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "Between", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Interval", "arguments": {"start": {"lazy": false, "type": "Bound", "checked": true}, "end": {"lazy": false, "type": "Bound", "checked": true}},"aliases": [],"description": "A type representing an interval over real numbers."},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}, "interval_type": {"lazy": false, "default": "Interval_Type.End_Exclusive"}},"aliases": [],"group": "DateTime","icon": "time","description": "Creates an interval."},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks if the interval contains `that`."},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Check if this interval is empty."},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Check if this interval is not empty."},
{"module": "Standard.Base.Data.Interval", "type": "Interval", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Interval."},
{"module": "Standard.Base.Data.Json", "type": "Json", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Json", "arguments": {},"aliases": [],"description": "Methods for serializing from and to JSON."},
{"module": "Standard.Base.Data.Json", "type": "Json", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"json": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["from text"],"group": "Conversions","icon": "convert","description": "Parse a Text value into a `JS_Object` or an Enso primitive value (like `Text`, `Number`, `Boolean`, `Nothing`), or a `Vector` of values."},
{"module": "Standard.Base.Data.Json", "type": "Json", "name": "stringify", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"object": {"lazy": false}},"aliases": [],"description": "Serialize an Object to JSON."},
{"module": "Standard.Base.Data.Json", "type": "Json", "name": "from_pairs", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pairs": {"lazy": false}},"aliases": [],"description": "Convert a Vector of Keys and Values to JSON. Keys must be `Text` values."},
{"module": "Standard.Base.Data.Json", "type": "Invalid_JSON", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_JSON", "arguments": {"message": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "Invalid_JSON", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the error to a display representation."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"object_node": {"lazy": false}, "field_array": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object_node": {"lazy": false}},"aliases": [],"description": "Creates a new `JS_Object` from an `ObjectNode`."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "from_pairs", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pairs": {"lazy": false}},"aliases": [],"icon": "braces","description": "Creates a JS_Object from a list of key-value pairs. Keys must be `Text` values. Values will be recursively converted to JSON serializable as needed."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "contains_key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Returns True iff the objects contains the given `key`."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Get a value for a key of the object, or a default value if that key is not present."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Selections","icon": "parse3","description": "Get a value for a key of the object. If the key is not found, throws a `No_Such_Key` error."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "field_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the keys of the object."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Maps a function over each value in this object"},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "map_with_key", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Maps a function over each field-value pair in the object."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the number of keys in the object."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Returns True if the JS_Object is empty, i.e., does not have any entries."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Returns True if the JS_Object is not empty, i.e., has at least one entry."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert the object to a Vector of Pairs."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the object to a JS_Object."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a Text."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert JS_Object to a friendly string."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_json", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JSON representation."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "to_default_visualization_data", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Transform the vector into text for displaying as part of its default visualization."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "into", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"target_type": {"lazy": false}},"aliases": [],"group": "Conversions","icon": "convert","description": "Creates an Enso object from the JS_Object."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object", "name": "set_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false}},"aliases": [],"icon": "edit","description": "Modify a field of a JSON object, returning a new updated object."},
{"module": "Standard.Base.Data.Json", "type": "JS_Object_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "JS_Object_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"obj1": {"lazy": false}, "obj2": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "JS_Object_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"obj": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "", "name": "read_json_node", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node": {"lazy": false}},"aliases": [],"description": "Read a JsonNode to an Enso type"},
{"module": "Standard.Base.Data.Json", "type": "", "name": "read_json_array", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node": {"lazy": false}},"aliases": [],"description": "Read a JsonNode to a Vector"},
{"module": "Standard.Base.Data.Json", "type": "", "name": "to_json_node", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Convert a value to a JsonNode"},
{"module": "Standard.Base.Data.Json", "type": "", "name": "make_field_name_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"js_object": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make a field name selector"},
{"module": "Standard.Base.Data.Json", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Json", "type": "", "name": "render", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}, "depth": {"lazy": false, "default": "0"}, "max_depth": {"lazy": false, "default": "5"}, "max_length": {"lazy": false, "default": "100"}},"aliases": [],"description": "Render the JS_Object to Text with truncated depth."},
{"module": "Standard.Base.Data.Json", "type": "", "name": "make_enso", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}},"aliases": [],"description": "Internal function ensuring that a Jackson object is presented appropriately to Enso."},
{"module": "Standard.Base.Data.Json", "type": "", "name": "key_value_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.List", "type": "List", "name": "Nil", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "List", "arguments": {},"aliases": [],"description": "The type that indicates the end of a cons list."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "Cons", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "List", "arguments": {"x": {"lazy": false}, "xs": {"lazy": false}},"aliases": [],"description": "A cons cell for a cons list."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Computes the number of elements in the list.","remarks": "! Computational Complexity    Note that this is a linear operation requiring O(n) time."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the list at a specified index (0-based).","remarks": "! Computational Complexity    Note that this is a linear operation requiring O(n) time."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the list at a specified index (0-based). If the index is invalid then `if_missing` is returned.","remarks": "! Computational Complexity    Note that this is a linear operation requiring O(n) time."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "f": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines all the elements of the list, by iteratively applying the passed function with next elements of the list. \n\n In general, the result of     (Cons l0 \u0026lt;| Cons l1 \u0026lt;| ... \u0026lt;| Cons ln) . fold init f is the same as     f (...(f (f init l0) l1)...) ln"},
{"module": "Standard.Base.Data.List", "type": "List", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "if_empty": {"lazy": true, "default": "Error.throw (Empty_Error.Error List)"}},"aliases": [],"icon": "preparation","description": "Combines all the elements of a non-empty list using a binary operation. If the list is empty, it returns `if_empty`."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether any element of the list matches the given condition."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition holds for all elements in this list."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"elem": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether this list contains a given value as an element."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this list is empty."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the list is not empty."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Selects all elements of this list which satisfy a condition."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "partition", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Partitions the list into lists of elements which satisfy a given condition and ones that do not.  Returns a `Pair` whose `first` element is the list of elements satisfying the predicate and the `second` element is a list of elements which did not satisfy it.  The relative order of elements kept in each returned list is the same as in the input."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Applies a function to each element of the list, returning the list of results."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the list. \n\n Unlike `map`, this method does not return the individual results, therefore it is only useful for side-effecting computations.  If the function returns a dataflow error, the error is converted to a panic and thrown immediately stopping further processing."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the list, returning a list with the same elements, but in the opposite order."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "drop_start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false}},"aliases": [],"group": "Selections","icon": "parse3","description": "Creates a new list with the first `count` elements at the start of `self` removed."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "take_start", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false}},"aliases": [],"group": "Selections","icon": "parse3","description": "Creates a new list consisting of the first `count` elements at the start of `self`."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "init", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get all elements from the list except the last."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get the last element of the list."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the first element from the list."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the second element from the list."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "head", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the first element from the list."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "tail", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get all elements from the list except the first."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this list to a vector with the same elements."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generates a human-readable text representation of the list."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Returns the first element of the list that satisfies the condition or if no elements of the list satisfy the predicate, returns `if_missing`."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of the element in the list. Returns Nothing if the element is not found."},
{"module": "Standard.Base.Data.List", "type": "List", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of the element in the list. Returns Nothing if the element is not found."},
{"module": "Standard.Base.Data.List", "type": "", "name": "find_node_from_start", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"list": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "Given a positive index and a list, returns the node."},
{"module": "Standard.Base.Data.List", "type": "", "name": "find_node_from_end", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"list": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "Given a negative index and a list, returns the node that is represented and the index of it."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Locale", "arguments": {"java_locale": {"lazy": false}},"aliases": [],"description": "A type representing a locale."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"language": {"lazy": false}, "country": {"lazy": false, "default": "Nothing"}, "variant": {"lazy": false, "default": "Nothing"}},"aliases": [],"icon": "text_input","description": "Construct a new locale."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "from_java", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"java": {"lazy": false}},"aliases": [],"description": "Convert a java locale to an Enso locale."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "from_language_tag", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tag": {"lazy": false}},"aliases": [],"icon": "convert","description": "Returns the locale specified by the provided IETF BCP47 language tag string.","remarks": "? Language Tag Syntax   If the specified language tag contains any ill-formed subtags, the first   such subtag and all following subtags are ignored.    The following conversions are performed:   - The language code \"und\" is mapped to language \"\".   - The language codes \"he\", \"yi\", and \"id\" are mapped to \"iw\", \"ji\", and     \"in\" respectively.   - The portion of a private use subtag prefixed by \"lvariant\", if any, is     removed and appended to the variant field in the result locale (without     case normalization).   - When the languageTag argument contains an extlang subtag, the first such     subtag is used as the language, and the primary language subtag and other     extlang subtags are ignored.   - Case is normalized except for variant tags, which are left unchanged.     Language is normalized to lower case, script to title case, country to     upper case, and extensions to lower case.   - If, after processing, the locale would exactly match either ja_JP_JP or     th_TH_TH with no extensions, the appropriate extensions are added.    This implements the \u0027Language-Tag\u0027 production of BCP47, and so supports   grandfathered (regular and irregular) as well as private use language tags."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "default", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "The default locale.  The default locale is a locale that does not specify any language, country, or variant and is used as the language/country-neutral setting for locale sensitive operations."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "bangladesh", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Bangladesh."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "brazil", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Brazil."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "canada_english", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Canada with language English."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "canada_french", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Canada with language French."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "china", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing the PRC."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "france", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing France."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "germany", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Germany."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "india_hindi", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing India with language Hindi."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "india_english", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing India with language English."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "indonesia", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Indonesia."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "italy", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Italy."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "japan", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Japan."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "mexico", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Mexico."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "nigeria", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Nigeria."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "pakistan_urdu", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing paksitan with language Urdu."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "pakistan_english", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing paksitan with language English."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "poland", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Poland."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "russia", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing Russia."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "south_korea", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing South Korea."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "uk", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing the UK."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "us", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "A locale representing the United States."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Gets the default drop down option for Locale."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "predefined_locale_fields", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "widget_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "language", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Gets the language from the locale."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "country", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Gets the country from the locale."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "variant", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the variant from the locale."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "display_language", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets a representation of the language in the locale that can be shown to the user."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "display_country", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets a representation of the country in the locale that can be shown to the user."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "display_variant", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets a representation of the variant in the locale that can be shown to the user."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the locale to text."},
{"module": "Standard.Base.Data.Locale", "type": "Locale", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Locale to a friendly string."},
{"module": "Standard.Base.Data.Map", "type": "Map", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Map", "arguments": {},"aliases": [],"description": "Deprecate place holder for the Map type."},
{"module": "Standard.Base.Data.Map", "type": "Map", "name": "empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "DEPRECATED Use Dictionary.empty instead."},
{"module": "Standard.Base.Data.Map", "type": "Map", "name": "singleton", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "DEPRECATED Use Dictionary.singleton instead."},
{"module": "Standard.Base.Data.Map", "type": "Map", "name": "from_keys_and_values", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"keys": {"lazy": false, "type": "Vector", "checked": true}, "values": {"lazy": false, "type": "Vector", "checked": true}, "error_on_duplicates": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"group": "Constants","icon": "convert","description": "DEPRECATED Use Dictionary.from_keys_and_values instead."},
{"module": "Standard.Base.Data.Map", "type": "Map", "name": "from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vec": {"lazy": false}, "error_on_duplicates": {"lazy": false, "default": "True"}},"aliases": [],"group": "Constants","icon": "convert","description": "DEPRECATED Use Dictionary.from_vector instead."},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "None", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Maybe", "arguments": {},"aliases": [],"description": "No contained value."},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "Some", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Maybe", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "A value."},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "maybe", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"default": {"lazy": true}, "function": {"lazy": false}},"aliases": [],"group": "Metadata","icon": "operators","description": "Applies the provided function to the contained value if it exists, otherwise returning the provided default value."},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "is_some", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Check if the maybe value is `Some`."},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "is_none", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Check if the maybe value is `None`."},
{"module": "Standard.Base.Data.Maybe", "type": "Maybe", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert Maybe to a friendly string."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {},"aliases": [],"description": "The root type of the Enso numeric hierarchy.  If a Number is expected, then the program can provide either a Float or an Integer in its place."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "positive_infinity", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "A constant holding the floating-point positive infinity."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "negative_infinity", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "A constant holding the floating-point negative infinity."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "nan", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "A constant holding the floating-point Not-a-Number value."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["add", "plus"],"group": "Operators","icon": "math","description": "Adds two arbitrary numbers. \n\n Addition in Enso will undergo automatic conversions such that you need not convert between Integer and Float manually."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["minus", "subtract"],"group": "Operators","icon": "math","description": "Subtract an arbitrary number from this."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["multiply", "product", "times"],"group": "Operators","icon": "math","description": "Multiply two arbitrary numbers. \n\n Multiplication in Enso will undergo automatic conversions such that you need not convert between Integer and Float manually."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["divide"],"group": "Operators","icon": "math","description": "Divides an this by an arbitrary number. \n\n Division in Enso will undergo automatic conversions such that you need not convert between Integer and Float manually."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["power"],"group": "Operators","icon": "math","description": "Compute the result of raising this to the power that."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "asin", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["inverse sine"],"group": "Trigonometry","icon": "math","description": "Computes the inverse of the sine function  Selects a value in the -pi/2 through pi/2 range."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "acos", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["inverse cosine"],"group": "Trigonometry","icon": "math","description": "Computes the inverse of the cosine function.  Selects a value in the -pi/2 through pi/2 range."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "atan", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["inverse tangent"],"group": "Trigonometry","icon": "math","description": "Computes the inverse of the tangent function.  Selects a value in the -pi/2 through pi/2 range."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "atan_2", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"y": {"lazy": false}},"aliases": [],"group": "Trigonometry","icon": "math","description": "Computes the argument (angle) in the conversion from cartesian to polar coordinates, taking `self` as the x coordinate. \n\n The returned angle is in the -pi through pi range."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "sin", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["sine"],"group": "Trigonometry","icon": "math","description": "Computes the sine function."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "cos", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["cosine"],"group": "Trigonometry","icon": "math","description": "Computes the cosine function."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "tan", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["tangent"],"group": "Trigonometry","icon": "math","description": "Computes the tangent function."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "sinh", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Trigonometry","icon": "math","description": "Computes the hyperbolic sine function."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "cosh", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Trigonometry","icon": "math","description": "Computes the hyperbolic cosine function."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "tanh", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Trigonometry","icon": "math","description": "Computes the hyperbolic tangent function."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "exp", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["exponential"],"group": "Math","icon": "math","description": "Computes the exponential function, raising Euler\u0027s number `r` to the power of `self`."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "ln", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["natural logarithm"],"group": "Math","icon": "math","description": "Computes the natural logarithm function."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "sqrt", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["square root"],"group": "Math","icon": "math","description": "Computes the square root of `self`."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "log", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"base": {"lazy": false}},"aliases": ["logarithm"],"group": "Math","icon": "math","description": "Computes the `base`-log of `self`."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts a numeric value to a string, using the Java DecimalFormat formatter."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "equals", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean ! Incomparable_Values", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}, "epsilon": {"lazy": false, "default": "0.0:Number"}},"aliases": [],"group": "Logical","icon": "operators","description": "Checks equality of numbers, using an `epsilon` value.","errors": ""},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "min", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"group": "Math","icon": "transform4","description": "Returns the smaller value of `self` and `that`.","remarks": "? Math.min or Number.min   While we provide the min method on `Number`, we find it more intuitive to   write `Math.min a b` rather than `a.min b`. To that end, we recommend using   the first style."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "max", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"group": "Math","icon": "transform4","description": "Returns the larger value of `self` and `that`.","remarks": "? Math.max or Number.max   While we provide the max method on `Number`, we find it more intuitive to   write `Math.max a b` rather than `a.max b`. To that end, we recommend using   the first style."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "is_nan", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Math","icon": "metadata","description": "Checks if the given number is the floating-point Not-a-Number value.  This is needed, because the NaN value will return `False` even when being compared with itself, so `x == Number.nan` would not work."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "is_infinite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Math","icon": "metadata","description": "Checks if the given number is infinite."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "is_finite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Math","icon": "metadata","description": "Checks if the given number is finite, i.e. not infinite nor NaN."},
{"module": "Standard.Base.Data.Numbers", "type": "Number", "name": "signum", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Math","icon": "math","description": "Returns the sign of the number."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"description": "Float is the type of float numbers in Enso.","remarks": "? Representation   Enso\u0027s float numbers are represented as IEEE754 double-precision   floating point numbers."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float ! Number_Parse_Error | Illegal_Argument", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "locale": {"lazy": false, "type": "Locale | Nothing", "checked": true, "default": "Nothing"}, "format": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["from text"],"group": "Conversions","icon": "convert","description": "Parses a string into a `Float`, returning a `Number_Parse_Error` if the text does not represent a valid `Float`.","errors": ""},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "max_value", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "input_number","description": "Maximum representable positive value, from the underlying Java double type.  The absolute-value-largest representable negative value is `-max_value`."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "min_value", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "input_number","description": "Minimum representable positive value, from the underlying Java double type."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["add", "plus"],"group": "Operators","icon": "math","description": "Adds a float and an arbitrary number. \n\n Addition in Enso will undergo automatic conversions such that you need not convert between Integer and Float manually."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["minus", "subtract"],"group": "Operators","icon": "math","description": "Subtract an arbitrary number from this."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["multiply", "product", "times"],"group": "Operators","icon": "math","description": "Multiply a float by an arbitrary number. \n\n Multiplication in Enso will undergo automatic conversions such that you need not convert between Integer and Float manually."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["divide"],"group": "Operators","icon": "math","description": "Divides a float by an arbitrary number. \n\n Division in Enso will undergo automatic conversions such that you need not convert between Integer and Float manually."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "%", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["modulo", "modulus"],"group": "Operators","icon": "math","description": "Computes the remainder when dividing this by that. \n\n Modulus in Enso will undergo automatic conversions such that you need not convert between Integer and Float manually.","remarks": "? Negative Arguments    When the first argument to `%` is negative, the result will also be   negative."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["power"],"group": "Operators","icon": "math","description": "Compute the result of raising this to the power that."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["greater than"],"group": "Operators","icon": "operators","description": "Checks if this is greater than that."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["greater than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is greater than or equal to that."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["less than"],"group": "Operators","icon": "operators","description": "Checks if this is less than that."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["less than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is less than or equal to that."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "abs", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"group": "Math","icon": "math","description": "Computes the absolute value of this.  The absolute value of a positive number is itself, while the absolute value of a negative number is that number multiplied by -1."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "ceil", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest integer equal to or above this number.  This method provides a means of converting a Float to an Integer."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "floor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest integer equal to or below this number.  This method provides a means of converting a Float to an Integer."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "truncate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["int"],"group": "Rounding","icon": "math","description": "Truncate a floating-point number to an integer by dropping the fractional part. This is equivalent to \"round-toward-zero\"."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "round", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Rounding","icon": "math","description": "Round to a specified number of decimal places.  By default, rounding uses \"symmetric round-half-up\", also known as \"half-up.\" If use_bankers=True, then it uses \"round-half-even\", also known as \"banker\u0027s rounding\".  If `decimal_places` \u003e 0, `round` returns a `Float`; otherwise, it returns an `Integer`.  If the argument is `NaN` or `+/-Inf`, an `Arithmetic_Error` error is thrown.","errors": "","remarks": "? Negative decimal place counts   Rounding to `n` digits can be thought of as \"rounding to the nearest   multiple of 10^(-n)\". For negative decimal counts, this results in   rounding to the nearest positive integer power of 10."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "negate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"group": "Operators","icon": "operators","description": "Compute the negation of this."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "to_float", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"icon": "convert","description": "Convert this to a float.  This is a no-op on floats, but is provided for completeness of the Enso Number API."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "to_decimal", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this to a `Decimal`."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"description": "Integer is the type of integral numbers in Enso. They are of unbounded size and can grow as large as necessary.","remarks": "? Representation   For certain operations (such as bitwise logic), the underlying   representation of the number matters. Enso Integers are represented as   signed 2\u0027s complement numbers. \n\n? Performance   Integers that fit into 64 bits are represented in memory as 64 bits.   This means that operations on them achieve excellent performance. Once   the integer grows beyond being able to fit in 64 bits, performance will   degrade."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Number_Parse_Error", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "radix": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}},"aliases": ["from text"],"group": "Conversions","icon": "convert","description": "Parses a textual representation of an integer into an integer number, returning a `Number_Parse_Error` if the text does not represent a valid integer."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["add", "plus"],"group": "Operators","icon": "math","description": "Adds an integer and an arbitrary number. \n\n Addition in Enso will undergo automatic conversions such that you need not convert between Integer and Float manually."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["minus", "subtract"],"group": "Operators","icon": "math","description": "Subtract an arbitrary number from this."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["multiply", "product", "times"],"group": "Operators","icon": "math","description": "Multiply an integer by an arbitrary number. \n\n Multiplication in Enso will undergo automatic conversions such that you need not convert between Integer and Float manually."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["divide"],"group": "Operators","icon": "math","description": "Divides an integer by an arbitrary number. \n\n Division in Enso will undergo automatic conversions such that you need not convert between Integer and Float manually."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "%", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["modulo", "modulus"],"group": "Operators","icon": "math","description": "Computes the remainder when dividing this by that. \n\n Modulus in Enso will undergo automatic conversions such that you need not convert between Integer and Float manually.  Returns an error if the shift amount exceeds 2^32.","remarks": "? Negative Arguments    When the first argument to `%` is negative, the result will also be   negative."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Number", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": ["power"],"group": "Operators","icon": "math","description": "Compute the result of raising this to the power that."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["greater than"],"group": "Operators","icon": "operators","description": "Checks if this is greater than that."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["greater than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is greater than or equal to that."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["less than"],"group": "Operators","icon": "operators","description": "Checks if this is less than that."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": ["less than or equal"],"group": "Operators","icon": "operators","description": "Checks if this is less than or equal to that."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "abs", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Math","icon": "math","description": "Computes the absolute value of this.  The absolute value of a positive number is itself, while the absolute value of a negative number is that number multiplied by -1."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "ceil", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest integer above this integer.  This is a no-op on integers but is provided for completeness of the Enso number API."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "div", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Math","icon": "math","description": "Computes the integer division of this by that. \n\n Integer division rounds down to the nearest integer.  Returns an error if `that` is zero."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "floor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Rounding","icon": "math","description": "Computes the nearest integer below this integer.  This is a no-op on integers but is provided for completeness of the Enso number API."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "truncate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["int"],"group": "Rounding","icon": "math","description": "Truncate an `Integer` to an `Integer`, i.e. returns its argument. For compatibility with `Float.truncate`."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "round", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Illegal_Argument", "arguments": {"decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Rounding","icon": "math","description": "Round to a specified number of decimal places.  For integers, rounding to 0 or more decimal places simply returns the argument. For negative decimal places, see below.  By default, rounding uses \"symmetric round-half-up\", also known as \"half-up.\" If use_bankers=True, then it uses \"round-half-even\", also known as \"banker\u0027s rounding\".","errors": "","remarks": "? Negative decimal place counts   Rounding to `n` digits can be thought of as \"rounding to the nearest   multiple of 10^(-n)\". For negative decimal counts, this results in   rounding to the nearest positive integer power of 10."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "negate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Operators","icon": "operators","description": "Compute the negation of this."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "to_float", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"icon": "convert","description": "Convert this to a float."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "to_decimal", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert this to a `Decimal`."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_and", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Computes the bitwise and (conjunction) operation between this and that. \n\n Bitwise and computes the logical conjunction of the corresponding pairs of bits in the operands."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_not", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Bitwise","icon": "math","description": "Computes the bitewise compliment of this.  The bitwise compliment negates the value of each bit in the operand."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_or", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Computes the bitwise or (disjunction) operation between this and that. \n\n Bitwise or computes the logical disjunction of the pairs of corresponding bits in the operands."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_xor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Computes the bitwise exclusive or between this and that. \n\n Bitwise exclusive or computes the exclusive or of the pairs of corresponding bits in the operands."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_shift", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Shifts the bits of this by the amount that.  Left-shifts fill the new bits with zeroes, while right-shifts perform sign extension.  Returns an error if the shift amount exceeds 2^32."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_shift_l", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Performs a bitwise left-shift on the number.  Left-shifts fill the new bits with zeroes, while right-shifts perform sign extension.  Returns an error if the shift amount exceeds 2^32."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "bit_shift_r", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer ! Arithmetic_Error", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Bitwise","icon": "math","description": "Performs a bitwise right-shift on the number.  Left-shifts fill the new bits with zeroes, while right-shifts perform sign extension.  Returns an error if the shift amount exceeds 2^32."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "fits_in_long", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Numbers", "type": "Number_Parse_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Number_Parse_Error", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Numbers", "type": "Number_Parse_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the syntax error."},
{"module": "Standard.Base.Data.Numbers", "type": "Positive_Integer", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Positive_Integer", "arguments": {"integer": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "This constructor should not be used by user code as it can be used to break the invariants. Instead, this type should only be created by `new` or conversions."},
{"module": "Standard.Base.Data.Numbers", "type": "Positive_Integer", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"integer": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Constructor to create a `Positive_Integer` from an `Integer` - checking if it satisfies the condition. User code should prefer the `Positive_Integer.from` conversion."},
{"module": "Standard.Base.Data.Numbers", "type": "Float", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numbers", "type": "Positive_Integer", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Allows to create a `Positive_Integer` from an `Integer`. It will throw `Illegal_Argument` if the provided integer is not positive."},
{"module": "Standard.Base.Data.Numbers", "type": "Integer", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Positive_Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Numbers", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Positive_Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Ordering", "type": "Comparable", "name": "By", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Comparable", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}, "comparator": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Ordering", "type": "Comparable", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Comparable", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}, "comparator": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Creates new opaque `Comparable` instance for given `value` and a `Comparator` with two static methods what work on the type `T` of the provided `value`:  ``` type Comparator T     compare : T -\u003e T -\u003e (Ordering|Nothing ! Incomparable_Values)     hash : T -\u003e Integer ```  Typically used inside of `Comparable.from` method definition."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "Less", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Ordering", "arguments": {},"aliases": [],"description": "A representation that the first value orders as less than the second."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "Equal", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Ordering", "arguments": {},"aliases": [],"description": "A representation that the first value orders as equal to the second."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "Greater", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Ordering", "arguments": {},"aliases": [],"description": "A representation that the first value orders as greater than the second."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "compare", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Ordering ! Incomparable_Values", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": [],"icon": "operators","description": "Compares values and returns an `Ordering` representing their order or yields an `Incomparable_Values` error when the values aren\u0027t comparable."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "hash", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"icon": "metadata","description": "Computes a hash number for a given value"},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "from_sign", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"sign": {"lazy": false}},"aliases": [],"description": "Converts a sign-based representation of ordering to Enso\u0027s native ordering."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "to_sign", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts the ordering to the signed notion of ordering based on integers."},
{"module": "Standard.Base.Data.Ordering", "type": "Ordering", "name": "and_then", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": true}},"aliases": [],"icon": "order","description": "A lexicographical comparison."},
{"module": "Standard.Base.Data.Ordering", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Ordering", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Ordering", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Pair", "arguments": {"first": {"lazy": false}, "second": {"lazy": false}},"aliases": [],"description": "A simple pair of elements."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"first": {"lazy": false}, "second": {"lazy": false}},"aliases": [],"icon": "array_new","description": "Create a new Pair from two elements."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get the last element of the pair."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fun": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Applies the provided function to both elements of the pair."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the length of the Pair (which is always equal to 2)."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Returns the pair as a Vector."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the pair at a specified index (0-based)."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the pair at a specified index (0-based). If the index is invalid then `if_missing` is returned."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a predicate holds for at least one element of this pair."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a predicate holds for all elements in this pair."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"elem": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether this pair contains a given value as an element."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Returns the first element of the pair that satisfies the predicate or if no elements satisfy the predicate, returns `if_missing`."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of an element in the pair. Returns Nothing if the element is not found."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of an element in the pair. Returns Nothing if the element is not found."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines all the elements of the pair, by iteratively applying the passed function with next elements of the pair."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "preparation","description": "Combines all the elements of the pair using a binary operation."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the pair, returning a pair with the same elements, but in the opposite order."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the pair.  Unlike `map`, this method does not return the individual results, therefore it is only useful for side-effecting computations.  If the function returns a dataflow error, the error is converted to a panic and thrown immediately stopping further processing."},
{"module": "Standard.Base.Data.Pair", "type": "Pair", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Pair."},
{"module": "Standard.Base.Data.Pair", "type": "", "name": "check_start_valid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "function": {"lazy": false}, "max": {"lazy": false, "default": "3"}},"aliases": []},
{"module": "Standard.Base.Data.Pair", "type": "", "name": "pair", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Pair", "arguments": {"first": {"lazy": false}, "second": {"lazy": false}},"aliases": [],"icon": "array_new","description": "Create a new Pair from two elements."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "Between", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Range", "arguments": {"start": {"lazy": false, "type": "Integer", "checked": true}, "end": {"lazy": false, "type": "Integer", "checked": true}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "A representation of a right-exclusive range of integer values."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "end": {"lazy": false, "type": "Integer", "checked": true, "default": "100"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Create a representation of a right-exclusive range of integer values."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "with_step", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_step": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Calculations","icon": "array_new","description": "Creates a copy of this range with a changed step."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Returns the first element that is included within the range.  It will raise `Index_Out_Of_Bounds` if the range is empty."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Returns the second element that is included within the range.  It will raise `Index_Out_Of_Bounds` if the range has less than two elements."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Returns the last element that is included within the range.  It will raise `Index_Out_Of_Bounds` if the range is empty."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the number of elements in the range."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the Range at a specified index (0-based)."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the Range at a specified index (0-based). If the index is invalid then `if_missing` is returned."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this range is empty."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this range is not empty."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Applies a function to each element in the range, producing a vector of results."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Filter_Condition | (Integer -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Returns a vector of all elements of this range which satisfy a condition."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "partition", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Integer -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Partitions the range into `Vector`s of elements which satisfy a given condition and ones that do not.  Returns a `Pair` whose `first` element is the `Vector` of elements satisfying the predicate and the `second` element is a `Vector` of elements which did not satisfy it.  The relative order of elements kept in each returned list is the same as in the input."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function for each element in the range.  This method does not return the results, so it is only useful for performing computations with side-effects.  If the function returns a dataflow error, the error is converted to a panic and thrown immediately stopping further processing."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "each_propagate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Executes a function for each element in the range. Exits early if the body produces an `Error`."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "each_with_index", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the range.  Essentially acts like `range.to_vector.each_with_index`, but it is more efficient."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "transform4","description": "Combines all the elements of the range, by iteratively applying the passed function with next elements of the range. \n\n In general, the result of     Range start end step . fold init f is the same as     f (...(f (f init start) start+step)...) last"},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "running_fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the range, by iteratively applying the passed function with the next element of the range. After each step the value is stored resulting in a new Vector of the same size as self."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Integer -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition is satisfied for all numbers in this range."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Integer -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition is satisfied for any number in this range."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Integer -> Boolean)", "checked": true}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Gets the first element of this range that satisfies a condition. If no element satisfies the condition, returns `if_missing`."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks if the range contains the specified value."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of an element in the range. Returns Nothing if the element is not found."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of an element in the range. Returns Nothing if the element is not found."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the range, returning a range with the same elements, but in the opposite order."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Converts the range to a vector containing the numbers in the range."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "if_empty": {"lazy": true, "default": "Error.throw (Empty_Error.Error Range)"}},"aliases": [],"icon": "preparation","description": "Combines all the elements of a non-empty range using a binary operation. If the range is empty, returns `if_empty`."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Range."},
{"module": "Standard.Base.Data.Range", "type": "Range", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Range", "type": "", "name": "throw_zero_step_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Range", "type": "", "name": "check_start_valid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "range": {"lazy": false}, "function": {"lazy": false}, "include_end": {"lazy": false, "default": "True"}},"aliases": [],"description": "Check inputs are valid for a range"},
{"module": "Standard.Base.Data.Range", "type": "", "name": "find_internal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false}, "start": {"lazy": false}, "predicate": {"lazy": false}},"aliases": [],"description": "Find value and index for a predicate"},
{"module": "Standard.Base.Data.Range", "type": "", "name": "get_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false}, "min": {"lazy": false}, "max": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "Work out the index of a value in a range"},
{"module": "Standard.Base.Data.Range", "type": "", "name": "range_default_filter_condition_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Range", "type": "Vector", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "Linear", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Model", "arguments": {"intercept": {"lazy": false, "type": "Number|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Fit a line (y = A x + B) to the data with an optional fixed intercept."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "Exponential", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Model", "arguments": {"intercept": {"lazy": false, "type": "Number|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Fit a exponential line (y = A exp(B x)) to the data with an optional fixed intercept."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "Logarithmic", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Model", "arguments": {},"aliases": [],"description": "Fit a logarithmic line (y = A log x + B) to the data."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "Power", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Model", "arguments": {},"aliases": [],"description": "Fit a power series (y = A x ^ B) to the data."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "fitted_model_with_r_squared", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}, "a": {"lazy": false}, "b": {"lazy": false}, "known_xs": {"lazy": false}, "known_ys": {"lazy": false}},"aliases": [],"description": "Computes the R Squared value for a model and returns a new instance."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "ln_series", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"xs": {"lazy": false}, "series_name": {"lazy": false, "default": "\"Values\""}},"aliases": [],"description": "Computes the natural log series as long as all values are positive."},
{"module": "Standard.Base.Data.Regression", "type": "Model", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Model."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "Linear", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fitted_Model", "arguments": {"slope": {"lazy": false, "type": "Number", "checked": true}, "intercept": {"lazy": false, "type": "Number", "checked": true}, "r_squared": {"lazy": false, "type": "Number", "checked": true, "default": "0.0"}},"aliases": [],"description": "Fitted line (y = slope x + intercept)."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "Exponential", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fitted_Model", "arguments": {"a": {"lazy": false, "type": "Number", "checked": true}, "b": {"lazy": false, "type": "Number", "checked": true}, "r_squared": {"lazy": false, "type": "Number", "checked": true, "default": "0.0"}},"aliases": [],"description": "Fitted exponential line (y = a exp(b x))."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "Logarithmic", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fitted_Model", "arguments": {"a": {"lazy": false, "type": "Number", "checked": true}, "b": {"lazy": false, "type": "Number", "checked": true}, "r_squared": {"lazy": false, "type": "Number", "checked": true, "default": "0.0"}},"aliases": [],"description": "Fitted logarithmic line (y = a log x + b)."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "Power", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fitted_Model", "arguments": {"a": {"lazy": false, "type": "Number", "checked": true}, "b": {"lazy": false, "type": "Number", "checked": true}, "r_squared": {"lazy": false, "type": "Number", "checked": true, "default": "0.0"}},"aliases": [],"description": "Fitted power series (y = a x ^ b)."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Display the fitted line."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Fitted_Model."},
{"module": "Standard.Base.Data.Regression", "type": "Fitted_Model", "name": "predict", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"group": "Calculations","icon": "robot","description": "Use the model to predict a value."},
{"module": "Standard.Base.Data.Regression", "type": "Fit_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Fit_Error", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "An error thrown when the linear regression cannot be computed."},
{"module": "Standard.Base.Data.Regression", "type": "Fit_Error", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Regression", "type": "Fit_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the `Fit_Error` to a human-readable representation."},
{"module": "Standard.Base.Data.Regression", "type": "", "name": "fit_least_squares", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"known_xs": {"lazy": false}, "known_ys": {"lazy": false}, "model": {"lazy": false, "default": "Model.Linear"}},"aliases": [],"icon": "robot","description": "Use Least Squares to fit a line to the data."},
{"module": "Standard.Base.Data.Sort_Direction", "type": "Sort_Direction", "name": "Ascending", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Sort_Direction", "arguments": {},"aliases": [],"description": "Elements should be sorted in ascending order."},
{"module": "Standard.Base.Data.Sort_Direction", "type": "Sort_Direction", "name": "Descending", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Sort_Direction", "arguments": {},"aliases": [],"description": "Elements should be sorted in descending order."},
{"module": "Standard.Base.Data.Sort_Direction", "type": "Sort_Direction", "name": "to_sign", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert into the sign of the direction"},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "Average", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rank_Method", "arguments": {},"aliases": [],"description": "Use the mean of all ranks for equal values."},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "Minimum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rank_Method", "arguments": {},"aliases": [],"description": "Use the lowest of all ranks for equal values."},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "Maximum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rank_Method", "arguments": {},"aliases": [],"description": "Use the highest of all ranks for equal values."},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "Dense", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rank_Method", "arguments": {},"aliases": [],"description": "Use same rank value for equal values and next group is the immediate following ranking number."},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "Ordinal", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rank_Method", "arguments": {},"aliases": [],"description": "Equal values are assigned the next rank in order that they occur."},
{"module": "Standard.Base.Data.Statistics", "type": "Rank_Method", "name": "compute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false}},"aliases": [],"group": "Statistics","icon": "transform4","description": "Assigns a rank to each value of data, dealing with equal values according to the method."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Count", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "Count the number of non-Nothing and non-NaN values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Minimum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "The minimum value."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Maximum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "The maximum value."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Sum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "Sum the non-Nothing and non-NaN values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Product", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "The product of the non-Nothing and non-NaN values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Mean", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "The sample mean of the values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Variance", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"population": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "The variance of the values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Standard_Deviation", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"population": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "The standard deviation of the values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Skew", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"population": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "The skewness of the values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Kurtosis", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {},"aliases": [],"description": "The sample kurtosis of the values."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Covariance", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"series": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Calculate the Covariance between data and series."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Pearson", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"series": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Calculate the Pearson Correlation between data and series."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "Spearman", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"series": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Calculate the Spearman Rank Correlation between data and series."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "R_Squared", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Statistic", "arguments": {"predicted": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Calculate the coefficient of determination between data and predicted series."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "bulk_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Bulk widget for Statistic."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "compute", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}, "statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}},"aliases": [],"description": "Compute a single statistic on a vector like object."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "compute_bulk", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}, "statistics": {"lazy": false, "type": "Vector", "checked": true, "default": "[Statistic.Count, Statistic.Sum]"}},"aliases": [],"description": "Compute a set of statistics on a vector like object."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "running", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}, "statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Sum"}},"aliases": [],"description": "Compute a running statistics on a vector like object."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "running_bulk", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}, "statistics": {"lazy": false, "default": "[Statistic.Count, Statistic.Sum]"}},"aliases": [],"description": "Compute a set running statistics on a vector like object."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "covariance_matrix", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}},"aliases": [],"icon": "math","description": "Calculate a variance-covariance matrix between the input series."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "pearson_correlation", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}},"aliases": [],"icon": "math","description": "Calculate a Pearson correlation matrix between the input series."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "spearman_correlation", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}},"aliases": [],"icon": "math","description": "Calculate a Spearman Rank correlation matrix between the input series."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "rank_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false}, "method": {"lazy": false, "default": "Rank_Method.Average"}},"aliases": [],"description": "Assigns a rank to each value of data, dealing with equal values according to the method."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the order needed to compute a statistic for a moment based statistic."},
{"module": "Standard.Base.Data.Statistics", "type": "Statistic", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Accumulator", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}, "min_max": {"lazy": false, "type": "Boolean", "checked": true}, "minimum": {"lazy": false, "type": "Any", "checked": true}, "maximum": {"lazy": false, "type": "Any", "checked": true}, "moments": {"lazy": false, "type": "Vector|Nothing", "checked": true}, "calc_product": {"lazy": false, "type": "Boolean", "checked": true}, "product": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"min_max": {"lazy": false, "default": "True"}, "moments": {"lazy": false, "default": "0"}, "calc_product": {"lazy": false, "default": "False"}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "perform_comparison", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current": {"lazy": false}, "value": {"lazy": false}, "bound": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "increment", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Add a single value to the accumulator."},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "update_moments", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "compute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statistic": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "variance", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"population": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "skew", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"population": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "kurtosis", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "check_moments", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statistic": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "Accumulator", "name": "check_product", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "check_running_support", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statistics": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Check if the statistics are supported for running calculations."},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "wrap_java_call", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "calculate_correlation_statistics", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x_data": {"lazy": false}, "y_data": {"lazy": false}},"aliases": [],"description": "Given two series, get a computed CorrelationStatistics object"},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "calculate_spearman_rank", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x_data": {"lazy": false}, "y_data": {"lazy": false}},"aliases": [],"description": "Given two series, get a compute the Spearman Rank correlation"},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "calculate_correlation_statistics_matrix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data": {"lazy": false}},"aliases": [],"description": "Given a set of series get CorrelationStatistics objects"},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "compute_fold", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current": {"lazy": false}, "value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "check_if_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "empty_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statistic": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Statistics", "type": "", "name": "is_valid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Enso\u0027s text type.  Enso\u0027s text type is natively unicode aware, and will handle arbitrary textual data.","remarks": "? Concatenation   Enso\u0027s text type uses a rope-based structure under the hood to provide   users with efficient concatenation operations."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["count"],"group": "Metadata","icon": "metadata","description": "Computes the number of characters in the text.","remarks": "! What is a Character?    A character is defined as an Extended Grapheme Cluster, see Unicode    Standard Annex 29. This is the smallest unit that still has semantic    meaning in most text-processing applications."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["concatenate"],"group": "Operators","icon": "text","description": "Concatenates the text that to the right side of this."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "equals_ignore_case", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Logical","icon": "operators","description": "Checks whether `self` is equal to `that`, ignoring the case of the texts. \n\n Two texts are considered equal ignoring case if they are of the same length and corresponding characters are equal ignoring case.","remarks": "! Unicode Equality   The definition of equality includes Unicode canonicalization. I.e. two   texts are equal if they are identical after canonical decomposition. This   ensures that different ways of expressing the same character in the   underlying binary representation are considered equal."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "to_case_insensitive_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED UNSTABLE", "returnType": "", "arguments": {"locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"description": "Unifies the case of all letters in the text, generating a key which can be used to perform case-insensitive comparisons."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "compare_to_ignore_case", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}, "locale": {"lazy": false, "default": "Locale.default"}},"aliases": [],"icon": "text","description": "Compare two texts to discover their ordering."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Check if `self` is empty.","remarks": "! What is Empty?   Text is considered to be empty when its length is zero."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Check if `self` is not empty.","remarks": "! What is Not Empty?   Text is considered to be not empty when its length is greater than zero."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Conversion to Text that overrides the default `to_text` behavior."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "is_normalized", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Checks where this Text is in FCD normalized form."},
{"module": "Standard.Base.Data.Text", "type": "Text", "name": "normalize", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"normalization": {"lazy": false, "default": "Normalization.NFD"}},"aliases": ["normalise"],"icon": "convert","description": "Perform Unicode normalization on the string, using the specified method."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": [],"description": "The basic, immutable, vector type. A vector allows to store an arbitrary number of elements, in linear memory. It is the recommended data structure for most applications."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"length": {"lazy": false}, "constructor": {"lazy": false}},"aliases": [],"description": "Creates a new vector of the given length, initializing elements using the provided constructor function. \n\n A vector allows to store an arbitrary number of elements in linear memory. It is the recommended data structure for most applications."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "collect", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"seq": {"lazy": false}, "element": {"lazy": false, "type": "Any -> Any", "checked": true}, "next": {"lazy": false, "type": "Any -> Any", "checked": true}, "limit": {"lazy": false, "type": "Integer | Nothing", "checked": true, "default": "Nothing"}, "stop_at": {"lazy": false, "type": "Any -> Boolean", "checked": true, "default": "_==Nothing"}},"aliases": [],"description": "Collects elements of a sequence into a new vector. Various structures can be converted into vector of elements. This helper methods allows to do so in an iterative fashion. Enough to describe how to extract value from current item and how to advance to next item."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "from_array", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"array": {"lazy": false}},"aliases": [],"description": "Converts an array into a vector by copying content of the array. \n\n A vector allows to store an arbitrary number of elements in linear memory. It is the recommended data structure for most applications."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "unify_vector_or_element", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "A helper method that takes a vector or an array or a single element and returns a vector.  If it got a vector or array, a vector containing the same elements is returned. If it got a single element, a vector containing this element is returned."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "fill", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "item": {"lazy": false}},"aliases": ["repeat"],"group": "Constants","icon": "data_input","description": "Creates a new vector of the given length, filling the elements with the provided constant. \n\n A vector allows to store an arbitrary number of elements in linear memory. It is the recommended data structure for most applications."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "build", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Vector", "arguments": {"function": {"lazy": false, "type": "Builder -> Any", "checked": true}, "initial_capacity": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "propagate_warnings": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Creates a new `Vector` by passing a `Builder` to the provided function.  A vector `Builder` is a mutable data structure, that allows for gathering a number of elements and then converting them into a vector. This is particularly useful when the number of elements is not known upfront.  `.build` creates a new `Builder`, passes it to the provided function, which can add elements using the `Builder`\u0027s `.append` and `.append_vector_range` methods. When the function is done, `.build` then closes the `Builder` and returns the resulting `Vector`.  The provided function should call `.append` or `.append_vector_range` to add new elements to the `Builder`. The return value of the provided function is not used, unless it is a dataflow error, in which case the `Vector` is not built, and the dataflow error is propagted instead.  A vector allows to store an arbitrary number of elements in linear memory. It is the recommended data structure for most applications.","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "build_multiple", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Vector Vector", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}, "function": {"lazy": false, "type": "Builder -> Any", "checked": true}, "initial_capacity": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "propagate_warnings": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Creates multiple new `Vector`s by passing an array of `Builder`s to the provided function.  A vector `Builder` is a mutable data structure, that allows for gathering a number of elements and then converting them into a vector. This is particularly useful when the number of elements is not known upfront.  `.build_multiple` creates an array of new `Builder`s, passes it to the provided function, which can add elements to the individual `Builder`s using their `.append` and `.append_vector_range` methods. When the function is done, `.build_multiple` then closes the `Builder`s and returns an array of the resulting `Vector`s.  The provided function should call `.append` or `.append_vector_range` to add new elements to the `Builder`s. The return value of the provided function is not used, unless it is a dataflow error, in which case the `Vector`s are not built, and the dataflow error is propagted instead.  A vector allows to store an arbitrary number of elements in linear memory. It is the recommended data structure for most applications.","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "from_polyglot_array", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"array": {"lazy": false}},"aliases": [],"description": "Converts a polyglot value representing an array into a vector. \n\n This is useful when wrapping polyglot APIs for further use in Enso.  A vector allows to store an arbitrary number of elements in linear memory. It is the recommended data structure for most applications."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "to_array", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Copies content of a vector into an Array."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the number of elements stored in this vector."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the vector at a specified index (0-based)."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets an element from the vector at a specified index (0-based). If the index is invalid then `if_missing` is returned."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the vector, by iteratively applying the passed function with next elements of the vector. \n\n In general, the result of     [l0, l1, ..., ln] . fold init f is the same as     f (...(f (f init l0) l1)...) ln"},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "fold_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the vector, by iteratively applying the passed function with next elements of the vector."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "running_fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"init": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Combines all the elements of the vector, by iteratively applying the passed function with the next element of the vector. After each step the value is stored resulting in a new vector of the same size as self."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "reduce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "if_empty": {"lazy": true, "default": "Error.throw (Empty_Error.Error Vector)"}},"aliases": [],"icon": "column_add","description": "Combines all the elements of a non-empty vector using a binary operation. If the vector is empty, it returns `if_empty`."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "find", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Error.throw Not_Found"}},"aliases": [],"group": "Selections","icon": "find","description": "Returns the first element of the vector that satisfies the condition or `if_missing` if no elements of the vector satisfy it."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the index of an element in the vector. Returns Nothing if the element is not found."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "last_index_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}},"aliases": [],"group": "Values","icon": "find","description": "Returns the last index of an element in the vector. Returns `Nothing` if the element is not found."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a predicate holds for at least one element of self vector."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a condition holds for all elements in this vector."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"elem": {"lazy": false}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether this vector contains a given value as an element."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this vector is empty."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this vector is not empty."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "preparation","description": "Selects all elements of this vector which satisfy a condition."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "filter_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"group": "Selections","icon": "preparation","description": "Selects all elements of this vector which satisfy a predicate."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "partition", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Selections","icon": "split","description": "Partitions the vector into `Vector`s of elements which satisfy a given condition and ones that do not.  Returns a `Pair` whose `first` element is the `Vector` of elements satisfying the predicate and the `second` element is a `Vector` of elements which did not satisfy it.  The relative order of elements kept in each returned list is the same as in the input vector."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "partition_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"icon": "preparation","description": "Partitions the vector into `Vector`s of elements which satisfy a given predicate and ones that do not.  Returns a `Pair` whose `first` element is the `Vector` of elements satisfying the predicate and the `second` element is a `Vector` of elements which did not satisfy it.  The relative order of elements kept in each returned list is the same as in the input vector."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "transpose", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "map_row","description": "Swaps the rows and columns of a matrix represented by a vector of vectors.","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "column_add","description": "Applies a function to each element of the vector, returning the `Vector` of results.","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "flat_map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "union","description": "Applies a function to each element of the vector, returning the `Vector` that contains all results concatenated.","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "flatten", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Calculations","icon": "union","description": "Transforms a vector of vectors into a `Vector` of inner elements - removes one layer of nesting from a stack of nested vectors."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "map_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": [],"icon": "column_add","description": "Applies a function to each element of the vector, returning the `Vector` of results. \n\n The function is called with both the element index as well as the element itself.","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "each", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the vector.  Unlike `map`, this method does not return the individual results, therefore it is only useful for side-effecting computations.  If the function returns a dataflow error, the error is converted to a panic and thrown immediately stopping further processing."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "each_with_index", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Applies a function to each element of the vector. \n\n The function is called with both the element index as well as the element itself.  Unlike `map`, this method does not return the individual results, therefore it is only useful for side-effecting computations."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "order","description": "Reverses the vector, returning a `Vector` with the same elements, but in the opposite order."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generates a human-readable text representation of the vector."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "short_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"max_entries": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}},"aliases": [],"description": "Generates a human-readable text representation of the vector, keeping its length limited."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector | Array", "checked": true}},"aliases": ["append", "concatenate", "union"],"group": "Operators","icon": "union","description": "Concatenates two vectors, resulting in a new `Vector`, containing all the elements of `self`, followed by all the elements of `that`."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "insert", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"at": {"lazy": false, "default": "self.length"}, "item": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Calculations","icon": "row_add","description": "Inserts the given item into the vector at the given index."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "remove", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"at": {"lazy": false, "default": "-1"}},"aliases": [],"group": "Selections","icon": "table_clean","description": "Removes the item at the given index from the vector."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"separator": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- separator (optional): The text to use to join the textual elements of the vector."}, "prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- prefix (optional): The prefix to add at the beginning."}, "suffix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\"", "comment": "- suffix (optional): The suffix to add at the end."}},"aliases": [],"group": "Calculations","icon": "join","description": "When `self` is a vector of text values, concatenates all the values by interspersing them with `separator`."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "slice", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": [],"description": "Creates a new vector with the skipping elements until `start` and then continuing until `end` index."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Selections","icon": "parse3","description": "Creates a new `Vector` with only the specified range of elements from the input, removing any elements outside the range."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Selections","icon": "parse3","description": "Creates a new `Vector`, removing any elements from the specified range."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}, "function": {"lazy": false, "default": "[_,_]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior | No_Wrap", "checked": true, "default": "..Report_Error"}},"aliases": ["combine", "join by row position", "merge"],"group": "Calculations","icon": "join2-1","description": "Performs a pair-wise operation passed in `function` on consecutive elements of `self` and `that`. \n\n The result of this function is a `Vector` of length being the shorter of `self` and `that`, containing results of calling `function`.","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "pad", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "elem": {"lazy": false}},"aliases": [],"group": "Calculations","icon": "union","description": "Extend `self` vector to the length of `n` appending elements `elem` to the end. \n\n If the new length `n` is less than existing length, `self` vector is returned."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the first element from the vector, or an `Index_Out_Of_Bounds` if the vector is empty."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get the last element of the vector, or an `Index_Out_Of_Bounds` if the vector is empty."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the second element from the vector, or a `Index_Out_Of_Bounds` if the vector doesn\u0027t have a second element.  Useful when tuples are implemented as vectors."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"order": {"lazy": false, "default": "Sort_Direction.Ascending"}, "on": {"lazy": false, "default": "Nothing"}, "by": {"lazy": false, "default": "Nothing"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Ignore"}},"aliases": ["order_by"],"group": "Calculations","icon": "order","description": "Sort the vector. \n\n By default, elements are sorted in ascending order.  This is a stable sort, meaning that items that compare the same will not have their order changed by the sorting process.","remarks": "! Computational Complexity   The complexities for this sort are:   - *Worst-Case Time:* `O(n * log n)`   - *Best-Case Time:* `O(n)`   - *Average Time:* `O(n * log n)`   - *Worst-Case Space:* `O(n)` additional \n\n? Incomparable values   Incomparable values are either values with different comparators or with   the same comparator returning `Nothing` from its `compare` method.   See the documentation of the `Ordering` module for more info. \n\n? Implementation Note   The sort implementation is based upon an adaptive, iterative mergesort   that requires far fewer than `n * log(n)` comparisons when the vector   is partially sorted. When the vector is randomly ordered, the   performance is equivalent to a standard mergesort. \n\n? Multiple comparators   Elements with different comparators are incomparable by definition.   This case is handled by first grouping the `self` vector into groups   with the same comparator, recursively sorting these groups, and then   merging them back together. The order of the sorted groups in the   resulting vector is based on the order of fully qualified names of   the comparators in the `self` vector, with the exception of the group   for the default comparator, which is always the first group.    Additionally, an `Incomparable_Values` dataflow error will be returned   if the `on_problems` parameter is set to `Report_Error`, or a warning   attached if the `on_problems` parameter is set to `Report_Warning` in   case of encountering incomparable values.    It takes equal advantage of ascending and descending runs in the array,   making it much simpler to merge two or more sorted arrays: simply   concatenate them and sort."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "distinct", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on": {"lazy": false, "default": "x-\u003ex"}},"aliases": ["deduplicate", "unique"],"group": "Selections","icon": "preparation","description": "Keeps only unique elements within the vector, removing any duplicates. \n\n The returned unique elements are kept in the same order as they appeared in the input.  Out of multiple equivalent (equal up to the `on` projection) elements, always the one appearing first in the input is kept."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "duplicates", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"on": {"lazy": false, "default": "x-\u003ex"}},"aliases": ["duplicates"],"group": "Selections","icon": "preparation","description": "Returns only non-unique elements within the vector. \n\n The returned duplicate elements are kept in the same order as the first duplicate appeared in the input."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Returns the vector as a `Vector`."},
{"module": "Standard.Base.Data.Vector", "type": "Vector", "name": "to_list", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Converts the vector to a list with the same elements."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Builder", "arguments": {"elements_java_builder": {"lazy": false}, "warnings_java_builder": {"lazy": false}, "propagate_warnings": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "A builder type for Enso vectors. \n\n A vector builder is a mutable data structure, that allows to gather a number of elements and then convert them to a vector. This is particularly useful when the number of elements is not known upfront.  There are two ways to create and use a `Builder`: `Builder.new` and `Vector.build`. `.build` is the preferred approach. - `Builder.new`: creates a new `Builder`, which you have to   \"close\" with `.to_vector` at the end to get your newly-created   `Vector`. - `Vector.build`: takes a function which uses the `Builder`, and   automatically \"closes\" and returns the newly-created `Vector`.","errors": ""},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Builder", "arguments": {"capacity": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "propagate_warnings": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Creates a new vector builder instance.  `Vector.build` is the preferred way to build `Vector`s.  A vector `Builder` is a mutable data structure, that allows for gathering a number of elements and then converting them into a vector. This is particularly useful when the number of elements is not known upfront.  A vector allows to store an arbitrary number of elements in linear memory. It is the recommended data structure for most applications.  The `Vector.build` method is preferred over direct use of `Builder.new`, since it automatically closes and returns the finished `Vector`. The `Builder.new` approach requires the caller to explicitly call `to_vector` at the end, which can be more flexible within imperative code."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "append", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing ! Error", "arguments": {"item": {"lazy": false, "type": "Any ! Error", "checked": true}},"aliases": [],"icon": "join","description": "Appends a new element into this builder.","remarks": "? Appending Dataflow Errors    If a dataflow error is added to the builder, the result depends on   whether the `Builder` is being used from `.build` or created directly   with `new`.    - When using `.build`: The dataflow error is re-thrown by the containing     invocation of `Vector.build`.  The error is not added to the builder.    - When using `Builder.new` directly : The dataflow error is wrapped in     a `Wrapped_Dataflow_Error` and thrown as a `Panic`. The error is not     added to the builder."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "append_vector_range", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing ! Error", "arguments": {"vector": {"lazy": false}, "start": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "end": {"lazy": false, "default": "vector.length"}},"aliases": [],"icon": "join","description": "Appends a part of a given vector to this builder, propagating any errors that the provided elements could have contained.","remarks": "? Appending Dataflow Errors    If a dataflow error is added to the builder, the result depends on   whether the `Builder` is being used from `.build` or created directly   with `new`.    - When using `.build`: The dataflow error is re-thrown by the containing     invocation of `Vector.build`.  The error is not added to the builder.    - When using `Builder.new` directly : The dataflow error is wrapped in     a `Wrapped_Dataflow_Error` and thrown as a `Panic`. The error is not     added to the builder."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "add_warnings", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Save any attached warnings in self.warnings_java_builder."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "unsafe_append", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"item": {"lazy": false}},"aliases": [],"description": "Appends a new element into this builder.","remarks": "? Propagating Dataflow Errors    Since this is an imperative operation which returns Nothing, if the   item to be appended contained a dataflow error, the operation will fail   and unless its result is inspected, the error can very easily be   ignored. To avoid this, prefer to use the `append` operation which will   ensure that dataflow errors are propagated, and not added to the   `Builder`.`"},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets an element from the vector builder at a specified index (0-based)."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Get the first element from the vector, or an `Index_Out_Of_Bounds` if the vector is empty."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "select_row","description": "Get the last element of the vector, or an `Index_Out_Of_Bounds` if the vector is empty."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the current length of the builder."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "is_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this builder is empty."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "not_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if this builder is not empty."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "any", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true}},"aliases": [],"group": "Logical","icon": "preparation","description": "Checks whether a predicate holds for at least one element of this builder."},
{"module": "Standard.Base.Data.Vector", "type": "Builder", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Clones the builder into a Vector."},
{"module": "Standard.Base.Data.Vector", "type": "Map_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Map_Error", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true}, "inner_error": {"lazy": false}},"aliases": [],"description": "Creates a new `Map_Error` from the given index and underlying error."},
{"module": "Standard.Base.Data.Vector", "type": "Map_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Vector", "type": "No_Wrap", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Wrap", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data.Vector", "type": "Wrapped_Error", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Map_Error", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "XML_Document", "arguments": {"java_document": {"lazy": false, "type": "Document", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "from_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}},"aliases": [],"group": "Input","icon": "data_input","description": "Read an XML document from a file. If there is an error reading the file, `File_Error` is thrown. If there is a parsing error, `XML_Error.Parse_Error` is thrown."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "from_stream", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}},"aliases": [],"icon": "data_input","description": "Read an XML document from an input stream. If there is a parsing error, `XML_Error.Parse_Error` is thrown."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "from_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"xml_string": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Conversions","icon": "convert","description": "Read an XML document from a string. If there is a parsing error, `XML_Error.Parse_Error` is thrown."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"doc": {"lazy": false, "type": "Document", "checked": true}},"aliases": [],"description": "Wrap Java\u0027s Document to XML_Document"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "root_element", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the root element of the document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the tag of the root XML element of the document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\".\""}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets a child element of an XML document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "get_child_element", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\".\""}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets the child element of the inner XML Element"},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\".\""}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets a child or attribute of an XML document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "outer_xml", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the raw XML of the document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "inner_xml", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the raw XML of the document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "Existing_File_Behavior.Backup"}, "include_xml_declaration": {"lazy": false, "type": "Boolean", "checked": true, "default": "Boolean.True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["export", "output", "save", "to_file"],"group": "Output","icon": "data_output","description": "Writes (or appends) the xml to the specified file using the supplied encoding. The behavior specified in the `existing_file` parameter will be used if the file exists.  Appending will probably not work as expected for XML documents, as it will append after the root element, which is not valid XML. \n\n If a character cannot be converted to a byte, an `Encoding_Error` is raised. If `on_problems` is set to `Report_Warning` or `Ignore`, it is replaced with a substitute (either \u0027�\u0027 (if Unicode) or \u0027?\u0027 depending on the encoding). Otherwise, the process is aborted. If the path to the parent location cannot be found or the filename is invalid, a `File_Error.Not_Found` is raised. If another error occurs, such as access denied, an `File_Error.IO_Error` is raised. Otherwise, the file is created with the encoded xlm written to it.  The method returns a `File` object for the written file.","remarks": "? Dry Run      If writing to Output context is not enabled (such as in \"Design\" mode),     then this function will write to a temporary file. This temporary file will     be automatically deleted on exit of the Enso process.      This allows for building the workflow without affecting the real files."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "children", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "array_new","description": "Gets the child elements of an XML document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "child_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the number children of an XML document.  `child_count` only counts child elements and child text nodes that are not 100% whitespace. Other node types, such as comments, are not included in the count."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "child_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "text","description": "Gets the unique set of child names of an XML document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "attribute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "if_missing": {"lazy": true, "default": "Error.throw (No_Such_Key.Error self name)"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Get an attribute of an XML document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "attribute_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets a set of the attributes of an XML document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "attributes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "array_new","description": "Gets a Dictionary containing of the attributes of an XML document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "metadata","description": "Gets the text (non-markup) contents of the element and its descendants, if any."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "get_xpath", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Get elements denoted by the given XPath key."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "get_children_by_tag_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tag_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Gets child elements matching a given tag name."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "get_descendants_by_tag_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tag_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Gets descendant elements matching a given tag name. This searches through all descendants of the node, not just immediate children."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this XML_Document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this XML_Document."},
{"module": "Standard.Base.Data.XML", "type": "XML_Document", "name": "to_default_visualization_data", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Transform the XML document into text for displaying as part of its default visualization."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "XML_Element", "arguments": {"java_element": {"lazy": false, "type": "Element", "checked": true}, "children_cache": {"lazy": true, "type": "Vector (XML_Element | Text)", "checked": true}},"aliases": []},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_element": {"lazy": false}},"aliases": [],"description": "Build a new XML_Element, populating the lazy `children_cache` field."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the tag of an XML element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\".\""}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets a child of an XML element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\".\""}},"aliases": [],"group": "Selections","icon": "parse3","description": "Gets a child or attribute of an XML element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "children", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "array_new","description": "Gets the child elements of an XML element.  `children` only returns child elements and child text nodes that are not 100% whitespace. Other node types, such as comments, are not included."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "child_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the number children of an XML element.  `child_count` only counts child elements and child text nodes that are not 100% whitespace. Other node types, such as comments, are not included in the count."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "child_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "text","description": "Gets the unique set of child names of an XML element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "attribute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "if_missing": {"lazy": true, "default": "Error.throw (No_Such_Key.Error self name)"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Get an attribute of an XML element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "attribute_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets a set of the attributes of an XML element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "attributes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "array_new","description": "Gets a Dictionary containing of the attributes of an XML element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "metadata","description": "Gets the text (non-markup) contents of the element and its descendants, if any."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "outer_xml", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the raw XML of the element (including tag, attributes and contents)."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "inner_xml", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the raw XML of the contents of the element, not including the outermost tag and attributes."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "Existing_File_Behavior.Backup"}, "include_xml_declaration": {"lazy": false, "type": "Boolean", "checked": true, "default": "Boolean.True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["export", "output", "save", "to_file"],"group": "Output","icon": "data_output","description": "Writes (or appends) the xml to the specified file using the supplied encoding. The behavior specified in the `existing_file` parameter will be used if the file exists.  Appending will probably not work as expected for XML documents, as it will append after the root element, which is not valid XML. \n\n If a character cannot be converted to a byte, an `Encoding_Error` is raised. If `on_problems` is set to `Report_Warning` or `Ignore`, it is replaced with a substitute (either \u0027�\u0027 (if Unicode) or \u0027?\u0027 depending on the encoding). Otherwise, the process is aborted. If the path to the parent location cannot be found or the filename is invalid, a `File_Error.Not_Found` is raised. If another error occurs, such as access denied, an `File_Error.IO_Error` is raised. Otherwise, the file is created with the encoded xlm written to it.  The method returns a `File` object for the written file.","remarks": "? Dry Run      If writing to Output context is not enabled (such as in \"Design\" mode),     then this function will write to a temporary file. This temporary file will     be automatically deleted on exit of the Enso process.      This allows for building the workflow without affecting the real files."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "get_xpath", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Get elements denoted by the given XPath key."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "get_children_by_tag_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tag_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Gets child elements matching a given tag name."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "get_descendants_by_tag_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tag_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "parse3","description": "Gets descendant elements matching a given tag name. This searches through all descendants of the node, not just immediate children."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this XML_Element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this XML_Element."},
{"module": "Standard.Base.Data.XML", "type": "XML_Element", "name": "to_default_visualization_data", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"nested": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "as_js_object": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Transform the vector into text for displaying as part of its default visualization."},
{"module": "Standard.Base.Data.XML", "type": "XML_Error", "name": "Parse_Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "XML_Error", "arguments": {"line_number": {"lazy": false, "type": "Integer", "checked": true}, "column_number": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "An error that indicates that the XML data could not be parsed."},
{"module": "Standard.Base.Data.XML", "type": "XML_Error", "name": "Other", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "XML_Error", "arguments": {"error": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Any other XML-related Java exception."},
{"module": "Standard.Base.Data.XML", "type": "XML_Error", "name": "handle_java_exceptions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Utility method for running an action with Java exceptions mapping."},
{"module": "Standard.Base.Data.XML", "type": "XML_Error", "name": "wrap_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"exception": {"lazy": false, "type": "JException", "checked": true}},"aliases": [],"description": "Converts a Java `Exception` into its Enso counterpart."},
{"module": "Standard.Base.Data.XML", "type": "XML_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the XML_Error to a human-readable format."},
{"module": "Standard.Base.Data.XML", "type": "", "name": "only_wanted_nodes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node_list": {"lazy": false, "type": "NodeList", "checked": true}},"aliases": [],"description": "Filter out unwanted nodes. Wanted nodes are: - Elements - Text (if not completely whitespace) - Attribute values (which only arise in the case of XPath keys)"},
{"module": "Standard.Base.Data.XML", "type": "", "name": "build_child_list", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_element": {"lazy": false}},"aliases": [],"description": "Build the child list, filtering out unwanted child nodes."},
{"module": "Standard.Base.Data.XML", "type": "", "name": "child_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node": {"lazy": false, "type": "XML_Element | XML_Document", "checked": true}},"aliases": [],"description": "Create the element selector for an XML document or element."},
{"module": "Standard.Base.Data.XML", "type": "", "name": "write_impl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node": {"lazy": false, "type": "Node", "checked": true}, "path": {"lazy": false, "type": "Writable_File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "Existing_File_Behavior.Backup"}, "include_xml_declaration": {"lazy": false, "type": "Boolean", "checked": true, "default": "Boolean.True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "write an XML document or element to a file."},
{"module": "Standard.Base.Enso_Cloud.Internal.Audit_Log", "type": "Audit_Log", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Audit_Log", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Audit_Log", "type": "Audit_Log", "name": "report_event", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing", "arguments": {"event_type": {"lazy": false, "type": "Text", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}, "metadata": {"lazy": false, "type": "JS_Object", "checked": true, "default": "JS_Object.from_pairs []"}, "async": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Reports an event to the audit log. The event is submitted asynchronously.","remarks": "? Restricted Fields    The following fields are added by the system and should not be included   in the provided metadata:   - `type`   - `operation`   - `localTimestamp`   - `projectName`   - `projectSessionId`"},
{"module": "Standard.Base.Enso_Cloud.Internal.Audit_Log", "type": "Audit_Log_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Audit_Log_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}, "cause": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Audit_Log", "type": "Audit_Log_Error", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Service", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Authentication_Service", "arguments": {"auth_data": {"lazy": false, "type": "Ref Authentication_Data", "checked": true}},"aliases": [],"description": "TODO: We cannot mark this constructor as `private` until we change token tests in `Enso_Cloud_Spec` to run with `--disable-private-check`."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Service", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Authentication_Service", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Service", "name": "get_access_token", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Service", "name": "force_refresh", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing", "arguments": {},"aliases": [],"description": "Refreshes the access token using the refresh token, regardless of its freshness."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Data", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Authentication_Data", "arguments": {"access_token": {"lazy": false, "type": "Text", "checked": true}, "expire_at": {"lazy": false, "type": "Date_Time", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Authentication_Data", "name": "read_from_credentials", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Authentication_Data", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Refresh_Token_Data", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Refresh_Token_Data", "arguments": {"client_id": {"lazy": false, "type": "Text", "checked": true}, "refresh_url": {"lazy": false, "type": "Text", "checked": true}, "refresh_token": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Refresh_Token_Data", "name": "read_from_credentials", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Refresh_Token_Data", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "Refresh_Token_Data", "name": "fetch_new_access_token", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Authentication_Data", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "get_access_token", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns an access token for the current user, that should be valid for at least 2 more minutes.  If the current token is expired or \u003c2m from expiration, it will be refreshed and a new one will be returned. Because of that, this method may make network requests."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "refresh_access_token", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Forcibly refreshes the access token."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "credentials_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "instantiate_authentication_service", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The method called from Java that creates a new instance of the service, to be stored in the global state."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "token_early_refresh_period", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The amount of time before the token expiration that we pro-actively refresh it to reduce the chance of it expiring during a request."},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "is_refresh_token_expired", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"status": {"lazy": false}, "message": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Authentication", "type": "", "name": "file_get_required_string_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"json": {"lazy": false}, "prefix": {"lazy": false}, "field_name": {"lazy": false}},"aliases": [],"description": "A sibling to `get_required_field`. This one raises `Illegal_State` error, because it is dealing with local files and not cloud responses."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_File_Data_Link", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}, "format_json": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_File_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "as_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_File", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Enso_File_Data_Link", "name": "as_writable_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_File", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Data_Link_With_Input_Stream", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Data_Link_With_Output_Stream", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "Writable_Data_Link", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Data_Link", "type": "File_Like_Data_Link", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "Tag", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Tag", "arguments": {"value": {"lazy": false, "type": "Text", "checked": true}, "id": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "We are not including the color, as we are not using it yet. Once needed, it should be added."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "upload_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_File", "arguments": {"local_file": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "Enso_File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "generic_create_asset", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"destination": {"lazy": false, "type": "Enso_File", "checked": true}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true}, "create_action": {"lazy": false, "type": "Existing_Enso_Asset -> (Existing_Enso_Asset | Nothing) -> Dictionary -> Any", "checked": true}},"aliases": [],"description": "A helper function that gathers the common logic for checking existence of a created asset and its parent directory.  The `create_action` function is called with the existing asset for the parent directory and for the file, if it already exists, or `Nothing` otherwise, and with a mapping of error handlers that may be added to the request."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "perform_upload", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "Enso_File", "checked": true}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true}, "generate_request_body_and_result": {"lazy": true}},"aliases": [],"description": "`generate_request_body_and_result` should return a pair, where the first element is the file to be uploaded and the second element is the result to be returned. It is executed lazily, only after all pre-conditions are successfully met."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "_send_chunk_with_retries", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false}, "request_body": {"lazy": false}, "attempt": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "create_directory_with_parents", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset", "arguments": {"target": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": [],"description": "Creates a directory at the given path, also creating parent directories if needed."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "create_datalink_from_stream_action", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "Enso_File", "checked": true}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true}, "stream_action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "update_asset_description", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"asset": {"lazy": false, "type": "Enso_File", "checked": true}, "description": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "update_asset_labels", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"asset": {"lazy": false, "type": "Enso_File", "checked": true}, "new_labels": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "create_tag", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "color": {"lazy": false, "type": "Color", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "list_tags", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Tag", "arguments": {},"aliases": [],"description": "Returns a list of known tags."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "random_tag_color", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Color", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "does_tag_exist", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Helpers", "type": "", "name": "create_tags_if_not_exist", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Write_Strategy", "type": "", "name": "instance", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "In the Enso_File, we use the Overwrite strategy for Backup. That is because, the Cloud keeps versions of the file by itself, so there is no need to duplicate its work on our own - just overwriting the file still ensures we have a backup."},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Write_Strategy", "type": "", "name": "create_dry_run_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "copy_original": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Write_Strategy", "type": "", "name": "remote_write_with_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "existing_file_behavior": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_File_Write_Strategy", "type": "", "name": "copy_from_local", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "Enso_File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Path", "arguments": {"path_segments": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Path", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "root", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "delimiter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "protocol_prefix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "is_root", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "parent", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Path", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Path", "arguments": {"subpath": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "is_descendant_of", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"other": {"lazy": false, "type": "Enso_Path", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "Enso_Path", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Enso_Path", "type": "", "name": "normalize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"segments": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset", "arguments": {"title": {"lazy": false, "type": "Text", "checked": true}, "id": {"lazy": false, "type": "Text", "checked": true}, "asset_type": {"lazy": false, "type": "Enso_Asset_Type", "checked": true}, "metadata": {"lazy": false, "type": "Asset_Metadata|Nothing", "checked": true}},"aliases": [],"description": "Represents an existing asset within the Enso cloud.  The metadata represents additional information about the asset. It is stored if it was available in a response. It may not be present for entries saved in cache after an upload operation that does not return metadata."},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "get_asset_reference_for", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset ! File_Error", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}, "want_metadata": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Fetches the basic information about an existing file from the Cloud. It will fail if the file does not exist."},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "resolve_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}, "if_not_found": {"lazy": true}},"aliases": [],"description": "Resolves a path to an existing asset in the cloud."},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "from_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset", "arguments": {"json": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}, "title": {"lazy": false, "type": "Text", "checked": true}, "metadata": {"lazy": false, "type": "Asset_Metadata | Nothing", "checked": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "internal_uri", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Target URI for the api"},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "asset_uri", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "get_file_description", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"want_presinged_url": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Fetches the basic information about a file from the Cloud endpoint."},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Existing_Enso_Asset", "name": "list_directory", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Asset_Metadata", "arguments": {"modified_at": {"lazy": false, "type": "Date_Time", "checked": true}, "description": {"lazy": false, "type": "Text|Nothing", "checked": true}, "labels": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Metadata", "name": "from_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Asset_Metadata", "arguments": {"json": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Asset_Cache", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "asset_prefix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "asset_key", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "invalidate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "invalidate_subtree", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "invalidate_all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "Asset_Cache", "name": "update", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}, "asset": {"lazy": false, "type": "Existing_Enso_Asset", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "", "name": "asset_type_from_id", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Existing_Enso_Asset", "type": "", "name": "fetch_asset_reference", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Enso_Asset ! File_Error", "arguments": {"file": {"lazy": false, "type": "Enso_File", "checked": true}, "want_metadata": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Returns the cached reference or fetches it from the cloud."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "cloud_root_uri", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "authorization_header", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Construct the authorization header for the request"},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "assets_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for listing folders"},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "directory_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for listing folders."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "files_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for file details metadata."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "projects_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for project information."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "secrets_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for Secrets API."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "datalinks_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for DataLinks API."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "tags_api", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Root address for managing labels."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "flush_caches", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Flushes all cloud caches, including the authentication data (so the next request will re-read the credentials file)."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "http_request_as_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any ! Enso_Cloud_Error", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "url": {"lazy": false, "type": "URI", "checked": true}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}, "additional_headers": {"lazy": false, "type": "Vector", "checked": true, "default": "[]"}, "error_handlers": {"lazy": false, "type": "Dictionary Text (Any -> Any)", "checked": true, "default": "Dictionary.empty"}, "retries": {"lazy": false, "type": "Integer", "checked": true, "default": "3"}},"aliases": [],"description": "Performs a standard request to the Enso Cloud API, parsing the result as JSON."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "http_request", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Response ! Enso_Cloud_Error", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "url": {"lazy": false, "type": "URI", "checked": true}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}, "additional_headers": {"lazy": false, "type": "Vector", "checked": true, "default": "[]"}, "error_handlers": {"lazy": false, "type": "Dictionary Text (Any -> Any)", "checked": true, "default": "Dictionary.empty"}, "retries": {"lazy": false, "type": "Integer", "checked": true, "default": "3"}},"aliases": [],"description": "Performs a standard request to the Enso Cloud API, returning a raw response on success, but handling the error responses.  This method has built-in retry mechanism that may retry the request if it failed due to a network error or access token expiration.  Custom error handlers can be provided as a mapping from error codes (defined in the cloud project) to functions that take the full JSON payload and return a custom error."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "get_cached", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "action": {"lazy": true}, "cache_duration": {"lazy": false, "type": "Duration | Nothing", "checked": true, "default": "Duration.new seconds=60"}},"aliases": [],"description": "Returns the cached value for the given key, or computes it using the given action and caches it for future use. If `cache_duration` is set to `Nothing`, then the cache is always skipped."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "invalidate_cache", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Invalidates the cache entry for the given key."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "invalidate_caches_with_prefix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Invalidates all cache entries that share a common prefix."},
{"module": "Standard.Base.Enso_Cloud.Internal.Utils", "type": "", "name": "set_cached", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false}, "cache_duration": {"lazy": false, "type": "Duration | Nothing", "checked": true, "default": "Duration.new seconds=60"}},"aliases": [],"description": "If `cache_duration` is set to `Nothing`, then this action does not do anything."},
{"module": "Standard.Base.Enso_Cloud.Cloud_Caching_Settings", "type": "", "name": "set_file_cache_ttl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED UNSTABLE", "returnType": "", "arguments": {"duration": {"lazy": false, "type": "Duration | Nothing", "checked": true}},"aliases": [],"description": "Sets for how long is Enso Cloud file information cached without checking for external updates.  The default TTL is 60 seconds.  Side effects from this Enso workflow will invalidate the cache immediately, but any external operations (done from other Enso instances) will not be visible until a cached value expires. Thus if the workflow is expected to co-operate with other workflows, it may be useful to decrease the cache TTL or disable it completely by passing `Nothing`.  Note that completely disabling the caching will affect performance, as some generic operations may perform multiple cloud requests.  Changing the TTL invalidates all existing cache entries, because their expiration time was calculated using the old TTL."},
{"module": "Standard.Base.Enso_Cloud.Cloud_Caching_Settings", "type": "", "name": "get_file_cache_ttl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Duration | Nothing", "arguments": {},"aliases": [],"description": "Returns the current file cache TTL."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Data_Link", "arguments": {},"aliases": [],"description": "Helper methods allowing to manipulate the raw configuration of data links."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "read_config", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "JS_Object", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Reads the raw configuration data of a data-link."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "write_config", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}, "config": {"lazy": false, "type": "JS_Object", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "skip_validation": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Writes a data-link configuration to a file."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "validate_config", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Nothing ! Missing_Data_Link_Library | Illegal_State", "arguments": {"config": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Checks if the config represents a valid data-link.  If the library providing the data-link is not imported, this function will fail with `Missing_Data_Link_Library`, even if the config would be valid."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "copy", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Any ! File_Error", "arguments": {"source": {"lazy": false, "type": "File_Like", "checked": true}, "target": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Copies the data-link configuration from one place to another.  The operation does not follow the data links, but copies the configuration between the provided files."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "move", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Any ! File_Error", "arguments": {"source": {"lazy": false, "type": "File_Like", "checked": true}, "target": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Moves the data-link configuration from one place to another.  The operation does not follow the data links, but copies the configuration between the provided files."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "read_raw_config", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Reads the raw configuration data of a data-link, as plain text.  This is should mostly be used for testing, `read_config` is preferred for normal use."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "write_raw_config", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}, "raw_content": {"lazy": false, "type": "Text", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Writes raw data as the data-link configuration.  This is should mostly be used for testing, `write_config` is preferred for normal use."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "is_data_link_from_metadata", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"file_metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Checks if the given entity is a data link, based on its metadata (content type and file name).","remarks": "! Files   For regular files, it is preferred to use the `is_data_link_file` method,   as it can rely on custom logic that may be more efficient and more   precise (e.g. correctly distinguishing links from directories with unexpected name suffix)."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "is_data_link_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"file": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Checks if the given file represents a data link."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link", "name": "is_data_link_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if the given file name ends with the `.datalink` suffix associated with data links. This is a necessary but not sufficient condition for a file to be a data link, various file systems may impose additional constraints."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link_From_File", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_From_File", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link_From_File", "name": "is_data_link", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Checks if the given file is a data-link."},
{"module": "Standard.Base.Enso_Cloud.Data_Link", "type": "Data_Link_From_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Files may sometimes be converted to File_Like. If they implement `Data_Link_From_File`, we want to inherit that implementation."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Input_Stream", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_With_Input_Stream", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Input_Stream", "name": "find", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}, "if_not_supported": {"lazy": false, "default": "Error.throw (Illegal_Argument.Error \"The \"+(data_link_name data_link_instance)+\" cannot be opened as a stream.\")"}},"aliases": [],"description": "Creates a `Data_Link_With_Input_Stream` from a data link instance, if that data link supports streaming. If it does not, an error is thrown."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Input_Stream", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": [],"description": "Opens the data pointed at by the data link as a raw stream."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Output_Stream", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_With_Output_Stream", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Output_Stream", "name": "find", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}, "if_not_supported": {"lazy": false, "default": "Error.throw (Illegal_Argument.Error \"The \"+(data_link_name data_link_instance)+\" does not support writing raw data to it.\")"}},"aliases": [],"description": "Creates a `Data_Link_With_Output_Stream` from a data link instance, if that data link supports streaming. If it does not, an error is thrown."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Data_Link_With_Output_Stream", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": [],"description": "Opens the data pointed at by the data link as a raw stream."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Writable_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_Data_Link", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Writable_Data_Link", "name": "find", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}, "if_not_supported": {"lazy": false, "default": "Error.throw (Illegal_Argument.Error \"The \"+(data_link_name data_link_instance)+\" does not support writing.\")"}},"aliases": [],"description": "Creates a `Writable_Data_Link` from a data link instance, if that data link supports writing. If it does not, an error is thrown."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "Writable_Data_Link", "name": "as_writable_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_File", "arguments": {},"aliases": [],"description": "Returns the `Writable_File` instance for the target of the data link."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "File_Like_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Like_Data_Link", "arguments": {"underlying": {"lazy": false}, "as_file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Capabilities", "type": "File_Like_Data_Link", "name": "find", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}, "if_not_supported": {"lazy": false, "default": "Error.throw (Illegal_Argument.Error \"The \"+(data_link_name data_link_instance)+\" is not a link to a file object.\")"}},"aliases": [],"description": "Creates a `Writable_Data_Link` from a data link instance, if that data link supports writing. If it does not, an error is thrown."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "Data_Link_Source_Metadata", "name": "Cloud_Asset", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Data_Link_Source_Metadata", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A data link coming from Enso Cloud."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "Data_Link_Source_Metadata", "name": "Unknown", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Data_Link_Source_Metadata", "arguments": {},"aliases": [],"description": "No information is available about the source."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "data_link_encoding", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "All data-link config files should be saved with UTF-8 encoding."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "data_link_content_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "data_link_extension", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "interpret_json_as_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"json": {"lazy": false}, "source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true, "default": "..Unknown"}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "read_and_interpret_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "interpret_existing_asset_as_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"asset": {"lazy": false, "type": "Existing_Enso_Asset", "checked": true}},"aliases": [],"description": "This method should only be called on an asset that is known to be a data link."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "read_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}, "format": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "read_data_link_as_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}, "open_options": {"lazy": false, "type": "Vector", "checked": true}, "f": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "write_data_link_as_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}, "open_options": {"lazy": false, "type": "Vector", "checked": true}, "f": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "interpret_data_link_target_as_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "interpret_data_link_target_as_file_or_nothing", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any | Nothing", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "interpret_data_link_as_writable_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_File", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "save_data_link_to_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}, "target_file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "parse_secure_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text | Enso_Secret", "arguments": {"json": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "secure_value_to_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object | Text", "arguments": {"value": {"lazy": false, "type": "Text | Enso_Secret", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "parse_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any ! Illegal_State", "arguments": {"json": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "data_link_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"data_link_instance": {"lazy": false}},"aliases": [],"description": "Returns a human readable name of the data link type, based on its type."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "disallow_links_in_copy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false}, "target": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "disallow_links_in_move", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false}, "target": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "store_as_secret", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Secret", "arguments": {"base_location": {"lazy": false, "type": "Enso_File", "checked": true}, "name_hint": {"lazy": false, "type": "Text", "checked": true}, "secure_value": {"lazy": false, "type": "Text|Enso_Secret", "checked": true}},"aliases": [],"description": "Takes a secure value (either a Text or Enso_Secret) and returns a secret representation of it.  If given an existing secret, it will be returned as-is. However, if given a plain text, it will create a new secret in the provided directory.  Because it may be creating new secret, this should only be run within an enabled Output context."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "save_password_for_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Secret", "arguments": {"data_link_location": {"lazy": false, "type": "Enso_File", "checked": true}, "secure_value": {"lazy": false, "type": "Text|Enso_Secret", "checked": true}, "name_hint": {"lazy": false, "type": "Text", "checked": true, "default": "\"password\""}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "is_directory", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "check_file_directly": {"lazy": true}},"aliases": [],"description": "Common logic for checking if the target of a datalink is a directory or falling back to a direct check."},
{"module": "Standard.Base.Enso_Cloud.Data_Link_Helpers", "type": "", "name": "is_regular_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "check_file_directly": {"lazy": true}},"aliases": [],"description": "Common logic for checking if the target of a datalink is a regular file or falling back to a direct check."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_File", "arguments": {"enso_path": {"lazy": false, "type": "Enso_Path", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "data_input","description": "Resolves an `enso://` path and returns the corresponding `Enso_File` instance."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "home", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File", "arguments": {},"aliases": [],"icon": "folder","description": "Represents the current user\u0027s home directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "root", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "folder","description": "Represents the root folder of the organization.","remarks": "? Organization Root Directory    The organization root directory cannot be directly written into.   You should put your files and projects in a subdirectory dedicated to a   given user or team in the `Users` or `Teams` subdirectories within it."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "current_working_directory", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "folder","description": "Represents the current working directory.  If the workflow is running on the Cloud, this will be the directory containing the current project.  If the workflow is running locally, this will default to the root directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "cloud_project_parent_directory", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The parent directory containing the currently open project if in the Cloud, or `Nothing` if running locally."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "create_label", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "color": {"lazy": false, "type": "Color", "checked": true}},"aliases": [],"group": "Metadata","icon": "data_output","description": "Creates a new label with the given name and color."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "asset_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the folder or file exists.","remarks": "? Data Links   If the file is a data link, this checks if the data link itself exists.    It does not tell anything about existence of the data link target."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "size", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the size of a file in bytes.","remarks": "? Data Links   If the file is a data link that points to a file, the size of the    target file will be returned."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "creation_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Time", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the creation time of a file.","remarks": "? Data Links   If the file is a data link, this returns the creation time of the data    link."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "last_modified_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Time", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the last modified time of a file.","remarks": "? Data Links   If the file is a data link, this returns the modification time of the    data link."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "description", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the description associated with the file in Enso Cloud.  By default, the description is empty. It can be set in the Dashboard, or using the `set_description` method."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "set_description", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File", "arguments": {"description": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Metadata","icon": "data_output","description": "Sets the description associated with the file in Enso Cloud.","returns": "- The file on which it was called."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "labels", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the labels associated with the file in Enso Cloud."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "add_label", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Metadata","icon": "data_output","description": "Adds a label to the file in Enso Cloud.  If the label with the given name did not exist before, it is created with a random color associated with it. If you want to set a specific color, use `Enso_File.create_label` before calling this method.","returns": "- The file on which it was called.","remarks": "? Race Conditions    Adding labels is not atomic. If two processes are modifying labels of   the same asset at the same time, some changes may be lost."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "remove_label", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Metadata","icon": "data_output","description": "Removes a label from the file in Enso Cloud.","returns": "- A boolean value indicating if the file had the label before the operation.","remarks": "? Race Conditions    Removing labels is not atomic. If two processes are modifying labels of   the same asset at the same time, some changes may be lost."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "set_labels", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File", "arguments": {"labels": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"group": "Metadata","icon": "data_output","description": "Sets the set of labels associated with the file in Enso Cloud. Any other labels than the ones provided are removed from the file.  If any of the provided labels did not exist before, it is created with a random color associated with it. If you want to set a specific color, use `Enso_File.create_label` before calling this method.","returns": "- The file on which it was called."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "is_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if this is a folder.","remarks": "? Data Links   If the file is a data link, this checks whether the target of the data    link is a directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "is_regular_file", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if this is a regular file.","remarks": "? Data Links   If the file is a data link, this checks whether the target of the data    link is a regular file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "is_data_link", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "parent", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "folder","description": "Finds the parent Enso_File for this file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "path", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the path of this file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "is_descendant_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"other": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if `self` is a descendant of `other`."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this S3_File."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new output stream for this file and runs the specified action on it.  The created stream is automatically closed when `action` returns (even if it returns exceptionally)."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new input stream for this file and runs the specified action on it. \n\n The created stream is automatically closed when `action` returns (even if it returns exceptionally)."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["import", "load", "open"],"group": "Input","icon": "data_input","description": "Read a file using the specified file format"},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "read_bytes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["load bytes", "open bytes"],"icon": "data_input","description": "Reads all bytes in this file into a byte vector."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "read_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load text", "open text"],"icon": "data_input","description": "Reads the whole file into a `Text`, with specified encoding."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the name of this file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "extension", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the extension of the file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "list", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_filter": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Input","icon": "data_input","description": "Lists assets contained in this directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "create_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Output","icon": "folder_add","description": "Creates the directory represented by this file if it did not exist.  It also creates parent directories if they did not exist."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "delete", "methodType": "method", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Output","icon": "trash","description": "Deletes the file or directory.","remarks": "? Data Links   If the file is a data link, this will delete the link itself, not   affecting its target."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "delete_if_exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Deletes the file if it had existed."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "copy_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Copies the file to the specified destination."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "move_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Moves the file to the specified destination."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File | Any ! Not_Found", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Operators","icon": "folder","description": "Resolves a file or directory within this directory."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "resolve_single_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"part": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An internal helper method that resolves a single part (subpath) of a path, used by `Path_Resolver`."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Returns the text representation of the file descriptor."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_File", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the file descriptor to a JSON object."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "Project", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": [],"description": "Represents an Enso project."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "File", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": [],"description": "Represents an file."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "Directory", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": [],"description": "Represents a folder."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "Secret", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": [],"description": "Represents a secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "Data_Link", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_Asset_Type", "arguments": {},"aliases": [],"description": "Represents a connection to another data source."},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "", "name": "list_assets", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Existing_Enso_Asset", "arguments": {"parent": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Enso_Asset_Type", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "File_Format_Metadata", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "File_Like", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Writable_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_File", "type": "Data_Link_From_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Secret", "arguments": {"internal_name": {"lazy": false, "type": "Text", "checked": true}, "id": {"lazy": false, "type": "Text", "checked": true}, "internal_path": {"lazy": false, "type": "Enso_Path", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "create", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Text", "checked": true}, "parent": {"lazy": false, "type": "Enso_File | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Output","icon": "edit","description": "Create a new secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "list", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"parent": {"lazy": false, "type": "Enso_File | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Input","icon": "key","description": "Gets a list of all the secrets in the folder."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "get", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "parent": {"lazy": false, "type": "Enso_File | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Input","icon": "key","description": "Get a Secret if it exists."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "resolve_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Secret ! Not_Found", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "exists", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "parent": {"lazy": false, "type": "Enso_File | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if a Secret exists."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The name of the secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "path", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The path of the secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "delete", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Output","icon": "trash","description": "Deletes a secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "update_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_value": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Output","icon": "edit","description": "Updates the value of a secret.","remarks": "! Secret Caching   Note that secret values are cached, so the update may not be visible in   other workflows unless they are restarted. You can also use the   `Enso_User.flush_caches` function to flush the caches."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a text representation of the secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a display text representation of the secret."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the secret to a JSON object."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret_Error", "name": "Access_Denied", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Secret_Error", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Enso_Secret_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "Plain_Text", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Derived_Secret_Value", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "Secret_Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Derived_Secret_Value", "arguments": {"secret": {"lazy": false, "type": "Enso_Secret", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "Concat", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Derived_Secret_Value", "arguments": {"left": {"lazy": false, "type": "Derived_Secret_Value", "checked": true}, "right": {"lazy": false, "type": "Derived_Secret_Value", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "Base_64_Encode", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Derived_Secret_Value", "arguments": {"value": {"lazy": false, "type": "Derived_Secret_Value", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "+", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false, "type": "Derived_Secret_Value", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "to_plain_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts to a plain text value, if the value contains no secrets. If the value contains secrets, it raises an error."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "simplify", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "If this value does not contains any secrets, it will be simplified to a plain Text value, otherwise it will be returned as is."},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "Derived_Secret_Value", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_Secret", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "", "name": "as_hideable_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "", "name": "secret_resource_uri", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"secret": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_Secret", "type": "", "name": "secret_asset_uri", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"secret": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "User", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_User", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "email": {"lazy": false, "type": "Text", "checked": true}, "id": {"lazy": false, "type": "Text", "checked": true}, "is_enabled": {"lazy": false, "type": "Boolean", "checked": true}, "root_directory_id": {"lazy": false, "type": "Text", "checked": true}, "organization_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Represents a user within Enso Cloud."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "current", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_User", "arguments": {},"aliases": [],"icon": "people","description": "Fetch the current user."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "is_logged_in", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Checks if the user is logged in."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "list", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "people","description": "Lists all known users."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "flush_caches", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "trash","description": "Flushes all cloud caches. For example, it will flush cached secrets, ensuring that new values will be fetched the next time the secrets are accessed."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Return a string representation of this user."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this user."},
{"module": "Standard.Base.Enso_Cloud.Enso_User", "type": "Enso_User", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Not_Logged_In", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Not_Logged_In", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Not_Logged_In", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Cloud_Session_Expired", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Cloud_Session_Expired", "arguments": {"underlying_error": {"lazy": false}},"aliases": [],"description": "The `underlying_error` is not shown in the error message, but is saved for debugging purposes."},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Cloud_Session_Expired", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Enso_Cloud_Error", "name": "Unexpected_Service_Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Cloud_Error", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}, "status_code": {"lazy": false, "type": "HTTP_Status_Code", "checked": true}, "payload": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An unhandled error response from Enso Cloud."},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Enso_Cloud_Error", "name": "Invalid_Response_Payload", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Cloud_Error", "arguments": {"cause": {"lazy": false, "type": "Text | Any", "checked": true}},"aliases": [],"description": "An error response from Enso Cloud that could not be parsed."},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Enso_Cloud_Error", "name": "Unauthorized", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Cloud_Error", "arguments": {},"aliases": [],"description": "An error response from Enso Cloud indicating that the provided user data is invalid."},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Enso_Cloud_Error", "name": "Connection_Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Cloud_Error", "arguments": {"cause": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "An error indicating issues with connecting to Enso Cloud."},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Enso_Cloud_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Missing_Data_Link_Library", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Missing_Data_Link_Library", "arguments": {"library_name": {"lazy": false, "type": "Text", "checked": true}, "data_link_type": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Errors", "type": "Missing_Data_Link_Library", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Enso_Cloud.Public_Utils", "type": "", "name": "get_required_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "js_object": {"lazy": false}, "show_value": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_type": {"lazy": false, "default": "Any"}},"aliases": [],"description": "A helper that extracts a required field from a response and handles unexpected response structure."},
{"module": "Standard.Base.Enso_Cloud.Public_Utils", "type": "", "name": "get_optional_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "js_object": {"lazy": false}, "if_missing": {"lazy": true, "default": "Nothing"}, "show_value": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_type": {"lazy": false, "default": "Any"}},"aliases": [],"description": "A helper that extracts an optional field from a response and handles unexpected response structure.  This method treats the field missing or being set to `null` as the same."},
{"module": "Standard.Base.Enso_Cloud.Public_Utils", "type": "", "name": "cloud_http_request_for_test", "methodType": "static", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"method": {"lazy": false}, "url_suffix": {"lazy": false}},"aliases": [],"description": "Re-exports parts of the functionality of `http_request_as_json` function that is needed in tests. It should not be used anywhere else and may be removed in the near future."},
{"module": "Standard.Base.Errors.Common", "type": "Not_Found", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Not_Found", "arguments": {},"aliases": [],"description": "An error indicating that no value was found."},
{"module": "Standard.Base.Errors.Common", "type": "Index_Out_Of_Bounds", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "Index_Out_Of_Bounds", "arguments": {"index": {"lazy": false}, "length": {"lazy": false}},"aliases": [],"description": "An error indicating that a requested index was out of bounds of a collection."},
{"module": "Standard.Base.Errors.Common", "type": "Index_Out_Of_Bounds", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints an index out of bounds error."},
{"module": "Standard.Base.Errors.Common", "type": "Syntax_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Syntax_Error", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "The runtime representation of a syntax error."},
{"module": "Standard.Base.Errors.Common", "type": "Syntax_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Syntax_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Type_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Type_Error", "arguments": {"expected": {"lazy": false}, "actual": {"lazy": false}, "comment": {"lazy": false}},"aliases": [],"description": "The runtime representation of a type error."},
{"module": "Standard.Base.Errors.Common", "type": "Type_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Type_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Type_Error", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Render the error as text."},
{"module": "Standard.Base.Errors.Common", "type": "Compile_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Compile_Error", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "The runtime representation of a compilation error."},
{"module": "Standard.Base.Errors.Common", "type": "Compile_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Compile_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Assertion_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Assertion_Error", "arguments": {"message": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Assertion_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Assertion_Error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Inexhaustive_Pattern_Match", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Inexhaustive_Pattern_Match", "arguments": {"scrutinee": {"lazy": false}},"aliases": [],"description": "The error thrown when a there is no pattern to match on the scrutinee."},
{"module": "Standard.Base.Errors.Common", "type": "Inexhaustive_Pattern_Match", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Inexhaustive_Pattern_Match error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Arity_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Arity_Error", "arguments": {"expected_min": {"lazy": false}, "expected_max": {"lazy": false}, "actual": {"lazy": false}},"aliases": [],"description": "The error thrown when the number of arguments provided to an operation does not match the expected number of arguments."},
{"module": "Standard.Base.Errors.Common", "type": "Arity_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Arity_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Uninitialized_State", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Uninitialized_State", "arguments": {"key": {"lazy": false}},"aliases": [],"description": "The error thrown when the program attempts to read from a state slot that has not yet been initialized."},
{"module": "Standard.Base.Errors.Common", "type": "Uninitialized_State", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Uninitialized_State error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Method", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Method", "arguments": {"target": {"lazy": false}, "symbol": {"lazy": false}},"aliases": [],"description": "The error thrown when the specified symbol does not exist as a method on the target."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Method", "name": "method_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the method name of the method that could not be found."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Method", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the No_Such_Method error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Field", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Field", "arguments": {"value": {"lazy": false}, "field_name": {"lazy": false}},"aliases": [],"description": "The error thrown when the specified symbol does not exist as a field on the value."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Field", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the No_Such_Method error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Module_Not_In_Package_Error", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Module_Not_In_Package_Error", "arguments": {},"aliases": [],"description": "An error that occurs when the enso_project function is called in a file that is not part of a project."},
{"module": "Standard.Base.Errors.Common", "type": "Module_Not_In_Package_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Module_Not_In_Package_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Arithmetic_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Arithmetic_Error", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "An error for when an erroneous arithmetic computation takes place."},
{"module": "Standard.Base.Errors.Common", "type": "Arithmetic_Error", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Capture a Java `ArithmeticException` and convert it to an Enso dataflow error - `Arithmetic_Error.Error`."},
{"module": "Standard.Base.Errors.Common", "type": "Arithmetic_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Arithmetic_Error error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Incomparable_Values", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Incomparable_Values", "arguments": {"left": {"lazy": false}, "right": {"lazy": false}},"aliases": [],"description": "An error that indicates that the two values are not comparable."},
{"module": "Standard.Base.Errors.Common", "type": "Incomparable_Values", "name": "handle_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": true}},"aliases": [],"description": "Catches possible errors from comparing values and throws an `Incomparable_Values` if any occur."},
{"module": "Standard.Base.Errors.Common", "type": "Incomparable_Values", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Incomparable_Values error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Invalid_Array_Index", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Array_Index", "arguments": {"array": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "An error that occurs when a program requests a read from an array index that is out of bounds in the array."},
{"module": "Standard.Base.Errors.Common", "type": "Invalid_Array_Index", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Invalid_Array_Index error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Not_Invokable", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Not_Invokable", "arguments": {"target": {"lazy": false}, "cause": {"lazy": false}},"aliases": [],"description": "An error that occurs when an object is used as a function in a function call, but it cannot be called."},
{"module": "Standard.Base.Errors.Common", "type": "Not_Invokable", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Not_Invokable error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Argument", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Argument", "arguments": {"argument_name": {"lazy": false}},"aliases": [],"description": "Indicates that an argument was passed by name, but the function being called did not take any argument that matched that name."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Argument", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the No_Such_Argument error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Private_Access", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Private_Access", "arguments": {"this_project_name": {"lazy": false, "type": "Text | Nothing", "checked": true}, "target_project_name": {"lazy": false, "type": "Text | Nothing", "checked": true}, "target_method_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An error that occurs when a private (project-private) method is called from a different project."},
{"module": "Standard.Base.Errors.Common", "type": "Private_Access", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Private_Access error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Unsupported_Argument_Types", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unsupported_Argument_Types", "arguments": {"arguments": {"lazy": false}, "message": {"lazy": false}},"aliases": [],"description": "An error that occurs when arguments used in a function call are invalid types for the function."},
{"module": "Standard.Base.Errors.Common", "type": "Unsupported_Argument_Types", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Unsupported_Argument_Types error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Module_Does_Not_Exist", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Module_Does_Not_Exist", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "An error that occurs when the specified module cannot be found."},
{"module": "Standard.Base.Errors.Common", "type": "Module_Does_Not_Exist", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Module_Does_Not_Exist error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Invalid_Conversion_Target", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Conversion_Target", "arguments": {"target": {"lazy": false}},"aliases": [],"description": "An error that occurs when the specified value cannot be converted to a given type."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Conversion", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Conversion", "arguments": {"target": {"lazy": false}, "that": {"lazy": false}, "conversion": {"lazy": false}},"aliases": [],"description": "An error that occurs when the conversion from one type to another does not exist."},
{"module": "Standard.Base.Errors.Common", "type": "No_Such_Conversion", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the No_Such_Conversion error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "No_Conversion_Currying", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Conversion_Currying", "arguments": {"has_this": {"lazy": false}, "has_that": {"lazy": false}, "conversion": {"lazy": false}},"aliases": [],"description": "An error that occurs when an attempt is made to curry a conversion function."},
{"module": "Standard.Base.Errors.Common", "type": "No_Conversion_Currying", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the No_Conversion_Currying error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Forbidden_Operation", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Forbidden_Operation", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "An error that occurs when the action is not allowed to perform the operation in the given context."},
{"module": "Standard.Base.Errors.Common", "type": "Forbidden_Operation", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Forbidden_Operation error to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Dry_Run_Operation", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dry_Run_Operation", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "A warning that the operation has only been performed in a test mode."},
{"module": "Standard.Base.Errors.Common", "type": "Dry_Run_Operation", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Dry_Run_Operation to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Memory", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Out_Of_Memory", "arguments": {"operation": {"lazy": false}},"aliases": [],"description": "An error when Enso run\u0027s out of memory"},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Memory", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"operation": {"lazy": false}, "function": {"lazy": true}},"aliases": [],"description": "Catches possible `OutOfMemoryError` and throws an `Out_Of_Memory` error."},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Memory", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the Out_Of_Memory to a human-readable format."},
{"module": "Standard.Base.Errors.Common", "type": "Missing_Argument", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Missing_Argument", "arguments": {"argument_name": {"lazy": false, "type": "Text", "checked": true}, "function_name": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "call_location": {"lazy": false, "type": "Source_Location | Nothing", "checked": true, "default": "Nothing"}, "message": {"lazy": false, "type": "Text", "checked": true, "default": "\"Provide a value for the argument `\" + argument_name + \"`.\""}},"aliases": [],"description": "Indicates that an expression cannot be evaluated because somewhere within it, a function does not have all required arguments provided."},
{"module": "Standard.Base.Errors.Common", "type": "Missing_Argument", "name": "throw", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"argument_name": {"lazy": false, "type": "Text", "checked": true}, "message_override": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Throws an error saying that a required argument has not been provided."},
{"module": "Standard.Base.Errors.Common", "type": "Missing_Argument", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Additional_Warnings", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Additional_Warnings", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Additional_Warnings", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Common", "type": "Loss_Of_Numeric_Precision", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Loss_Of_Numeric_Precision", "arguments": {"original_value": {"lazy": false}, "new_value": {"lazy": false}},"aliases": [],"description": "Indicates that a numeric conversion of a value has lost precision."},
{"module": "Standard.Base.Errors.Common", "type": "Loss_Of_Numeric_Precision", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Common", "type": "Loss_Of_Numeric_Precision", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Range", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Out_Of_Range", "arguments": {"value": {"lazy": false}, "message": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Range", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Common", "type": "Out_Of_Range", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Response_Too_Large", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Response_Too_Large", "arguments": {"actual_size": {"lazy": false, "type": "Integer|Nothing", "checked": true}, "limit": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Response_Too_Large", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Convert the Java exception to an Enso dataflow error."},
{"module": "Standard.Base.Errors.Common", "type": "Response_Too_Large", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Common", "type": "Response_Too_Large", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Floating_Point_Equality", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Floating_Point_Equality", "arguments": {"location": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Represents a general floating-point equality error, such as a direct comparison."},
{"module": "Standard.Base.Errors.Common", "type": "Floating_Point_Equality", "name": "Used_As_Dictionary_Key", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Floating_Point_Equality", "arguments": {"value": {"lazy": false, "type": "Float", "checked": true}},"aliases": [],"description": "Represents the use of a floating-point value as a `Dictionary` key."},
{"module": "Standard.Base.Errors.Common", "type": "Floating_Point_Equality", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Common", "type": "Floating_Point_Equality", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Failed_To_Load", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Failed_To_Load", "arguments": {"path": {"lazy": false}, "cause": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Errors.Common", "type": "Failed_To_Load", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Errors.Deprecated", "type": "Deprecated", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Deprecated", "arguments": {"type_name": {"lazy": false, "type": "Text", "checked": true}, "method_name": {"lazy": false, "type": "Text", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": []},
{"module": "Standard.Base.Errors.Deprecated", "type": "Deprecated", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the Deprecated warning."},
{"module": "Standard.Base.Errors.Empty_Error", "type": "Empty_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Empty_Error", "arguments": {"collection": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Errors.Empty_Error", "type": "Empty_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the empty error."},
{"module": "Standard.Base.Errors.Encoding_Error", "type": "Encoding_Error", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Encoding_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "One or more byte sequences were not decodable using the Encoding."},
{"module": "Standard.Base.Errors.Encoding_Error", "type": "Encoding_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the encoding error."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Not_Found", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "An error that indicates that the requested file does not exist."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Already_Exists", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Indicates that a destination file already exists."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Access_Denied", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Indicates that the user did not have the permission to complete the requested operation on the given file."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "IO_Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like | Nothing", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A generic IO error."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Directory_Not_Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Indicates that the given directory was not empty, but `recursive` was not set to `True`."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Not_A_Directory", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "Indicates that the given path was expected to be a directory, but it is not. Raised for example when creating a new file or directory inside of a path that is a regular file."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Unsupported_Type", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Indicates that the given file\u0027s type is not supported."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Unsupported_Output_Type", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"format": {"lazy": false, "type": "File_Format | File_Like | Any", "checked": true}, "data_type": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Indicates that the given type cannot be serialized to the provided file format."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "Corrupted_Format", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Error", "arguments": {"file": {"lazy": false, "type": "File_Like | Nothing", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}, "cause": {"lazy": false, "type": "Any | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Indicates that the given file is corrupted, i.e. the data it contains is not in the expected format."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "handle_java_exceptions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File | Nothing", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Utility method for running an action with Java exceptions mapping."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "access_denied", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Raises an error indicating that the user does not have permission to access the file in a given way."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "wrap_io_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File | Nothing", "checked": true}, "io_exception": {"lazy": false}},"aliases": [],"description": "Converts a Java `IOException` into its Enso counterpart."},
{"module": "Standard.Base.Errors.File_Error", "type": "File_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the File error to a human-readable format."},
{"module": "Standard.Base.Errors.Illegal_Argument", "type": "Illegal_Argument", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "Illegal_Argument", "arguments": {"message": {"lazy": false}, "cause": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "A generic error that indicates that the provided argument is not valid for the operation."},
{"module": "Standard.Base.Errors.Illegal_Argument", "type": "Illegal_Argument", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Capture a Java `IllegalArgumentException` and convert it to an Enso dataflow error - `Illegal_Argument.Error`."},
{"module": "Standard.Base.Errors.Illegal_Argument", "type": "Illegal_Argument", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the encoding error."},
{"module": "Standard.Base.Errors.Illegal_State", "type": "Illegal_State", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "Illegal_State", "arguments": {"message": {"lazy": false}, "cause": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "A generic error that indicates that a given operation cannot be performed in some specific conditions."},
{"module": "Standard.Base.Errors.Illegal_State", "type": "Illegal_State", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Capture a Java `IllegalStateException` and convert it to an Enso dataflow error - `Illegal_State.Error`."},
{"module": "Standard.Base.Errors.Illegal_State", "type": "Illegal_State", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the encoding error."},
{"module": "Standard.Base.Errors.No_Such_Key", "type": "No_Such_Key", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "No_Such_Key", "arguments": {"object": {"lazy": false}, "key": {"lazy": false}},"aliases": [],"description": "An error for getting a missing value from a map."},
{"module": "Standard.Base.Errors.No_Such_Key", "type": "No_Such_Key", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the error into a human-readable representation."},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "Ignore", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Problem_Behavior", "arguments": {},"aliases": [],"description": "Ignore the problem and attempt to complete the operation"},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "Report_Warning", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Problem_Behavior", "arguments": {},"aliases": [],"description": "Report the problem as a warning and attempt to complete the operation"},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "Report_Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Problem_Behavior", "arguments": {},"aliases": [],"description": "Report the problem as a dataflow error and abort the operation"},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "attach_problem_after", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"decorated_value": {"lazy": false}, "problem": {"lazy": false}},"aliases": [],"description": "Attaches a problem to the given value according to the expected problem behavior.  If the problem behavior is set to Ignore, the value is returned as-is. If it is set to Report_Warning, the value is returned with the problem attached as a warning. If it is set to Report_Error, the problem is returned in the form of a dataflow error. If the value already contained any dataflow error, that error takes precedence."},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "attach_problem_before", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"problem": {"lazy": false}, "decorated_value": {"lazy": true}},"aliases": [],"description": "Attaches a problem to the given value according to the expected problem behavior.  If the problem behavior is set to Ignore, the value is returned as-is. If it is set to Report_Warning, the value is returned with the problem attached as a warning. If it is set to Report_Error, the problem is returned in the form of a dataflow error."},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "attach_problems_before", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"problems": {"lazy": false}, "decorated_value": {"lazy": true}},"aliases": [],"description": "Attaches problems to the given value according to the expected problem behavior.  If the problem behavior is set to Ignore, the value is returned as-is. If it is set to Report_Warning, the value is returned with the problems attached as warnings. If it is set to Report_Error, the first problem is returned in the form of a dataflow error. The problem takes precedence over any errors that may have been contained in the value - in this case the `decorated_value` is not computed at all."},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "attach_problems_after", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"decorated_value": {"lazy": false}, "problems": {"lazy": false}},"aliases": [],"description": "Attaches problems to the given value according to the expected problem behavior.  If the problem behavior is set to Ignore, the value is returned as-is. If it is set to Report_Warning, the value is returned with the problems attached as warnings. If it is set to Report_Error, the first problem is returned in the form of a dataflow error. If the value already contained any dataflow error, that error takes precedence."},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "handle_errors", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"result": {"lazy": false}, "fallback": {"lazy": true}, "error_type": {"lazy": false, "default": "Any"}},"aliases": [],"description": "A helper method that will handle any errors contained within the result according to the current problem behavior settings. If the `result` does not contain an error, it is returned as-is. Otherwise, if the problem behavior is `Report_Error`, the error will be passed as-is. If it is `Report_Warning`, the error is turned into a warning, and the fallback value is returned with that error attached to it as a warning. If it is `Ignore`, the fallback value is returned and the error is discarded.  The `error_type` parameter can be overridden to catch only some types of errors. By default `Any` error is caught."},
{"module": "Standard.Base.Errors.Problem_Behavior", "type": "Problem_Behavior", "name": "escalate_warnings", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Checks any warnings reported by the `action` and reports them according to this problem behavior - they may be kept as-is, ignored or escalated to errors.  If the `action` itself yields a dataflow error, that error is passed as-is, regardless of the problem behavior settings."},
{"module": "Standard.Base.Errors.Time_Error", "type": "Time_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "Time_Error", "arguments": {"error_message": {"lazy": false}, "cause": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "An error produced while working with time- and date-related methods."},
{"module": "Standard.Base.Errors.Time_Error", "type": "Time_Error", "name": "epoch_start", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Errors.Time_Error", "type": "Time_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the time error."},
{"module": "Standard.Base.Errors.Unimplemented", "type": "Unimplemented", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "Unimplemented", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "A type used to represent that something has not yet been implemented."},
{"module": "Standard.Base.Errors.Unimplemented", "type": "Unimplemented", "name": "throw", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"message": {"lazy": false, "default": "\"\""}},"aliases": [],"description": "A function that can be used to indicate that something hasn\u0027t been implemented yet."},
{"module": "Standard.Base.Errors.Unimplemented", "type": "Unimplemented", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the unimplemented error to a human-readable error message."},
{"module": "Standard.Base.Errors.Wrapped_Error", "type": "Wrapped_Error", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Wrapped_Error", "arguments": {"wrapping_error": {"lazy": false}, "inner_error": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Errors.Wrapped_Error", "type": "Wrapped_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Analyzer", "arguments": {"nodes": {"lazy": false, "type": "Vector (Common_Nodes | Standard_Date_Patterns | ISO_Week_Year_Patterns | Time_Patterns | Time_Zone_Patterns)", "checked": true}, "flattened": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"nodes": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "has_required", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Checks if the given node is contained as one of the nodes, ignoring the optional ones."},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "validate_after_parsing", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"continuation": {"lazy": true}},"aliases": [],"description": "Runs basic validations that can happen on construction of the formatter, regardless of the context."},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "get_parsing_only_warnings", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Prepares a list of warnings that are only reported when parsing using the formatter."},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "check_possible_m_mismatches", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "check_possible_seconds_aliasing", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "has_24h", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "has_12h", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "has_am_pm", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "check_24h_and_am_pm_collision", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "check_missing_am_pm_in_hour_parse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "has_day_and_month_but_not_year", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Analyzer", "type": "Analyzer", "name": "check_missing_year_in_date_parse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter", "type": "", "name": "interpret", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false}, "nodes": {"lazy": false}, "prepare_defaults": {"lazy": false, "default": "True"}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter", "type": "", "name": "get_field_for", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"node": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter", "type": "", "name": "append_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"builder": {"lazy": false}, "field": {"lazy": false}, "representation": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter", "type": "", "name": "text_representation_to_java_style", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"representation": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Text_Representation", "name": "Short_Form", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text_Representation", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Text_Representation", "name": "Long_Form", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text_Representation", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Numeric_Representation", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Numeric_Representation", "arguments": {"digits": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Two_Digit_Year_Representation", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Two_Digit_Year_Representation", "arguments": {"max_year": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Common_Nodes", "name": "Literal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Common_Nodes", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Common_Nodes", "name": "Optional_Section", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Common_Nodes", "arguments": {"inner_nodes": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Standard_Date_Patterns", "name": "Year", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Standard_Date_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation | Two_Digit_Year_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Standard_Date_Patterns", "name": "Quarter", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Standard_Date_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Standard_Date_Patterns", "name": "Month", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Standard_Date_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation | Text_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Standard_Date_Patterns", "name": "Day_Of_Month", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Standard_Date_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Standard_Date_Patterns", "name": "Day_Of_Week", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Standard_Date_Patterns", "arguments": {"representation": {"lazy": false, "type": "Text_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "ISO_Week_Year_Patterns", "name": "Week_Based_Year", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "ISO_Week_Year_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation | Two_Digit_Year_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "ISO_Week_Year_Patterns", "name": "Week_Of_Year", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "ISO_Week_Year_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "ISO_Week_Year_Patterns", "name": "Day_Of_Week", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "ISO_Week_Year_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation | Text_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Patterns", "name": "Hour", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}, "is_24h": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Patterns", "name": "AM_PM", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Patterns", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Patterns", "name": "Minute", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Patterns", "name": "Second", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Patterns", "name": "Fraction_Of_Second", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Patterns", "arguments": {"representation": {"lazy": false, "type": "Numeric_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Zone_Patterns", "name": "Time_Zone_Name", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Zone_Patterns", "arguments": {"representation": {"lazy": false, "type": "Text_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Zone_Patterns", "name": "Time_Zone_ID", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Zone_Patterns", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Zone_Patterns", "name": "Time_Zone_Offset", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Zone_Patterns", "arguments": {"pattern": {"lazy": false, "type": "Text", "checked": true}, "zero": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Time_Zone_Patterns", "name": "Time_Zone_Localized_Offset", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Time_Zone_Patterns", "arguments": {"representation": {"lazy": false, "type": "Text_Representation", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser_Mode", "name": "Simple", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Parser_Mode", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser_Mode", "name": "ISO_Week_Year", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Parser_Mode", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser_Mode", "name": "pattern_format_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Parser", "arguments": {"tokens": {"lazy": false, "type": "Vector (Format_Token | Nothing)", "checked": true}, "position": {"lazy": false, "type": "Ref Integer", "checked": true}, "mode": {"lazy": false, "type": "Parser_Mode", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tokens": {"lazy": false}, "mode": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "run", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "parse_common_token", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"token": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "fail_invalid_pattern", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"character": {"lazy": false}, "count": {"lazy": false}, "extra_message": {"lazy": false, "default": "\"\""}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "consume_token", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "consume_curly_parameter_if_exists", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the next token is a curly brace parameter. If it is, it is consumed and its value (as Text) is returned. Otherwise, returns Nothing and does not move the cursor."},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "resolve_year_representation", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "parse_simple_date_pattern", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"character": {"lazy": false}, "count": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "parse_iso_week_year_pattern", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"character": {"lazy": false}, "count": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "Parser", "name": "parse_time_or_timezone_pattern", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"character": {"lazy": false}, "count": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "", "name": "default_max_year", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "", "name": "parse_simple_date_pattern", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tokens": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Parser", "type": "", "name": "parse_iso_week_year_pattern", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tokens": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Format_Token", "name": "Pattern", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Format_Token", "arguments": {"character": {"lazy": false, "type": "Text", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "A format pattern described by a single character and count."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Format_Token", "name": "Literal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Format_Token", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A literal text string."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Format_Token", "name": "Optional_Section_Start", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Format_Token", "arguments": {},"aliases": [],"description": "Indicates beginning of an optional section."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Format_Token", "name": "Optional_Section_End", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Format_Token", "arguments": {},"aliases": [],"description": "Indicates end of an optional section."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Format_Token", "name": "Curly_Section", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Format_Token", "arguments": {"inner_text": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A special parameter in curly braces.  Currently only used to customize base year for `yy`, i.e. `yy{2099}`."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Tokenizer", "arguments": {"original_text": {"lazy": false, "type": "Text", "checked": true}, "chars": {"lazy": false, "type": "Vector Text", "checked": true}, "tokens_builder": {"lazy": false, "type": "Builder Format_Token", "checked": true}, "optional_nesting": {"lazy": false, "type": "Ref Integer", "checked": true}},"aliases": [],"description": "A helper type to hold the state of the tokenizer. Normally, we could keep these in the closure, inside of a method. But our 3 parse methods need to be able to call each other, and mutual recursion of variables defined inside of a method is not supported in Enso. So to achieve the mutual recursion, we instead define these as member methods."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"builder": {"lazy": false}, "text": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "tokenize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "finalize_token", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current_token": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "is_in_optional", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if we are inside of an optional section."},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "enter_optional_section", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "exit_optional_section", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "parse_normal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"position": {"lazy": false}, "current_token": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "parse_quoted", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"position": {"lazy": false}, "text_accumulator": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Time.Format.Tokenizer", "type": "Tokenizer", "name": "parse_curly", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"position": {"lazy": false}, "text_accumulator": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "new_array_proxy_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "at": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "new_vector_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"capacity": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"array_like": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "at", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"array_like": {"lazy": false}, "index": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "vector_to_array", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"array_like": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "flatten", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"array_like": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "insert_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "at": {"lazy": false}, "items": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "remove_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "at": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "slice", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "start": {"lazy": false}, "end": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "vector_from_function", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "constructor": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "Construct a Vector by mapping a function over 0..length-1.","errors": ""},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "slice_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "ranges": {"lazy": false}},"aliases": [],"description": "Creates a new vector where for each range, a corresponding section of the source vector is added to the result.  Assumes that the ranges have been already bounds-checked (for example by passing them through `resolve_ranges`)."},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "slice_many_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "ranges": {"lazy": false}},"aliases": [],"description": "See `slice_ranges`."},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "check_start_valid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "length": {"lazy": false}, "function": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "sort", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "order": {"lazy": false}, "on": {"lazy": false}, "by": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "on_problems_to_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Returns a mapping of Problem_Behavior constructors to an integer. Used for sending the number to Java, rather than sending the atom."},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "distinct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "on": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "duplicates", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "on": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "take", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "range": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "drop", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "range": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "get", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "index": {"lazy": false}, "if_missing": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "insert", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "at": {"lazy": false}, "item": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "remove", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "at": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "index_of", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}, "start": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "last_index_of", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}, "start": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "any", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "plus", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "that": {"lazy": false, "type": "Vector | Array", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "find", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}, "start": {"lazy": false}, "if_missing": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "transpose", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vec_of_vecs": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "function": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "map_with_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "function": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "flat_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "function": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "fold", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "init": {"lazy": false}, "function": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "fold_with_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "init": {"lazy": false}, "function": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "reduce", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "function": {"lazy": false}, "if_empty": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "running_fold", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "init": {"lazy": false}, "function": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "pad", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "n": {"lazy": false}, "elem": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "each", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "f": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "each_with_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "f": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "reverse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "to_list", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "short_display_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "max_entries": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "join", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "separator": {"lazy": false}, "prefix": {"lazy": false}, "suffix": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "partition", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "condition": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "partition_with_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "predicate": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "filter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "filter": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "filter_with_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "predicate": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Array_Like_Helpers", "type": "", "name": "check_same_length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Check that all vectors have the same length and return an informative message if they don\u0027t.  Compares all vectors to the first one and reports the first one that differs."},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Context_Helpers", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context_Helpers", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Context_Helpers", "name": "is_enabled", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"c": {"lazy": false}, "env": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Context_Helpers", "name": "with_enabled_context_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"context": {"lazy": false}, "environment": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Context_Helpers", "name": "with_disabled_context_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"context": {"lazy": false}, "environment": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Context_Helpers", "name": "current_execution_environment", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Context_Helpers", "type": "Integer", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Context", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Data_Read_Helpers", "type": "", "name": "looks_like_uri", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Data_Read_Helpers", "type": "", "name": "fetch_following_data_links", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "type": "Vector", "checked": true, "default": "[]"}, "format": {"lazy": false}, "cache_policy": {"lazy": false, "type": "Cache_Policy", "checked": true, "default": "..Default"}},"aliases": [],"description": "A common implementation for fetching a resource and decoding it, following encountered data links."},
{"module": "Standard.Base.Internal.Data_Read_Helpers", "type": "", "name": "decode_http_response_following_data_links", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"response": {"lazy": false}, "format": {"lazy": false}},"aliases": [],"description": "Decodes a HTTP response, handling data link access."},
{"module": "Standard.Base.Internal.Data_Read_Helpers", "type": "", "name": "format_widget_with_raw_response", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Data_Read_Helpers", "type": "", "name": "handle_legacy_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"method_name": {"lazy": false, "type": "Text", "checked": true}, "new_argument_name": {"lazy": false, "type": "Text", "checked": true}, "format": {"lazy": false}},"aliases": [],"description": "A helper method that handles the old-style invocation of `Data.fetch` and `Data.post`. Before the introduction of the `format` parameter, these methods had a `try_auto_parse_result` parameter taking a Boolean at the same position. To ensure old code relying on positional arguments still works, we have special handling for the Boolean case. This \u0027migration\u0027 will not work unfortunately if the argument was named."},
{"module": "Standard.Base.Internal.Error_Builtins", "type": "Error", "name": "catch_primitive", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"handler": {"lazy": false}},"aliases": [],"description": "Executes the provided handler on a dataflow error, or executes as identity on a non-error value."},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "Stream_Utils", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "File_Utils", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "CompareException", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "ObjectComparator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "CaseFoldedString", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "Text_Utils", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "BreakIterator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "Exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Extra_Imports", "type": "", "name": "RuntimeException", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Instrumentor", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Instrumentor", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Instrumentor", "name": "on_enter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"fn": {"lazy": false, "type": "Text -> Any | Nothing", "checked": true}},"aliases": [],"description": "Registers callback to be executed at the begining of node/expression execution. The callback `fn` gets UUID of the node/expression that is being executed and can return `Nothing` to continue regular execution or anything else to skip the execution and just return given value."},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Instrumentor", "name": "on_return", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"fn": {"lazy": false, "type": "Text -> Any -> Nothing", "checked": true}, "expression": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Registers callback to be executed when a node/expression evaluation is over. The callback `fn` gets UUID and the computed value (or value of `expression` if specified). Usually the value is _cached_ and returned from `on_enter` callback next time the same expression is evaluated."},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Instrumentor", "name": "on_call", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"fn": {"lazy": false, "type": "Text -> Function -> Vector Any -> Any | Nothing", "checked": true}},"aliases": [],"description": "Registers callback to be executed when a node/expression representing function is about to be called. The callback `fn` shall accept three arguments. The UUID to identify the expression, the function to be invoked and the arguments to pass to the function. The callback can return `Nothing` (in such case the function gets executed with provided arguments) or some other value, which is then returned instead of calling the function."},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Instrumentor", "name": "activate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Activates configured instrumentor. Returns managed resource to deactivate the instrumentor later."},
{"module": "Standard.Base.Internal.Instrumentor", "type": "Meta.Unresolved_Symbol", "name": "instrument", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Instrumentor", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Starts building an instrumentation for a given node"},
{"module": "Standard.Base.Internal.IO_Helpers", "type": "", "name": "println", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": false}, "ends_with": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_atom_constructor_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_atom_fields_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_type_constructors_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"typ": {"lazy": false}, "factory": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_type_methods_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"typ": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_polyglot_language_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "create_unresolved_symbol_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "symbol": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_unresolved_symbol_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"symbol": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_constructor_fields_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom_constructor": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_constructor_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom_constructor": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "new_atom_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}, "fields": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "atom_with_hole_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"factory": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "is_same_object_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_1": {"lazy": false}, "value_2": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "is_a_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "typ": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "type_of_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_annotation_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target": {"lazy": false}, "method": {"lazy": false}, "parameter_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "find_atom_constructor_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_kind_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "simple_type_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_qualified_type_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_short_type_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"typ": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "get_constructor_declaring_type_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "instrumentor_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op": {"lazy": false}, "args": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Meta_Helpers", "type": "", "name": "find_type_by_qualified_name_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"fqn": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_plus", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_minus", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_times", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_divide", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_mod", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_pow", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_and", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_or", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_xor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_shift", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_shift_r", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_bit_not", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_abs", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_ceil", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_floor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_negate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_to_float", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_greater", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_greater_equal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_less", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_less_equal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "round_integer_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "integer_parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "radix": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_plus", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_minus", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_times", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_divide", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_mod", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_pow", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_abs", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_ceil", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_floor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_negate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_greater", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_greater_equal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_less", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_less_equal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "float_truncate_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Number_Builtins", "type": "", "name": "round_float_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Default_Comparator", "arguments": {},"aliases": [],"description": "Default implementation of a _comparator_."},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "hash_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "less_than_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left": {"lazy": false}, "right": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "hash_callback", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom": {"lazy": false}},"aliases": [],"description": "Called as a callback from internal engine code for an atom with a custom comparator. It is assumed that the given atom has a custom comparator, that is a comparator different than `Default_Comparator`."},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Default_Comparator", "name": "compare_callback", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"atom": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "A callback allowing to compare two atoms with a custom comparator."},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Positive_Integer_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Positive_Integer_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Positive_Integer_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Positive_Integer", "checked": true}, "y": {"lazy": false, "type": "Positive_Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Positive_Integer_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Positive_Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Ordering_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ordering_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Ordering_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Ordering", "checked": true}, "y": {"lazy": false, "type": "Ordering", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "Ordering_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "type": "Ordering", "checked": true}},"aliases": []},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "", "name": "assert_same_comparators", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the comparators for the given objects are both of the same type. If so, proceeds with the given action, and if not, throws `Incomparable_Values` error."},
{"module": "Standard.Base.Internal.Ordering_Helpers", "type": "", "name": "compare_with_comparators", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ordering ! Incomparable_Values", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Path_Helpers", "type": "", "name": "normalize_segments", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector ! Illegal_Argument", "arguments": {"segments": {"lazy": false, "type": "Vector", "checked": true}, "get_name": {"lazy": false, "type": "Any -> Text", "checked": true}},"aliases": [],"description": "A helper that gathers the common logic of normalizing the `..` and `.` entries in paths.  It raises `Illegal_Argument` if the `..` entries try to go above the root of the path."},
{"module": "Standard.Base.Internal.Path_Helpers", "type": "", "name": "resolve_many_parts", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_file": {"lazy": false, "type": "Any", "checked": true}, "subpath": {"lazy": false, "type": "Text", "checked": true}, "windows_delimiter": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "The method splits the `subpath` into parts based on the `/` delimiter and applies each part iteratively using the `resolve_single_part` method on the file objects.  Each delimiter is applied together with the file part preceding it (if any), so call `resolve_many_parts f \"/a/b/c\"` translates into `f.resolve_single_part \"/\" . resolve_single_part \"a/\" . resolve_single_part \"b/\" . resolve_single_part \"c\"`. Keeping the delimiter is needed for some systems to be able to distinguish directories from regular files (e.g. S3)."},
{"module": "Standard.Base.Internal.Path_Helpers", "type": "", "name": "split_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Text", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}, "windows_delimiter": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Splits the given path into parts based on the delimiter."},
{"module": "Standard.Base.Internal.Polyglot_Helpers", "type": "", "name": "handle_polyglot_dataflow_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "round_max_long", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The largest smallInteger (Long) that integer round can handle. Above 14 digits, it is possible that the underlying long, converted to double in the rounding process, would lose precision in the least significant bits. (See https://en.wikipedia.org/wiki/Double-precision_floating-point_format.)"},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "round_min_long", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The largest smallInteger (Long) that integer round can handle. Above 14 digits, it is possible that the underlying long, converted to double in the rounding process, would lose precision in the least significant bits. (See https://en.wikipedia.org/wiki/Double-precision_floating-point_format.)"},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "check_round_input", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Restrict allowed range of input to rounding methods."},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "round_min_decimal_places", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The smallest allowed value for the `decimal_places` argument to `round`"},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "round_max_decimal_places", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The largest allowed value for the `decimal_places` argument to `round`"},
{"module": "Standard.Base.Internal.Rounding_Helpers", "type": "", "name": "check_decimal_places", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Restrict rounding decimal_places parameter."},
{"module": "Standard.Base.Internal.Runtime_Helpers", "type": "", "name": "primitive_get_stack_trace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a raw representation of the current execution stack trace. You probably want `Runtime.get_stack_trace` instead."},
{"module": "Standard.Base.Internal.Runtime_Helpers", "type": "", "name": "gc", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Runtime_Helpers", "type": "", "name": "assertions_enabled", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Internal.Runtime_Helpers", "type": "", "name": "no_inline", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Internal.Runtime_Helpers", "type": "", "name": "no_inline_with_arg", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}, "arg": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Internal.Telemetry", "type": "", "name": "log", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {"logger_name": {"lazy": false, "type": "Text", "checked": true}, "msg": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Schedules a single telemetry message for sending."},
{"module": "Standard.Base.Internal.Telemetry", "type": "", "name": "_root_logger_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Project_Description", "arguments": {"prim_root_file": {"lazy": false}, "ns": {"lazy": false, "type": "Text", "checked": true}, "n": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A representation of an Enso project."},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"module": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Returns the Enso project description for the given module. If no module is given, returns the description of the project that the engine was executed with, i.e., the project that contains the `main` method, or throws `Module_Not_In_Package_Error` if there is no such project, e.g., when executing a single file."},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "enso_project_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"module": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "root", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "folder","description": "Returns the root directory of the project."},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "data", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Input","icon": "folder","description": "Returns the root data directory of the project."},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the name of the project."},
{"module": "Standard.Base.Meta.Enso_Project", "type": "Project_Description", "name": "namespace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the namespace of the project."},
{"module": "Standard.Base.Meta.Enso_Project", "type": "", "name": "enso_project", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "enso_icon","description": "Returns the Enso project description for the project that the engine was executed with, i.e., the project that contains the `main` method, or throws `Module_Not_In_Package_Error` if executing a single file."},
{"module": "Standard.Base.Network.HTTP.Internal.HTTP_Fetch_Data_Link", "type": "HTTP_Fetch_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "HTTP_Fetch_Data_Link", "arguments": {"request": {"lazy": false, "type": "Request", "checked": true}, "format_json": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Internal.HTTP_Fetch_Data_Link", "type": "HTTP_Fetch_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "HTTP_Fetch_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Internal.HTTP_Fetch_Data_Link", "type": "HTTP_Fetch_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Internal.HTTP_Fetch_Data_Link", "type": "HTTP_Fetch_Data_Link", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Internal.HTTP_Fetch_Data_Link", "type": "Data_Link_With_Input_Stream", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "HTTP_Fetch_Data_Link", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Cache_Policy", "type": "Cache_Policy", "name": "Default", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Cache_Policy", "arguments": {},"aliases": [],"description": "Use the default policy for the HTTP method of the request."},
{"module": "Standard.Base.Network.HTTP.Cache_Policy", "type": "Cache_Policy", "name": "Use_Cache", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Cache_Policy", "arguments": {},"aliases": [],"description": "Use the response cache."},
{"module": "Standard.Base.Network.HTTP.Cache_Policy", "type": "Cache_Policy", "name": "No_Cache", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Cache_Policy", "arguments": {},"aliases": [],"description": "Don\u0027t use the response cache."},
{"module": "Standard.Base.Network.HTTP.Cache_Policy", "type": "Cache_Policy", "name": "should_use_cache", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"request": {"lazy": false, "type": "Request", "checked": true}},"aliases": [],"description": "Default to using the cache for GET requests, unless explicitly disabled"},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Header", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Text|Enso_Secret|Derived_Secret_Value", "checked": true}},"aliases": [],"description": "A type representing a header."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "unify_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"headers": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Normalize a vector of `Header`, `Pair`s or `Vector`s into a vector of `Header` values."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}},"aliases": ["build a header"],"icon": "text_input","description": "Create a new Header."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "accept", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"icon": "text_input","description": "Create an \"Accept\" header."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "accept_all", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text_input","description": "Create a header that accepts all (`\"*/*\"`)."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "authorization", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}},"aliases": ["build an auth header"],"icon": "text_input","description": "Create an \"Authorization\" header."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "authorization_basic", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"user": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}, "pass": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}},"aliases": [],"icon": "text_input","description": "Create HTTP basic auth header."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "authorization_bearer", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"token": {"lazy": false, "type": "Text | Enso_Secret | Derived_Secret_Value", "checked": true}},"aliases": [],"icon": "text_input","description": "Create bearer token auth header."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "content_type", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false, "type": "Text", "checked": true}, "encoding": {"lazy": false, "type": "Encoding | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"icon": "text_input","description": "Create \"Content-Type\" header."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "application_json", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text_input","description": "Header \"Content-Type: application/json\"."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "application_octet_stream", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text_input","description": "Header \"Content-Type: application/octet-stream\"."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "application_x_www_form_urlencoded", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text_input","description": "Header \"Content-Type: application/x-www-form-urlencoded\"."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "multipart_form_data", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"boundary": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"icon": "text_input","description": "Header \"Content-Type: multipart/form-data\"."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "text_plain", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text_input","description": "Header \"Content-Type: text/plain\"."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "content_type_header_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the name for content_type"},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Header."},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header", "name": "to_java_pair", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Header_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Header_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Header", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Header", "type": "", "name": "content_type_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.HTTP_Error", "type": "HTTP_Error", "name": "IO_Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Error", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A generic IO error."},
{"module": "Standard.Base.Network.HTTP.HTTP_Error", "type": "HTTP_Error", "name": "Status_Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Error", "arguments": {"status_code": {"lazy": false, "type": "HTTP_Status_Code", "checked": true}, "message": {"lazy": false, "type": "Text|Nothing", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}},"aliases": [],"description": "An error indicating that a non-200 status code was returned."},
{"module": "Standard.Base.Network.HTTP.HTTP_Error", "type": "HTTP_Error", "name": "handle_java_exceptions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Utility method for running an action with Java exceptions mapping."},
{"module": "Standard.Base.Network.HTTP.HTTP_Error", "type": "HTTP_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the HTTP_Error to a human-readable format."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Options", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"OPTIONS\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Get", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"GET\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Head", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"HEAD\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Post", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"POST\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Put", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"PUT\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Patch", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"PATCH\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Delete", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"DELETE\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Trace", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"TRACE\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Connect", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {},"aliases": [],"description": "The HTTP method \"CONNECT\"."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "Custom", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Method", "arguments": {"verb": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Custom unsupported HTTP method."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "default_fetch_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Widget for get operations"},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "default_post_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Widget for get operations"},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "to_http_method_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a Text of the HTTP method name."},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.HTTP_Method", "type": "HTTP_Method", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Converts from Text to an HTTP_Method."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Status_Code", "arguments": {"code": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "An HTTP status code."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "continue", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "100 Continue."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "switching_protocols", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "101 Switching Protocols."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "ok", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "200 OK."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "created", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "201 Created."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "accepted", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "202 Accepted."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "non_authoritative_information", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "203 Non-Authoritative Information."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "no_content", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "204 No Content."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "reset_content", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "205 Reset Content."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "partial_content", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "206 Partial Content."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "multiple_choices", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "300 Multiple Choices."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "moved_permanently", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "301 Moved Permanently."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "found", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "302 Found."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "see_other", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "303 See Other."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "not_modified", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "304 Not Modified."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "use_proxy", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "305 Use Proxy."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "temporary_redirect", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "307 Temporary Redirect."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "bad_request", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "400 Bad Request."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "unauthorized", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "401 Unauthorized."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "payment_required", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "402 Payment Required."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "forbidden", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "403 Forbidden."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "not_found", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "404 Not Found."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "method_not_allowed", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "405 Method Not Allowed."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "not_acceptable", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "406 Not Acceptable."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "proxy_authentication_required", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "407 Proxy Authentication Required."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "request_timeout", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "408 Request Timeout."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "conflict", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "409 Conflict."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "gone", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "410 Gone."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "length_required", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "411 Length Required."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "precondition_failed", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "412 Precondition Failed."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "request_entity_too_large", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "413 Request Entity Too Large."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "request_uri_too_long", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "414 Request-URI Too Long."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "unsupported_media_type", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "415 Unsupported Media Type."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "requested_range_not_satisfiable", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "416 Requested Range Not Satisfiable."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "expectation_failed", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "417 Expectation Failed."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "internal_server_error", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "500 Internal Server Error."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "not_implemented", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "501 Not Implemented."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "bad_gateway", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "502 Bad Gateway."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "service_unavailable", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "503 Service Unavailable."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "gateway_timeout", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "504 Gateway Timeout"},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "http_version_not_supported", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "505 HTTP Version Not Supported."},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "is_success", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_download","description": "Does the status code represent a successful response?"},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.HTTP_Status_Code", "type": "HTTP_Status_Code", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this HTTP_Status_Code."},
{"module": "Standard.Base.Network.HTTP.HTTP_Version", "type": "HTTP_Version", "name": "HTTP_1_1", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Version", "arguments": {},"aliases": [],"description": "Use HTTP version 1.1."},
{"module": "Standard.Base.Network.HTTP.HTTP_Version", "type": "HTTP_Version", "name": "HTTP_2", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "HTTP_Version", "arguments": {},"aliases": [],"description": "Use HTTP version 2."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Request", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}, "headers": {"lazy": false, "type": "Vector", "checked": true}, "body": {"lazy": false, "type": "Request_Body", "checked": true}},"aliases": [],"description": "A type representing an HTTP request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "url": {"lazy": false, "type": "URI", "checked": true}, "headers": {"lazy": false, "type": "Vector Header", "checked": true, "default": "[]"}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}},"aliases": [],"icon": "data_download","description": "Create new HTTP request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "options", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": [],"icon": "find","description": "Create an Options request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "get", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": [],"icon": "data_input","description": "Create a Get request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "head", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": [],"icon": "data_input","description": "Create a Head request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "post", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "body": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": ["http post", "upload"],"group": "Output","icon": "data_upload","description": "Create a Post request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "put", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "body": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": [],"icon": "data_upload","description": "Create a Put request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "delete", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "headers": {"lazy": false, "default": "[]"}},"aliases": [],"icon": "trash","description": "Create a Delete request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "with_header", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "val": {"lazy": false}},"aliases": [],"icon": "edit","description": "Sets the header for the request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "with_headers", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_headers": {"lazy": false}},"aliases": [],"icon": "edit","description": "Sets the headers in the request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "with_body", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_body": {"lazy": false}},"aliases": [],"icon": "edit","description": "Set the body for the request."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "with_json", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"json_body": {"lazy": false}},"aliases": [],"icon": "edit","description": "Set the body text in the request encoded as \"application/json\"."},
{"module": "Standard.Base.Network.HTTP.Request", "type": "Request", "name": "with_form", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"parts": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Set body as vector of parts encoded as \"application/x-www-form-urlencoded\"."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Text", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Request_Body", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "encoding": {"lazy": false, "type": "Encoding|Nothing", "checked": true, "default": "Nothing"}, "content_type": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Request body with text."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Json", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Request_Body", "arguments": {"x": {"lazy": false, "type": "Any", "checked": true, "default": "Missing_Argument.throw \"x\""}},"aliases": [],"description": "Request body with an object to be sent as JSON."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Binary", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Request_Body", "arguments": {"file": {"lazy": false, "type": "File", "checked": true, "default": "Missing_Argument.throw \"file\""}},"aliases": [],"description": "Request body with an object to be sent as a binary file."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Byte_Array", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Request_Body", "arguments": {"bytes": {"lazy": false}},"aliases": [],"description": "Raw bytes array to be sent as binary data. This is mostly used for internal purposes."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Form_Data", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Request_Body", "arguments": {"form_data": {"lazy": false, "type": "Dictionary", "checked": true, "default": "Missing_Argument.throw \"form_data\""}, "url_encoded": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Request body with form data."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Request_Body", "arguments": {},"aliases": [],"description": "Empty request body; used for GET"},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "default_content_type_header", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "For `Request_Body.Form_Data url_encoded=False`, this returns `Nothing`, because the content type must include a content boundary."},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "Request_Body", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "", "name": "make_all_with_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Request_Body", "type": "", "name": "dictionary_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Response", "arguments": {"internal_http_response": {"lazy": false, "type": "Enso_Http_Response", "checked": true}, "body_object": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "A type representing an HTTP response."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_http_response": {"lazy": false, "type": "EnsoHttpResponse", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "with_materialized_body", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a new Response with the body materialized."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "uri", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the uri for the response."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "headers", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the response headers.  It returns a vector of Header objects and not a mapping, because the response may contain multiple headers with the same name."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "content_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the response content type."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "content_length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the response content length in bytes. This method uses the `Content-Length` header, and does not read the body. If the header is not present will return Nothing."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "body", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Get the response body."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "code", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the response status code."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "decode", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "if_unsupported": {"lazy": true, "default": "Error.throw (File_Error.Unsupported_Type (resolve_file_metadata_for_response self))"}},"aliases": ["parse"],"group": "Conversions","icon": "data_input","description": "Uses the format to decode the body. If using `Auto_Detect`, the content-type will be used to determine the format. If the format cannot be detected automatically, `if_unsupported` is returned."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "decode_as_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding | Infer", "checked": true, "default": "Infer"}},"aliases": ["parse as text"],"group": "Conversions","icon": "data_input","description": "Decodes the body to a Text value."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "decode_as_json", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding | Infer", "checked": true, "default": "Infer"}},"aliases": ["parse as json", "parse json"],"group": "Conversions","icon": "data_input","description": "Decodes the body as JSON."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}, "on_existing_file": {"lazy": false, "default": "Existing_File_Behavior.Backup"}},"aliases": ["export", "output", "save", "to_file"],"group": "Output","icon": "data_download","description": "Write response body to a File."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this Response."},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Response", "name": "get_header", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Enso_Http_Response", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Http_Response", "arguments": {"uri": {"lazy": false, "type": "URI", "checked": true}, "headers": {"lazy": false, "type": "HttpHeaders", "checked": true}, "body": {"lazy": false, "type": "Input_Stream", "checked": true}, "status_code": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "Enso_Http_Response", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Http_Response", "arguments": {"java_response": {"lazy": false, "type": "EnsoHttpResponse", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "", "name": "resolve_file_metadata_for_response", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"response": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response", "type": "", "name": "filename_from_content_disposition", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"content_disposition": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "Raw_Stream", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Response_Body", "arguments": {"raw_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}},"aliases": [],"description": "For internal use only. Should be materialised before returning to an end user."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "Materialized_Stream", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Response_Body", "arguments": {"restartable_stream": {"lazy": false, "type": "Restartable_Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_stream": {"lazy": false}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}, "uri": {"lazy": false, "type": "URI", "checked": true}},"aliases": [],"description": "Create a Response_Body."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "with_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "materialize", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Materializes the stream into either a byte array or a temporary file and return a new Response_Body."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "decode", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "if_unsupported": {"lazy": true, "default": "Error.throw (File_Error.Unsupported_Type self.metadata)"}},"aliases": ["parse"],"group": "Input","icon": "convert","description": "Uses the format to decode the body. If using `Auto_Detect`, the content-type will be used to determine the format."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "decode_as_bytes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["bytes"],"group": "Input","icon": "convert","description": "Read the body as a byte array."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "decode_as_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding | Infer", "checked": true, "default": "Infer"}},"aliases": ["parse as text"],"group": "Conversions","icon": "data_input","description": "Decodes the body to a Text value."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "decode_as_json", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding | Infer", "checked": true, "default": "Infer"}},"aliases": ["parse as json", "parse json"],"group": "Conversions","icon": "data_input","description": "Decodes the body as JSON."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "content_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "The content type of the response."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert response body to Text."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "Response_Body", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}, "on_existing_file": {"lazy": false, "default": "Existing_File_Behavior.Backup"}},"aliases": ["export", "output", "save", "to_file"],"group": "Output","icon": "data_output","description": "Write response body to a File."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "", "name": "maximum_body_in_memory", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "How large a response body can be before it is written to a temporary file."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "", "name": "can_decode", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"type": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "", "name": "decode_format_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Selector for decoding from the web."},
{"module": "Standard.Base.Network.HTTP.Response_Body", "type": "", "name": "delete_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Utility method for closing primitive Java streams. Provided to avoid accidental scope capture with `Managed_Resource` finalizers."},
{"module": "Standard.Base.Network.Extensions", "type": "Text", "name": "to_uri", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["parse_uri", "uri from text"],"group": "Conversions","icon": "convert","description": "Convert Text to a URI.  Throws a `Syntax_Error` when `self` cannot be parsed as a URI."},
{"module": "Standard.Base.Network.Extensions", "type": "URI", "name": "fetch", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "default": "[]"}, "format": {"lazy": false, "default": "Auto_Detect"}},"aliases": ["download", "http get"],"group": "Input","icon": "data_input","description": "Fetches from the URI and returns the response, parsing the body if the content-type is recognised. Returns an  error if the status code does not represent a successful response."},
{"module": "Standard.Base.Network.Extensions", "type": "URI", "name": "post", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Post"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "response_format": {"lazy": false, "default": "Auto_Detect"}},"aliases": ["http post", "upload"],"group": "Output","icon": "data_upload","description": "Writes the provided data to the provided URI. Returns the response, parsing the body if the content-type is recognised. Returns an  error if the status code does not represent a successful response.","remarks": "! Specifying Content Types    If the `body` parameter specifies an explicit content type, then it is an   error to also specify additional `Content-Type` headers in the `headers`   parameter. (It is not an error to specify multiple `Content-Type` values in   `headers`, however.) \n\n! Supported Body Types    - Request_Body.Text: Sends a text string, with optional encoding and content     type.   - Request_Body.Json: Sends an Enso object, after converting it to JSON.   - Request_Body.Binary: Sends a file.   - Request_Body.Form_Data: Sends a form encoded as key/value pairs. The keys     must be `Text`, and the values must be `Text` or `File`.   - Request_Body.Empty: Sends an empty body.    Additionally, the following types are allowed as the `body` parameter:    - Text: shorthand for `Request_Body.Text that_text`.   - File: shorthand for `Request_Body.Binary that_file`.   - Any other Enso object: shorthand for `Request_Body.Json that_object`."},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "HTTP", "arguments": {"timeout": {"lazy": false}, "follow_redirects": {"lazy": false, "type": "Boolean", "checked": true}, "proxy": {"lazy": false, "type": "Proxy", "checked": true}, "version": {"lazy": false, "type": "HTTP_Version", "checked": true}, "custom_ssl_context": {"lazy": false}, "hash_method": {"lazy": false, "default": "Nothing"}, "make_client": {"lazy": false, "default": "internal_http_client"}},"aliases": [],"description": "An HTTP client."},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "fetch", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI | Text", "checked": true}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "cache_policy": {"lazy": false, "type": "Cache_Policy", "checked": true, "default": "..Default"}},"aliases": [],"description": "Static helper for get-like methods","remarks": "! Response caching    See `Data.fetch` for information about response caching."},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "post", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI | Text", "checked": true}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "Request_Body.Empty"}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "HTTP_Method.Post"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}},"aliases": [],"description": "Static helper for post-like methods"},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"timeout": {"lazy": false, "type": "Duration", "checked": true, "default": "Duration.new seconds=10"}, "follow_redirects": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "proxy": {"lazy": false, "type": "Proxy", "checked": true, "default": "..System"}, "version": {"lazy": false, "type": "HTTP_Version", "checked": true, "default": "..HTTP_2"}},"aliases": [],"description": "Create a new instance of the HTTP client."},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "clear_response_cache", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {},"aliases": ["flush"],"icon": "temp","description": "Clear the HTTP request cache."},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "request", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"req": {"lazy": false}, "error_on_failure_code": {"lazy": false, "default": "True"}, "cache_policy": {"lazy": false, "type": "Cache_Policy", "checked": true, "default": "..Default"}},"aliases": [],"icon": "data_download","description": "Sends a request using the HTTP client. The response body will contain a raw Input_Stream which can be read once. Please note, this must be closed after use (either directly or via the helpers on Response_Body).","remarks": "! Response caching    See `Data.fetch` for information about response caching."},
{"module": "Standard.Base.Network.HTTP", "type": "HTTP", "name": "set_custom_ssl_context", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"ssl_context": {"lazy": false}},"aliases": [],"description": "Create a copy of the HTTP client with a custom SSL context."},
{"module": "Standard.Base.Network.HTTP", "type": "Resolved_Body", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Resolved_Body", "arguments": {"publisher": {"lazy": false, "type": "BodyPublisher", "checked": true}, "boundary": {"lazy": false, "type": "Text|Nothing", "checked": true}, "hash": {"lazy": false, "type": "Text|Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.HTTP", "type": "Request_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Request_Error", "arguments": {"error_type": {"lazy": false}, "message": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.HTTP", "type": "Request_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert a request error to a human-readable form."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_resolve_headers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"req": {"lazy": false}},"aliases": [],"description": "If either encoding or content type is specified in the Request_Body, that is used as the content type header. If encoding is specified without content type, \"text/plain\" is used as the content type. It is an error to specify the content type in both the request body and the header list. If the body is not Request_Body.Empty, and no content type is specified, a default is used. Not explicitly private as allows direct testing."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_resolve_body", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"body": {"lazy": false, "type": "Request_Body", "checked": true}, "hash_function": {"lazy": false}},"aliases": [],"description": "Generate body publisher, optional form content boundary and optionally hash from the body"},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_resolve_form_body", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"form_data": {"lazy": false, "type": "Dictionary Text (Text | File)", "checked": true}, "url_encoded": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "hash_function": {"lazy": false}},"aliases": [],"description": "Build a BodyPublisher from the given form data. The pair\u0027s second value is a content boundary in the case of a `multipart/form-data` form; otherwise, Nothing"},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "if_fetch_method", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "action": {"lazy": true}, "if_not": {"lazy": true, "default": "Error.throw (Illegal_Argument.Error (\"Unsupported method \" + method.to_display_text))"}},"aliases": []},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "if_post_method", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"method": {"lazy": false, "type": "HTTP_Method", "checked": true}, "action": {"lazy": true}, "if_not": {"lazy": true, "default": "Error.throw (Illegal_Argument.Error (\"Unsupported method \" + method.to_display_text))"}},"aliases": []},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "with_hash_and_client", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false}, "hash_method": {"lazy": false}, "make_client": {"lazy": false}},"aliases": [],"description": "Build a custom HTTP with hash function and make_client function."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "internal_http_client", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false}, "hash": {"lazy": false}},"aliases": [],"description": "Build a Java HttpClient with the given settings."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_get_timeout", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false, "type": "HTTP", "checked": true}},"aliases": [],"description": "Access the HTTP\u0027s timeout (for testing purposes)."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_get_follow_redirects", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false, "type": "HTTP", "checked": true}},"aliases": [],"description": "Access the HTTP\u0027s follow_redirects (for testing purposes)."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_get_proxy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false, "type": "HTTP", "checked": true}},"aliases": [],"description": "Access the HTTP\u0027s proxy (for testing purposes)."},
{"module": "Standard.Base.Network.HTTP", "type": "", "name": "_get_version", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"http": {"lazy": false, "type": "HTTP", "checked": true}},"aliases": [],"description": "Access the HTTP\u0027s version (for testing purposes)."},
{"module": "Standard.Base.Network.Proxy", "type": "Proxy", "name": "None", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Proxy", "arguments": {},"aliases": [],"description": "The proxy is disabled."},
{"module": "Standard.Base.Network.Proxy", "type": "Proxy", "name": "System", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Proxy", "arguments": {},"aliases": [],"description": "Use the system proxy settings."},
{"module": "Standard.Base.Network.Proxy", "type": "Proxy", "name": "Address", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Proxy", "arguments": {"proxy_host": {"lazy": false, "type": "Text", "checked": true}, "proxy_port": {"lazy": false, "type": "Integer", "checked": true, "default": "80"}},"aliases": [],"description": "Use the provided proxy server."},
{"module": "Standard.Base.Network.Reload_Detector", "type": "Reload_Detector", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Reload_Detector", "arguments": {"mr": {"lazy": false, "type": "Managed_Resource", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.Reload_Detector", "type": "Reload_Detector", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Reload_Detector", "arguments": {},"aliases": [],"description": "Create a new reload detector."},
{"module": "Standard.Base.Network.Reload_Detector", "type": "Reload_Detector", "name": "has_reload_occurred", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Check if a reload has occurred."},
{"module": "Standard.Base.Network.Reload_Detector", "type": "", "name": "simulate_reload_test_only", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"reload_detector": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.Reload_Detector", "type": "", "name": "create_reload_detector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "URI", "arguments": {"internal_uri": {"lazy": false, "type": "Java_URI", "checked": true}, "additional_query_parameters": {"lazy": false, "type": "Vector (Pair Text (Text | Enso_Secret))", "checked": true}},"aliases": [],"description": "Represents a Uniform Resource Identifier (URI) reference."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "parse", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "Text", "checked": true}},"aliases": ["get uri"],"group": "Conversions","icon": "convert","description": "Parse a URI from text. If the input text is not a valid URI, this function will separate the query string and encode it. If it still cannot be parsed, it will throw a `Syntax_Error`."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "scheme", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the scheme part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "user_info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the user info part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "host", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the host part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "authority", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the authority (user info and host) part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "port", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the port part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "path", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the path part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"segment": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Operators","icon": "folder","description": "Extends the path of this URI with an additional segment."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Get the query part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "add_query_argument", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Text | Enso_Secret", "checked": true}},"aliases": [],"group": "Calculations","icon": "edit","description": "Adds a query parameter to the URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "reset_query_arguments", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Calculations","icon": "trash","description": "Removes any query parameters within the URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "fragment", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Get the fragment part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "raw_user_info", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get the unescaped user info part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "raw_authority", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get the unescaped authority part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "raw_path", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get the unescaped path part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "raw_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get the unescaped query part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "raw_fragment", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Get the unescaped fragment part of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert this URI to text."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a JavaScript Object representing this URI."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "to_java_representation", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a Java representation that can be used to render this URL with secrets hidden or processed by trusted operations."},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "to_java_uri", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert this to a raw Java URI."},
{"module": "Standard.Base.Network.URI", "type": "URI_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "URI_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "URI_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "URI_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "Invalid_Query_String", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Query_String", "arguments": {"query_string": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "Invalid_Query_String", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "URI", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "", "name": "handle_resolve_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.Network.URI", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "URI", "checked": true}},"aliases": []},
{"module": "Standard.Base.Runtime.Debug", "type": "", "name": "breakpoint", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Places a breakpoint in the program\u0027s execution, dropping the user into an interactive debugging REPL.  From the REPL, the user is able to manipulate both the program state and its execution in an interactive fashion."},
{"module": "Standard.Base.Runtime.Debug", "type": "", "name": "eval", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"expression": {"lazy": false}},"aliases": [],"description": "Evaluates the provided Enso code in the caller frame.","remarks": "? Scoping   The fact that expression is evaluated in the caller frame means that   it has access to variables in the scope enclosing the call to   Debug.eval."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Managed_Resource", "arguments": {},"aliases": [],"description": "A managed resource is a special type of resource that is subject to automated cleanup when it is no longer in use.  This API is intended for use by developers to provide easy-to-use abstractions, and is not expected to be used by end-users."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "bracket", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"constructor": {"lazy": true}, "destructor": {"lazy": true}, "action": {"lazy": true}},"aliases": [],"description": "Acquires a resource, performs an action on it, and destroys it safely, even in the presence of panics."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "register", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"resource": {"lazy": false}, "function": {"lazy": false}, "system_finalization_allowed": {"lazy": false, "default": "False"}},"aliases": [],"description": "Registers a resource with the resource manager to be cleaned up using function once it is no longer in use. The optional `system_finalization_allowed` flag allow the system to explicitly call `finalize` on the resource when _\"needed\"_. The definition is intentionally vague, but currently the IDE performs such a call when user requests a _\"reload\"_ - e.g. using `Managed_Resource.register cache cleanup_fn True` is useful for creating user managed caches.","returns": "A `Managed_Resource` object that can be used to access the resource.","remarks": "! Multiple `Managed_Resource`s for the same resource    Using the same underlying resource with multiple managed resource   instances is an error and will result in an `Illegal_Argument` panic. \n\n! Values Eligible to be `Managed_Resource`s    Truly atomic values (`Integer`, `Boolean` and `Float`) cannot be   managed resources."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "finalize", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Forces finalization of a managed resource using the registered finalizer, even if the resource is still reachable."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "with", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Executes the provided action on the resource managed by the managed resource object. The action is invoked with the managed resource only if it has not yet been finalized. If the resource has already been finalized then `Error` with `Uninitialized_State` payload is passed into the action instead of the resource.","returns": "Value returned from the `action`"},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "take", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Takes the value held by the managed resource and unregisters the finalization step for this resource, effectively removing it from the managed resources system."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "Managed_Resource", "name": "has_been_finalized", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Returns true iff the resource has been collected by the engine, false otherwise. If `with` throws any other error, it is propagated."},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "", "name": "register_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"r": {"lazy": false}, "fn": {"lazy": false}, "sys": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "", "name": "with_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"r": {"lazy": false}, "fn": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Runtime.Managed_Resource", "type": "", "name": "_handle_double_registration", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Catch a double-registration panic and re-raise it as an `Illegal_Argument`."},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Ref", "arguments": {},"aliases": [],"description": "A mutable reference type."},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Creates a new reference containing the provided value."},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the contents of this mutable reference ref."},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "put", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_value": {"lazy": false}},"aliases": [],"icon": "edit","description": "Puts a new value into this reference, returning the old value."},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "modify", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fun": {"lazy": false}},"aliases": [],"group": "Calculations","icon": "edit","description": "Gets the contents of this mutable reference, transform it using the provided function, and put the new value into the reference.  Returns the original value."},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "with_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"new_value": {"lazy": false, "type": "Any", "checked": true}, "action": {"lazy": true, "type": "Any", "checked": true}},"aliases": [],"group": "Calculations","icon": "edit","description": "Temporarily change the value of this mutable reference during the execution of an action.  Returns the value of the action."},
{"module": "Standard.Base.Runtime.Ref", "type": "Ref", "name": "with_modification", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"modifier": {"lazy": false, "type": "Any -> Any", "checked": true}, "action": {"lazy": true, "type": "Any", "checked": true}},"aliases": [],"group": "Calculations","icon": "edit","description": "Temporarily change the value of this mutable reference during the execution of an action, using a modification function.  Returns the value of the action."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Source_Location", "arguments": {"prim_location": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the location."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "start_line", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the 1-based line index of the start of this code range."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "end_line", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the 1-based line index of the end of this code range."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "start_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the 1-based column index of the start of this code range."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "end_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the 1-based column index of the end of this code range."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "formatted_coordinates", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Returns a pretty-printed location (file and line info)."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "file", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Return the source file corresponding to this location."},
{"module": "Standard.Base.Runtime.Source_Location", "type": "Source_Location", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Runtime.State", "type": "", "name": "run", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"key": {"lazy": false}, "local_state": {"lazy": false}, "computation": {"lazy": true}},"aliases": [],"description": "Executes a stateful computation in a local state environment."},
{"module": "Standard.Base.Runtime.State", "type": "", "name": "get", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"key": {"lazy": false}},"aliases": [],"description": "Returns the current value for the provided key contained in the monadic state. \n\n Returns an uninitialized state error if the user tries to read from an uninitialized slot."},
{"module": "Standard.Base.Runtime.State", "type": "", "name": "put", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"key": {"lazy": false}, "new_state": {"lazy": false}},"aliases": [],"description": "Associates a new_state with the provided key in the runtime\u0027s monadic state, returning the provided state. \n\n Returns an uninitialized state error if the user tries to put into an uninitialized slot."},
{"module": "Standard.Base.Runtime.Thread", "type": "", "name": "with_interrupt_handler", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}, "interrupt_handler": {"lazy": true}},"aliases": [],"description": "Executes an action with a handler for the executing thread being interrupted."},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "From_Bytes", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"bytes": {"lazy": false}},"aliases": [],"description": "`bytes` may be a Vector or a raw `byte[]` array (convertible to vector, but no annotation to avoid conversions)."},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "From_Existing_File", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "From_Temporary_File", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"temporary_file": {"lazy": false, "type": "Temporary_File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "make", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "extend_lifetime": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "Restartable_Input_Stream", "name": "with_fresh_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"action": {"lazy": false, "type": "Input_Stream -> Any", "checked": true}},"aliases": [],"description": "Runs the provided action with a fresh input stream pointing to the beginning of the data represented by this stream.  This method may be called multiple times, allowing multiple \u0027rounds\u0027 of processing."},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "", "name": "max_in_memory_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Maximum size for a stream to be held in memory. If the amount of data exceeds this limit, it will be stored in a temporary file."},
{"module": "Standard.Base.System.Advanced.Restartable_Input_Stream", "type": "", "name": "cache_generic_input_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Temporary_File", "arguments": {"file_resource_reference": {"lazy": false, "type": "Ref (Nothing | Managed_Resource File)", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "default": "\"temp\""}, "suffix": {"lazy": false, "default": "\".tmp\""}},"aliases": [],"description": "Creates a new empty `Temporary_File`."},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "from_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false}},"aliases": [],"description": "Materializes the provided `Input_Stream` into a `Temporary_File`. It will work the same regardless of whether the output context is enabled."},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "from_stream_light", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false}},"aliases": [],"description": "Materializes the provided `Input_Stream` into a `Temporary_File`. If the stream is already backed by a temporary or regular file, that file is returned."},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "with_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "unsafe_get", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the raw file reference. Note that the underlying file may be deleted at any time, once `self` is unreachable - so this method has to be used with extra care."},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "dispose", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Deletes the temporary file, invalidating the reference."},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "access_resource", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "Temporary_File", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Advanced.Temporary_File", "type": "", "name": "cleanup_tmp_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Like", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "path", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Returns the file\u0027s path."},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Returns the file\u0027s name."},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "parent", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Like", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Like", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Like", "type": "File_Format_Metadata", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": [],"description": "If a conversion to `File_Format_Metadata` is needed, we delegate to the underlying file. Every `File_Like` should be able to provide its file format metadata."},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "File_Write_Strategy", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Write_Strategy", "arguments": {"write_overwriting": {"lazy": false}, "write_appending": {"lazy": false}, "write_raising_error": {"lazy": false}, "write_backing_up": {"lazy": false}, "create_dry_run_file": {"lazy": false}, "write_with_local_file": {"lazy": false}, "copy_from_local": {"lazy": false}},"aliases": [],"description": "Each of the `write_` strategies takes the file as the first argument, `Existing_File_Behavior` as second argument, and an action taking an `Output_Stream` as the third argument and should run this action against the output stream opened for the file and return its result.  The `create_dry_run_file` takes a destination file and a boolean flag stating if it needs to copy the original file as part of preparation. It should return a dry run counterpart that is associated with it. It may raise an error if dry runs are not supported on a given backend. Note that currently there is no mechanism for managing cleanup of the dry run files, so they only should be created if a \u0027temporary directory\u0027 is available.  The `write_with_local_file` action takes the file, the `Existing_File_Behavior` and an action. A remote file is downloaded to a temporary file and the provided action is called with that local temporary file. Then that file is uploaded to replace the remote file.  The `copy_from_local` action creates the file on a given backend from a local file. It can be used to implement more efficient upload strategies than ones based on just writing to an output stream. The default `generic_copy` implementation can always be used here."},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "File_Write_Strategy", "name": "write", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": [],"description": "Writes to a file according to the provided existing file behaviour. This variant does not handle dry run logic. It will most likely fail at `with_output_stream` if the output context is not enabled. It may be used if the caller has custom handling for dry run and calls this method within `Context.Output.with_enabled`.","remarks": "? Return Value    By convention, the `write` operations return the file that has been   written to. The `Writable_File` wrappers may replace the return value   with a proxy file, when writing e.g. to a data link."},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "File_Write_Strategy", "name": "write_handling_dry_run", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "action": {"lazy": false, "type": "Any -> Output_Stream -> Any", "checked": true}},"aliases": [],"description": "Writes to a file, executing a default dry-run logic if the Output Context is disabled.  The `action` is called with the effective file (original destination file or its dry run counterpart) and an output stream to that file.","remarks": "? Return Value    By convention, the `write` operations return the file that has been   written to. The `Writable_File` wrappers may replace the return value   with a proxy file, when writing e.g. to a data link."},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "Dry_Run_File_Settings", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dry_Run_File_Settings", "arguments": {"existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "copy_original": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "default_overwrite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "default_append", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "default_raise_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "generic_remote_write_with_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}, "existing_file_behavior": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "dry_run_behavior", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dry_Run_File_Settings", "arguments": {"file": {"lazy": false}, "behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.File_Write_Strategy", "type": "", "name": "generic_copy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false}, "destination": {"lazy": false, "type": "Writable_File", "checked": true}, "replace_existing": {"lazy": false}},"aliases": [],"description": "Generic `copy` implementation between two backends. The files only need to support `with_input_stream` and `with_output_stream`."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Writable_File", "arguments": {"file": {"lazy": false}, "write_strategy": {"lazy": false, "type": "File_Write_Strategy", "checked": true}, "file_for_return": {"lazy": false, "default": "file"}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "exists", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "copy_to", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "replace_existing": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "write", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "write_handling_dry_run", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "action": {"lazy": false, "type": "Any -> Output_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "is_local", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "write_requiring_local_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"existing_file_behavior": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "action": {"lazy": false, "type": "File -> Any", "checked": true}},"aliases": [],"description": "This helper method may be used if the logic for writing the file requires a local filesystem file (e.g. using some external libraries that prefer to work with a Java File). It downloads a remote file to a local temporary location, runs the action and then uploads the resulting file back to the remote backend."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "copy_from_local", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Writes a local file to this `Writable_File` destination. This is used by `File.copy_to` and `File.move_to` to possibly implement the upload more efficiently (avoiding duplicated temporary files)."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "replace_resulting_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file_to_be_returned": {"lazy": false}},"aliases": [],"description": "Checks the returned file, and if `self.file` is to be returned it is replaced with `self.file_for_return`.  This ensures correct behaviour in case of proxies (e.g. data links). If the original file is supposed to be returned, it is replaced with the proxy. If another file is returned (e.g. due to dry-run), then it is returned without changes."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "with_overridden_return", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file_for_return": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "File_Format_Metadata", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "If a conversion to `File_Format_Metadata` is needed, we delegate to the underlying file. Every `Writable_File` should be able to provide its file format metadata."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "File_Like", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "If a conversion to `File_Like` is needed, we delegate to the underlying file."},
{"module": "Standard.Base.System.File.Generic.Writable_File", "type": "Writable_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File_Like", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Data_Link_Access", "type": "Data_Link_Access", "name": "No_Follow", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_Access", "arguments": {},"aliases": [],"description": "The setting that requests from the operation to not follow the data-link, but instead read the raw data-link configuration directly.  This can be used when working with data-links programmatically.  If the option is provided for a file that is not a data-link, it is ignored."},
{"module": "Standard.Base.System.File.Existing_File_Behavior", "type": "Existing_File_Behavior", "name": "Overwrite", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Existing_File_Behavior", "arguments": {},"aliases": [],"description": "Replace the existing file in-place, with the new file.  Note: There is a risk of data loss if a failure occurs during the write operation."},
{"module": "Standard.Base.System.File.Existing_File_Behavior", "type": "Existing_File_Behavior", "name": "Backup", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Existing_File_Behavior", "arguments": {},"aliases": [],"description": "Creates a backup of the existing file (by appending a `.bak` suffix to the name) before replacing it with the new contents.  Note: This requires sufficient storage to have two copies of the file.       If an existing `.bak` file exists, it will be replaced."},
{"module": "Standard.Base.System.File.Existing_File_Behavior", "type": "Existing_File_Behavior", "name": "Append", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Existing_File_Behavior", "arguments": {},"aliases": [],"description": "Appends data to the existing file."},
{"module": "Standard.Base.System.File.Existing_File_Behavior", "type": "Existing_File_Behavior", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Existing_File_Behavior", "arguments": {},"aliases": [],"description": "If the file already exists, a `File_Error.Already_Exists` error is raised."},
{"module": "Standard.Base.System.File.Existing_File_Behavior", "type": "Existing_File_Behavior", "name": "widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"include_overwrite": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_backup": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_append": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_error": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": []},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Append", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "If the file is opened for `Write` access then bytes will be written to the end of the file rather than the beginning."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Create", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Create a new file if it does not exist."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Create_New", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Create a new file, failing if the file already exists."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Delete_On_Close", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Delete the underlying file on closing the stream."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Dsync", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Requires that every update to the file\u0027s content be written synchronously to the underlying storage device."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Read", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Open for read access."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Sparse", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Sparse file."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Sync", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Requires that every update to the file\u0027s content or metadata be written synchronously to the underlying storage device."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Truncate_Existing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "If the file already exists and is opened for `Write` access, the original contents will be removed."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "Write", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Access", "arguments": {},"aliases": [],"description": "Open file for write access."},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "ensure_only_allowed_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"operation_name": {"lazy": false, "type": "Text", "checked": true}, "allowed_options": {"lazy": false, "type": "Vector", "checked": true}, "got_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.System.File.File_Access", "type": "File_Access", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert this object into a representation understandable by the JVM."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "Permission", "name": "Read", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Permission", "arguments": {},"aliases": [],"description": "Permission for read access for a given entity."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "Permission", "name": "Write", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Permission", "arguments": {},"aliases": [],"description": "Permission for write access for a given entity."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "Permission", "name": "Execute", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Permission", "arguments": {},"aliases": [],"description": "Permission for execute access for a given entity."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Permissions", "arguments": {"owner": {"lazy": false, "type": "Vector Permission", "checked": true}, "group": {"lazy": false, "type": "Vector Permission", "checked": true}, "others": {"lazy": false, "type": "Vector Permission", "checked": true}},"aliases": [],"description": "Access permissions for a file."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "from_java_set", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"permissions": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Converts a Java `Set` of Java `PosixFilePermission` to `File_Permissions`."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Converts the Enso atom to its Java enum counterpart."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "owner_read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be read by the owner."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "owner_write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be written by the owner."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "owner_execute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be executed by the owner."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "group_read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be read by the group."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "group_write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be written by the group."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "group_execute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be executed by the group."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "others_read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be read by others."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "others_write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be written by others."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "others_execute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if the given file can be executed by others."},
{"module": "Standard.Base.System.File.File_Permissions", "type": "File_Permissions", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this File_Permissions."},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "Internal_Write_Operation_Panicked", "name": "Panic", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Write_Operation_Panicked", "arguments": {"cause": {"lazy": false, "type": "Caught_Panic", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "Internal_Write_Operation_Errored", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Write_Operation_Errored", "arguments": {"cause": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "instance", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "create_dry_run_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "copy_original": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "copy_local_from_local", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "moving_backup", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": [],"description": "A `Backup` strategy that does the following: 1. If the file does not exist, we write to it. 2. If the file exists, write to a temporary file.   i. If the write fails, do nothing more. The original file is kept intact.   ii. If the write succeeds, we move the original file to a backup location,       and then move the temporary new file to the target location.  This strategy assumes that the `move` operation on a single filesystem is cheap (it is a rename), and is optimized for that case."},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "write_file_backing_up_old_one", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "write_with_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "existing_file_behavior": {"lazy": false}, "action": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "catch_already_exists", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"handler": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File.Local_File_Write_Strategy", "type": "", "name": "recover_io_and_not_found", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Base.System.File.Write_Extensions", "type": "Text", "name": "write", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "Existing_File_Behavior.Backup"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["export", "output", "save", "to_file"],"group": "Output","icon": "data_output","description": "Writes (or appends) the text to the specified file using the supplied encoding. The behavior specified in the `existing_file` parameter will be used if the file exists. \n\n If a character cannot be converted to a byte, an `Encoding_Error` is raised. If `on_problems` is set to `Report_Warning` or `Ignore`, it is replaced with a substitute (either \u0027�\u0027 (if Unicode) or \u0027?\u0027 depending on the encoding). Otherwise, the process is aborted. If the path to the parent location cannot be found or the filename is invalid, a `File_Error.Not_Found` is raised. If another error occurs, such as access denied, an `File_Error.IO_Error` is raised. Otherwise, the file is created with the encoded text written to it.  The method returns a `File` object for the written file.","remarks": "? Dry Run    If writing to Output context is not enabled (such as in \"Design\" mode),   then this function will write to a temporary file. This temporary file will   be automatically deleted on exit of the Enso process.    This allows for building the workflow without affecting the real files."},
{"module": "Standard.Base.System.File.Write_Extensions", "type": "Vector", "name": "write_bytes", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "Existing_File_Behavior.Backup"}},"aliases": [],"icon": "data_output","description": "Writes (or appends) the Vector of bytes into the specified file. The behavior specified in the `existing_file` parameter will be used if the file exists. \n\n If the Vector contains any item which is not a `Byte`, an `Illegal_Argument` will be raised. Enso follows the Java convention, that a `Byte` is between -128 and 127. If the path to the parent location cannot be found or the filename is invalid, a `File_Not_Found` is raised. If another error occurs, such as access denied, an `File_Error.IO_Error` is raised. Otherwise, the file is created with the encoded text written to it.  The method returns a `File` object for the written file."},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "get_cwd", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets a file corresponding to the current working directory of the program."},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "get_file", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false}},"aliases": [],"description": "The builtin that returns a File instance for a given path."},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "is_directory_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "is_regular_file_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "resolve_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "part": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "create_directory_builtin", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Creates the directory represented by this file if it did not exist."},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "copy_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false}, "target": {"lazy": false}, "options": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "delete_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "recursive": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "move_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source": {"lazy": false}, "target": {"lazy": false}, "options": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "size_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "creation_time_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "last_modified_time_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "posix_permissions_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "read_last_bytes_builtin", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "n": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "output_stream_builtin", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "options": {"lazy": false}},"aliases": [],"description": "Creates a new output stream for this file. Recommended to use `File.with_output_stream` instead, which does resource management."},
{"module": "Standard.Base.System.Internal.File_Builtins", "type": "", "name": "input_stream_builtin", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "options": {"lazy": false}},"aliases": [],"description": "Creates a new input stream for this file. Recommended to use `File.with_input_stream` instead, which does resource management."},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "UTF_8", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unicode_BOM", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "UTF_16_LE", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unicode_BOM", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "UTF_16_BE", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unicode_BOM", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "as_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "Unicode_BOM", "name": "corresponding_encoding", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Encoding", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "run", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "allow_usage_in_background_threads": {"lazy": false, "type": "Boolean", "checked": true}, "continuation": {"lazy": false, "type": "ReportingStreamDecoder -> Any", "checked": true}},"aliases": [],"description": "Builds the `ReportingStreamDecoder`, consuming the `Input_Stream`. It will do any necessary encoding detection, as determined by the `Encoding`"},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "decode_bytes_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"bytes": {"lazy": false}, "encoding": {"lazy": false, "type": "Encoding", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "resolve_encoding", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true}, "buffered_input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "problem_aggregator": {"lazy": false, "type": "DecodingProblemAggregator", "checked": true}, "continuation": {"lazy": false, "type": "Encoding -> Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "detect_default_encoding", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"buffered_input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "problem_aggregator": {"lazy": false, "type": "DecodingProblemAggregator", "checked": true}, "continuation": {"lazy": false, "type": "Encoding -> Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "verify_unicode_encoding", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true}, "expected_bom": {"lazy": false, "type": "Unicode_BOM", "checked": true}, "buffered_input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "problem_aggregator": {"lazy": false, "type": "DecodingProblemAggregator", "checked": true}, "continuation": {"lazy": false, "type": "Encoding -> Input_Stream -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Internal.Reporting_Stream_Decoder_Helper", "type": "", "name": "detect_bom", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unicode_BOM | Nothing", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Process.Exit_Code", "type": "Exit_Code", "name": "Success", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Exit_Code", "arguments": {},"aliases": [],"description": "The process exited with a success."},
{"module": "Standard.Base.System.Process.Exit_Code", "type": "Exit_Code", "name": "Failure", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Exit_Code", "arguments": {"code": {"lazy": false}},"aliases": [],"description": "The process exited with a failure."},
{"module": "Standard.Base.System.Process.Exit_Code", "type": "Exit_Code", "name": "from_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"code": {"lazy": false}},"aliases": [],"description": "Create exit code from a number."},
{"module": "Standard.Base.System.Process.Exit_Code", "type": "Exit_Code", "name": "to_number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Convert exit code to a number."},
{"module": "Standard.Base.System.Process.Exit_Code", "type": "Exit_Code", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Exit_Code."},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Builder", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Process_Builder", "arguments": {"command": {"lazy": false}, "arguments": {"lazy": false}, "stdin": {"lazy": false}},"aliases": [],"description": "A builder object that is used to create operating system processes.","remarks": "? Creating a Builder   We recommend that you use this type with its builder interface. Start   by creating a `Builder \"command\"` and then call functions on it to   set arguments and standard output. It results in much clearer code."},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Builder", "name": "set_arguments", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"icon": "edit","description": "Sets the arguments that should be passed to the created process."},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Builder", "name": "set_stdin", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"stdin": {"lazy": false}},"aliases": [],"icon": "edit","description": "Sets the text that will be used to feed standard input to the created process."},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Builder", "name": "create", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"redirect_out_err": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "system","description": "Create a process using a builder returning the result of execution."},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Result", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Process_Result", "arguments": {"exit_code": {"lazy": false, "type": "Exit_Code", "checked": true}, "stdout": {"lazy": false, "type": "Text", "checked": true}, "stderr": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Process.Process_Builder", "type": "Process_Result", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this Process_Result."},
{"module": "Standard.Base.System.Environment", "type": "", "name": "get", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": ["read environment"],"icon": "system","description": "Returns a value of a specified environment variable or Nothing if such variable is not defined."},
{"module": "Standard.Base.System.File", "type": "File", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File", "arguments": {},"aliases": [],"description": "Represents a file or folder on the filesystem."},
{"module": "Standard.Base.System.File", "type": "File", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false}},"aliases": ["new file"],"group": "Input","icon": "data_input","description": "Creates a new file object, pointing to the given path.  Relative paths are resolved relative to the directory containing the currently running workflow. Thus, if the workflow is running in the Cloud, the relative paths will be resolved to Cloud files."},
{"module": "Standard.Base.System.File", "type": "File", "name": "create_temporary_file", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "default": "\"temp\""}, "suffix": {"lazy": false, "default": "\".tmp\""}},"aliases": [],"icon": "folder_add","description": "Creates a temporary file which will be deleted when Enso exits."},
{"module": "Standard.Base.System.File", "type": "File", "name": "current_directory", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["current directory"],"icon": "metadata","description": "Returns the current working directory (CWD) of the current program."},
{"module": "Standard.Base.System.File", "type": "File", "name": "home", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["home directory"],"icon": "folder","description": "Returns the home directory of the current user."},
{"module": "Standard.Base.System.File", "type": "File", "name": "create_dry_run_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"copy_original": {"lazy": false, "default": "False"}},"aliases": [],"description": "Create a dry run temporary file which will be deleted when Enso exits.  The same temporary file is returned for paths that point to the same location (not accounting for symlinks).  If this file is a temporary file that was generated by `create_dry_run_file` on another file, it is returned as-is."},
{"module": "Standard.Base.System.File", "type": "File", "name": "with_output_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new output stream for this file and runs the specified action on it.  The created stream is automatically closed when `action` returns (even if it returns exceptionally)."},
{"module": "Standard.Base.System.File", "type": "File", "name": "with_input_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"open_options": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Creates a new input stream for this file and runs the specified action on it. \n\n The created stream is automatically closed when `action` returns (even if it returns exceptionally)."},
{"module": "Standard.Base.System.File", "type": "File", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["import", "load", "open"],"group": "Input","icon": "data_input","description": "Read a file using the specified file format"},
{"module": "Standard.Base.System.File", "type": "File", "name": "read_bytes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["load bytes", "open bytes"],"icon": "data_input","description": "Reads all bytes in this file into a byte vector."},
{"module": "Standard.Base.System.File", "type": "File", "name": "read_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load text", "open text"],"icon": "data_input","description": "Reads the whole file into a `Text`, with specified encoding."},
{"module": "Standard.Base.System.File", "type": "File", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"subpath": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Operators","icon": "folder","description": "Join two path segments together."},
{"module": "Standard.Base.System.File", "type": "File", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"subpaths": {"lazy": false}},"aliases": [],"group": "Calculations","icon": "folder","description": "Join two or more path segments together, normalizing the `..` and `.` subpaths."},
{"module": "Standard.Base.System.File", "type": "File", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"subpath": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Internal method kept for compatibility, we should probably prefer `/` as it is used across all of our file systems."},
{"module": "Standard.Base.System.File", "type": "File", "name": "resolve_single_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"part": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An internal helper method that resolves a single part (subpath) of a path."},
{"module": "Standard.Base.System.File", "type": "File", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the file descriptor to a JS_Object."},
{"module": "Standard.Base.System.File", "type": "File", "name": "exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks whether the file exists.","remarks": "? Data Links   If the file is a data link, this checks if the data link itself exists.    It does not tell anything about existence of the data link target."},
{"module": "Standard.Base.System.File", "type": "File", "name": "size", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the size of a file in bytes.","remarks": "? Data Links   If the file is a data link that points to a file, the size of the    target file will be returned."},
{"module": "Standard.Base.System.File", "type": "File", "name": "starts_with", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"parent": {"lazy": false}},"aliases": [],"group": "Text","icon": "preparation","description": "Checks whether the file is within another path."},
{"module": "Standard.Base.System.File", "type": "File", "name": "creation_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the creation time of a file.","remarks": "? Data Links   If the file is a data link, this returns the creation time of the data    link."},
{"module": "Standard.Base.System.File", "type": "File", "name": "last_modified_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Gets the last modified time of a file.","remarks": "? Data Links   If the file is a data link, this returns the modification time of the    data link."},
{"module": "Standard.Base.System.File", "type": "File", "name": "posix_permissions", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets the POSIX permissions associated with the file.","remarks": "? Data Links   If the file is a data link, this returns the permissions of the link,    not the target."},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks whether the file exists and is a directory.","remarks": "? Data Links   If the file is a data link, this checks whether the target of the data    link is a directory."},
{"module": "Standard.Base.System.File", "type": "File", "name": "create_directory", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Output","icon": "folder_add","description": "Creates the directory represented by this file if it did not exist.  It also creates parent directories if they did not exist."},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_regular_file", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks whether the file exists and is a regular file.","remarks": "? Regular Files   A regular file is one that does not have any special meaning to the   operating system. Examples of files that are not regular are pipes,    devices, sockets and directories. \n\n? Data Links   If the file is a data link, this checks whether the target of the data    link is a regular file."},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_data_link", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_writable", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks whether it the file can be written to.","remarks": "? Read-only Files   If a file is read-only, it may still be possible to move or delete it,   depending on the permissions associated with its parent directory. \n\n? Data Links   If the file is a data link, this checks if the link itself is    modifiable."},
{"module": "Standard.Base.System.File", "type": "File", "name": "parent", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Resolves the parent filesystem node of this file.  The root directory has no parent, so this method will return `Nothing`. If the file is a relative path, the parent will be resolved relative to the current working directory."},
{"module": "Standard.Base.System.File", "type": "File", "name": "path", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the path of this file."},
{"module": "Standard.Base.System.File", "type": "File", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the name of this file."},
{"module": "Standard.Base.System.File", "type": "File", "name": "extension", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the extension of the file."},
{"module": "Standard.Base.System.File", "type": "File", "name": "absolute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Converts this file to an equivalent file represented with an absolute path."},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_absolute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Checks is this file\u0027s path is absolute."},
{"module": "Standard.Base.System.File", "type": "File", "name": "normalize", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "convert","description": "Normalizes the filepath."},
{"module": "Standard.Base.System.File", "type": "File", "name": "delete", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing ! File_Error", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Deletes the file.","remarks": "? Data Links   If the file is a data link, this will delete the link itself, not   affecting its target."},
{"module": "Standard.Base.System.File", "type": "File", "name": "copy_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Copies the file to the specified destination."},
{"module": "Standard.Base.System.File", "type": "File", "name": "move_to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false, "type": "File_Like", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Moves the file to the specified destination."},
{"module": "Standard.Base.System.File", "type": "File", "name": "delete_if_exists", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_output","description": "Deletes the file if it exists on disk."},
{"module": "Standard.Base.System.File", "type": "File", "name": "read_first_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}},"aliases": [],"description": "Reads first `n` bytes from the file (or less if the file is too small) and returns a vector of bytes."},
{"module": "Standard.Base.System.File", "type": "File", "name": "read_last_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}},"aliases": [],"description": "Reads last `n` bytes from the file (or less if the file is too small) and returns a vector of bytes."},
{"module": "Standard.Base.System.File", "type": "File", "name": "list", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_filter": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Input","icon": "data_input","description": "Lists files contained in the directory denoted by this file. \n\n The `name_filter` can contain the following special characters: - `\"?\"` - which matches a single filename character (so it will not match   a `\"/\"`). - `\"*\"` - which matches any number of characters, but again does not   cross directories. - `\"**\"` - which matches any number of characters and can cross   directories. - `\"\\\"` - can be used to escape the characters with special meaning; to   get a single backslash, you need to specify it twice; you also need to   keep in mind that the interpolating string literal also uses `\"\\\"` as   an escape sequence, so you need to type `\u0027\\\\\\\\\u0027` to get a single   backslash for the glob pattern, unless you use the raw strings, where   you only need to escape once: `\"\\\\\"`. - Brackets can be used to match exactly one character from some set of   characters. For example `\"[xy]\"` matches `\"x\"` or `\"y\"`. Character   ranges can also be specified: `\"[a-z]\"` matches any character from   `\"a\"` to `\"z\"`. An exclamation mark can be used to negate the match,   i.e. `\"[!xz]\"` will match any characters except for `\"x\"` and `\"z\"`.   Moreover the ranges and single characters can be used together, so for   example `\"[a-cxy]\"` will match `\"a\"`, `\"b\"`, `\"c\"`, `\"x\"` or `\"y\"`.   Within the brackets, the special characters `\"*\"`, `\"?\"` and `\"\\\"`   stand for themselves instead of their special meanings. - Braces allow to specify multiple patterns (separated with a comma), one   of which must be matched. For example: `\"{abc,x*}\"` will match either   the name `\"abc\"` or any name starting with `\"x\"`. The groups cannot be   nested.  If `recursive` is set to True and a `name_filter` does not contain `**`, it will be automatically prefixed with `**/` to allow matching files in subdirectories."},
{"module": "Standard.Base.System.File", "type": "File", "name": "is_descendant_of", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"group": "Metadata","icon": "metadata","description": "Checks if `self` is a descendant of `other`."},
{"module": "Standard.Base.System.File", "type": "File", "name": "relativize", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"child": {"lazy": false}},"aliases": [],"icon": "convert","description": "Transforms `child` to a relative path with respect to `self`."},
{"module": "Standard.Base.System.File", "type": "File", "name": "list_immediate_children", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Utility function that lists immediate children of a directory."},
{"module": "Standard.Base.System.File", "type": "File", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Return the path that this file represents."},
{"module": "Standard.Base.System.File", "type": "File", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert to a display representation of this File."},
{"module": "Standard.Base.System.File", "type": "", "name": "file_types", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File", "type": "", "name": "list_descendants", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Utility function that returns all descendants of the provided file, including that file itself. If the file is not a directory, a list containing only itself is returned."},
{"module": "Standard.Base.System.File", "type": "", "name": "resolve_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Resolves the given path to a corresponding file location.  If the provided path is relative, the behaviour depends on the context: - if the project is running in the Cloud, the path is resolved to a Cloud file,   relative to the project\u0027s location. - if running locally, the path is resolved to a local file, relative to the   current working directory.  The method also does some extra processing to ensure that if the path contains any data links, they will be correctly resolved. We cannot just directly construct the path from text - we instead find its root (or base directory if relative) and rely on the `/` operator to resolve all the parts, allowing the data link logic to kick in."},
{"module": "Standard.Base.System.File", "type": "", "name": "get_child_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "", "name": "find_extension_from_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Convert from a Text to a File."},
{"module": "Standard.Base.System.File", "type": "", "name": "file_as_java", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "File_Like", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "Writable_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "Data_Link_From_File", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "", "name": "_local_file_copy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "", "name": "_local_file_move", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing", "arguments": {"source": {"lazy": false, "type": "File", "checked": true}, "destination": {"lazy": false, "type": "File", "checked": true}, "replace_existing": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File", "type": "", "name": "handle_invalid_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": true}, "action": {"lazy": true}},"aliases": [],"description": "On some filesystems some paths may be invalid, we want to catch the Java exception and turn it into an Enso error."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "Reader", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_By_Line", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true}, "limit_lines": {"lazy": false, "type": "Integer|Nothing", "checked": true}, "filter_func": {"lazy": false}, "row_map": {"lazy": false}, "file_end": {"lazy": false, "default": "file.size"}},"aliases": [],"description": "Creates a new File_By_Line object."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "offset": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"icon": "data_input","description": "Creates a new File_By_Line object."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"line": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Selections","icon": "parse3","description": "Reads a specific line from the file."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Reads the first line"},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Selections","icon": "parse3","description": "Reads the first line"},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Counts the number of lines in the file."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "convert","description": "Returns the lines in the file as a vector."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "each", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "parse3","description": "Performs an action on each line."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "each_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"icon": "parse3","description": "Performs an action on each line. \n\n The function is called with both the element index as well as the element itself."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Transforms each line in the file and returns the result as a vector."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "map_with_index", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Transforms each line in the file and returns the result as a vector."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "skip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"lines": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Selections","icon": "select_row","description": "Skips the specified number of lines."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "limit", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"lines": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Selections","icon": "parse3","description": "Limits a file to a specific number of lines."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"predicate": {"lazy": false}},"aliases": [],"group": "Selections","icon": "preparation","description": "Filters the file by a predicate."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "row_positions", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Exports the row_map"},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "java_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the Java_File for the backing file."},
{"module": "Standard.Base.System.File_By_Line", "type": "File_By_Line", "name": "charset", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the encoding as a Java Charset."},
{"module": "Standard.Base.System.File_By_Line", "type": "", "name": "read_line", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_By_Line", "checked": true}, "line": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "default": {"lazy": true, "default": "Nothing"}},"aliases": [],"description": "Reads a specific line from the file."},
{"module": "Standard.Base.System.File_By_Line", "type": "", "name": "for_each_lines", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_By_Line", "checked": true}, "start_at": {"lazy": false, "type": "Integer", "checked": true}, "end_at": {"lazy": false, "type": "Integer|Nothing", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Performs an action on each line in the file."},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Auto_Detect", "arguments": {},"aliases": [],"description": "Automatically detects the file format based on the file extension or mime-type."},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "get_reading_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Finds a matching format for reading the file.  It assumes that `file` already exists."},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "get_writing_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Finds a matching format for reading the file.  It may not assume that the `file` exists, so it must only rely on the file path (extension in particular), but not the contents."},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": [],"description": "Returns the union of name patterns of all currently loaded formats, since `Auto_Detect` should be able to read any of the loaded formats."},
{"module": "Standard.Base.System.File_Format", "type": "Auto_Detect", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Format", "arguments": {},"aliases": [],"description": "Interface for all file formats."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Gets all the currently available file formats.  The available file formats are ones provided by libraries which are imported within the current project. Importing an new library may cause more entries to show up on this list."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A static method on each format that returns a vector of options that can be displayed in format selectors that allow choosing this file format.  A single format instance can provide multiple options to choose, or none at all."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": [],"description": "A static method on each format that returns a vector of name pattern options that can be displayed in the `name_filter_widget`."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "all_known_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Text", "arguments": {},"aliases": [],"description": "Returns a list of all name patterns of all known file formats."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "name_filter_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": [],"description": "Builds a widget intended to be used for `name_filter` of `File.list` and its siblings that allows to filter file names by file format."},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.System.File_Format", "type": "File_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "Plain_Text", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Plain_Text_Format", "arguments": {"encoding": {"lazy": false, "type": "Encoding | Infer", "checked": true, "default": "Infer"}},"aliases": [],"description": "A file format for plain text files with the specified encoding."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Base.System.File_Format", "type": "Plain_Text_Format", "name": "resolve_encoding", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bytes", "arguments": {},"aliases": [],"description": "A file format for reading or writing files as a sequence of bytes."},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.System.File_Format", "type": "Bytes", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "JSON_Format", "arguments": {},"aliases": [],"description": "A file format for reading and writing files as JSON."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Base.System.File_Format", "type": "Infer", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Infer", "arguments": {},"aliases": [],"description": "A setting to infer the default behaviour of some option."},
{"module": "Standard.Base.System.File_Format", "type": "File_Name_Pattern", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Name_Pattern", "arguments": {"display_name": {"lazy": false, "type": "Text", "checked": true}, "patterns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "Represents a single file pattern entry. It may still contain multiple patterns that are related to a single type of file.  Each pattern should comply with the format expected by `name_filter` in `File.list`, however, the patterns should not use the `{a,b}` syntax, as it will be used by the `File_Format` to merge patterns and nesting it would not be allowed."},
{"module": "Standard.Base.System.File_Format", "type": "", "name": "format_types", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "", "name": "get_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"callback": {"lazy": false}},"aliases": [],"description": "Gets the first format not returning Nothing from the callback"},
{"module": "Standard.Base.System.File_Format", "type": "", "name": "_combine_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"patterns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "Combines a set of file name patterns into a single pattern that will match any of them. It is compatible with the `name_filter` format of `File.list`."},
{"module": "Standard.Base.System.File_Format", "type": "JSON_Format", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File_Format", "type": "", "name": "parse_boolean_with_infer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean | Infer", "arguments": {"field_name": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Boolean | Text | Nothing", "checked": true}},"aliases": [],"description": "A helper for parsing the JSON representation of `Boolean | Infer`. It defaults to `Infer` if the value was `Nothing`."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Format_Metadata", "arguments": {"path": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}, "name": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}, "extension": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}, "read_first_bytes": {"lazy": false, "type": "Integer -> Nothing | Vector Integer", "checked": true, "default": "_-\u003eNothing"}, "content_type": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "no_information", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An instance that contains no information at all."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "interpret_content_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A helper method that encapsulates the common logic of trying to interpret the content type."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "guess_extension", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Uses the provided extension or if it is not present, tries to guess one based on the filename."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "Content_Type_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Content_Type_Metadata", "arguments": {"segments": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "Content_Type_Metadata", "name": "base_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "Content_Type_Metadata", "name": "find_segment", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Finds for a segment that starts with the given prefix."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "Content_Type_Metadata", "name": "raw_charset", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the name of the charset as reported by the content type."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "Content_Type_Metadata", "name": "encoding", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns an `Encoding` instance that represents the charset as reported by the content type.  It may so happen that `raw_charset` returns a non-Nothing value, but the charset is not recognized. In that case this function will return `Nothing`."},
{"module": "Standard.Base.System.File_Format_Metadata", "type": "File_Format_Metadata", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Input_Stream", "arguments": {"stream_resource": {"lazy": false}, "error_handler": {"lazy": false}, "associated_source": {"lazy": false, "type": "Nothing | File | Temporary_File | Vector | Array", "checked": true}},"aliases": [],"description": "An input stream, allowing for interactive reading of contents."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"java_stream": {"lazy": false}, "error_handler": {"lazy": false}, "associated_source": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Given a Java InputStream, wraps as a Managed_Resource and returns a new Input_Stream."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "from_bytes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Input_Stream", "arguments": {"bytes": {"lazy": false}},"aliases": [],"description": "Creates a new input stream from a vector of bytes."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "read_all_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Reads all the bytes in this stream into a vector of bytes."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "read_n_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Reads up to the provided number of bytes from the stream.  Makes a best-effort to read as many bytes as provided, however fewer bytes may be read, if end of stream is encountered.  The length of the returned vector is the same as the number of bytes read."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "skip_n_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "It may throw an error if not enough bytes are available."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "read_byte", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Reads the next byte from the stream.  The returned value is an integer in the range 0-255 representing the next byte of input, or -1 if end of stream is reached."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "close", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Closes this stream.  Even though Streams are closed automatically upon garbage collection, it is still advised to close streams manually if they are not used within a bracket pattern."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "with_java_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Exposes operations on the underlying Java input stream.  Useful when integrating with polyglot functions requiring an `InputStream` as an argument."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "with_stream_decoder", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Runs an action with a `ReportingStreamDecoder` decoding data from the input stream with the specified encoding."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "as_restartable_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Restartable_Input_Stream", "arguments": {"extend_lifetime": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Converts this stream into a restartable stream.  The conversion tries to be efficient, avoiding reading the stream if it is simply backed by a file or byte array. This stream is invalidated after the conversion."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "is_peekable", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "as_peekable_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Input_Stream", "arguments": {},"aliases": [],"description": "Converts this stream into a stream that can be peeked. This is useful when some application needs to look ahead in the stream, but then needs to pass it further with the same state.  The peeked bytes are cached in memory, so this should only be used for small amounts of data. If more data has to be processed more than once, `as_restartable_stream` is preferred.  The current stream may be invalidated after the conversion, and it should no longer be used - only the returned stream should be used."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "peek_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Integer", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Peeks up to the provided number of bytes from the stream.  Makes a best-effort to read as many bytes as provided, however fewer bytes may be read, if end of stream is encountered.  The length of the returned vector is the same as the number of bytes read.  No bytes are consumed from the stream - a next read or peek operation will see the same contents as before this call.  This operation is only allowed if `is_peekable` returns `True`."},
{"module": "Standard.Base.System.Input_Stream", "type": "Input_Stream", "name": "write_to_file", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "Reads the contents of this stream into a given file."},
{"module": "Standard.Base.System.Input_Stream", "type": "", "name": "close_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false}},"aliases": [],"description": "Utility method for closing primitive Java streams. Provided to avoid accidental scope capture with `Managed_Resource` finalizers."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Output_Stream", "arguments": {"stream_resource": {"lazy": false}, "error_handler": {"lazy": false}},"aliases": [],"description": "An output stream, allowing for interactive writing of contents."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"java_stream": {"lazy": false}, "error_handler": {"lazy": false}},"aliases": [],"description": "Given a Java OutputStream, wraps as a Managed_Resource and returns a new Output_Stream."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "with_memory_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Pair Vector Any", "arguments": {"action": {"lazy": false, "type": "Output_Stream -> Any", "checked": true}},"aliases": [],"description": "Runs a given action with an output stream that writes to an in-memory byte array. This method can be used when the data will fit in memory and there is no reason to use a backing file.  The method returns a pair of values: the byte array that was written to and the return value of the `action` is discarded."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "write_bytes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"contents": {"lazy": false}},"aliases": [],"description": "Writes a vector of bytes in this stream at the current position."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "write_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"input_stream": {"lazy": false, "type": "Input_Stream", "checked": true}},"aliases": [],"description": "Writes an Input_Stream into this stream at the current position."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "close", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Closes this stream.  Even though Streams are closed automatically upon garbage collection, it is still advised to close streams manually if they are not used within a bracket pattern."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "with_java_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Exposes operations on the underlying Java output stream.  Useful when integrating with polyglot functions requiring an `OutputStream` as an argument."},
{"module": "Standard.Base.System.Output_Stream", "type": "Output_Stream", "name": "with_stream_encoder", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "action": {"lazy": false}},"aliases": [],"description": "Runs an action with a `ReportingStreamEncoder` encoding data to the output stream with the specified encoding."},
{"module": "Standard.Base.System.Platform", "type": "OS", "name": "Linux", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "OS", "arguments": {},"aliases": [],"description": "The Linux operating system."},
{"module": "Standard.Base.System.Platform", "type": "OS", "name": "Mac_OS", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "OS", "arguments": {},"aliases": [],"description": "The macOS operating system."},
{"module": "Standard.Base.System.Platform", "type": "OS", "name": "Windows", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "OS", "arguments": {},"aliases": [],"description": "The Windows operating system."},
{"module": "Standard.Base.System.Platform", "type": "OS", "name": "Unknown", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "OS", "arguments": {},"aliases": [],"description": "An unknown operating system."},
{"module": "Standard.Base.System.Platform", "type": "", "name": "os", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "system","description": "Return the type of operating system."},
{"module": "Standard.Base.System.Platform", "type": "", "name": "is_unix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Check if the operating system is UNIX."},
{"module": "Standard.Base.System.Platform", "type": "", "name": "from_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"os": {"lazy": false}},"aliases": [],"description": "Create an Os object from text."},
{"module": "Standard.Base.System.Process", "type": "", "name": "run", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"command": {"lazy": false, "type": "Text", "checked": true}, "arguments": {"lazy": false, "default": "[]"}, "stdin": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "redirect_out_err": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["run a command"],"group": "Input","icon": "system","description": "Call a command with a list of arguments."},
{"module": "Standard.Base.System.Process", "type": "", "name": "new_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"command": {"lazy": false}, "arguments": {"lazy": false, "default": "[]"}, "stdin": {"lazy": false, "default": "\"\""}},"aliases": [],"description": "Create a new process builder."},
{"module": "Standard.Base.Any", "type": "Any", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {},"aliases": [],"description": "Any is the universal top-type, with all other types being subsumed by it.  If a value of type Any is expected in a given location, _any value_ can be used in that position."},
{"module": "Standard.Base.Any", "type": "Any", "name": "to", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"target_type": {"lazy": false}},"aliases": [],"group": "Conversions","icon": "convert","description": "Generic conversion of an arbitrary Enso value to requested type. Delegates to appropriate `.from` conversion method, if it exists. If such method doesn\u0027t exist, `No_Such_Conversion` panic is raised."},
{"module": "Standard.Base.Any", "type": "Any", "name": "to_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Conversions","icon": "text","description": "Generic conversion of an arbitrary Enso value to a corresponding textual representation."},
{"module": "Standard.Base.Any", "type": "Any", "name": "pretty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "convert","icon": "enso_logo","description": "Convert the value to a corresponding Enso code representation."},
{"module": "Standard.Base.Any", "type": "Any", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generic conversion of an arbitrary Enso value to a corresponding short human-readable representation."},
{"module": "Standard.Base.Any", "type": "Any", "name": "==", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["equals"],"group": "Operators","icon": "operators","description": "Checks if `self` is equal to `that`. \n\n Two values are considered to be equal in Enso when they obey the following recursive properties: - At each level, they have the same structure. - The value of each field in `self` is equal (by this definition) to the   corresponding field in `that`.","remarks": "! Implementing Your Own Equality   Equality in Enso is defined to allow comparison of any two values   (universal equality), no matter if they are not directly comparable. When   implementing equality for your own types, keep in mind that it needs to   work with any Enso value as the `that` argument. \n\n! Unicode Equality   The definition of equality includes Unicode canonicalization. I.e. two   texts are equal if they are identical after canonical decomposition. This   ensures that different ways of expressing the same character in the   underlying binary representation are considered equal. \n\n? Generic Equality and Performance   While the generic equality provided here will work for _all_ values in   Enso, its performance may often be suboptimal. Many types can implement   their own equality operations that will be more efficient than these."},
{"module": "Standard.Base.Any", "type": "Any", "name": "!=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["not equals"],"group": "Operators","icon": "operators","description": "Checks if `self` is not equal to `that`.","remarks": "! Implementing Your Own Inequality   We recommend that you do not implement your own inequality, instead relying   on the default definition given here. If you do, please ensure that you   satisfy universal equality, as described in the documentation for `Any.==`."},
{"module": "Standard.Base.Any", "type": "Any", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["greater than"],"group": "Operators","icon": "operators","description": "Checks if `self` is greater than `that`. \n\n To be comparable, a custom object must have an associated comparator which will return `Ordering.Less/Greater` for unequal values. Otherwise, this will raise `Incomparable_Values` error. See `Ordering.enso` for information how comparators work."},
{"module": "Standard.Base.Any", "type": "Any", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["greater than or equal"],"group": "Operators","icon": "operators","description": "Checks if `self` is greater than or equal to `that`.","remarks": "! Implementing Greater Than or Equal   While it is often possible to implement a more efficient version of this   operation for complex types, care must be taken to ensure that your   implementation is semantically equivalent to the disjunction of the   greater than and equal to operations."},
{"module": "Standard.Base.Any", "type": "Any", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["less than"],"group": "Operators","icon": "operators","description": "Checks if `self` is less than `that`. \n\n To be comparable, a custom object must have an associated comparator which will return `Ordering.Less/Greater` for unequal values. Otherwise, this will raise `Incomparable_Values` error. See `Ordering.enso` for information how comparators work."},
{"module": "Standard.Base.Any", "type": "Any", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": ["less than or equal"],"group": "Operators","icon": "operators","description": "Checks if `self` is less than or equal to `that`. \n\n To have `\u003c=` defined, a type must define both `\u003c` and `==`.","remarks": "! Implementing Less Than or Equal   While it is often possible to implement a more efficient version of this   operation for complex types, care must be taken to ensure that your   implementation is semantically equivalent to the disjunction of the   less than than and equal to operations."},
{"module": "Standard.Base.Any", "type": "Any", "name": "is_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the type is an instance of `Nothing`.  Nothing in Enso is used as a universal value to indicate the lack of presence of a value. This function is primarily useful in the IDE."},
{"module": "Standard.Base.Any", "type": "Any", "name": "if_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "If `self` is Nothing then returns `other`."},
{"module": "Standard.Base.Any", "type": "Any", "name": "if_not_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "If `self` is Nothing then returns Nothing, otherwise returns the result of running the provided `action`."},
{"module": "Standard.Base.Any", "type": "Any", "name": "catch", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"error_type": {"lazy": false, "default": "Any"}, "handler": {"lazy": false, "default": "x-\u003ex"}},"aliases": [],"group": "Errors","icon": "error","description": "Executes the provided handler on an error, or returns the value unchanged."},
{"module": "Standard.Base.Any", "type": "Any", "name": "catch_primitive", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"handler": {"lazy": false}},"aliases": [],"description": "Executes the provided handler on a dataflow error, or executes as identity on a non-error value."},
{"module": "Standard.Base.Any", "type": "Any", "name": "map_error", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": true}},"aliases": [],"icon": "column_add","description": "Transforms an error. \n\n If `self` is a non-error value it is returned unchanged. However, if `self` is an error, the error is transformed using the provided function."},
{"module": "Standard.Base.Any", "type": "Any", "name": "is_error", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Errors","icon": "error","description": "Checks if `self` is an error."},
{"module": "Standard.Base.Any", "type": "Any", "name": "if_not_error", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"other": {"lazy": true}},"aliases": [],"description": "Returns the provided `other` value, unless `self` is an error. \n\n The primary application of this function is to introduce a dataflow dependency between two otherwise unrelated operations. Very useful if one of the operations is performing a side-effect.  Aside from ensuring that any dataflow errors are propagated, the result will also inherit any warnings attached to any of the two inputs."},
{"module": "Standard.Base.Any", "type": "Any", "name": "map_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Applies the provided function to `self` unless `self` is `Nothing`, which is returned unchanged."},
{"module": "Standard.Base.Any", "type": "Any", "name": "|>", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": true}},"aliases": [],"group": "Operators","description": "Applies the function on the right hand side to the argument on the left.","remarks": "? `|\u003e` or `.`?   The eagle-eyed reader will notice that the operator dot (`.`) is very   similar to the operator `|\u003e`. In Enso, with the variable precedence of   operators, this makes perfect sense. In general, we recommend using `.`.   However, there are some contexts where variable precedence might be unclear   or confusing, or where the function being applied is not a method. In these   contexts we recommend using `|\u003e`."},
{"module": "Standard.Base.Any", "type": "Any", "name": "has_warnings", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"group": "Errors","icon": "metadata","description": "Checks if any warnings (either all or of a specified type) are attached to the value."},
{"module": "Standard.Base.Any", "type": "Any", "name": "remove_warnings", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"group": "Errors","icon": "warning","description": "Remove the warnings (either all or of a specified type) attached to the value."},
{"module": "Standard.Base.Any", "type": "Any", "name": "throw_on_warning", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"group": "Errors","icon": "error","description": "Throws the first matching warning (either all or of a specified type) as a data flow error."},
{"module": "Standard.Base.Data", "type": "Raw_Response", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Raw_Response", "arguments": {},"aliases": [],"description": "If the `format` is set to `Raw_Response`, a raw HTTP `Response` is returned that can be then processed further manually."},
{"module": "Standard.Base.Data", "type": "Raw_Response", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Data", "type": "", "name": "read", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "default": "Missing_Argument.throw \"path\""}, "format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load", "open"],"group": "Input","icon": "data_input","description": "Reads a file into Enso. Uses the specified file format to parse the file into an Enso type. If not specified will use the file\u0027s extension to determine the file format.","remarks": "! Request Caching    Responses to HTTP data requests are cached, and additional requests for the   same resources will use the cache, saving a round-trip call to the remote   server. Two resources are considered the same if the URIs and request   headers are the same. Header order does not affect sameness.    The cache respects the \"max-age\" and \"Age\" response headers; see   `Data.fetch` for more details.    The cached values are retained as long as the project remains open. Closing   a project will clear the cache."},
{"module": "Standard.Base.Data", "type": "", "name": "read_many", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"paths": {"lazy": false, "type": "Many_Files_List", "checked": true, "default": "Missing_Argument.throw \"paths\""}, "format": {"lazy": false, "default": "Auto_Detect"}, "return": {"lazy": false, "default": "..As_Merged_Table"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load", "open"],"group": "Input","icon": "data_input","description": "Reads a a list of files into Enso.","remarks": "! Request Caching    Responses to HTTP data requests are cached, and additional requests for the   same resources will use the cache, saving a round-trip call to the remote   server. Two resources are considered the same if the URIs and request   headers are the same. Header order does not affect sameness.    The cache respects the \"max-age\" and \"Age\" response headers; see   `Data.fetch` for more details.    The cached values are retained as long as the project remains open. Closing   a project will clear the cache."},
{"module": "Standard.Base.Data", "type": "", "name": "read_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false, "default": "Missing_Argument.throw \"path\""}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["load text", "open text"],"group": "Input","icon": "data_input","description": "Open and read the file at the provided `path`."},
{"module": "Standard.Base.Data", "type": "", "name": "list", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"directory": {"lazy": false, "default": "enso_project.root"}, "name_filter": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "recursive": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Input","icon": "data_input","description": "Lists files contained in the provided directory.","remarks": "? Name Filter Rules  The `name_filter` can contain the following special characters: - `\"?\"` - which matches a single filename character (so it will not match a   `\"/\"`). - `\"*\"` - which matches any number of characters, but again does not cross   directories. - `\"**\"` - which matches any number of characters and can cross directories. - `\"\\\"` - can be used to escape the characters with special meaning; to get a   single backslash, you need to specify it twice; you also need to keep in   mind that the interpolating string literal also uses `\"\\\"` as an escape   sequence, so you need to type `\u0027\\\\\\\\\u0027` to get a single backslash for the   glob pattern, unless you use the raw strings, where you only need to escape   once: `\"\\\\\"`. - Brackets can be used to match exactly one character from some set of   characters. For example `\"[xy]\"` matches `\"x\"` or `\"y\"`. Character ranges   can also be specified: `\"[a-z]\"` matches any character from `\"a\"` to `\"z\"`.   An exclamation mark can be used to negate the match, i.e. `\"[!xz]\"` will   match any characters except for `\"x\"` and `\"z\"`. Moreover the ranges and   single characters can be used together, so for example `\"[a-cxy]\"` will   match `\"a\"`, `\"b\"`, `\"c\"`, `\"x\"` or `\"y\"`. Within the brackets, the special   characters `\"*\"`, `\"?\"` and `\"\\\"` stand for themselves instead of their   special meanings. - Braces allow to specify multiple patterns (separated with a comma), one of   which must be matched. For example: `\"{abc,x*}\"` will match either the name   `\"abc\"` or any name starting with `\"x\"`. The groups cannot be nested.  Keep in mind that if `recursive` is set to True and a `name_filter` is used, the function will return files from subdirectories only if the set `name_filter` allows crossing directories. So even with `recursive=True` a filter `\"*.txt\"` will only return files that are immediate children of the listed directory, to list files recursively you need to use a filter like `\"**.txt\"` or `\"*/*\"` (which will match only files that are exactly one directory down from the listed directory) or no filter at all."},
{"module": "Standard.Base.Data", "type": "", "name": "fetch", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI | Text", "checked": true, "default": "Missing_Argument.throw \"uri\""}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "format": {"lazy": false, "default": "Auto_Detect"}, "cache_policy": {"lazy": false, "type": "Cache_Policy", "checked": true, "default": "..Default"}},"aliases": ["download", "http get"],"group": "Input","icon": "data_input","description": "Fetches from the provided URI and returns the response, parsing the body if the content-type is recognised. Returns an  error if the status code does not represent a successful response.","remarks": "! Request Caching    Responses to HTTP data requests are cached, and additional requests for the   same resources will use the cache, saving a round-trip call to the remote   server. Two resources are considered the same if the URIs and request   headers are the same. Header order does not affect sameness.    The cached values are retained as long as the project remains open. Closing   a project will clear the cache.    The cache respects the \"max-age\" and \"Age\" response headers received from   remote servers. These headers are used to determine if the cached value is   fresh or stale. If it is stale, the cached value is removed and a request   is made again to the remote servers.    The following limits are imposed on values stored in the cache:   - Single file limit: a single file can be no more than 10M.   - Total cache size limit: the entire cache can be no more than 10G.    For data responses over the single file limit, you can use `Data.download`   to download the file locally. Download sizes are not constrained by either   limit.    If the entire cache goes over the total cache size limit, the   least-recently-used entries are removed."},
{"module": "Standard.Base.Data", "type": "", "name": "post", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI | Text", "checked": true, "default": "Missing_Argument.throw \"uri\""}, "body": {"lazy": false, "type": "Request_Body", "checked": true, "default": "..Empty"}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Post"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}, "response_format": {"lazy": false, "default": "Auto_Detect"}},"aliases": ["http post", "upload"],"group": "Output","icon": "data_upload","description": "Writes the provided data to the provided URI. Returns the response, parsing the body if the content-type is recognised. Returns an  error if the status code does not represent a successful response.","remarks": "! Supported Body Types    - Request_Body.Text: Sends a text string, with optional encoding and content     type.   - Request_Body.Json: Sends an Enso object, after converting it to JSON.   - Request_Body.Binary: Sends a file.   - Request_Body.Form_Data: Sends a form encoded as key/value pairs. The keys     must be `Text`, and the values must be `Text` or `File`.   - Request_Body.Empty: Sends an empty body.    Additionally, the following types are allowed as the `body` parameter:    - Text: shorthand for `Request_Body.Text that_text`.   - File: shorthand for `Request_Body.Binary that_file`.   - Any other Enso object: shorthand for `Request_Body.Json that_object`. \n\n! Specifying Content Types    If the `body` parameter specifies an explicit content type, then it is an   error to also specify additional `Content-Type` headers in the `headers`   parameter. (It is not an error to specify multiple `Content-Type` values in   `headers`, however.) \n\n! Default Content Types    The following specifies the default content type for each `Request_Body`   type.    - Request_Body.Text: `text/plain`   - Request_Body.Json: `application/json`   - Request_Body.Binary: `application/octet-stream`   - Request_Body.Form_Data:         If `url_encoded` is True: `application/x-www-form-urlencoded`         If `url_encoded` is False: `multipart/form-data`   - Request_Body.Empty: No content type is sent   - Text: `text/plain`   - File: `application/octet-stream`   - Any other Enso object: `application/json` \n\n! Specifying Text Encodings    Text encoding can be specified in the `encoding` parameter to the   `Request_Body.Text` constructor. This value will be added to the   `Content-Type` header.    If a value for `encoding` is specified, but no value for `content_type` is   specified, then `\"text/plain\"` is used as the content type."},
{"module": "Standard.Base.Data", "type": "", "name": "download", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"uri": {"lazy": false, "type": "URI | Text", "checked": true, "default": "Missing_Argument.throw \"uri\""}, "file": {"lazy": false, "type": "Writable_File", "checked": true}, "replace_existing": {"lazy": false, "type": "Download_Mode", "checked": true, "default": "..If_Not_Exists"}, "method": {"lazy": false, "type": "HTTP_Method", "checked": true, "default": "..Get"}, "headers": {"lazy": false, "type": "Vector (Header | Pair Text Text)", "checked": true, "default": "[]"}},"aliases": [],"group": "Input","icon": "select_column","description": "Fetches from the provided URI and if successful writes to the file. Returns an error if the status code does not represent a successful response."},
{"module": "Standard.Base.Error", "type": "Error", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Error", "arguments": {},"aliases": [],"description": "A type representing dataflow errors.  A dataflow error in Enso is one that behaves like a standard value, and hence represents erroneous states in a way that exists _within_ standard control flow.","remarks": "? Dataflow Errors or Panics   Whilst a Panic is useful for unrecoverable situations, most Enso APIs   are designed to use dataflow errors instead. As they exist within the   normal program control flow, they are able to be represented on the   Enso graph."},
{"module": "Standard.Base.Error", "type": "Error", "name": "throw", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"payload": {"lazy": false}},"aliases": [],"description": "Creates a new dataflow error containing the provided payload."},
{"module": "Standard.Base.Error", "type": "Error", "name": "unwrap", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error_value": {"lazy": false}},"aliases": [],"description": "Remove all wrapping errors, returning the inner error. If the argument is not a wrapping error, it is returned unchanged."},
{"module": "Standard.Base.Error", "type": "Error", "name": "get_stack_trace_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "UNSTABLE", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a textual representation of the stack trace attached to an error."},
{"module": "Standard.Base.Error", "type": "Error", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts an error to a corresponding textual representation."},
{"module": "Standard.Base.Error", "type": "Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a human-readable text representing this error."},
{"module": "Standard.Base.Error", "type": "Error", "name": "catch", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"error_type": {"lazy": false, "default": "Any"}, "handler": {"lazy": false, "default": "x-\u003ex"}},"aliases": [],"group": "Errors","icon": "error","description": "Executes the provided handler on an error, or returns the value unchanged.","remarks": "! Wrapped Errors    A wrapped error is one that has been wrapped inside another error. For   example, an error thrown in a `Vector.map operation` at index 3 would   look like this:        `(Map_Error.Error 3 (Some_Error.Error \"an error occurred\"))`     A wrapped error can be caught either as as the inner error, or as the    outer error, by using the `error_type` parameter. If it is caught as    the inner error, the outer wrapping error is removed. If    `error_wrapper` is unspecified or `Any`, the error is caught as the    outer error.     A wrapping error must implement a conversion to `Wrapped_Error` to be    treated properly as a wrapping error."},
{"module": "Standard.Base.Error", "type": "Error", "name": "map_error", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"icon": "column_add","description": "Transforms an error. \n\n If `self` is a non-error value it is returned unchanged. However, if `self` is an error, the error is transformed using the provided function"},
{"module": "Standard.Base.Error", "type": "Error", "name": "stack_trace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Errors","icon": "metadata","description": "Returns the attached stack trace of the error.  The ordering of the resulting vector is such that the top stack frame is the first element."},
{"module": "Standard.Base.Error", "type": "Error", "name": "is_error", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Errors","icon": "error","description": "Checks if `self` is an error."},
{"module": "Standard.Base.Error", "type": "Error", "name": "if_not_error", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"other": {"lazy": true}},"aliases": [],"description": "Returns the provided `other` value, unless `self` is an error. \n\n The primary application of this function is to introduce a dataflow dependency between two otherwise unrelated operations. Very useful if one of the operations is performing a side-effect.  Aside from ensuring that any dataflow errors are propagated, the result will also inherit any warnings attached to any of the two inputs."},
{"module": "Standard.Base.Error", "type": "", "name": "look_for_wrapped_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error_type": {"lazy": false, "default": "Any"}, "error_value": {"lazy": false}},"aliases": [],"description": "Unwrap a wrapped error 0 or more times until the specified type is found. Returns None if it is not found."},
{"module": "Standard.Base.Function", "type": "Function", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Function", "arguments": {},"aliases": [],"description": "A function is any type that represents a not-yet evaluated computation.  Methods are represented as functions with dynamic dispatch semantics on the this argument."},
{"module": "Standard.Base.Function", "type": "Function", "name": "<|", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": true}},"aliases": [],"group": "Operators","icon": "operators","description": "Applies the function `self` to the provided argument.","remarks": "? Piping Blocks to Functions   This construction is particularly useful for passing a block as an argument   to a function. This means that you can compute more sophisticated values   in-line, as shown in the example below."},
{"module": "Standard.Base.Function", "type": "Function", "name": "<<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"that": {"lazy": true}},"aliases": [],"group": "Operators","icon": "operators","description": "Composes two functions together, for `f \u003c\u003c g` creating the function composition `f ∘ g` (equivalent to `x -\u003e f (g x)`)."},
{"module": "Standard.Base.Function", "type": "Function", "name": ">>", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"that": {"lazy": true}},"aliases": [],"group": "Operators","icon": "operators","description": "Composes two functions together in the forward direction, for `f \u003e\u003e g` creating the function composition `g ∘ f` (equivalent to `x -\u003e g (f (x))`)."},
{"module": "Standard.Base.Function", "type": "", "name": "identity", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"icon": "braces","description": "An identity function which returns the provided argument."},
{"module": "Standard.Base.Function", "type": "", "name": "flip", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "comment": "- f function that takes two arguments"}},"aliases": [],"icon": "braces","description": "Flips the first two arguments of a function. Returns function that takes two arguments, but in opposite order."},
{"module": "Standard.Base.Function", "type": "", "name": "const", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false, "comment": "- x constant value to return"}, "f": {"lazy": true}},"aliases": [],"icon": "braces","description": "Creates a function which drops its input and returns the provided value instead. The expression const a is the same as \\_ -\u003e a."},
{"module": "Standard.Base.Function", "type": "", "name": "curry", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "comment": "- f function accepting pair of values"}},"aliases": [],"icon": "braces","description": "Converts a single-argument function accepting a pair of elements into a multi-argument one."},
{"module": "Standard.Base.Function", "type": "", "name": "uncurry", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "comment": "- f function accepting multiple arguments"}},"aliases": [],"icon": "braces","description": "Converts a multi-argument function into a single-argument one accepting a pair of elements."},
{"module": "Standard.Base.IO", "type": "", "name": "print_err", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Prints the provided message to standard error."},
{"module": "Standard.Base.IO", "type": "", "name": "println", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Prints the provided message to standard output."},
{"module": "Standard.Base.IO", "type": "", "name": "print", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Prints the provided message to standard output without adding a new line at the end."},
{"module": "Standard.Base.IO", "type": "", "name": "readln", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Reads a line from standard input."},
{"module": "Standard.Base.Logging", "type": "Progress", "name": "Running", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Progress", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "max": {"lazy": false, "type": "Integer", "checked": true}, "logger": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Logging", "type": "Progress", "name": "run", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "up_to": {"lazy": false, "type": "Integer", "checked": true}, "action": {"lazy": false, "type": "Progress->Any", "checked": true}},"aliases": [],"description": "Performs provided `action` while reporting its progress.  The `action` is a function that takes a `Progress` handle and uses its methods to report progress of the computation. The value returned from `action` is returned from this method."},
{"module": "Standard.Base.Logging", "type": "Progress", "name": "advance", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Progress", "arguments": {"amount": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Reports progress of the computation.  Adds provided `amount` to the already accumulated work towards `up_to` value provided when creating this `Progress`.","returns": "The self value."},
{"module": "Standard.Base.Logging", "type": "Progress", "name": "log", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Progress", "arguments": {"detail": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Provides additional human readable detail of the status of the computation.","returns": "The self value."},
{"module": "Standard.Base.Logging", "type": "Progress", "name": "to_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Simple name of the progress"},
{"module": "Standard.Base.Logging", "type": "Log_Level", "name": "Finest", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Log_Level", "arguments": {},"aliases": [],"description": "Finest (Trace) level log message."},
{"module": "Standard.Base.Logging", "type": "Log_Level", "name": "Fine", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Log_Level", "arguments": {},"aliases": [],"description": "Fine (Debug) level log message."},
{"module": "Standard.Base.Logging", "type": "Log_Level", "name": "Info", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Log_Level", "arguments": {},"aliases": [],"description": "Info level log message."},
{"module": "Standard.Base.Logging", "type": "Log_Level", "name": "Warning", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Log_Level", "arguments": {},"aliases": [],"description": "Warning level log message."},
{"module": "Standard.Base.Logging", "type": "Log_Level", "name": "Severe", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Log_Level", "arguments": {},"aliases": [],"description": "Severe level log message."},
{"module": "Standard.Base.Logging", "type": "Any", "name": "log_message", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": true, "type": "Text", "checked": true}, "level": {"lazy": false, "type": "Log_Level", "checked": true, "default": "Log_Level.Info"}},"aliases": [],"description": "Log a message. This function needs to be enabled by importing `Standard.Base.Logging` using `from Standard.Base.Logging import all`."},
{"module": "Standard.Base.Logging", "type": "", "name": "log_impl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"logger": {"lazy": false}, "message": {"lazy": true}, "level": {"lazy": false}, "args": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Math", "type": "", "name": "pi", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "The mathematical constant pi, equal to the ratio of a circle circumference to its diameter."},
{"module": "Standard.Base.Math", "type": "", "name": "e", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "math","description": "The mathematical constant e, the base of the natural logarithm."},
{"module": "Standard.Base.Math", "type": "", "name": "min", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": [],"group": "Math","description": "Returns the smaller value of `a` and `b`.","remarks": "? Math.min or Number.min   While we provide the min method on `Number`, we find it more intuitive to   write `Math.min a b` rather than `a.min b`. To that end, we recommend using   the first style."},
{"module": "Standard.Base.Math", "type": "", "name": "max", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": [],"group": "Math","description": "Returns the larger value of `a` and `b`.","remarks": "? Math.max or Number.max   While we provide the max method on `Number`, we find it more intuitive to   write `Math.max a b` rather than `a.max b`. To that end, we recommend using   the first style."},
{"module": "Standard.Base.Meta", "type": "Type", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Type", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Type", "name": "find", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Type ! Not_Found", "arguments": {"qualified_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Metadata","icon": "find","description": "Finds type specified by fully qualified name. Searches all the types known to the system by transitive closure of import statements in executing modules."},
{"module": "Standard.Base.Meta", "type": "Type", "name": "constructors", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Vector Constructor", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns a vector of `Meta.Constructor` for this type"},
{"module": "Standard.Base.Meta", "type": "Type", "name": "methods", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Vector", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns a vector of method names that can be invoked on instances of this type.","remarks": "? Static Methods    To obtain list of _static methods_ on a given type   use `Meta.type_of`."},
{"module": "Standard.Base.Meta", "type": "Type", "name": "qualified_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the fully qualified name of the type."},
{"module": "Standard.Base.Meta", "type": "Type", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the short name of the type."},
{"module": "Standard.Base.Meta", "type": "Atom", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Atom", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Atom", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Obtains the real atom value"},
{"module": "Standard.Base.Meta", "type": "Atom", "name": "fields", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Vector Any", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns a vector of field values of the given atom."},
{"module": "Standard.Base.Meta", "type": "Atom", "name": "constructor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Constructor", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns a constructor value of the given atom."},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Constructor", "arguments": {"impl": {"lazy": false, "type": "Function", "checked": true}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Function", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Obtains the qualified accessor function of the constructor"},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "fields", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Vector Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns a vector of field names defined by a constructor."},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the name of a constructor."},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "new", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"fields": {"lazy": false, "type": "Vector|Array", "checked": true}},"aliases": [],"icon": "braces","description": "Creates a new atom of the given constructor."},
{"module": "Standard.Base.Meta", "type": "Constructor", "name": "declaring_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Type", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the type that this constructor is a part of."},
{"module": "Standard.Base.Meta", "type": "Primitive", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Primitive", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Primitive", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the (primitive) value wrapped by this type"},
{"module": "Standard.Base.Meta", "type": "Unresolved_Symbol", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unresolved_Symbol", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Unresolved_Symbol", "name": "value", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the raw unresolved symbol"},
{"module": "Standard.Base.Meta", "type": "Unresolved_Symbol", "name": "rename", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Unresolved_Symbol", "arguments": {"new_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Returns a new unresolved symbol with its name changed to the provided argument."},
{"module": "Standard.Base.Meta", "type": "Unresolved_Symbol", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the name of an unresolved symbol."},
{"module": "Standard.Base.Meta", "type": "Error", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Error", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Error", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Obtains the actual value of the error"},
{"module": "Standard.Base.Meta", "type": "Polyglot", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Polyglot", "arguments": {"impl": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Meta", "type": "Polyglot", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Obtains the actual polyglot value"},
{"module": "Standard.Base.Meta", "type": "Polyglot", "name": "get_language", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Language", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the language with which a polyglot value is associated."},
{"module": "Standard.Base.Meta", "type": "Language", "name": "Java", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Language", "arguments": {},"aliases": [],"description": "The Java language."},
{"module": "Standard.Base.Meta", "type": "Language", "name": "Unknown", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Language", "arguments": {},"aliases": [],"description": "An unknown language."},
{"module": "Standard.Base.Meta", "type": "Any", "name": "is_same_object_as", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {"value": {"lazy": false}},"aliases": [],"icon": "metadata","description": "Checks whether `self` represents the same underlying reference as `value`."},
{"module": "Standard.Base.Meta", "type": "Any", "name": "is_a", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {"typ": {"lazy": false}},"aliases": [],"icon": "metadata","description": "Checks if `self` is an instance of `typ`."},
{"module": "Standard.Base.Meta", "type": "Base_Error", "name": "is_a", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {"typ": {"lazy": false}},"aliases": [],"icon": "metadata","description": "Checks if `self` is an instance of `typ`."},
{"module": "Standard.Base.Meta", "type": "", "name": "atom_with_hole", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"factory": {"lazy": false}},"aliases": [],"description": "Constructs a new atom with a \"hole\". Returns an object with `value` and `fill` properties. Value contains the created atom and `fill` holds a function to \"fill the hole\" later.  There can be only one hole in the atom, i.e., only one field of the atom returned by the `value` method should be a hole. If this condition is violated, a Panic error with `Uninitialized_State` payload is thrown."},
{"module": "Standard.Base.Meta", "type": "", "name": "meta", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Atom | Constructor | Primitive | Polyglot | Unresolved_Symbol | Error | Type", "arguments": {"value": {"lazy": true}},"aliases": [],"description": "Returns a meta-representation of a given runtime entity."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_same_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {"value_1": {"lazy": false}, "value_2": {"lazy": false}},"aliases": [],"description": "Checks whether two objects are represented by the same underlying reference."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_a", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Boolean", "arguments": {"value": {"lazy": false}, "typ": {"lazy": false}},"aliases": [],"description": "Checks if `value` is an instance of `typ`."},
{"module": "Standard.Base.Meta", "type": "", "name": "type_of", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Returns the type of the given value."},
{"module": "Standard.Base.Meta", "type": "", "name": "get_annotation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"target": {"lazy": false}, "method": {"lazy": false}, "parameter_name": {"lazy": false}},"aliases": [],"description": "Given a type object, method name and a parameter name, return the associated annotation if it exists."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_atom_constructor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value": {"lazy": true}},"aliases": [],"description": "Checks if the provided value is an atom constructor."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_atom", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks if the provided value is an atom."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks if the provided value is a runtime error."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks if the provided value is a type."},
{"module": "Standard.Base.Meta", "type": "", "name": "is_polyglot", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks if the provided value is a polyglot value."},
{"module": "Standard.Base.Meta", "type": "Type", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Converts any value to its `Meta.Type`. Useful for querying various type properties like `.name` or `.qualified_name`."},
{"module": "Standard.Base.Metadata", "type": "Display", "name": "Always", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Display", "arguments": {},"aliases": [],"description": "Parameter is always shown on the collapsed view."},
{"module": "Standard.Base.Metadata", "type": "Display", "name": "When_Modified", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Display", "arguments": {},"aliases": [],"description": "Parameter is shown on the collapsed view if not the default value."},
{"module": "Standard.Base.Metadata", "type": "Display", "name": "Expanded_Only", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Display", "arguments": {},"aliases": [],"description": "Parameter is only shown on the expanded view."},
{"module": "Standard.Base.Metadata", "type": "File_Action", "name": "Open", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Action", "arguments": {},"aliases": [],"description": "The File or Folder is for reading from."},
{"module": "Standard.Base.Metadata", "type": "File_Action", "name": "Save", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "File_Action", "arguments": {},"aliases": [],"description": "The File or Folder is for writing to."},
{"module": "Standard.Base.Metadata", "type": "Choice", "name": "Option", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Choice", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "value": {"lazy": false, "type": "Text | Vector Choice", "checked": true, "default": "label"}, "parameters": {"lazy": false, "type": "Vector (Pair Text Widget)", "checked": true, "default": "[]"}, "icon": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Describes an entry in a Single_Choice or Multiple_Choice widget."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Single_Choice", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"values": {"lazy": false, "type": "Vector Choice", "checked": true}, "label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}, "allow_custom": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Describes a single value widget (dropdown)."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Vector_Editor", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"item_editor": {"lazy": false, "type": "Widget", "checked": true}, "item_default": {"lazy": false, "type": "Text", "checked": true}, "label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}},"aliases": [],"description": "Describes a list editor widget producing a Vector. Items can be dragged around to change the order, or dragged out to be deleted from the Vector."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Multiple_Choice", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"values": {"lazy": false, "type": "Vector Choice", "checked": true}, "label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}, "quote_values": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Describes a multi value widget."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Code_Input", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}},"aliases": [],"description": "Describe a code parameter."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Boolean_Input", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}},"aliases": [],"description": "Describe a boolean parameter."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Numeric_Input", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}, "minimum": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}, "maximum": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}, "step": {"lazy": false, "type": "Number", "checked": true, "default": "1"}, "decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "allow_outside": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Describe a numeric parameter."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Text_Input", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}, "quote_values": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "suggestions": {"lazy": false, "type": "Vector Text", "checked": true, "default": "[]"}},"aliases": [],"description": "Describes a text widget."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "Folder_Browse", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}},"aliases": [],"description": "Describes a folder chooser."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "File_Browse", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Widget", "arguments": {"existing_only": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "label": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.When_Modified"}, "action": {"lazy": false, "type": "File_Action", "checked": true, "default": "File_Action.Open"}, "file_types": {"lazy": false, "type": "Vector Pair", "checked": true, "default": "[Pair.new \"All Files\" \"*.*\"]"}},"aliases": [],"description": "Describes a file chooser."},
{"module": "Standard.Base.Metadata", "type": "Widget", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Override the to_js_object and don\u0027t include Nothing."},
{"module": "Standard.Base.Metadata", "type": "", "name": "make_single_choice", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"values": {"lazy": false, "type": "Vector", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Base.Nothing", "type": "Nothing", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {},"aliases": [],"description": "The type that has only a singleton value. Nothing in Enso is used as an universal value to indicate the lack of presence of a value.  It is often used alongside a value of type a to provide a Maybe or Option abstraction."},
{"module": "Standard.Base.Nothing", "type": "Nothing", "name": "is_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Logical","icon": "metadata","description": "Checks if the type is an instance of `Nothing`."},
{"module": "Standard.Base.Nothing", "type": "Nothing", "name": "if_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "If this is Nothing then returns `function`."},
{"module": "Standard.Base.Nothing", "type": "Nothing", "name": "if_not_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"group": "Logical","icon": "operators","description": "If `self` is Nothing then returns Nothing, otherwise returns the result of running the provided `action`."},
{"module": "Standard.Base.Nothing", "type": "Nothing", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Get a value for the key of the object. As `Nothing` has no keys, returns `if_missing`."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Panic", "arguments": {},"aliases": [],"description": "A panic is an error condition that is based _outside_ of the normal program control flow.  Panics \"bubble up\" through the program until they reach either an invocation of Panic.recover Any or the program\u0027s main method. An unhandled panic in main will terminate the program.","remarks": "? Dataflow Errors or Panics   Panics are designed to be used for unrecoverable situations that need   to be handled through non-linear control flow mechanisms."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "throw", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"payload": {"lazy": false}},"aliases": [],"description": "Throws a new panic with the provided payload."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "primitive_get_attached_stack_trace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"throwable": {"lazy": false}},"aliases": [],"description": "Returns a raw representation of the stack trace attached to the provided throwable. It can be a dataflow error, a panic or a native Java exception. You probably want `Panic.get_attached_stack_trace` instead."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "get_attached_stack_trace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Returns the attached stack trace of the given throwable. Can be used to get an Enso friendly stack trace from native Java exceptions.  The ordering of the resulting vector is such that the top stack frame is the first element."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "rethrow", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Takes any value, and if it is a dataflow error, throws it as a Panic, otherwise, returns the original value unchanged."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "catch", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"panic_type": {"lazy": false}, "action": {"lazy": true}, "handler": {"lazy": false}},"aliases": [],"icon": "panic","description": "Executes the provided action and if a panic matching the provided type was thrown, calls the provided callback.  If action executes successfully, the result of `Panic.catch` is the result of that action. Otherwise, if a matching panic is thrown from within the action, the result is obtained by calling the provided handler callback. Any non-matching panics are forwarded without changes."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "with_finalizer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"finalizer": {"lazy": true}, "action": {"lazy": true}},"aliases": [],"description": "Runs the provided `action` ensuring that the `finalize` block is called regardless of if the action succeeds or fails.  This emulates the `finally` clause in Java.  If an exception occurs in the `finalizer`, it is propagated. If `action` throws an exception and the `finalizer` also throws an exception, the exception thrown by `finalizer` takes precedence."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "recover", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"expected_types": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"icon": "panic","description": "Executes the provided action and converts a possible panic matching any of the provided types into a dataflow Error.  If action executes successfully, the result of `Panic.recover` is the result of that action. Otherwise, if it panicked with a type matching one of the expected error types, that panic is returned as a dataflow error. Unexpected panics are passed through as-is. it is the panic that was thrown after conversion to a dataflow error."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "rethrow_wrapped_if_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "If a dataflow error had occurred, wrap it in a `Wrapped_Dataflow_Error` and promote to a Panic."},
{"module": "Standard.Base.Panic", "type": "Panic", "name": "handle_wrapped_dataflow_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}, "error_type": {"lazy": false, "default": "Any"}, "handler": {"lazy": false, "type": "(Any -> Any) | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Catch any `Wrapped_Dataflow_Error` Panic and rethrow it as a dataflow error, or pass it to a user-specified handler."},
{"module": "Standard.Base.Panic", "type": "Caught_Panic", "name": "Panic", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Caught_Panic", "arguments": {"payload": {"lazy": false}, "internal_original_exception": {"lazy": false, "comment": "- internal_original_exception (private): the original Java exception that is   the source of this panic. Only for internal use."}},"aliases": [],"description": "A wrapper for a caught panic."},
{"module": "Standard.Base.Panic", "type": "Caught_Panic", "name": "convert_to_dataflow_error", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "panic","description": "Converts this caught panic into a dataflow error containing the same payload and stack trace."},
{"module": "Standard.Base.Panic", "type": "Caught_Panic", "name": "stack_trace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the stack trace of the caught panic."},
{"module": "Standard.Base.Panic", "type": "Wrapped_Dataflow_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Wrapped_Dataflow_Error", "arguments": {"payload": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Panic", "type": "Wrapped_Dataflow_Error", "name": "unwrap", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Throws the original error."},
{"module": "Standard.Base.Panic", "type": "Wrapped_Dataflow_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Polyglot", "arguments": {},"aliases": [],"description": "Utilities for working with Polyglot objects."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "get_array_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"array": {"lazy": false}},"aliases": [],"description": "Reads the number of elements in a given polyglot array object."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "read_array_element", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"array": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "Reads the element in a given polyglot array object."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "execute", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"callable": {"lazy": false}, "arguments": {"lazy": false}},"aliases": [],"description": "Executes a polyglot function object (e.g. a lambda)."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "get_member", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"object": {"lazy": false}, "member_name": {"lazy": false}},"aliases": [],"description": "Performs a by-name lookup for a member in a polyglot object."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "get_members", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"object": {"lazy": false}},"aliases": [],"description": "Returns a polyglot array of all of the members of the provided object."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"constructor": {"lazy": false}, "arguments": {"lazy": false}},"aliases": [],"description": "Instantiates a polyglot object using the provided constructor."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "invoke", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"target": {"lazy": false}, "name": {"lazy": false}, "arguments": {"lazy": false}},"aliases": [],"description": "Invokes a method on a polyglot object by name."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "has_source_location", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks if `value` defines a source location.  Source locations are typically exposed by functions, classes, sometimes also other objects to specify their allocation sites."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "get_source_location", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Gets the source location of `value`.  Source locations are typically exposed by functions, classes, sometimes also other objects to specify their allocation sites. This method will throw a polyglot exception if `Polyglot.has_source_location value` returns `False`."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "is_language_installed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"language_name": {"lazy": false}},"aliases": [],"description": "Checks if a polyglot language is installed in the runtime environment."},
{"module": "Standard.Base.Polyglot", "type": "Polyglot", "name": "get_executable_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Returns the executable name of a polyglot object."},
{"module": "Standard.Base.Polyglot", "type": "Java", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Java", "arguments": {},"aliases": [],"description": "Utilities for working with Java polyglot objects."},
{"module": "Standard.Base.Polyglot", "type": "Java", "name": "add_to_class_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"path": {"lazy": false}},"aliases": [],"description": "Adds the provided entry to the host class path. \n\n Use of the actual polyglot imports system should be preferred to use of this method."},
{"module": "Standard.Base.Polyglot", "type": "Java", "name": "lookup_class", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Looks up a java symbol on the classpath by name. \n\n Use of the actual polyglot imports system should be preferred to use of this method."},
{"module": "Standard.Base.Polyglot", "type": "Java", "name": "is_instance", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}, "class": {"lazy": false}},"aliases": [],"description": "Checks whether an object is an instance of a given class."},
{"module": "Standard.Base.Random", "type": "Random", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Random", "arguments": {},"aliases": [],"description": "Type for creating random values."},
{"module": "Standard.Base.Random", "type": "Random", "name": "new_generator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"seed": {"lazy": false, "type": "Integer | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Random","description": "Create a new `Random_Generator` with the specified seed."},
{"module": "Standard.Base.Random", "type": "Random", "name": "set_seed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"seed": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Random","description": "Set the seed of the default `Random_Generator` instance."},
{"module": "Standard.Base.Random", "type": "Random", "name": "integer", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Integer", "checked": true}, "max": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Random","icon": "random","description": "Return a random `Integer` between `min` (inclusive) and `max` (inclusive)."},
{"module": "Standard.Base.Random", "type": "Random", "name": "float", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Float", "checked": true, "default": "0.0"}, "max": {"lazy": false, "type": "Float", "checked": true, "default": "1.0"}},"aliases": [],"group": "Random","icon": "random","description": "Return a random `Float` in the specified range."},
{"module": "Standard.Base.Random", "type": "Random", "name": "boolean", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Random","icon": "random","description": "Return a random `Boolean` using the default instance of `Random_Generator`."},
{"module": "Standard.Base.Random", "type": "Random", "name": "gaussian", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"standard_deviation": {"lazy": false, "type": "Float", "checked": true, "default": "1.0"}, "mean": {"lazy": false, "type": "Float", "checked": true, "default": "0.0"}},"aliases": [],"group": "Random","icon": "random","description": "Return a random Gaussian-distributed `Float` with the specified mean and standard deviation."},
{"module": "Standard.Base.Random", "type": "Random", "name": "indices", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"group": "Random","icon": "random","description": "Returns `count` indices sampled from the range 0 (inclusive) to n (exclusive) without replacement."},
{"module": "Standard.Base.Random", "type": "Random", "name": "date", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Date", "checked": true}, "max": {"lazy": false, "type": "Date", "checked": true}},"aliases": [],"group": "Random","icon": "random","description": "Return a `Date` within the specified `Date_Range`."},
{"module": "Standard.Base.Random", "type": "Random", "name": "time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Time_Of_Day", "checked": true, "default": "Time_Of_Day.new 0 0 0"}, "max": {"lazy": false, "type": "Time_Of_Day", "checked": true, "default": "Time_Of_Day.new 23 59 59"}},"aliases": [],"group": "Random","icon": "random","description": "Return a `Time_Of_Day` between `start_time` and `end_time` (inclusive). \n\n The generated time is at a granularity of 1 second. Random values are generated for hours, minutes and seconds. The `nanoseconds` field is always 0."},
{"module": "Standard.Base.Random", "type": "Random", "name": "uuid", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Random","icon": "random","description": "Return a new UUID.","remarks": "! Random Seed   `uuid` does not use the underlying `java.util.Random` instance, and is   therefore not affected by `set_seed`."},
{"module": "Standard.Base.Random", "type": "Random", "name": "items", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false, "type": "Vector Any | Array Any", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "with_replacement": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Random","icon": "random","description": "Returns a new `Vector` containing a random sample of the input vector, with or without replacement.","remarks": "? Selection without replacement    If `with_replacement` is false, and `count` is equal to the size of the   collection, a random permutation of the collection is returned.    If `with_replacement` is false, and `count` is greater than the size of   the collection, an `Illegal_Argument` error is thrown. (If `count` is   greater than the size of the collection, `items` will run out of values   to choose from, and will not be able to return enough values.)"},
{"module": "Standard.Base.Random", "type": "Random", "name": "permute", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"group": "Random","icon": "random","description": "Returns a random permutation of the input `Vector`."},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Random_Generator", "arguments": {"random_instance_holder": {"lazy": false, "type": "RandomInstanceHolder", "checked": true}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"seed": {"lazy": false, "type": "Integer|Nothing", "checked": true}},"aliases": [],"description": "Create a new rng with the given seed."},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "global_random_generator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "set_seed", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"seed": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "java_random", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "integer", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Integer", "checked": true}, "max": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "float", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"min": {"lazy": false, "type": "Float", "checked": true, "default": "0.0"}, "max": {"lazy": false, "type": "Float", "checked": true, "default": "1.0"}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "boolean", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "gaussian", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"standard_deviation": {"lazy": false, "type": "Float", "checked": true, "default": "1.0"}, "mean": {"lazy": false, "type": "Float", "checked": true, "default": "0.0"}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "indices", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "date", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start_date": {"lazy": false, "type": "Date", "checked": true}, "end_date": {"lazy": false, "type": "Date", "checked": true}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "time", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start_time": {"lazy": false, "type": "Time_Of_Day", "checked": true, "default": "Time_Of_Day.new 0 0 0"}, "end_time": {"lazy": false, "type": "Time_Of_Day", "checked": true, "default": "Time_Of_Day.new 23 59 59"}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "uuid", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "items", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false, "type": "Vector Any | Array Any", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "with_replacement": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": []},
{"module": "Standard.Base.Random", "type": "Random_Generator", "name": "permute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Base.Random", "type": "", "name": "get_default_seed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a default seed to use for random number generation.  The returned seed will likely differ between each call to this method."},
{"module": "Standard.Base.Runtime", "type": "Stack_Trace_Element", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Stack_Trace_Element", "arguments": {"name": {"lazy": false}, "source_location": {"lazy": false}},"aliases": []},
{"module": "Standard.Base.Runtime", "type": "Stack_Trace_Element", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "Input", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Context", "arguments": {},"aliases": []},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "Output", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Context", "arguments": {},"aliases": []},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "Dataflow_Stack_Trace", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Context", "arguments": {},"aliases": []},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the name of the context."},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "if_enabled", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}, "environment": {"lazy": false, "type": "Text", "checked": true, "default": "Runtime.current_execution_environment"}, "disabled_message": {"lazy": false, "type": "Text", "checked": true, "default": "\"The \"+self.name+\" context is disabled.\""}, "panic": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Checks whether the context is enabled. If it is, evaluates the provided function and returns the result. If not, panics."},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "is_enabled", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"environment": {"lazy": false, "default": "Runtime.current_execution_environment"}},"aliases": [],"description": "Checks whether the permission is enabled in the given environment."},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "with_enabled", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Run an action with the Context enabled."},
{"module": "Standard.Base.Runtime", "type": "Context", "name": "with_disabled", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Run an action with the Context disabled."},
{"module": "Standard.Base.Runtime", "type": "", "name": "get_stack_trace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the execution stack trace of its call site. The ordering of the resulting vector is such that the top stack frame is the first element."},
{"module": "Standard.Base.Runtime", "type": "", "name": "gc", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Suggests that the runtime perform garbage collection.  It is not _guaranteed_ to perform garbage collection, but in practice will _usually_ begin a garbage collection cycle."},
{"module": "Standard.Base.Runtime", "type": "", "name": "assert", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true, "type": "Boolean", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Asserts that the given action succeeds, otherwise throws a panic.  Assertions are disable by default, meaning that call to this method is a no-op. To enable assertions, either set the environment variable `ENSO_ENABLE_ASSERTIONS=true` or enable JVM assertions by passing `-ea` cmd line option to java."},
{"module": "Standard.Base.Runtime", "type": "", "name": "assertions_enabled", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns True if assertions are enabled."},
{"module": "Standard.Base.Runtime", "type": "", "name": "no_inline", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Executes the provided action without allowing it to inline. \n\n This is particularly useful when writing benchmarks and performance-critical code where you need to prevent inlining from occurring."},
{"module": "Standard.Base.Runtime", "type": "", "name": "no_inline_with_arg", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"function": {"lazy": false}, "arg": {"lazy": false}},"aliases": [],"description": "Applies the following function to the given argument, without allowing them to inline. \n\n This is particularly useful to avoid constant folding in benchmarks."},
{"module": "Standard.Base.Runtime", "type": "", "name": "value_for_uuid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Any", "arguments": {"id": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Value associated with a UUID if any"},
{"module": "Standard.Base.Runtime", "type": "", "name": "wrap_primitive_stack_trace_element", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"el": {"lazy": false}},"aliases": [],"description": "Converts a primitive stack trace element into the regular one."},
{"module": "Standard.Base.Runtime", "type": "", "name": "current_execution_environment", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the name of the current execution environment."},
{"module": "Standard.Base.Runtime", "type": "", "name": "with_enabled_context", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"context": {"lazy": false}, "environment": {"lazy": false, "default": "Runtime.current_execution_environment"}, "action": {"lazy": true}},"aliases": [],"description": "Enables a specific context in the provided runtime environment for the duration of the execution of the action."},
{"module": "Standard.Base.Runtime", "type": "", "name": "with_disabled_context", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"context": {"lazy": false}, "environment": {"lazy": false, "default": "Runtime.current_execution_environment"}, "action": {"lazy": true}},"aliases": [],"description": "Disables a specific context in the provided runtime environment for the duration of the execution of the action."},
{"module": "Standard.Base.System", "type": "System_Process_Result", "name": "Result", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "System_Process_Result", "arguments": {"exit_code": {"lazy": false}, "stdout": {"lazy": false}, "stderr": {"lazy": false}},"aliases": [],"description": "Create a System_Process_Result."},
{"module": "Standard.Base.System", "type": "", "name": "create_process", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"command": {"lazy": false}, "arguments": {"lazy": false}, "input": {"lazy": false}, "redirect_in": {"lazy": false}, "redirect_out": {"lazy": false}, "redirect_err": {"lazy": false}},"aliases": [],"description": "Create a system process, returning the exit code, and the outputs to both standard out and standard error."},
{"module": "Standard.Base.System", "type": "", "name": "exit", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"code": {"lazy": false}},"aliases": [],"description": "Exits the Enso program, returning the provided code to the parent process."},
{"module": "Standard.Base.System", "type": "", "name": "nano_time", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the nanosecond resolution system time at the moment of the call."},
{"module": "Standard.Base.System", "type": "", "name": "os", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get the name of the current platform upon which the program is running."},
{"module": "Standard.Base.System", "type": "", "name": "default_line_separator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the default line separator for the platform that the program is currently running on."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Warning", "arguments": {},"aliases": [],"description": "A representation of a dataflow warning attached to a value."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "attach", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"warning": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "Attaches a new warning to the value."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "attach_multiple", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"warnings": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "Attaches a new warning to the value."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "has_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"description": "Are any warnings attached to the value?"},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "remove_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"description": "Remove the warnings (either all or of a specified type) attached to the value."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "throw_on_warning", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "warning_type": {"lazy": false, "default": "Any"}},"aliases": [],"group": "Errors","icon": "error","description": "Throws the first matching warning (either all or of a specified type) as a data flow error."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "get_all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "wrap_errors": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Gets all the warnings attached to the given value. Warnings are returned in the reverse-chronological order with respect to their attachment time."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "limit_reached", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Returns `True` if the maximal number of reported warnings for a value has been reached, `False` otherwise."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "set", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "warnings": {"lazy": false, "type": "Vector Warning", "checked": true}},"aliases": [],"description": "Sets a new list of warnings for the given value. Any warnings already present in `value` will be lost."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "clear", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Returns the provided value with any warnings removed from it."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "with_suspended", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"arg": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"description": "Executes the provided function with the given argument with its warnings suspended.  Inside of the provided function, the argument value will have no warnings attached. The result will inherit the warnings from the original argument as well as any warnings that were attached to it inside of the function."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "map_attached_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"mapper": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "Maps warnings attached to a value."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "map_warnings_and_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"mapper": {"lazy": false}, "value": {"lazy": false}},"aliases": [],"description": "An utility function which applies the mapping function both to any attached warnings and dataflow errors."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "detach_selected_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "predicate": {"lazy": false}},"aliases": [],"description": "A helper function which selects warnings matching a predicate and returns a pair whose first element is the original value with the matched warnings removed and the second element is the list of matched warnings."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "merge_matched_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}, "matcher": {"lazy": false}, "merger": {"lazy": false}},"aliases": [],"description": "A helper function which gathers warnings matching some predicate and passes them into a function which can aggregate them.  The merger function will not be called at all if no warnings match the criteria."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "Returns the warning value – usually its explanation or other contents."},
{"module": "Standard.Base.Warning", "type": "Warning", "name": "origin", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"group": "Metadata","icon": "metadata","description": "A stack trace for the original warning creation."},
{"module": "Standard.Base.Warning", "type": "", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"payload": {"lazy": false}, "origin": {"lazy": false}},"aliases": [],"description": "Creates a new instance of the primitive warning value."},
{"module": "Standard.Base.Warning", "type": "", "name": "attach_with_stacktrace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "warning": {"lazy": false}, "origin": {"lazy": false}},"aliases": [],"description": "Builtin utility function which attaches a new warning to the value and, compared to `Warning.attach` requires an explicit stacktrace associated with it."},
{"module": "Standard.Base.Warning", "type": "", "name": "get_all_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "should_wrap": {"lazy": false}},"aliases": [],"description": "Builtin function that gets all the warnings attached to the given value."},
{"module": "Standard.Base.Warning", "type": "", "name": "set_array", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "warnings": {"lazy": false}},"aliases": [],"description": "Sets a new list of warnings for the given value. Any warnings already present in `value` will be lost."},
{"module": "Standard.Base.Warning", "type": "", "name": "map_attached_warnings_helper", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"mapper": {"lazy": false}, "value": {"lazy": false}, "frames_to_drop": {"lazy": false}},"aliases": [],"description": "Maps warnings attached to a value.  An internal helper function to avoid repeating the implementation."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_text_secret_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "Creates a Single_Choice Widget for text or secret value."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_regex_text_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Creates a Regex / Text Widget for search and replace."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_separator_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a Single_Choice Widget for delimiters."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_delimiter_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a Single_Choice Widget for delimiters."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_file_read_delimiter_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a Single_Choice Widget for file read delimiters."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_number_format_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false, "type": "Number", "checked": true, "default": "1234.564321"}},"aliases": [],"description": "Creates a Single_Choice Widget for formatting decimals."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_date_format_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date": {"lazy": false, "type": "Date", "checked": true, "default": "Date.new 2012 3 14"}},"aliases": [],"description": "Creates a Single_Choice Widget for parsing dates."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_date_time_format_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"date_time": {"lazy": false, "type": "Date_Time", "checked": true, "default": "Date_Time.new 2012 3 14 15 9 26 123"}},"aliases": [],"description": "Creates a Single_Choice Widget for parsing date times."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_time_format_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"time": {"lazy": false, "type": "Time_Of_Day", "checked": true, "default": "Time_Of_Day.new 13 30 55 123"}},"aliases": [],"description": "Creates a Single_Choice Widget for parsing times."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_format_chooser", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"include_number": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_date": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_date_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "include_boolean": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Create a Single_Choice Widget for selecting a format value."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_data_cleanse_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": [],"description": "Creates a Multiple_Choice Widget for selecting data cleanse operations."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_all_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Creates a Single_Choice Widget for Any selectors with all types enabled."},
{"module": "Standard.Base.Widget_Helpers", "type": "", "name": "make_any_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "add_text": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_regex": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_named_pattern": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_number": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_boolean": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_date": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_date_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Creates a Single_Choice Widget for Any selectors."},
{"module": "Standard.Database.Connection.Data_Link.Postgres_Data_Link", "type": "Postgres_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Data_Link", "arguments": {"details": {"lazy": false, "type": "Postgres", "checked": true}, "source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true}, "link_type": {"lazy": false, "type": "DB_Data_Link_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Data_Link.Postgres_Data_Link", "type": "Postgres_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Data_Link.Postgres_Data_Link", "type": "Postgres_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Client_Certificate", "type": "Client_Certificate", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Client_Certificate", "arguments": {"cert_file": {"lazy": false, "type": "File", "checked": true}, "key_file": {"lazy": false, "type": "File", "checked": true}, "key_password": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}},"aliases": [],"description": "Creates a new Client_Certificate object."},
{"module": "Standard.Database.Connection.Client_Certificate", "type": "Client_Certificate", "name": "properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates the JDBC properties for the client certificate.","remarks": "? JDBC Properties - sslcert: points to the client certificate file. - sslkey: points to the client key file. - sslpass: password for the client key file."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Connection", "arguments": {"jdbc_connection": {"lazy": false}, "dialect": {"lazy": false}, "entity_naming_properties": {"lazy": false, "type": "Entity_Naming_Properties", "checked": true}, "supports_large_update": {"lazy": false, "type": "Ref Boolean", "checked": true}, "hidden_table_registry": {"lazy": false, "type": "Hidden_Table_Registry.Hidden_Table_Registry", "checked": true}, "data_link_setup": {"lazy": false, "type": "Data_Link_Setup | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "A Database connection using a JDBC driver."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Connection", "arguments": {"jdbc_connection": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "dialect": {"lazy": false}, "entity_naming_properties": {"lazy": false, "type": "Entity_Naming_Properties", "checked": true}, "data_link_setup": {"lazy": false, "type": "Data_Link_Setup | Nothing", "checked": true, "default": "Nothing"}, "try_large_update": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Constructs a new Connection."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "close", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Closes the connection releasing the underlying database resources immediately instead of waiting for them to be automatically released.  The connection is not usable afterwards."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "databases", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "database", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the name of the current database (or catalog)."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "set_database", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false}},"aliases": [],"description": "Returns a new Connection with the specified database set as default."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "schemas", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "schema", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the name of the current schema."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "set_schema", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"description": "Returns a new Connection with the specified schema set as default."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets a list of the table types"},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "default": "Nothing"}, "database": {"lazy": false, "default": "self.database"}, "schema": {"lazy": false, "default": "Nothing"}, "types": {"lazy": false, "default": "self.dialect.default_table_types"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialized Table of all the matching views and tables.","remarks": "? Temporary Tables    Note that the temporary tables may be created in a different schema   than the current one, so take this into account when filtering by schema."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "get_tables_advanced", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "default": "Nothing"}, "database": {"lazy": false, "default": "self.database"}, "schema": {"lazy": false, "default": "Nothing"}, "types": {"lazy": false, "default": "self.dialect.default_table_types"}, "all_fields": {"lazy": false, "default": "False"}, "include_hidden": {"lazy": false, "default": "False"}},"aliases": [],"description": "A helper that allows to access all tables in a database, including hidden ones.  Later, once nodes can have expandable arguments, we can merge this with `tables`, marking the `include_hidden` argument as expandable."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "table_exists", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Checks if the table with the given name exists in the database."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "alias": {"lazy": false, "default": "\"\""}},"aliases": [],"description": "Set up a query returning a Table object, which can be used to work with data within the database or load it into memory.","errors": ""},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": [],"description": "Execute the query and load the results into memory as a Table.","remarks": "? Side Effects    Note that the `read` method is running without restrictions when the   output context is disabled, but it can technically cause side effects,   if it is provided with a DML query. Usually it is preferred to use   `execute_update` for DML queries, or if they are supposed to return   results, the `read` should be wrapped in an execution context check."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "create_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description | DB_Table | Table", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "[first_column_name_in_structure structure]"}, "temporary": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Creates a new empty table in the database and returns a query referencing the new table.","errors": "","remarks": "? Dry Run if Output disabled    If performing output actions is disabled, only a dry run is performed   and no permanent changes occur. The operation will test for errors   (like missing columns) and if successful, return a temporary table with   a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "read_statement", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}, "column_types": {"lazy": false, "default": "Nothing"}, "last_row_only": {"lazy": false, "default": "False"}},"aliases": [],"description": "Internal read function for a statement with optional types."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "fetch_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}, "statement_setter": {"lazy": false}},"aliases": [],"description": "Given a prepared statement, gets the column names and types for the result set."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "read_single_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}, "column_name": {"lazy": false}},"aliases": [],"description": "Internal helper method to run a query and read a single column from the result as a Vector."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "execute_update", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "Executes a raw update query. If the query was inserting, updating or deleting rows, the number of affected rows is returned; otherwise it returns 0 for other types of queries (like creating or altering tables)."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "Executes a raw query. If the query was inserting, updating or deleting rows, the number of affected rows is returned; otherwise it returns 0 for other types of queries (like creating or altering tables)."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "drop_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "if_exists": {"lazy": false, "default": "False"}},"aliases": [],"description": "Drops a table."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "truncate_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Removes all rows from a table."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "base_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the base `Connection` instance.  Used, so that all internal helper functions do not need to be replicated on the \u0027subclasses\u0027."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "maybe_run_maintenance", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "If no thread (including the current one) is currently running operations on the connection, maintenance will be performed.  Currently, this consists of removing dry run tables that are no longer used.  This method should be run by most database operations to ensure that unused tables are cleaned at some point.  All errors are swallowed and not propagated, so it is safe to call this method wherever. There is no point of calling this method inside of critical sections as then it will not do anything."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "table_naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a helper for checking and generating table names."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "column_naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a helper for checking and generating column names."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "internal_allocate_dry_run_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Creates a Table reference that refers to a table with the given name.  Once all references to the table with this name are destroyed, the table will be marked for removal and dropped at the next maintenance."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "create_literal_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "DB_Table", "arguments": {"source": {"lazy": false, "type": "Table", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Creates a `DB_Table` that is not backed by an existing table in the Database, but is created in a query by constructing a `VALUES` expression.  We limit these tables to at most 256 cells to avoid creating too large queries. If you need a larger table, create a temporary table instead.  Note that the types of columns in the created table will depend on how the Database interprets the provided values and may not reflect the types of the source table. If you need more sophisticated type mapping mechanism, use `create_table` instead."},
{"module": "Standard.Database.Connection.Connection", "type": "Connection", "name": "save_as_data_link", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Error"}},"aliases": [],"icon": "data_output","description": "Creates a Data Link that will open the same connection."},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_table_types_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_database_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "include_any": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_schema_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "include_any": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_table_name_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_structure_creator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "make_table_from_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Table", "arguments": {"connection": {"lazy": false}, "query": {"lazy": false, "type": "Text|SQL_Statement", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "_make_table_for_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "name": {"lazy": false}, "alias": {"lazy": false}, "internal_temporary_keep_alive_reference": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Database.Connection.Connection", "type": "", "name": "_check_statement_is_allowed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "stmt": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Connection.Connection_Details", "type": "Connection_Details", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Connection_Details", "arguments": {},"aliases": [],"description": "Specifies the connection details for the database.  This is an interface that is implemented by particular database types, like `Postgres`, `SQLite` etc."},
{"module": "Standard.Database.Connection.Connection_Details", "type": "Connection_Details", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}},"aliases": [],"description": "Build the Connection resource."},
{"module": "Standard.Database.Connection.Connection_Options", "type": "Connection_Options", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Connection_Options", "arguments": {"options": {"lazy": false, "type": "Vector", "checked": true, "default": "[]"}},"aliases": [],"description": "Additional customization options for the JDBC connection.  Hold a set of key value pairs used to configure the connection."},
{"module": "Standard.Database.Connection.Connection_Options", "type": "Connection_Options", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Widget to design connection options."},
{"module": "Standard.Database.Connection.Connection_Options", "type": "Connection_Options", "name": "merge", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"base_options": {"lazy": false}},"aliases": [],"description": "Merge the base set of options with the overrides in this object."},
{"module": "Standard.Database.Connection.Connection_Options", "type": "Connection_Options", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Credentials", "type": "Credentials", "name": "Username_And_Password", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Credentials", "arguments": {"username": {"lazy": false, "type": "Text|Enso_Secret", "checked": true, "default": "Missing_Argument.throw \"username\""}, "password": {"lazy": false, "type": "Text|Enso_Secret", "checked": true, "default": "Missing_Argument.throw \"password\""}},"aliases": [],"description": "Simple username and password type."},
{"module": "Standard.Database.Connection.Credentials", "type": "Credentials", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"include_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Database.Connection.Credentials", "type": "Credentials", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Override `to_text` to mask the password field."},
{"module": "Standard.Database.Connection.Credentials", "type": "Credentials", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Database", "type": "", "name": "connect", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"details": {"lazy": false}, "options": {"lazy": false, "type": "Connection_Options", "checked": true, "default": "..Value"}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Tries to connect to the database."},
{"module": "Standard.Database.Connection.Database", "type": "", "name": "connection_details_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Database", "type": "", "name": "resolve_constructor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Connection.Postgres", "type": "Postgres", "name": "Server", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Postgres", "arguments": {"host": {"lazy": false, "type": "Text", "checked": true, "default": "default_postgres_host"}, "port": {"lazy": false, "type": "Integer", "checked": true, "default": "default_postgres_port"}, "database": {"lazy": false, "type": "Text", "checked": true, "default": "default_postgres_database"}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "credentials": {"lazy": false, "type": "Credentials|Nothing", "checked": true, "default": "Nothing"}, "use_ssl": {"lazy": false, "type": "SSL_Mode", "checked": true, "default": "SSL_Mode.Prefer"}, "client_cert": {"lazy": false, "type": "Client_Certificate|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Connect to a PostgreSQL database."},
{"module": "Standard.Database.Connection.Postgres", "type": "Postgres", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.Database.Connection.Postgres", "type": "Postgres", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}, "allow_data_links": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Build the Connection resource."},
{"module": "Standard.Database.Connection.Postgres", "type": "Postgres", "name": "jdbc_url", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the jdbc url for the connection."},
{"module": "Standard.Database.Connection.Postgres", "type": "Postgres", "name": "jdbc_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the properties for the connection."},
{"module": "Standard.Database.Connection.Postgres", "type": "", "name": "ssl_mode_to_jdbc_properties", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"use_ssl": {"lazy": false}},"aliases": [],"description": "Given an `SSL_Mode`, create the JDBC properties to secure a Postgres-based connection."},
{"module": "Standard.Database.Connection.Postgres", "type": "", "name": "default_postgres_host", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Postgres", "type": "", "name": "default_postgres_port", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Postgres", "type": "", "name": "default_postgres_database", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.Postgres", "type": "", "name": "create_data_link_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"details": {"lazy": false, "type": "Postgres", "checked": true}, "data_link_location": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Connection", "arguments": {"connection": {"lazy": false, "type": "Connection", "checked": true}, "make_new": {"lazy": false, "type": "Text -> Text -> Postgres_Connection", "checked": true}},"aliases": [],"description": "A Postgres database connection."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "properties": {"lazy": false}, "make_new": {"lazy": false}, "data_link_setup": {"lazy": false}},"aliases": [],"description": "Creates a Postgres connection based on a URL and properties."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "close", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "close","description": "Closes the connection releasing the underlying database resources immediately instead of waiting for them to be automatically released.  The connection is not usable afterwards."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "databases", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current database (or catalog)."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "set_database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified database set as default."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "set_schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified schema set as default."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "table_types", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets a list of the table types."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "default": "Nothing"}, "database": {"lazy": false, "default": "self.database"}, "schema": {"lazy": false, "default": "Nothing"}, "types": {"lazy": false, "default": "self.dialect.default_table_types"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialized Table of all the matching views and tables.","remarks": "? Temporary Tables    Note that the temporary tables may be created in a different schema   than the current one, so take this into account when filtering by schema."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "alias": {"lazy": false, "default": "\"\""}},"aliases": ["import", "load", "open", "read"],"group": "Standard.Base.Input","icon": "data_input","description": "Set up a query returning a Table object, which can be used to work with data within the database or load it into memory.","errors": ""},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load", "open", "query"],"group": "Standard.Base.Input","icon": "data_input","description": "Execute the query and load the results into memory as a Table.","remarks": "? Side Effects    Note that the `read` method is running without restrictions when the   output context is disabled, but it can technically cause side effects,   if it is provided with a DML query. Usually it is preferred to use   `execute_update` for DML queries, or if they are supposed to return   results, the `read` should be wrapped in an execution context check."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "create_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description | DB_Table | Table", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "[first_column_name_in_structure structure]"}, "temporary": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a new empty table in the database and returns a query referencing the new table.","errors": "","remarks": "? Dry Run if Output disabled    If performing output actions is disabled, only a dry run is performed   and no permanent changes occur. The operation will test for errors   (like missing columns) and if successful, return a temporary table with   a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "execute_update", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw update query. If the query was inserting, updating or deleting rows, the number of affected rows is returned; otherwise it returns 0 for other types of queries (like creating or altering tables)."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw query. If the query was inserting, updating or deleting rows, the number of affected rows is returned; otherwise it returns 0 for other types of queries (like creating or altering tables)."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "dialect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the dialect."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "jdbc_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the underlying JDBC connection."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "drop_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "if_exists": {"lazy": false, "default": "False"}},"aliases": [],"description": "Drops a table."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "truncate_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Removes all rows from a table."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "base_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the base `Connection` instance.  Used, so that all internal helper functions do not need to be replicated on the \u0027subclasses\u0027."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "save_as_data_link", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Error"}},"aliases": [],"icon": "data_output","description": "Creates a Data Link that will open the same connection."},
{"module": "Standard.Database.Connection.Postgres_Connection", "type": "Postgres_Connection", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "From_File", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQLite", "arguments": {"location": {"lazy": false, "type": "File", "checked": true, "default": "Missing_Argument.throw \"location\""}},"aliases": [],"description": "Connect to a SQLite DB File."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "In_Memory", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQLite", "arguments": {},"aliases": [],"description": "Connect to a SQLite In Memory."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}},"aliases": [],"description": "Build the Connection resource."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "jdbc_url", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the jdbc url for the connection."},
{"module": "Standard.Database.Connection.SQLite", "type": "SQLite", "name": "jdbc_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the properties for the connection."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Connection", "arguments": {"connection": {"lazy": false}},"aliases": [],"description": "A SQLite database connection."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "properties": {"lazy": false}},"aliases": [],"description": "Creates a SQLite connection based on a JDBC URL and properties."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "close", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "close","description": "Closes the connection releasing the underlying database resources immediately instead of waiting for them to be automatically released.  The connection is not usable afterwards."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "databases", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current database (or catalog)."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "set_database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified database set as default."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "set_schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified schema set as default."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "table_types", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets a list of the table types"},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "default": "Nothing"}, "database": {"lazy": false, "default": "self.database"}, "schema": {"lazy": false, "default": "Nothing"}, "types": {"lazy": false, "default": "self.dialect.default_table_types"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialized Table of all the matching views and tables.","remarks": "? Temporary Tables    Note that the temporary tables may be created in a different schema   than the current one, so take this into account when filtering by schema."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "alias": {"lazy": false, "default": "\"\""}},"aliases": ["import", "load", "open", "read"],"group": "Standard.Base.Input","icon": "data_input","description": "Set up a query returning a Table object, which can be used to work with data within the database or load it into memory.","errors": ""},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load", "open", "query"],"group": "Standard.Base.Input","icon": "data_input","description": "Execute the query and load the results into memory as a Table.","remarks": "? Side Effects    Note that the `read` method is running without restrictions when the   output context is disabled, but it can technically cause side effects,   if it is provided with a DML query. Usually it is preferred to use   `execute_update` for DML queries, or if they are supposed to return   results, the `read` should be wrapped in an execution context check."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "create_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description | DB_Table | Table", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "[first_column_name_in_structure structure]"}, "temporary": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a new empty table in the database and returns a query referencing the new table.","errors": "","remarks": "? Dry Run if Output disabled    If performing output actions is disabled, only a dry run is performed   and no permanent changes occur. The operation will test for errors   (like missing columns) and if successful, return a temporary table with   a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "execute_update", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw update query. If the query was inserting, updating or deleting rows, the number of affected rows is returned; otherwise it returns 0 for other types of queries (like creating or altering tables)."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw query. If the query was inserting, updating or deleting rows, the number of affected rows is returned; otherwise it returns 0 for other types of queries (like creating or altering tables)."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "dialect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the dialect."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "jdbc_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the underlying JDBC connection."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "drop_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "if_exists": {"lazy": false, "default": "False"}},"aliases": [],"description": "Drops a table."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "truncate_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Removes all rows from a table."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "base_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the base `Connection` instance.  Used, so that all internal helper functions do not need to be replicated on the \u0027subclasses\u0027."},
{"module": "Standard.Database.Connection.SQLite_Connection", "type": "SQLite_Connection", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "For_File", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Format", "arguments": {},"aliases": [],"description": "Read SQLite files (kept for backwards compatibility)"},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "SQLite", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQLite_Format", "arguments": {},"aliases": [],"description": "Read SQLite files"},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "If the File_Format supports writing to the file, return a configured instance."},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "SQLite_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Connection.SQLite_Format", "type": "", "name": "magic_header_string", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Based on the File Format definition at: https://www.sqlite.org/fileformat.html"},
{"module": "Standard.Database.Connection.SSL_Mode", "type": "SSL_Mode", "name": "Disable", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SSL_Mode", "arguments": {},"aliases": [],"description": "Do not use SSL for the connection."},
{"module": "Standard.Database.Connection.SSL_Mode", "type": "SSL_Mode", "name": "Prefer", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SSL_Mode", "arguments": {},"aliases": [],"description": "Prefer SSL for the connection, but does not verify the server certificate."},
{"module": "Standard.Database.Connection.SSL_Mode", "type": "SSL_Mode", "name": "Require", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SSL_Mode", "arguments": {},"aliases": [],"description": "Will use SSL but does not verify the server certificate."},
{"module": "Standard.Database.Connection.SSL_Mode", "type": "SSL_Mode", "name": "Verify_CA", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SSL_Mode", "arguments": {"ca_file": {"lazy": false, "type": "Nothing|File", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Will use SSL, validating the certificate but not verifying the hostname. If `ca_file` is `Nothing`, the default CA certificate store will be used."},
{"module": "Standard.Database.Connection.SSL_Mode", "type": "SSL_Mode", "name": "Full_Verification", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SSL_Mode", "arguments": {"ca_file": {"lazy": false, "type": "Nothing|File", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Will use SSL, validating the certificate and checking the hostname matches. If `ca_file` is `Nothing`, the default CA certificate store will be used."},
{"module": "Standard.Database.Extensions.Upload_Database_Table", "type": "DB_Table", "name": "select_into_database_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false, "type": "Text", "checked": true}, "primary_key": {"lazy": false, "default": "[]"}, "temporary": {"lazy": false, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a new database table from this table.","errors": "","remarks": "? Dry Run if Output disabled    If performing output actions is disabled, only a dry run is performed and   no permanent changes occur. The operation checks for errors like missing   columns, and returns a temporary table containing a sample of the input   with a `Dry_Run_Operation` warning attached.    More expensive checks, like clashing keys are checked only on the sample of   rows, so errors may still occur when the output action is enabled."},
{"module": "Standard.Database.Extensions.Upload_Database_Table", "type": "DB_Table", "name": "update_rows", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "update_action": {"lazy": false, "type": "Update_Action", "checked": true, "default": "Update_Action.Update_Or_Insert"}, "key_columns": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "default_key_columns self"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Updates the database table with the contents of the provided table.  This operation will only work if this table is a \u0027trivial\u0027 table reference, like returned by `Connection.query`, so it corresponds directly to a table existing in a Database. If the target table is transformed in any way, this correspondence is lost and the update operation cannot be performed on such a transformed object.","errors": "","remarks": "? Type Widening    Smaller types can be widened to a larger type, for example 32-bit integer   column can be widened to a 64-bit integer column, but not vice versa   (because larger numbers could not fit the smaller type and the type of the   column in the target table cannot be changed). \n\n? Dry Run if Output disabled    If performing output actions is disabled, only a dry run is performed and   no permanent changes occur. The operation checks for errors like missing   columns or mismatched types and if successful, returns the target table   unchanged with a `Dry_Run_Operation` warning attached.    More expensive checks, like clashing keys or unmatched rows are checked   only on a sample of rows, so errors may still occur when the output action   is enabled."},
{"module": "Standard.Database.Extensions.Upload_Database_Table", "type": "DB_Table", "name": "delete_rows", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key_values_to_delete": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "default_key_columns_required self"}, "allow_duplicate_matches": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Removes rows from a database table.  It returns the count of the rows that have been deleted.  This operation will only work if this table is a \u0027trivial\u0027 table reference, like returned by `Connection.query`, so it corresponds directly to a table existing in a Database. If the target table is transformed in any way, this correspondence is lost and the update operation cannot be performed on such a transformed object.","errors": "","remarks": "? Dry Run if Output disabled    If performing output actions is disabled, only a dry run is performed and   no permanent changes occur. The operation checks for errors like missing   columns, and returns the count of rows that would have been deleted by this   operation, with a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Database.Extensions.Upload_In_Memory_Table", "type": "Table", "name": "select_into_database_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false, "type": "Text", "checked": true}, "primary_key": {"lazy": false, "default": "[]"}, "temporary": {"lazy": false, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a new database table from this in-memory table.","errors": "","remarks": "? Dry Run if Output disabled    If performing output actions is disabled, only a dry run is performed and   no permanent changes occur. The operation checks for errors like missing   columns, and returns a temporary table containing a sample of the input   with a `Dry_Run_Operation` warning attached.    More expensive checks, like clashing keys are checked only on the sample of   rows, so errors may still occur when the output action is enabled."},
{"module": "Standard.Database.Extensions.Upload_In_Memory_Table", "type": "Table", "name": "update_rows", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "update_action": {"lazy": false, "type": "Update_Action", "checked": true, "default": "Update_Action.Update_Or_Insert"}, "key_columns": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Updates the target table with the contents of this table.","errors": "","remarks": "? Type Widening    Smaller types can be widened to a larger type, for example 32-bit integer   column can be widened to a 64-bit integer column, but not vice versa   (because larger numbers could not fit the smaller type and the type of the   column in the target table cannot be changed). \n\n? Dry Run if Output disabled    If performing output actions is disabled, only a dry run is performed and   no permanent changes occur. The operation checks for errors like missing   columns or mismatched types and if successful, returns the target table   unchanged with a `Dry_Run_Operation` warning attached.    More expensive checks, like clashing keys or unmatched rows are checked   only on a sample of rows, so errors may still occur when the output action   is enabled."},
{"module": "Standard.Database.Extensions.Upload_In_Memory_Table", "type": "Table", "name": "delete_rows", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"key_values_to_delete": {"lazy": false, "type": "Table | DB_Table", "checked": true}, "key_columns": {"lazy": false, "default": "[]"}, "allow_duplicate_matches": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Removes rows from a database table.  It returns the count of the rows that have been deleted.  This operation will only work if this table is a \u0027trivial\u0027 table reference, like returned by `Connection.query`, so it corresponds directly to a table existing in a Database. If the target table is transformed in any way, this correspondence is lost and the update operation cannot be performed on such a transformed object.","errors": "","remarks": "? Dry Run if Output disabled    If performing output actions is disabled, only a dry run is performed and   no permanent changes occur. The operation checks for errors like missing   columns, and returns the count of rows that would have been deleted by this   operation, with a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Database.Internal.Common.Connections_Helpers", "type": "", "name": "get_data_viz_pairs", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Common.Database_Distinct_Helper", "type": "", "name": "make_distinct_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text_case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}, "key_column": {"lazy": false}, "value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Database_Join_Helper", "type": "Join_Subquery_Setup", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Join_Subquery_Setup", "arguments": {"subquery": {"lazy": false, "type": "From_Spec", "checked": true}, "new_columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "old_columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "indicator_column": {"lazy": false, "type": "Nothing | Internal_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Database_Join_Helper", "type": "Join_Subquery_Setup", "name": "column_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a mapping from names of columns in the original table to corresponding columns in the created subquery."},
{"module": "Standard.Database.Internal.Common.Database_Join_Helper", "type": "", "name": "make_join_helpers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left_table": {"lazy": false}, "right_table": {"lazy": false}, "left_column_mapping": {"lazy": false}, "right_column_mapping": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Database_Join_Helper", "type": "", "name": "select_columns_for_join", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_naming_helper": {"lazy": false}, "join_kind": {"lazy": false}, "left_new_columns": {"lazy": false}, "right_new_columns": {"lazy": false}, "right_columns_to_drop": {"lazy": false}, "right_prefix": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Takes columns from the left and right subquery, a list of redundant column names and returns a list of new columns that should be present in the join result (depending on the kind of performed join), ensuring that any colliding columns are properly renamed."},
{"module": "Standard.Database.Internal.Common.Database_Join_Helper", "type": "", "name": "prepare_subqueries", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "left": {"lazy": false}, "right": {"lazy": false}, "needs_left_indicator": {"lazy": false}, "needs_right_indicator": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Encoding_Limited_Naming_Properties", "type": "Encoding_Limited_Naming_Properties", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Encoding_Limited_Naming_Properties", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true}, "limit": {"lazy": false, "type": "Integer", "checked": true}, "is_case_sensitive": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Encoding_Limited_Naming_Properties", "type": "Encoding_Limited_Naming_Properties", "name": "encoded_size", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Encoding_Limited_Naming_Properties", "type": "Encoding_Limited_Naming_Properties", "name": "truncate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "size": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Encoding_Limited_Naming_Properties", "type": "Encoding_Limited_Naming_Properties", "name": "size_limit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Common.Encoding_Limited_Naming_Properties", "type": "Encoding_Limited_Naming_Properties", "name": "raise_name_too_long_error", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity_kind": {"lazy": false}, "name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Group_Number_Helpers", "type": "", "name": "make_group_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"from": {"lazy": false, "type": "Integer", "checked": true}, "step": {"lazy": false, "type": "Integer", "checked": true}, "grouping_expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Group_Number_Helpers", "type": "", "name": "make_group_number_equal_count", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"from": {"lazy": false, "type": "Integer", "checked": true}, "step": {"lazy": false, "type": "Integer", "checked": true}, "group_count": {"lazy": false, "type": "Integer", "checked": true}, "ordering_expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "Lookup_Subquery_Setup", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Lookup_Subquery_Setup", "arguments": {"self_sub": {"lazy": false}, "lookup_sub": {"lazy": false}, "lookup_counter": {"lazy": false}, "new_table_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "Lookup_Subquery_Setup", "name": "get_self_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ix": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "Lookup_Subquery_Setup", "name": "get_lookup_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ix": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "Lookup_Subquery_Setup", "name": "create_merged_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ix": {"lazy": false}, "expected_type": {"lazy": false}, "dialect": {"lazy": false}, "infer_type_in_result": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}},"aliases": [],"description": "Creates an `Internal_Column` representing the `Replace_Column` scenario: taking data from lookup table if it was matched, and from base table otherwise. This method also ensure that the column has the expected type, unifying types of the two sources."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "build_lookup_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_table": {"lazy": false}, "lookup_table": {"lazy": false}, "key_columns": {"lazy": false}, "add_new_columns": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implementation of `lookup_and_replace` for Database backend. See `Table.lookup_and_replace` for more details."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "check_initial_invariants", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_table": {"lazy": false}, "lookup_table": {"lazy": false}, "lookup_columns": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}, "continuation": {"lazy": true}},"aliases": [],"description": "Checks if they key contains NULL values or if there would be unmatched rows (if `allow_unmatched_rows` is `False`), and reports any errors."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "make_lookup_counter_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "lookup_columns": {"lazy": false}, "unique_name_strategy": {"lazy": false}},"aliases": [],"description": "Prepares the lookup table counter that is used for two things: 1. It allows us to check if a given row had found a match in the lookup row    and decide which value to use in `Replace_Column` case (the counter will    be `1` if there is a match and `NULL` if there is not). 2. It allows us to find duplicate matches - if a row with counter \u003e1 is found,    that means that a single row has matched multiple rows in the lookup table    and we should report an error."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "prepare_subqueries", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_table": {"lazy": false}, "lookup_table": {"lazy": false}, "lookup_columns": {"lazy": false}, "unique_name_strategy": {"lazy": false}},"aliases": [],"description": "Wraps the two source tables into subqueries and creates a set of new columns (encapsulated as `Lookup_Subquery_Setup`), together with the `lookup_counter` column (see `make_lookup_counter_column`), that are valid in the context of a lookup join query (it translates the source columns valid in the input contexts, to the external join context)."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "make_context_for_lookup_join", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"lookup_columns": {"lazy": false}, "subquery_setup": {"lazy": false}},"aliases": [],"description": "Creates a context for the lookup join query."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "precheck_for_duplicate_matches", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"lookup_columns": {"lazy": false}, "subquery_setup": {"lazy": false}, "connection": {"lazy": false}, "new_ctx": {"lazy": false}, "continuation": {"lazy": true}},"aliases": [],"description": "Runs a query that checks if there are any duplicate matches in the lookup result. The query tries to minimize the amount of work and data that is transferred, but it may not be cheap. It is however needed to be able to report errors early."},
{"module": "Standard.Database.Internal.Common.Lookup_Query_Helper", "type": "", "name": "make_invariant_check", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"lookup_counter": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}},"aliases": [],"description": "Creates an expression that can be baked into the query (preferably in such a way that it will not get removed after query transformations), that will fail if the \u0027key uniqueness\u0027 invariant and the \u0027all rows matching\u0027 (if `allow_unmatched_rows=False`) are violated when the query is being materialized.  This is needed, because the initial checks are run when the query is built, but there is no guarantee that the table will not be changed before the query is actually materialized. If in the meantime, the data is modified and invariants are broken, the query may return completely unexpected results (e.g. rows of the source table could get duplicated, which should never happen with `lookup_and_replace`).  This additional checks ensures that if the invariants are broken, the query will fail instead of returning corrupted data. Its error reporting may be limited in comparison to the initial checks which may compute more information."},
{"module": "Standard.Database.Internal.Common.Offset_Helpers", "type": "", "name": "make_offset", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true}, "colName": {"lazy": false, "type": "Internal_Column", "checked": true}, "order_descriptors": {"lazy": false, "type": "Vector Order_Descriptor", "checked": true}, "grouping_expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}, "fill_with": {"lazy": false, "type": "Fill_With", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Common.Row_Number_Helpers", "type": "", "name": "make_row_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"from": {"lazy": false, "type": "Integer", "checked": true}, "step": {"lazy": false, "type": "Integer", "checked": true}, "order_descriptors": {"lazy": false, "type": "Vector Order_Descriptor", "checked": true}, "grouping_expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Connection.Entity_Naming_Properties", "type": "Entity_Naming_Properties", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Entity_Naming_Properties", "arguments": {"for_table_names": {"lazy": false}, "for_column_names": {"lazy": false}, "for_generated_column_names": {"lazy": false}},"aliases": [],"description": "Describes naming properties of database tables and columns."},
{"module": "Standard.Database.Internal.Connection.Entity_Naming_Properties", "type": "Entity_Naming_Properties", "name": "from_jdbc_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_connection": {"lazy": false}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.utf_8"}, "is_case_sensitive": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": []},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context", "arguments": {"from_spec": {"lazy": false, "type": "From_Spec", "checked": true}, "where_filters": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}, "orders": {"lazy": false, "type": "Vector Order_Descriptor", "checked": true}, "groups": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}, "limit": {"lazy": false, "type": "Nothing | Integer", "checked": true}, "extensions": {"lazy": false, "type": "Vector Context_Extension", "checked": true}},"aliases": [],"description": "A context associated with an SQL query.  The expressions can only be computed in a context which specifies from where their columns come and set filters and other settings for processing the query."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "for_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true, "default": "table_name"}, "internal_temporary_keep_alive_reference": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Creates a query context that just fetches data from a table, without any additional processing."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "for_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context", "arguments": {"raw_sql": {"lazy": false, "type": "Text|SQL_Statement", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Creates a query context that runs a raw SQL query."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "for_subquery", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context", "arguments": {"subquery": {"lazy": false, "type": "From_Spec", "checked": true}},"aliases": [],"description": "Creates a Context from a Sub_Query."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "set_where_filters", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_filters": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with changed `where_filters`."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "add_where_filters", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_filters": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with added `where_filters`."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "set_orders", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_orders": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with changed `orders`."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "add_orders", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_orders": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with added `orders`.  The orderings are modified in such a way that the newly added ordering takes precedence, but if any orderings were already present they are also taken into account to break ties within the new ordering."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "set_groups", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_groups": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with changed `groups`."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "set_limit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_limit": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with changed `limit`."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "add_extension", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"extension": {"lazy": false}},"aliases": [],"description": "Returns a copy of the context with an added extension."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "as_subquery", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"alias": {"lazy": false}, "column_lists": {"lazy": false}},"aliases": [],"description": "\u0027Lifts\u0027 this context into a subquery, so that the original context (with all filters etc.) is encapsulated within the subquery and all external references passed as the second argument, refer directly to that subquery.  It takes a list of lists of columns that should be included in that subquery (this can for example the list of regular columns, the list of indices etc.) It assumes that columns on these lists all have unique names.  It returns a new context and the lists transformed in such a way that each column corresponds to one from the original list but it is valid in the new context.  This is useful as a preprocessing step between combining queries, for example in a join."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each node is passed to the provided function, and the return value of the function replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Subquery_Setup", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Subquery_Setup", "arguments": {"subquery": {"lazy": false, "type": "From_Spec", "checked": true}, "new_columns": {"lazy": false, "type": "Vector (Vector Internal_Column)", "checked": true}, "remap_column": {"lazy": false, "type": "Internal_Column -> Internal_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context_Extension", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Context_Extension", "arguments": {"part_name": {"lazy": false, "type": "SQL_Part", "checked": true}, "expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}, "run_generator": {"lazy": false, "type": "Vector SQL_Builder -> SQL_Builder", "checked": true}},"aliases": [],"description": "A recipe for building the extension."},
{"module": "Standard.Database.Internal.IR.Context", "type": "Context_Extension", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context_Extension", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each node is passed to the provided function, and the return value of the function replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.Create_Column_Descriptor", "type": "Create_Column_Descriptor", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Create_Column_Descriptor", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "sql_type": {"lazy": false, "type": "Text", "checked": true}, "constraints": {"lazy": false, "type": "Vector Column_Constraint", "checked": true}},"aliases": [],"description": "A description of a column for the `Create_Table` query."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}, "internal_temporary_keep_alive_reference": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "A query source that takes data directly from a table in the database."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Query", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"raw_sql": {"lazy": false, "type": "Text | SQL_Statement", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A query source that holds a raw SQL statement."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Literal_Values", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"column_vectors": {"lazy": false, "type": "Vector (Vector Any)", "checked": true}, "column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A query source consisting of a literal VALUES clause."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Join", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"kind": {"lazy": false, "type": "SQL_Join_Kind", "checked": true}, "left_spec": {"lazy": false, "type": "From_Spec", "checked": true}, "right_spec": {"lazy": false, "type": "From_Spec", "checked": true}, "on": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}},"aliases": [],"description": "A query source that performs a join operation on two sources."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Union", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"queries": {"lazy": false, "type": "Vector Query", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A query source that performs a union operation on multiple sources.  This maps to the SQL operation `UNION ALL`, keeping any duplicate rows."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "Sub_Query", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"columns": {"lazy": false, "type": "Vector (Pair Text SQL_Expression)", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A query source consisting of a sub-query."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each node is passed to the provided function, and the return value of the function replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "From_Spec_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": [],"description": "Special handling to ignore the alias and internal temporary keep alive reference when comparing two `From_Spec.Table` values."},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "From_Spec_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.IR.From_Spec", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "From_Spec", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.IR.Internal_Column", "type": "Internal_Column", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Column", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "sql_type_reference": {"lazy": false, "type": "SQL_Type_Reference", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "An internal column structure."},
{"module": "Standard.Database.Internal.IR.Internal_Column", "type": "Internal_Column", "name": "rename", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_name": {"lazy": false}},"aliases": [],"description": "Rename the internal column."},
{"module": "Standard.Database.Internal.IR.Nulls_Order", "type": "Nulls_Order", "name": "First", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nulls_Order", "arguments": {},"aliases": [],"description": "Null values are included before any other values in the ordering."},
{"module": "Standard.Database.Internal.IR.Nulls_Order", "type": "Nulls_Order", "name": "Last", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nulls_Order", "arguments": {},"aliases": [],"description": "Null values are included after all other values in the ordering."},
{"module": "Standard.Database.Internal.IR.Operation_Metadata", "type": "Row_Number_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Row_Number_Metadata", "arguments": {"groupings_count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.IR.Operation_Metadata", "type": "Date_Period_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Date_Period_Metadata", "arguments": {"period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}, "input_value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.IR.Order_Descriptor", "type": "Order_Descriptor", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Order_Descriptor", "arguments": {"expression": {"lazy": false, "type": "SQL_Expression", "checked": true}, "direction": {"lazy": false, "type": "Sort_Direction", "checked": true}, "nulls_order": {"lazy": false, "type": "Nothing | Nulls_Order", "checked": true, "default": "Nothing"}, "collation": {"lazy": false, "type": "Nothing | Text", "checked": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Database.Internal.IR.Order_Descriptor", "type": "Order_Descriptor", "name": "reverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Order_Descriptor", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.IR.Order_Descriptor", "type": "Order_Descriptor", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Order_Descriptor", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each node is passed to the provided function, and the return value of the function replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Select", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"expressions": {"lazy": false, "type": "Nothing | Vector (Pair Text SQL_Expression)", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}},"aliases": [],"description": "A Select SQL query."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Insert", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "pairs": {"lazy": false, "type": "Vector (Pair Text SQL_Expression)", "checked": true}},"aliases": [],"description": "An Insert SQL query that inserts a single row to the table."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Create_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Create_Column_Descriptor", "checked": true}, "primary_key": {"lazy": false, "type": "Nothing | Vector Text", "checked": true}, "temporary": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "An SQL query that creates a new table."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Drop_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "if_exists": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "An SQL query that drops a table."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Truncate_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "An SQL query that removes all rows from a table, but does not drop the table structure itself."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Insert_From_Select", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "select": {"lazy": false, "type": "Query", "checked": true}},"aliases": [],"description": "An INSERT INTO ... SELECT query that allows to insert results of a query into an existing table."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Update_From_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"target_table_name": {"lazy": false, "type": "Text", "checked": true}, "source_table_name": {"lazy": false, "type": "Text", "checked": true}, "column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "An SQL UPDATE query that updates rows in the target table with values from the source table when the key columns match. Target table rows that do not match the source are left unaffected.  This will usually be a query of the form `UPDATE target SET c1=source.c1, ... FROM source WHERE target.key1=source.key1 AND ...` where `c1` comes from `column_names` and `key1` comes from `key_columns`."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Delete_Unmatched_Rows", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"target_table_name": {"lazy": false, "type": "Text", "checked": true}, "source_table_name": {"lazy": false, "type": "Text", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "An SQL DELETE query that deletes from target table rows that are _not_ present in the source table, based on the specified key columns. They key columns must be present under the same name in both tables.  This will usually be a query of the form `DELETE FROM target WHERE (key_columns...) NOT EXISTS (SELECT 1 FROM source WHERE source.key_columns = target.key_columns)`."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "Delete_Matching_Rows", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"target_table_name": {"lazy": false, "type": "Text", "checked": true}, "source_table_name": {"lazy": false, "type": "Text", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "An SQL DELETE query that deletes from target table rows that have a corresponding row in the source table, matching based on the specified key columns.  They key columns must be present under the same name in both tables.  This will usually be a query of the form `DELETE FROM target WHERE (key_columns...) EXISTS (SELECT 1 FROM source WHERE source.key_columns = target.key_columns)`."},
{"module": "Standard.Database.Internal.IR.Query", "type": "Query", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each node is passed to the provided function, and the return value of the function replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"origin": {"lazy": false, "type": "Text", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "The internal representation of an SQL expression that gets a value from a column."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Constant", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "The internal representation of an SQL expression which is a constant to be interpolated when building the query."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Literal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"value": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "The internal representation of an SQL literal that should be inserted as-is into a query."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Text_Literal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"value": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A text literal that should be inserted into a query, wrapped in quotes with any quotes it may contain escaped.  This is useful to avoid requiring unnecessary interpolations for text constants in queries.  User-provided values should always be passed as interpolated `Constant`s. This should only be used for \u0027statically\u0027 known constants - ones baked into the library source code."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Operation", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"kind": {"lazy": false, "type": "Text", "checked": true}, "expressions": {"lazy": false, "type": "Vector SQL_Expression", "checked": true}, "metadata": {"lazy": false, "type": "Any | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "The internal representation of an SQL expression built from an operation and sub-expressions."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Let", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "binder": {"lazy": false, "type": "Text", "checked": true}, "bindee": {"lazy": false, "type": "SQL_Expression", "checked": true}, "body": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "The internal representation of a `WITH ... AS` CTE expression. A `Let` value contains the \"binding\" of the CTE expression to a lexically scoped table name, as well as the body expression that refers to the binding.  A `Let` value\u0027s body always contains at least one `Let_Ref` value with the same `binder` identifier, unless the callback passed to the `let` method ignored its argument."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "Let_Ref", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "binder": {"lazy": false, "type": "Text", "checked": true}, "standalone_expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "The internal representation of a \"reference\" to a CTE expression.  A `Let_Ref` value always occurs within the `body` expression of an enclosing `Let` value.  Database backends often evaluate sub-expressions of `DB_Table` and `DB_Column` values, for example when querying the datanbase for an expression type. `Let_Ref` values are sometimes evaluated in the database without their enclosing `Let` values, in which case the `binder` field refers to an unbound identifier. In these cases, the original CTE expression in `standalone_expression` is used instead."},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "List", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"values": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "The internal representation of an  list of SQL expressions which will be separated by commas in a list in the final SQL query.  NOTE - Only valid in certain locations so should be used carefully"},
{"module": "Standard.Database.Internal.IR.SQL_Expression", "type": "SQL_Expression", "name": "traverse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "A bottom-up, depth-first traversal of this IR node and its children. Each node is passed to the provided function, and the return value of the function replaces this node in the tree."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "Inner", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Join_Kind", "arguments": {},"aliases": [],"description": "Inner join.  The result will contain only rows that had a match in both left and right source."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "Left", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Join_Kind", "arguments": {},"aliases": [],"description": "Left join.  The result will contain all rows from the left source. Some of them may be duplicated if they have multiple matches on the right. If a row from the left source has no match on the right, it will be present exactly once in the result and the fields corresponding to the right source will be set to NULL."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "Right", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Join_Kind", "arguments": {},"aliases": [],"description": "Right join.  The result will contain all rows from the right source. Some of them may be duplicated if they have multiple matches on the left. If a row from the right source has no match on the left, it will be present exactly once in the result and the fields corresponding to the left source will be set to NULL."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "Cross", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Join_Kind", "arguments": {},"aliases": [],"description": "Cross join.  The result will contain a cross product of rows from the left source with the right source. Its `on` list should be empty, instead `where_filters` in the query can be used to filter the results."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "Full", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Join_Kind", "arguments": {},"aliases": [],"description": "The result contains all rows from both sources, each unmatched row is extended with null values for the columns from the other table."},
{"module": "Standard.Database.Internal.IR.SQL_Join_Kind", "type": "SQL_Join_Kind", "name": "to_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the SQL representation of this join kind as text."},
{"module": "Standard.Database.Internal.IR.Traversal_Helpers", "type": "", "name": "traverse_and_accumulate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false, "type": "Any -> Vector Any", "checked": true}, "node": {"lazy": false}},"aliases": [],"description": "Traverse a Query using a function that returns values to accumulate into a Vector. The return value of the traversal is not used."},
{"module": "Standard.Database.Internal.Postgres.Helpers", "type": "", "name": "get_encoding_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_connection": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Helpers", "type": "", "name": "parse_postgres_encoding", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"encoding_name": {"lazy": false}},"aliases": [],"description": "Translates names of encodings from https://www.postgresql.org/docs/current/multibyte.html#CHARSET-TABLE into their Java counterparts."},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "Pgpass_Entry", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Pgpass_Entry", "arguments": {"host": {"lazy": false}, "port": {"lazy": false}, "database": {"lazy": false}, "username": {"lazy": false}, "password": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "Pgpass_Entry", "name": "matches", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"host": {"lazy": false}, "port": {"lazy": false}, "database": {"lazy": false}, "username": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "", "name": "read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"host": {"lazy": false}, "port": {"lazy": false}, "database": {"lazy": false}, "username": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Read the .pgpass file from the User\u0027s home directory and obtain username and password.  See https://www.postgresql.org/docs/current/libpq-pgpass.html  On Windows this file is expected to be located at `%APPDATA%\\postgresql\\pgpass.conf`. On Linux and macOS this file is expected to be located at `~/.pgpass` and it is should be inaccessible by other users and the group - otherwise it will be ignored. This can be achieved by running `chmod 0600 ~/.pgpass`.  If `PGPASSFILE` environment variable is set, the provided location is used instead of the default one."},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "", "name": "locate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Determines the location of the .pgpass file to use."},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "", "name": "verify", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "Checks if the given .pgpass file can be used.  The file can be used if it exists and has correct permissions on UNIX systems."},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "", "name": "parse_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Pgpass", "type": "", "name": "parse_line", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"line": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Dialect", "arguments": {"dialect_operations": {"lazy": false}},"aliases": [],"description": "The dialect of PostgreSQL databases."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation according to the specific dialect."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part\u0027s that determine what order each part gets written in for the final SQL output If you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "wrap_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps and possibly escapes the identifier so that it can be used in a generated query regardless of what characters it contains. The quotes used will depend on the dialect."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "make_table_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": [],"description": "Generates a SQL expression for a table literal."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.  One of the purposes of this method is to verify if the expected ordering settings are supported by the given database backend."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "prepare_distinct", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Prepares a distinct operation."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso `Value_Type`."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Internal_Column", "checked": true}, "target_type": {"lazy": false, "type": "SQL_Type", "checked": true}, "infer_result_type_from_database_callback": {"lazy": false, "type": "SQL_Expression -> SQL_Type_Reference", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": [],"description": "There is a bug in Postgres type inference, where if we unify two fixed-length char columns of length N and M, the result type is said to be a **fixed-length** column of length max_int4. This is wrong, and in practice the column is just a variable-length text. This method detects this situations and overrides the type to make it correct."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "cast_op_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of certain operations with certain arguments.  It is used when the normal type inference provided by the database engine needs to be adjusted.  In most cases this method will just return the expression unchanged, it is used only to override the type in cases where the default one that the database uses is not what we want."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "cast_aggregate_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of aggregate operations. Some DBs do CAST(SUM(x) AS FLOAT) others do SUM(CAST(x AS FLOAT))."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.  Returns `Nothing` if the key is not defined."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "prepare_metadata_for_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}, "operation_input_type": {"lazy": false}},"aliases": [],"description": "Prepares metadata for an operation taking a date/time period and checks if the given period is supported."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "if_replace_params_supports", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replace_params": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Returns true if the `replace` parameters are supported by this backend."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "needs_literal_table_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "Postgres_Dialect", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "postgres", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of PostgreSQL databases."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_dialect_operations", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "is_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This overrides the default behaviour, due to a weird behaviour of Postgres - it wants to determine the type for the parameter provided to IS NULL.  But when the parameter is NULL, the type is unspecified. This only occurs if a constant-NULL column is created in an expression builder `make_constant` when computing an expression. We do not want to give it a default type, as it needs to be flexible - this NULL column may be used in expressions of various types. Only with IS NULL, having no type associated will fail with `ERROR: could not determine data type of parameter`. To circumvent this issue, we simply check if the parameter to be provided there is a `Nothing` interpolation. If it is, we will just rewrite the expression to `TRUE` since that is the expected result of `NULL IS NULL`.  With the IR refactor, this should be done in some preprocess pass that still works on SQL_Expression and not raw SQL."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "represents_an_untyped_null_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arg": {"lazy": false}},"aliases": [],"description": "See `is_null` above.  It is a heuristic that will match generated expressions coming from a NULL Literal or a Nothing constant. This should be enough, as any more complex expression should have some type associated with it."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "is_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The same issue as with `is_null` above, but here we can assume that `arg` represents some `text` value, so we can just CAST it."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_count_is_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_count_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_count_not_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_median", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_mode", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_percentile", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "first_last_aggregators", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "These are written in a not most-efficient way, but a way that makes them compatible with other group-by aggregations out-of-the-box. In the future, we may want to consider some alternative solutions."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_first_aggregator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"reverse": {"lazy": false}, "ignore_null": {"lazy": false}, "args": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_shortest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_longest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "concat_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "trim_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_count_distinct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "agg_count_distinct_include_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "starts_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "ends_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_contains_expr", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}, "substring": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "contains", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "left", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "right", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_order_descriptor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "is_nan", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "is_inf", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "is_finite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "bool_or", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "floating_point_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "mod_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "decimal_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "decimal_mod", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "supported_replace_params", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "replace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_extract_as_int", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"enso_name": {"lazy": false}, "sql_name": {"lazy": false, "default": "enso_name"}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_extract_fractional_as_int", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"enso_name": {"lazy": false}, "sql_name": {"lazy": false, "default": "enso_name"}, "modulus": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_date_add", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_date_diff", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_date_trunc_to_day", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "as_int64", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": [],"description": "Alters the expression casting the value to a 64-bit integer."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "as_int32", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": [],"description": "Alters the expression casting the value to a 32-bit integer (the default choice for integers in Postgres)."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_distinct_extension", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expressions": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "make_runtime_error_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "The RUNTIME_ERROR operation should allow the query to compile fine and it will not prevent it from running if the branch including this operation is not taken. But if the branch is computed, it should ensure the query fails.  This query never returns a value, so its type should be polymorphic. However, that is not possible - so currently it just \u0027pretends\u0027 that it would return a Boolean - because that is the type we expect in the use-case. This can be altered if needed.  It takes a variable as the second argument. It can be any value that is not statically known - this ensure that the optimizer will not be able to pre-compute the expression too early (which could make the query fail spuriously). See `make_invariant_check` in `Lookup_Query_Helper` for an example."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Dialect", "type": "", "name": "postgres_dialect_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Error_Mapper", "type": "Postgres_Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Error_Mapper", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Error_Mapper", "type": "Postgres_Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Error_Mapper", "type": "Postgres_Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Error_Mapper", "type": "Postgres_Error_Mapper", "name": "is_table_already_exists_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Error_Mapper", "type": "Postgres_Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Postgres_Type_Mapping", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "value_type_to_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "sql_type_to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"infer_from_database_callback": {"lazy": false}, "op_name": {"lazy": false}, "arguments": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "The Postgres type mapping always relies on the return type determined by the database backend."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "prepare_type_overrides", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type_suggestions": {"lazy": false}},"aliases": [],"description": "We want to respect any overriding references, but references that rely on computing the type by the database are resolved to Nothing to just rely on the `ResultSet` metadata and decrease overhead."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "is_implicit_conversion", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"source_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "is_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "is_same_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type1": {"lazy": false, "type": "Value_Type", "checked": true}, "value_type2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "Postgres_Type_Mapping", "name": "make_column_fetcher", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Creates a `Column_Fetcher` used to fetch data from a result set and build an in-memory column from it, based on the given column type."},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "", "name": "simple_types_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "", "name": "complex_types_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "", "name": "on_unknown_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Postgres.Postgres_Type_Mapping", "type": "", "name": "max_precision", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This is the maximum size that JDBC driver reports for \u0027unbounded\u0027 types in Postgres."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Dialect", "arguments": {"dialect_operations": {"lazy": false}},"aliases": [],"description": "The dialect of SQLite databases."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation according to the specific dialect."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part\u0027s that determine what order each part gets written in for the final SQL output If you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "wrap_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps and possibly escapes the identifier so that it can be used in a generated query regardless of what characters it contains. The quotes used will depend on the dialect."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "make_table_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": [],"description": "Generates a SQL expression for a table literal."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.  One of the purposes of this method is to verify if the expected ordering settings are supported by the given database backend."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "prepare_distinct", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Prepares a distinct operation."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso `Value_Type`."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Internal_Column", "checked": true}, "target_type": {"lazy": false, "type": "SQL_Type", "checked": true}, "infer_result_type_from_database_callback": {"lazy": false, "type": "SQL_Expression -> SQL_Type_Reference", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "make_cast_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": [],"description": "SQLite allows mixed type columns, but we want our columns to be uniform. So after unifying columns with mixed types, we add a cast to ensure that."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "cast_op_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of certain operations with certain arguments.  It is used when the normal type inference provided by the database engine needs to be adjusted.  In most cases this method will just return the expression unchanged, it is used only to override the type in cases where the default one that the database uses is not what we want."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "cast_aggregate_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of aggregate operations. Some DBs do CAST(SUM(x) AS FLOAT) others do SUM(CAST(x AS FLOAT))."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.  Returns `Nothing` if the key is not defined.  Custom handling is required, because the default DatabaseMetaData implementation does not correctly handle temporary tables."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "prepare_metadata_for_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}, "operation_input_type": {"lazy": false}},"aliases": [],"description": "Prepares metadata for an operation taking a date/time period and checks if the given period is supported."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "if_replace_params_supports", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replace_params": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Returns true if the `replace` parameters are suppoerted by this backend."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "needs_literal_table_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "SQLite_Dialect", "name": "custom_build_aggregate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "We need custom handling for First and Last, as SQLite does not support such aggregation functions out of the box, so instead we create a row number column in a subquery and compute the result based on that."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "sqlite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of SQLite databases."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "make_dialect_operations", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "unsupported", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_count_is_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_count_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_count_not_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_stddev_pop", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_stddev_samp", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "first_last_aggregators", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This is a prototype that doesn\u0027t work correctly. Left for reference for future implementation."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "concat_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "trim_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "is_inf", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "is_finite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_count_distinct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "agg_count_distinct_include_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "starts_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "ends_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "make_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "make_contains_expr", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}, "substring": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "contains", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "left", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "right", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "bool_or", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "floating_point_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "mod_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "supported_replace_params", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "replace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "replace_only_first", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"case_sensitive": {"lazy": false}, "t": {"lazy": false}, "p": {"lazy": false}, "r": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "make_custom_cast", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_value_type": {"lazy": false}, "type_mapping": {"lazy": false}},"aliases": [],"description": "It will return `Nothing` if the type does not require custom logic."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Dialect", "type": "", "name": "make_runtime_error_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "The RUNTIME_ERROR operation should allow the query to compile fine and it will not prevent it from running if the branch including this operation is not taken. But if the branch is computed, it should ensure the query fails.  This query never returns a value, so its type should be polymorphic. However, that is not possible - so currently the SQLite dialect just does not handle inferring a type for it. Thus, it should only be used in places that will not need client-side type inference (e.g. WHERE clause is ok). This can be changed in the future, if needed."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Entity_Naming_Properties", "type": "", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Error_Mapper", "type": "SQLite_Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Error_Mapper", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Error_Mapper", "type": "SQLite_Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Error_Mapper", "type": "SQLite_Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "SQLite does not mind SQLite NULL primary keys."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Error_Mapper", "type": "SQLite_Error_Mapper", "name": "is_table_already_exists_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Error_Mapper", "type": "SQLite_Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Type_Mapping", "arguments": {},"aliases": [],"description": "Mapping from Value_Type to SQLite is done by finding the closest matching type corresponding to one of the 4 supported affinities: INTEGER, REAL, NUMERIC, TEXT, BLOB. Thus many value types will end up being approximated by a close but inexact type. Apart from that, a fourth artificial affinity is introduced: BOOLEAN. Normally, SQLite does not have a dedicated boolean type and uses INTEGER instead. However, it is useful for our users to distinguish the boolean columns. We do this by manually overriding the type of columns detected as boolean or returned from our boolean operations. The JDBC automatically handles translating between the underlying INTEGER storage and Java Booleans, so it is all seamless - only our type logic needs to be aware that it cannot rely on the JDBC metadata as the type reported for boolean operations will be INTEGER - so we need to carefully ensure there is the override.  While the JDBC driver tries to approximate more precise types based on the type name, these approximations are not fully true as the underlying SQLite storage is still only one of the supported affinities. So to avoid suggesting to the user that the database can do stuff which it cannot (like storing integers truncating them at 32-bits or storing fixed-length text) we approximate the supported types by data types that correspond to what can actually be stored in the given column to match its affinity. While SQLite allows to store any data in a column, we restrict the data to only what can match the column\u0027s affinity to be aligned with our other backends.  See `JDBC3ResultSet::getColumnType` method in the `org.xerial.sqlite-jdbc` module for the logic JDBC is using to map the SQLite types."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "value_type_to_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "sql_type_to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"infer_from_database_callback": {"lazy": false}, "op_name": {"lazy": false}, "arguments": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "The SQL type mapping uses the same logic as the in-memory backend, just simplified to only the types that it supports. It does not rely on the Database to tell the expected types, because it has been found to be unreliable in more complex expressions."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "prepare_type_overrides", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type_suggestions": {"lazy": false}},"aliases": [],"description": "SQLite `ResultSet` metadata may differ row-by-row, so we cannot rely on this metadata. Instead, we get the types inferred for each colum, regardless if it was initially overridden or not."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "is_implicit_conversion", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"source_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "is_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "is_same_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type1": {"lazy": false, "type": "Value_Type", "checked": true}, "value_type2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Type_Mapping", "name": "make_column_fetcher", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Creates a `Column_Fetcher` used to fetch data from a result set and build an in-memory column from it, based on the given column type."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLite_Types", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "numeric", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "real", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "blob", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "boolean", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The artificial 6th affinity that is used to distinguish boolean columns."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "SQLite_Types", "name": "null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "simple_types_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The types that SQLite JDBC driver will report are: BOOLEAN, TINYINT, SMALLINT, BIGINT, INTEGER, DECIMAL, DOUBLE, REAL, FLOAT, NUMERIC, DATE, TIMESTAMP, CHAR, VARCHAR, BINARY, BLOB, CLOB.  We map the types to how they are actually stored, with the exception of boolean which is mapped as boolean type as explained above.  For types like dates - we map them to unsupported type, because date operations in SQLite are currently not supported due to their weird storage."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "name_based_workarounds", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The SQLite JDBC mapping relies on slightly modified version of the rules from https://www.sqlite.org/datatype3.html#affinity_name_examples However, with this the date-time columns will be mapped to the numeric type. Instead, we want to treat such columns as Text, so we override the mapping."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "operations_dict", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Maps operation names to functions that infer its result type."},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "default_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "default_float", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "default_integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQLite.SQLite_Type_Mapping", "type": "", "name": "unsupported_date_time", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Type_Refinements.DB_Table_Refinements", "type": "", "name": "refine_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Type_Refinements.DB_Table_Refinements", "type": "", "name": "is_single_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"table": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Type_Refinements.Single_Column_DB_Table_Conversions", "type": "DB_Column", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"that": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Database.Internal.Upload.Helpers.Argument_Checks", "type": "", "name": "check_delete_rows_arguments", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target_table": {"lazy": false}, "key_values_to_delete": {"lazy": false}, "key_columns": {"lazy": false}, "continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Argument_Checks", "type": "", "name": "check_target_table_for_update", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target_table": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Argument_Checks", "type": "", "name": "resolve_primary_key", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"structure": {"lazy": false}, "primary_key": {"lazy": false}},"aliases": [],"description": "Ensures that provided primary key columns are present in the table and that there are no duplicates."},
{"module": "Standard.Database.Internal.Upload.Helpers.Argument_Checks", "type": "", "name": "check_update_arguments_structure_match", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "target_table": {"lazy": false}, "key_columns": {"lazy": false}, "update_action": {"lazy": false}, "error_on_missing_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "This helper ensures that all arguments are valid.  The `action` is run only if the input invariants are satisfied: - all columns in `source_table` have a corresponding column in `target_table`   (with the same name), - all `key_columns` are present in both source and target tables."},
{"module": "Standard.Database.Internal.Upload.Helpers.Check_Queries", "type": "", "name": "check_duplicate_key_matches_for_delete", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target_table": {"lazy": false}, "tmp_table": {"lazy": false}, "key_columns": {"lazy": false}, "allow_duplicate_matches": {"lazy": false}, "continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Check_Queries", "type": "", "name": "check_multiple_rows_match", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left_table": {"lazy": false}, "right_table": {"lazy": false}, "key_columns": {"lazy": false}, "continuation": {"lazy": true}},"aliases": [],"description": "Checks if any rows identified by `key_columns` have more than one match between two tables."},
{"module": "Standard.Database.Internal.Upload.Helpers.Check_Queries", "type": "", "name": "check_for_null_keys", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Check_Queries", "type": "", "name": "check_for_null_keys_if_any_keys_set", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Constants", "type": "", "name": "default_batch_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The recommended batch size seems to be between 50 and 100. See: https://docs.oracle.com/cd/E18283_01/java.112/e16548/oraperf.htm#:~:text=batch%20sizes%20in%20the%20general%20range%20of%2050%20to%20100"},
{"module": "Standard.Database.Internal.Upload.Helpers.Constants", "type": "", "name": "dry_run_row_limit", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The maximum number of rows that will be used for the operation in dry run mode."},
{"module": "Standard.Database.Internal.Upload.Helpers.Default_Arguments", "type": "", "name": "first_column_name_in_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"structure": {"lazy": false}},"aliases": [],"description": "Returns the name of the first column in the provided table structure. It also verifies that the structure is correct. Used to provide the default value for `primary_key` in `create_table`."},
{"module": "Standard.Database.Internal.Upload.Helpers.Default_Arguments", "type": "", "name": "default_key_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "DB_Table | Table", "checked": true}},"aliases": [],"description": "Extracts the default argument for `key_columns` parameter of the `update_rows` operation."},
{"module": "Standard.Database.Internal.Upload.Helpers.Default_Arguments", "type": "", "name": "default_key_columns_required", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": [],"description": "A variant of `default_key_columns` that will raise an error if no key columns were found."},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "Non_Unique_Key_Recipe", "name": "Recipe", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Non_Unique_Key_Recipe", "arguments": {"source_table": {"lazy": false}, "primary_key": {"lazy": false}, "original_panic": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "Null_Key_Recipe", "name": "Recipe", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Null_Key_Recipe", "arguments": {"source_table": {"lazy": false}, "primary_key": {"lazy": false}, "original_panic": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "internal_translate_known_upload_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "connection": {"lazy": false}, "primary_key": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Inspects any `SQL_Error` thrown and replaces it with an error recipe, that is converted into a proper error in an outer layer.  The special handling is needed, because computing the `Non_Unique_Key` error may need to perform a SQL query that must be run outside of the just-failed transaction."},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "handle_upload_duplicate_primary_key_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "handle_upload_null_primary_key_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "handle_upload_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "raise_duplicated_primary_key_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "primary_key": {"lazy": false}, "original_panic": {"lazy": false}},"aliases": [],"description": "Creates a `Non_Unique_Key` error containing information about an example group violating the uniqueness constraint."},
{"module": "Standard.Database.Internal.Upload.Helpers.Error_Helpers", "type": "", "name": "raise_null_primary_key_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "primary_key": {"lazy": false}, "original_panic": {"lazy": false}},"aliases": [],"description": "Creates a `Null_Key` error containing information about an example group violating the non-null constraint."},
{"module": "Standard.Database.Internal.Upload.Helpers.Prepare_Structure", "type": "", "name": "align_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_or_columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Prepare_Structure", "type": "", "name": "align_vector_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Prepare_Structure", "type": "", "name": "structure_from_existing_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.Prepare_Structure", "type": "", "name": "validate_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_naming_helper": {"lazy": false}, "structure": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Verifies that the provided structure is valid, and runs the provided action or raises an error.  In particular it checks if there are no clashing column names."},
{"module": "Standard.Database.Internal.Upload.Helpers.Prepare_Structure", "type": "", "name": "verify_structure_hint", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"structure_hint": {"lazy": false}, "column_names": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.SQL_Helpers", "type": "", "name": "make_batched_insert_template", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}, "column_names": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Helpers.SQL_Helpers", "type": "", "name": "prepare_create_table_statement", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}, "columns": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Creates a statement that will create a table with structure determined by the provided columns.  The `primary_key` columns must be present in `columns`, but it is the responsibility of the caller to ensure that, otherwise the generated statement will be invalid."},
{"module": "Standard.Database.Internal.Upload.Operations.Create", "type": "", "name": "create_table_implementation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}, "structure": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "allow_existing": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Creates a new database table with the provided structure and returns the name of the created table.  The user-facing function that handles the dry-run logic.","remarks": "? Transactionality    The create operation itself is just one CREATE statement, so it does not   need to be done inside of a transaction.   The only edge case to handle is - if the table already exists, we want to   customize the behaviour based on `allow_existing`. This is achieved by   intercepting the \u0027already exists\u0027 error."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Source", "name": "Temporary_DB_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Delete_Rows_Source", "arguments": {"recipe": {"lazy": false, "type": "Table_Upload_Operation", "checked": true}, "tmp_table_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A temporary table created as source for actual delete operation. It is used even when running from DB, because the Delete matching rows operation requires a named table."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Source", "name": "prepare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "key_values_to_delete": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "key_columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Source", "name": "run_in_transaction", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"connection": {"lazy": false}, "callback": {"lazy": false, "type": "Text -> Source_DB_Table_Uploader -> Integer", "checked": true}},"aliases": [],"description": "Runs the provided callback in transaction, having first created an empty temporary table. The user must call `materialize` on `Source_DB_Table_Uploader` to actually upload the table contents - after verifying that the preconditions are met. The callback gets the `Source_DB_Table_Uploader` name and reference as arguments."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Dry_Run_Source", "name": "Existing_DB_Query", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Delete_Rows_Dry_Run_Source", "arguments": {"db_table": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": [],"description": "The variant running from an existing DB query - in dry run mode we can avoid materializing a temporary table if the query is already in DB."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Dry_Run_Source", "name": "Temporary_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Delete_Rows_Dry_Run_Source", "arguments": {"recipe": {"lazy": false, "type": "Table_Upload_Operation", "checked": true}, "dry_run_message_suffix": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A temporary table created for dry-run. This variant is used when running delete with an in-memory table as a source. The in-memory table has to be uploaded (at least in part) to DB to be able to run the check."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Dry_Run_Source", "name": "prepare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "key_values_to_delete": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "key_columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Delete_Rows_Dry_Run_Source", "name": "run_in_transaction", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"connection": {"lazy": false}, "callback": {"lazy": false, "type": "Source_DB_Table_Uploader -> Text -> Integer", "checked": true}},"aliases": [],"description": "Runs the provided callback in transaction, having first created empty temporary tables. The user must call `materialize` on `Source_DB_Table_Uploader` to actually upload the table contents - after verifying that the preconditions are met. The callback gets the `Source_DB_Table_Uploader`, as well as a (possibly empty) suffix to add to the dry-run message."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Source_DB_Table_Uploader", "name": "Existing_DB_Query", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Source_DB_Table_Uploader", "arguments": {"db_table": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Source_DB_Table_Uploader", "name": "Temporary_DB_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Source_DB_Table_Uploader", "arguments": {"recipe": {"lazy": false, "type": "Table_Upload_Operation", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "Source_DB_Table_Uploader", "name": "materialize", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Table", "arguments": {},"aliases": [],"description": "Performs an upload of the source table (if needed) and returns a reference to it. This method should be called after the invariant checks have passed - otherwise the upload itself could fail due to NULL constraint violations."},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "", "name": "common_delete_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"target_table": {"lazy": false, "type": "DB_Table", "checked": true}, "key_values_to_delete": {"lazy": false, "type": "Table | DB_Table", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Text", "checked": true}, "allow_duplicate_matches": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Delete", "type": "", "name": "common_preprocess_source_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"key_values_to_delete": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "key_columns": {"lazy": false}},"aliases": [],"description": "We select only the key columns and discard anything else.  We also call distinct to ensure that we will not have primary-key duplicate  issues when uploading the temporary table."},
{"module": "Standard.Database.Internal.Upload.Operations.Select_Into", "type": "", "name": "select_into_table_implementation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "connection": {"lazy": false}, "table_name": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Select_Into", "type": "", "name": "upload_table_in_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "connection": {"lazy": false}, "table_name": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "on_problems": {"lazy": false}, "row_limit": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "Context", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Append_Helper", "arguments": {"source_table": {"lazy": false}, "target_table": {"lazy": false}, "key_columns": {"lazy": false}, "dry_run": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "if_not_dry_run", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Runs the action only if running in normal mode. In dry run mode, it will just return `Nothing`."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "update_common_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The update only affects matched rows, unmatched rows are ignored."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "insert_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_to_insert": {"lazy": false}},"aliases": [],"description": "Inserts all rows from the source.  Behaviour is ill-defined if any of the rows already exist in the target. If only new rows are supposed to be inserted, they have to be filtered before inserting."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "delete_unmatched_target_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Deletes rows from target table that were not present in the source."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "new_source_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Finds rows that are present in the source but not in the target."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "check_already_existing_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"continuation": {"lazy": true}},"aliases": [],"description": "Checks if any rows from the source table already exist in the target, and if they do - raises an error.  Does nothing if `key_columns` is empty, as then there is no notion of \u0027matching\u0027 rows."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "check_rows_unmatched_in_target", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "Append_Helper", "name": "check_multiple_target_rows_match", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"continuation": {"lazy": true}},"aliases": [],"description": "Check if there are rows in source that match multiple rows in the target."},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "", "name": "common_update_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false, "type": "DB_Table | Table", "checked": true}, "target_table": {"lazy": false, "type": "DB_Table", "checked": true}, "update_action": {"lazy": false}, "key_columns": {"lazy": false}, "error_on_missing_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Update", "type": "", "name": "append_to_existing_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false}, "target_table": {"lazy": false}, "update_action": {"lazy": false}, "key_columns": {"lazy": false}, "dry_run": {"lazy": false}},"aliases": [],"description": "Assumes that `source_table` is a simple table query without any filters, joins and other composite operations - if a complex query is needed, it should be first materialized into a temporary table.  If `dry_run` is set to True, only the checks are performed, but the operations actually modifying the target table are not."},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "Table_Upload_Operation", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Upload_Operation", "arguments": {"table_description": {"lazy": false, "type": "Transactional_Table_Description", "checked": true}, "internal_upload_callback": {"lazy": false, "type": "Nothing -> DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "Table_Upload_Operation", "name": "perform_upload", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {},"aliases": [],"description": "Performs the actual data upload. This method should be called inside of `run_transaction_with_tables` block which had the `table_description` passed to it."},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "create_table_structure", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}, "structure": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Assumes the output context is enabled for it to work. Creates a table in the Database and returns its name."},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "resolve_temp_table_name", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"connection": {"lazy": false}, "temporary": {"lazy": false, "type": "Boolean", "checked": true}, "table_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Ensures the table has a valid temporary name for databases that have special naming rules for temporary tables. Like SQLServer, where temporary tables must start with `#`."},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "create_table_upload_operation", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table_Upload_Operation", "arguments": {"source_table": {"lazy": false}, "connection": {"lazy": false}, "table_name": {"lazy": false, "type": "Text", "checked": true}, "primary_key": {"lazy": false, "type": "Nothing | Vector Text", "checked": true}, "temporary": {"lazy": false, "type": "Boolean", "checked": true}, "remove_after_transaction": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "structure_hint": {"lazy": false, "default": "Nothing"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}, "row_limit": {"lazy": false, "type": "Integer | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "A helper to prepare an upload operation for a table."},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "_create_in_memory_table_upload_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false, "type": "Table", "checked": true}, "connection": {"lazy": false}, "table_name": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "remove_after_transaction": {"lazy": false}, "structure_hint": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "row_limit": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "_create_database_table_upload_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_table": {"lazy": false, "type": "DB_Table", "checked": true}, "connection": {"lazy": false}, "table_name": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}, "remove_after_transaction": {"lazy": false}, "structure_hint": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "row_limit": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Upload.Operations.Upload_Table", "type": "", "name": "_check_outside_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "Aggregate_With_Helper_Expressions", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Aggregate_With_Helper_Expressions", "arguments": {"create_helper_expressions": {"lazy": false, "type": "Aggregate_Column -> Vector Internal_Column -> Vector (Pair Text SQL_Expression)", "checked": true}, "make_aggregate": {"lazy": false, "type": "Aggregate_Column -> Text -> Vector Internal_Column -> DB_Table -> (Text -> Vector -> SQL_Expression -> SQL_Type_Reference) -> Problem_Builder -> Internal_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "Aggregate_With_Helper_Expressions", "name": "build", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "base_table": {"lazy": false}, "key_columns": {"lazy": false}, "resolved_aggregates": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "This method should be declared as result of `dialect.custom_build_aggregate` to use this setup."},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "make_aggregate_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Column", "arguments": {"table": {"lazy": false}, "aggregate": {"lazy": false}, "as": {"lazy": false}, "dialect": {"lazy": false}, "infer_return_type": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Creates an `Internal_Column` that will represent the computed aggregate."},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "aggregate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "DB_Table", "checked": true}, "group_by": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true}, "columns": {"lazy": false, "type": "Vector", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implementation for the `DB_Table.aggregate` method."},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "default_build_aggregate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"build_aggregate": {"lazy": false}, "dialect": {"lazy": false}, "base_table": {"lazy": false}, "key_columns": {"lazy": false}, "resolved_aggregates": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "make_infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "connection": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "map_column_inputs", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"f": {"lazy": false, "type": "Function", "checked": true}, "aggregate_column": {"lazy": false, "type": "Aggregate_Column", "checked": true}},"aliases": [],"description": "Applies a mapping to column inputs of the aggregate."},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "is_non_empty_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Aggregate_Helper", "type": "", "name": "throw_ordering_required", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Dialect_Operations", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Operations", "arguments": {"operations_dict": {"lazy": false, "type": "Dictionary Text (Vector (SQL_Builder->SQL_Builder))", "checked": true}},"aliases": [],"description": "Operations supported by a particular SQL dialect and how they are implemented."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Dialect_Operations", "name": "extend_with", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"mappings": {"lazy": false}},"aliases": [],"description": "Creates a copy of the dialect that supports additional operations or overrides existing ones.  # extend_with : Vector [Text, Vector SQL_Builder -\u003e SQL_Builder] -\u003e Dialect_Operations"},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Dialect_Operations", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Generator", "arguments": {"let_bindings_ref": {"lazy": false, "type": "Ref Hashset", "checked": true}},"aliases": [],"description": "We can use a Hashset for the let-binding names, since they are guaranteed to be distinct and not result in any shadowing."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Generator", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "expr": {"lazy": false}},"aliases": [],"description": "Builds code for an expression."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "apply_op_generator_with_metadata", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op": {"lazy": false}, "arguments": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_from_part", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "from_spec": {"lazy": false}},"aliases": [],"description": "Builds code for the FROM clause."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "order_descriptor": {"lazy": false}},"aliases": [],"description": "Builds code for an ordering."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_select_query_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "columns": {"lazy": false}, "ctx": {"lazy": false}},"aliases": [],"description": "Generates SQL code corresponding to a SELECT statement.   Arguments:  - dialect: The SQL dialect for which the code is being generated.  - ctx: A description of the SELECT clause."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_insert_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "table_name": {"lazy": false}, "pairs": {"lazy": false}},"aliases": [],"description": "Generates the SQL code corresponding to an INSERT query."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "SQL_Generator", "name": "generate_sub_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "query": {"lazy": false}},"aliases": [],"description": "Builds code for a whole query."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Let_Binder_Renamer", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Let_Binder_Renamer", "arguments": {"existing_tables": {"lazy": false, "type": "Hashset Text", "checked": true}, "binders_ref": {"lazy": false, "type": "Ref Dictionary", "checked": true}, "serial_ref": {"lazy": false, "type": "Ref Integer", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Let_Binder_Renamer", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Let_Binder_Renamer", "arguments": {"existing_tables": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "Let_Binder_Renamer", "name": "rename", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "binder": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Returns the short identifier that this binder maps to, and generates one if it hasn\u0027t been mapped yet."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "default_get_part_order", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part\u0027s that determine what order each part gets written in for the final SQL output  If you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "generate_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "query": {"lazy": false}},"aliases": [],"description": "Builds code for a whole query.  Also preprocesses the query.  This is the entry-point to using SQL_Builder."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_binary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "A helper function to create a binary operator."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_unary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "A helper function to create a unary operator."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "lift_unary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"description": "A helper function to create an unary operation from a function."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "lift_binary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"description": "A helper function to create a binary operation from a function."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "lift_binary_sql_function", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "sql_function": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A helper function to create a binary operation from a SQL function name."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_right_unary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "A helper function to create a unary operator which is added to the right of the expression."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_function", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "A helper function to create a functional operation."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_constant", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_code": {"lazy": false}},"aliases": [],"description": "A helper function to create an operation that takes no arguments."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "wrap_in_quotes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps the identifier name in quotes and escapes any quotes within the name with double-quote. \n\n This is the simplest way of escaping identifiers that should work across most dialects."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "base_dialect_operations", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The base SQL dialect that is shared between most SQL implementations.  It is a base to help creating concrete dialects. It can be extended or completely overridden."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "is_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_iif", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "case_when", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "For Internal use. An IR expression for constructing SQL `CASE` expressions."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "simple_cast", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_between", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_is_in", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_is_in_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_row_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false, "type": "Vector", "checked": true}, "metadata": {"lazy": false, "type": "Row_Number_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_group_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_group_number_equal_count", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_row_number_in_group", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "A helper for `lookup_and_replace`, and perhaps other operation. It creates an expression that returns a row number within a group."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "alias", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "name": {"lazy": false}},"aliases": [],"description": "Adds an alias for the expression, applicable for expressions that represent columns or sub-queries."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "default_make_table_literal", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"wrap_identifier": {"lazy": false}, "vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "fold_case", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "simple_equals_ignore_case", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_equals", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_not_equals", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "collect_table_names", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Text", "arguments": {"query": {"lazy": false, "type": "Query", "checked": true}},"aliases": [],"description": "Collect all table names / aliases in a query. Used to generate unused names for WITH clauses."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "preprocess_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query", "arguments": {"query": {"lazy": false, "type": "Query", "checked": true}},"aliases": [],"description": "Preprocessing step before converting Query to SQL.  This preprocessing step replaces the long UUID binder names in `WITH` clauses with shorter names.  For `Let_Ref` nodes that are not inside a containing `WITH` nodes, the substitution is performed, but it is not used, since the binder is not used in those cases."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "make_concat", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"make_raw_concat_expr": {"lazy": false}, "make_contains_expr": {"lazy": false}, "has_quote": {"lazy": false}, "args": {"lazy": false}, "append_char": {"lazy": false, "default": "\"||\""}},"aliases": [],"description": "It takes 4 or 5 SQL arguments depending on `has_quote`. The SQL arguments are following: - the column expression to concatenate, - the separator to use when joining the expressions, - a prefix to prepend, - a suffix to append, - a quote character to use to escape separator if it is present inside of a   column expression; it should be provided only if `has_quote` is `True` and   must not be empty then. If the quote character occurs in the expression, it   is escaped by doubling each occurrence."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "generate_create_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "name": {"lazy": false}, "columns": {"lazy": false}, "primary_key": {"lazy": false}, "temporary": {"lazy": false}},"aliases": [],"description": "Generates the SQL code corresponding to a CREATE TABLE query."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "generate_column_description", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "descriptor": {"lazy": false}},"aliases": [],"description": "Generates a description of a single column for a CREATE TABLE query."},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "truncate_table_delete_from_style", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "option for implementing generate_truncate_table_sql"},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "truncate_table_truncate_table_style", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "option for implementing generate_truncate_table_sql"},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "default_fetch_types_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "expression": {"lazy": false}, "context": {"lazy": false}, "where_filter_always_false_literal": {"lazy": false, "default": "\"FALSE\""}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "default_generate_collate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}, "quote_char": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\"\u0027"}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "_build_partition_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"grouping": {"lazy": false, "type": "SQL_Builder", "checked": true}, "ordering": {"lazy": false, "type": "SQL_Builder", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "_build_lead_lag_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "n": {"lazy": false, "type": "SQL_Builder", "checked": true}, "colName": {"lazy": false, "type": "SQL_Builder", "checked": true}, "grouping": {"lazy": false, "type": "SQL_Builder", "checked": true}, "ordering": {"lazy": false, "type": "SQL_Builder", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "_make_lead_lag", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Base_Generator", "type": "", "name": "_make_lead_lag_closest_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "Column_Fetcher", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Fetcher", "arguments": {"fetch_value": {"lazy": false, "type": "ResultSet -> Integer -> Any", "checked": true}, "make_builder": {"lazy": false, "type": "Integer -> ProblemAggregator -> Column_Fetcher_Builder", "checked": true}},"aliases": [],"description": "A helper for fetching data from a result set and possibly building a column out of it."},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "Column_Fetcher_Builder", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Fetcher_Builder", "arguments": {"append": {"lazy": false, "type": "Any -> Nothing", "checked": true}, "make_column": {"lazy": false, "type": "Text -> Column", "checked": true}},"aliases": [],"description": "Wraps an underlying builder to provide a generic interface."},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "boolean_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "double_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "long_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bits": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "big_integer_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "fetch_big_integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"rs": {"lazy": false}, "i": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "big_decimal_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "text_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "fallback_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A fallback fetcher that can be used for any type. It will use `getObject` to get the desired value and the `InferredBuilder` to create a Java column that will suit the values present.  It is used as a default fallback. It may not work correctly for specialized types like dates, so a specialized fetcher should be used instead."},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "date_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "time_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "date_time_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "local_date_time_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A column fetcher that fetches the database column without timezone, interpreting it as LocalDateTime and then converting to Enso Date_Time by adding the default system timezone."},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "default_fetcher_for_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": [],"description": "A default implementation that will assign specialized fetchers for the Integer, Float, Char and Boolean value types and a fallback for any other type.  This should try to be aligned with `Storage.make_builder`."},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "seal_java_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_builder": {"lazy": false}, "column_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Column_Fetcher", "type": "", "name": "make_builder_from_java_object_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "Data_Link_Setup", "name": "Available", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_Setup", "arguments": {"create_data_link_structure": {"lazy": false, "type": "Enso_File->JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "Data_Link_Setup", "name": "Unavailable", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_Setup", "arguments": {"cause": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "Data_Link_Setup", "name": "already_a_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Data_Link_Setup", "arguments": {},"aliases": [],"description": "Returns an unavailable setup with reason being the connection was alraedy a data link."},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "Data_Link_Setup", "name": "save_credentials_for_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"data_link_location": {"lazy": false, "type": "Enso_File", "checked": true}, "credentials": {"lazy": false, "type": "Credentials", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "Data_Link_Setup", "name": "save_as_data_link", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "link_type": {"lazy": false, "type": "DB_Data_Link_Type", "checked": true, "default": "..Database"}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "Database", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Data_Link_Type", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Data_Link_Type", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "Query", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Data_Link_Type", "arguments": {"query": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "SQL_Statement", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Data_Link_Type", "arguments": {"sql_statement": {"lazy": false, "type": "SQL_Statement", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "from_js", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Data_Link_Type ! Illegal_Argument", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Parse the `table` field of a data link JSON, returning the appropriate link type.  This is the inverse to `to_js_object`."},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "add_to_data_link_description", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"connection_description": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Alters the connection description JSON, adding information dependent on the data link type (table name or query to fetch, when applicable)."},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Serializes this data link type to an appropriate JSON representation that can be assigned to the `table` field in a data link."},
{"module": "Standard.Database.Internal.Data_Link_Setup", "type": "DB_Data_Link_Type", "name": "interpret", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}},"aliases": [],"description": "Interprets this data link setup according to its type. The `Database` link will return the connection as-is, whereas the other types will return a `DB_Table` for the specific table/query."},
{"module": "Standard.Database.Internal.DB_Data_Link_Helpers", "type": "", "name": "data_link_connection_parameters", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Connection_Options", "arguments": {"source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.DB_Data_Link_Helpers", "type": "", "name": "save_table_as_data_link", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.DB_Data_Link_Helpers", "type": "", "name": "_find_referred_temporary_tables", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing | Vector Text", "arguments": {"connection": {"lazy": false}, "context": {"lazy": false}},"aliases": [],"description": "Checks if the query refers to any tables that are temporary.  Note that this is a heuristic and it may potentially lead to false positives if aliasing table names exist across schemas. Supporting tables with clashing names across schemas is something that may need to be revised overall in the Database library."},
{"module": "Standard.Database.Internal.DB_Wrapped_Error", "type": "DB_Wrapped_Error", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Wrapped_Error", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Support_Level", "name": "Allowed", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Support_Level", "arguments": {},"aliases": [],"description": "DDL statements are allowed inside of transactions."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Support_Level", "name": "Unsupported", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Support_Level", "arguments": {},"aliases": [],"description": "DDL statements are not allowed inside of transactions."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Support_Level", "name": "Ignored", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Support_Level", "arguments": {},"aliases": [],"description": "DDL statements are allowed inside of transactions, but they are ignored."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Support_Level", "name": "Causes_Commit", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Support_Level", "arguments": {},"aliases": [],"description": "DDL statements are allowed inside of transactions, but they cause a commit of the current transaction."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Support_Level", "name": "get_from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Support_Level", "arguments": {"connection": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Transactional_Table_Description", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Transactional_Table_Description", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "temporary": {"lazy": false, "type": "Boolean", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true}, "remove_after_transaction": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "Transactional_Table_Description", "name": "create", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Table", "arguments": {"connection": {"lazy": false}},"aliases": [],"description": "This operation creates the tables regardless of the Output Context setting. It is the responsibility of the caller to ensure that the operation may proceed."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "run_transaction_with_tables", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"connection": {"lazy": false}, "tables": {"lazy": false, "type": "Vector Transactional_Table_Description", "checked": true}, "callback": {"lazy": false, "type": "Vector DB_Table -> Any", "checked": true}},"aliases": [],"description": "A helper that runs the provided code in a transaction, having first created the specified tables. The callback is ran with a vector of created table references passed as an argument.  This helper method ensures that we can perform operations creating permanent or temporary tables with transactions. Some databases do not support DDL statements within transactions, so as an approximation we create the tables before starting the transaction and if the transaction is rolled-back, we ensure to try to drop these tables.  If a given database does allow DDL inside of transactions, we perform the whole operation inside of transaction, to get better guarantees in case of severe failures (network disconnection, process being killed etc.)."},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "create_tables_inside_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"connection": {"lazy": false}, "tables": {"lazy": false, "type": "Vector Transactional_Table_Description", "checked": true}, "callback": {"lazy": false, "type": "Vector DB_Table -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "create_tables_outside_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any", "arguments": {"connection": {"lazy": false}, "tables": {"lazy": false, "type": "Vector Transactional_Table_Description", "checked": true}, "callback": {"lazy": false, "type": "Vector DB_Table -> Any", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "cleanup_tables_silently", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_names": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "cleanup_transaction_scoped_tables", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "tables": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.DDL_Transaction", "type": "", "name": "check_table_integrity", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"created_table": {"lazy": false}},"aliases": [],"description": "A helper that checks if the table was not modified between its creation and entering the transaction. Only applicable to `create_tables_outside_transaction`."},
{"module": "Standard.Database.Internal.Error_Mapper", "type": "Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Error_Mapper", "arguments": {},"aliases": [],"description": "A helper class that helps map backend-specific errors to our common format, when applicable."},
{"module": "Standard.Database.Internal.Error_Mapper", "type": "Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Checks if the given error is related to a violation of PRIMARY KEY uniqueness constraint."},
{"module": "Standard.Database.Internal.Error_Mapper", "type": "Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Error_Mapper", "type": "Error_Mapper", "name": "is_table_already_exists_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Error_Mapper", "type": "Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Called by `Table.read`, allowing the dialect to transform a generic `SQL_Error` into a more specific error type, if applicable."},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "check_integrity", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity1": {"lazy": false}, "entity2": {"lazy": false}},"aliases": [],"description": "Checks if the two tables or columns have the same context and use the same connection. \n\n To combine different objects they need to satisfy this requirement, otherwise the combination would be ill-formed."},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "check_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity1": {"lazy": false}, "entity2": {"lazy": false}},"aliases": [],"description": "Checks if the two tables or columns use the same connection."},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "ensure_same_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "entities": {"lazy": false}, "continuation": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "unify_vector_singleton", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "A helper function simplifying argument handling. \n\n It always returns a vector, if the argument was already a vector, it is kept as-is, otherwise it is wrapped in a singleton vector."},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "assume_default_locale", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "rename_internal_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false}, "new_names": {"lazy": false}},"aliases": [],"description": "Transforms the vector of columns, changing names of each column to the corresponding name from the second vector."},
{"module": "Standard.Database.Internal.Helpers", "type": "", "name": "expect_dialect_specific_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"related_column": {"lazy": false}, "argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the `argument` has an integer type (as defined by the dialect associated with `related_column`). See `SQL_Type_Mapping.is_integer_type` for details."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "Hidden_Table_Reference", "name": "Reference", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hidden_Table_Reference", "arguments": {"parent": {"lazy": false, "type": "Hidden_Table_Registry", "checked": true}, "table_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "Hidden_Table_Registry", "name": "Registry", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hidden_Table_Registry", "arguments": {"reference_counter": {"lazy": false, "type": "HiddenTableReferenceCounter", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "Hidden_Table_Registry", "name": "make_reference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Creates a new reference to the table with the given name.  Once this and any other references to this table name are garbage collected, the table will be scheduled for disposal and removed on the next `run_maintenance_table_cleanup` invocation (unless the table is \u0027brought back to life\u0027 by new references being introduced)."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "Hidden_Table_Registry", "name": "list_hidden_tables", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Lists all tables that were added to the registry by calling `make_reference` and not yet removed."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "Hidden_Table_Registry", "name": "is_registered", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Checks if the given table name is registered in the registry."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a new hidden table registry instance."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "", "name": "dispose_reference", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"reference": {"lazy": false}},"aliases": [],"description": "Utility method for disposing of references. Provided to avoid accidental scope capture with `Managed_Resource` finalizers."},
{"module": "Standard.Database.Internal.Hidden_Table_Registry", "type": "", "name": "run_maintenance_table_cleanup", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}},"aliases": [],"description": "Drops all temporary hidden tables that have been marked for removal and not brought back to life.  This method must be run in a critical section guaranteeing that no other operations will be performed on the associated connection in parallel. Thanks to running it in a critical section, there is no risk that a table that is just being dropped will come back to life in the meantime - since no other code can be creating tables on this connection at the same time."},
{"module": "Standard.Database.Internal.Internals_Access", "type": "", "name": "column_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression", "arguments": {"column": {"lazy": false, "type": "DB_Column | Internal_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Internals_Access", "type": "", "name": "get_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"thing": {"lazy": false, "type": "DB_Column | DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Internals_Access", "type": "", "name": "get_context", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Context", "arguments": {"thing": {"lazy": false, "type": "DB_Column | DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Internals_Access", "type": "", "name": "internal_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector Internal_Column", "arguments": {"table": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.In_Transaction", "type": "In_Transaction", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "In_Transaction", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.In_Transaction", "type": "In_Transaction", "name": "is_in_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if a transaction is currently being run."},
{"module": "Standard.Database.Internal.In_Transaction", "type": "In_Transaction", "name": "mark_running_in_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Executes the provided action marking as being run within a transaction."},
{"module": "Standard.Database.Internal.In_Transaction", "type": "In_Transaction", "name": "ensure_in_transaction", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Runs the provided action, failing if the call is not made from within a transaction."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "JDBC_Connection", "arguments": {"connection_resource": {"lazy": false}, "operation_synchronizer": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "synchronized", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Runs the provided action ensuring that no other thread is working with this Connection concurrently."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "close", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Closes the connection releasing the underlying database resources immediately instead of waiting for them to be automatically released.  The connection is not usable afterwards."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "with_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": false}},"aliases": [],"description": "Open the connection to the database, then run the action wrapping any SQL errors."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "run_maintenance_action_if_possible", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"callback": {"lazy": false}},"aliases": [],"description": "Runs the provided callback only if no thread is currently inside a `synchronized` critical section (including the current thread)."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "with_metadata", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Open the connection to the database, then run the action passing the database\u0027s metadata wrapping any SQL errors."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "with_prepared_statement", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}, "statement_setter": {"lazy": false}, "action": {"lazy": false}, "skip_log": {"lazy": false, "default": "False"}},"aliases": [],"description": "Runs the provided action with a prepared statement, adding contextual information to any thrown SQL errors."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "Text | SQL_Statement", "checked": true}},"aliases": [],"description": "Executes the provided SQL. Typically this shouldn\u0027t be used and with_prepared_statement should be preferred. It is needed for SQLServer temp table creation where we need to execute a raw SQL statement outside of a stored procedure."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "raw_fetch_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}, "execute_query": {"lazy": false}, "statement_setter": {"lazy": false}},"aliases": [],"description": "Given a prepared statement, gets the column names and types for the result set."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "raw_read_statement", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"raw_sql": {"lazy": false}},"aliases": [],"description": "Reads a raw SQL statement, using a very simple dialect-agnostic type mapping.  It may be used for accessing simple database metadata. It should never be used for proper queries."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"raw_sql": {"lazy": false}},"aliases": [],"description": "Checks that the query has no holes, and if it does, throws an error."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "run_without_autocommit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Runs the following action with auto-commit turned off on this connection and returns the result.  Afterwards, the auto-commit setting is reverted to the state before running this function (so if it was off before, this method may not change anything)."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "run_within_transaction", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Performs the given action within a transaction. Once the action is completed, the transaction is committed. If a panic or dataflow error escapes from the action, the transaction is rolled-back and closed. If the rollback fails and panics, the panic related to the rollback will take precedence over the original panic that caused that rollback."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "JDBC_Connection", "name": "batch_insert", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"insert_template": {"lazy": false}, "statement_setter": {"lazy": false}, "table": {"lazy": false}, "batch_size": {"lazy": false}, "expected_type_hints": {"lazy": false, "default": "Nothing"}, "row_limit": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Insert rows from an in-memory table using a prepared query template in batches for efficiency.  It is the caller\u0027s responsibility to call this method from within a transaction to ensure consistency."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "properties": {"lazy": false}},"aliases": [],"description": "Creates a JDBC connection based on a URL and optionally username and password."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "close_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}},"aliases": [],"description": "This cannot be a closure due to limitations of Managed_Resource."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "handle_sql_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}, "related_query": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Executes `action` and returns its result, catching any panics and if they are coming from JDBC, wraps them with our own error types and returns as regular data-flow errors."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "set_statement_values", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stmt": {"lazy": false}, "statement_setter": {"lazy": false}, "values": {"lazy": false}, "expected_type_hints": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Uses the provided `Statement_Setter` strategy to fill holes in a provided `PreparedStatement`.  A list of expected value types can be passed as `expected_type_hints` to add these hints to the `Statement_Setter` to customize the behaviour for some specific target value types."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "log_sql_if_enabled", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_connection": {"lazy": false}, "query_text": {"lazy": true}},"aliases": [],"description": "A helper that logs performed SQL queries/statements to a file, if an environment variable is set."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "profile_sql_if_enabled", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_connection": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "query_text": {"lazy": true, "type": "Text", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "A helper that logs performed SQL queries/statements run-time to a profiling file, if an environment variable is set."},
{"module": "Standard.Database.Internal.JDBC_Connection", "type": "", "name": "get_pragma_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_connection": {"lazy": false}, "sql": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Replace_Params", "type": "Replace_Params", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Replace_Params", "arguments": {"input_type": {"lazy": false}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "only_first": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.Replace_Params", "type": "Replace_Params", "name": "throw_unsupported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Raise an exception for an unsupported combination of parameters"},
{"module": "Standard.Database.Internal.Result_Set", "type": "", "name": "read_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"result_set": {"lazy": false}, "column_name": {"lazy": false}},"aliases": [],"description": "Read a single column from a ResultSet into a Vector"},
{"module": "Standard.Database.Internal.Result_Set", "type": "", "name": "result_set_to_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"result_set": {"lazy": false}, "make_column_fetcher": {"lazy": false}, "type_overrides": {"lazy": false, "default": "Nothing"}, "last_row_only": {"lazy": false, "default": "False"}},"aliases": [],"description": "Converts a ResultSet into a Table."},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Select", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The text literal SELECT"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Columns", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The expressions defining the columns to be returned e.g. Column1, Column2, left(Column3, 5) as Zip"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "From", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The table or sub query that the query selects from e.g. FROM Table1"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Where", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The expressions making up the WHERE part of the query e.g. WHERE Zip=90210"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Group", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The expressions making up the GROUP BY part of the query e.g. GROUP BY Column1"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Order", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The expressions making up the ORDER BY part of the query e.g. ORDER BY Column1"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Limit", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {},"aliases": [],"description": "The LIMIT part of the query e.g. LIMIT 100"},
{"module": "Standard.Database.Internal.SQL_Part", "type": "SQL_Part", "name": "Extension", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Part", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Any dialect defined query extensions with an identifying name"},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Type_Mapping", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "value_type_to_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Converts the given Value_Type to its corresponding SQL_Type.  Some SQL dialects may not support all Value_Types (in fact most will have at least a few exceptions, and some like SQLite may have very limited support). If an SQL_Type that matches the Value_Type cannot be found, a closest approximate match is returned instead. If an exact match cannot be found, an `Inexact_Type_Coercion` warning is reported according to the `on_problems` setting.  If the conversion is exact, it should be reversible, i.e. `sql_type_to_value_type (value_type_to_sql x Problem_Behavior.Report_Error) = x`."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "sql_type_to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Converts the given SQL_Type to its corresponding Value_Type."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Converts an SQL_Type to a Text representation compatible with the related SQL dialect that can be used in SQL expressions like CAST or column definitions."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"infer_from_database_callback": {"lazy": false}, "op_name": {"lazy": false}, "arguments": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "Returns a `SQL_Type_Reference` that will resolve to the resulting type of the given operation.  In most cases this will just delegate to `infer_from_database_callback` which should ask the particular database backend to infer the type, but some specific cases may override the default behavior. The notable example is the ability to support Boolean types in SQLite.  The particular operation is identified by its name. It also gets a vector of supplied arguments in case the result type may depend on them. The arguments are passed as-is, i.e. they may be Database columns or raw Enso values. The generated IR expression is also provided as depending on the backend the raw arguments or the target expression may be more useful to create the return type. In particular, the expression may be used as an argument for the `infer_from_database_callback`."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "prepare_type_overrides", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type_suggestions": {"lazy": false}},"aliases": [],"description": "Gets a list of type suggestions and returns a list of type overrides for a query.  This is used to customize type override behavior - most backends will correctly infer types from metadata, so unless specifically overridden, we can rely on the `ResultSet` metadata and reduce any overhead. However, in some backends (SQLite) the metadata may not be as useful (in SQLite, the metadata is changing depending on the result row, so the first row that is usually used may not reflect the needs of the whole column) - this method allows to provide custom overrides in such case.  If the vector contains a `Nothing` at a given position, that column type will be inferred from the `ResultSet` metadata. If it contains a concrete type, that type will be used instead, regardless of what is coming from the metadata."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "is_implicit_conversion", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"source_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Checks if the conversion between the two types is one to be done implicitly in the given backend. Conversions marked as implicit will not raise Inexact_Type_Coercion warnings.  For example, the Snowflake database converts all integer types to NUMERIC(38, 0). This conversion is a property of the database, so warning about it would only be annoying."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Specifies if the given type coercion should raise an `Inexact_Type_Coercion` warning when materializing a table into memory."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "is_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Specifies if this backend recognizes the given type as an integer type.  For most backends, this should just be `.is_integer`. However, in some backends (e.g. Snowflake), the Decimal type is treated as the main Integer type, so this method can be used to specify that. We don\u0027t make Decimal type an integer type by default, as in other backends we do want to keep the distinction (for example in Postgres, `date_add` function will work with Integer but not with Decimal types)."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "SQL_Type_Mapping", "name": "is_same_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type1": {"lazy": false, "type": "Value_Type", "checked": true}, "value_type2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Checks if the two types are to be considered the same by the `By_Type` selector.  In most backends this can just delegate to `Value_Type.is_same_type`. But e.g. in Snowflake this can be used to make Decimal and Integer types interchangeable."},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "", "name": "default_sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.SQL_Type_Mapping", "type": "", "name": "default_should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "Computed_By_Database", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Type_Reference", "arguments": {"ref": {"lazy": false, "type": "Ref (SQL_Type_Recipe | SQL_Type)", "checked": true}},"aliases": [],"description": "Refers to the SQL type of a given column, as computed by the Database itself.  Since fetching this type requires querying the database, it is computed lazily and cached.  We are not using a lazy field, because we also want to be able to manually set cached type - see `cache_computed_type`."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "Overridden", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Type_Reference", "arguments": {"value": {"lazy": false, "type": "SQL_Type", "checked": true}},"aliases": [],"description": "Refers to an SQL type that is overridden by the dialect\u0027s type system."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "Null", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Type_Reference", "arguments": {},"aliases": [],"description": "A type reference that should never be queried. Used in some internal expressions that are not user facing and are known to not rely on the type."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "from_constant", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Creates an `SQL_Type_Reference` from a known constant.  This is useful when the type is already known (for example in `Database.make_table`, because the column types were already fetched) or when the type is overridden (for example when pretending that SQLite has a boolean type)."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "context": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "Creates a new `SQL_Type_Reference` from a given SQL expression evaluated in a provided context. The connection is used to ask the database engine what the expected type will be."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a new `SQL_Type_Reference` that should never be used. This is used by some internal methods which need to construct an internal column, but we can guarantee that its SQL Type will never be checked."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "get", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the stored SQL type.  This may perform a database query on first access."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "to_type_override", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Turns this reference into a type override.  If the type is computed by the database, this will return `Nothing`, allowing the fetch method to read the type from query metadata. However, if it was overridden, it will return that override to be used instead of the type coming from the metadata."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Reference", "name": "cache_computed_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": true, "type": "SQL_Type", "checked": true}},"aliases": [],"description": "If this ref was `Computed_By_Database` that was not yet computed, it will save the computed type in its cache. Otherwise, it will do nothing.  This can be used by queries to fill-in an already computed type, so that it no longer has to be fetched.  The `sql_type` argument is suspended, so that it will be processed only if it is used."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "SQL_Type_Recipe", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Type_Recipe", "arguments": {"connection": {"lazy": false, "type": "Connection", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "A recipe for computing the SQL type."},
{"module": "Standard.Database.Internal.SQL_Type_Reference", "type": "", "name": "get_or_compute", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Type", "arguments": {"ref": {"lazy": false, "type": "Ref (SQL_Type_Recipe | SQL_Type)", "checked": true}},"aliases": [],"description": "Returns the SQL type represented by the given reference, computing it if necessary.  The computed type is saved back into the Ref, so that future accesses can rely on the cached value."},
{"module": "Standard.Database.Internal.SQL_Warning_Helper", "type": "", "name": "process_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_object": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "A helper method used to gather any warnings reported during an SQL operation. It will gather any warnings attached to the `jdbc_object`, then run the provided `action` and attach any warnings to the result."},
{"module": "Standard.Database.Internal.SQL_Warning_Helper", "type": "", "name": "extract_warnings", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc_object": {"lazy": false}},"aliases": [],"description": "Returns a vector of warnings reported by a JDBC object.  This works with any object that has a `getWarnings` method, returning a `SQLWarning`."},
{"module": "Standard.Database.Internal.SQL_Warning_Helper", "type": "", "name": "extract_warnings_into_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"builder": {"lazy": false}, "jdbc_object": {"lazy": false}},"aliases": [],"description": "Extracts warnings from a JDBC object and appends them into a provided vector builder.  This works with any object that has a `getWarnings` method, returning a `SQLWarning`."},
{"module": "Standard.Database.Internal.Statement_Setter", "type": "Statement_Setter", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Statement_Setter", "arguments": {"fill_hole": {"lazy": false, "type": "PreparedStatement -> Integer -> Value_Type|Nothing -> Any -> Nothing", "checked": true}},"aliases": [],"description": "Encapsulates the logic for filling a hole in a prepared statement."},
{"module": "Standard.Database.Internal.Statement_Setter", "type": "Statement_Setter", "name": "default", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default setter that is handling simple commonly supported types."},
{"module": "Standard.Database.Internal.Statement_Setter", "type": "Statement_Setter", "name": "null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Used internally to mark statements that do not expect to have any values to set.  It will panic if called."},
{"module": "Standard.Database.Internal.Statement_Setter", "type": "", "name": "fill_hole_default", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stmt": {"lazy": false}, "i": {"lazy": false}, "type_hint": {"lazy": false}, "value": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Naming_Helper", "arguments": {"connection": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "naming_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "create_unique_name_strategy", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a `Unique_Name_Strategy` that will generate names keeping the table naming limitations in mind."},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "verify_table_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Verifies if the table name is valid. If valid, it runs the provided action, otherwise it reports an error."},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "is_table_name_valid", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "generate_dry_run_table_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates a temporary table name for the given table name, used for dry runs.  The table name is \u0027stable\u0027, meaning that the same name will be returned for the given input `table_name` on subsequent calls, unless the user creates a clashing table in the meantime.  The table name is guaranteed to be unique for the database at the time it is generated - this is used to ensure that the dry run tables never overwrite pre-existing user data.","remarks": "! Safety    It is safe to drop/overwrite the table returned by this method, as it   can be assumed that it was not created by the user. It either does not   (yet) exist, or if it exists, it is present in our hidden table   registry - but that means it was created by Enso as a hidden table."},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "generate_random_table_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"prefix": {"lazy": false, "default": "\"enso-table-\""}},"aliases": [],"description": "Generates a random table name that does not currently exist in the database."},
{"module": "Standard.Database.Internal.Table_Naming_Helper", "type": "Table_Naming_Helper", "name": "truncate_if_needed", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Truncates the name to fit in the limit, if it is too long."},
{"module": "Standard.Database.Internal.Telemetry", "type": "", "name": "log", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {"logger_name": {"lazy": false, "type": "Text", "checked": true}, "msg": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Schedules a single telemetry message for sending."},
{"module": "Standard.Database.Internal.Telemetry", "type": "", "name": "_root_logger_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Generic_JDBC_Connection", "arguments": {"jdbc_connection": {"lazy": false, "type": "JDBC_Connection.JDBC_Connection", "checked": true}},"aliases": []},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "connect", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Generic_JDBC_Connection", "arguments": {"url": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"url\""}, "properties": {"lazy": false, "type": "Vector", "checked": true, "default": "[]"}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Connect to a database specified by a JDBC URL.  Generic_JDBC_Connection is a wrapper around a JDBC Connection. This can be used to access any JDBC-compliant database backend, including ones that do not have full support via `Connection`s. It provides schema information, and the ability to execute SQL queries and commands.  Unlike regular fully-supported `Connection`s, query results are returned as in-memory `Table`s, rather than as `DB_Table`s.  The JDBC driver must be available on the JVM classpath (for example, in a `polyglot/java` folder within the project)."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "close", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Nothing", "arguments": {},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Close the underlying JDBC connection."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "execute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"sql": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"sql\""}},"aliases": ["delete", "insert", "query", "update"],"group": "Standard.Base.Output","icon": "data_output","description": "Execute a raw SQL query or statement. `execute` does not execute the SQL unless the output context is enabled.  Returns the row count for a SQL DML statement, or 0 for SQL statements that return nothing."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"sql_query": {"lazy": false, "type": "SQL_Query", "checked": true, "default": "Missing_Argument.throw \"sql_query\""}},"aliases": ["import", "load"],"group": "Standard.Base.Input","icon": "data_input","description": "Execute a raw SQL query or read the contents of a table by name.  Returns the resulting rows as an in-memory table."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "get_catalogs", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": ["catalog schema database"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a `Vector` of the available catalogs."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "get_schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"catalog": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "schema_pattern": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["catalog schema database"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a `Vector` of the available schemas.","remarks": "! Patterns    Patterns can be literal strings, or can include wildcard characters.   The wildcard characters are the same ones that are used in SQL `LIKE`   clauses.    Examples:   - \"A\": matches the table \"A\"   - \"A_\": matches the tables \"AB\" and \"AC\"   - \"A%\": matches the tables \"ABC\" and \"ADEF\""},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "get_tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"catalog": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "schema_pattern": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "\"\""}, "table_name_pattern": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "table_types": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["catalog schema database table"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a `Vector` of the available tables.","remarks": "! Patterns    Patterns can be literal strings, or can include wildcard characters.   The wildcard characters are the same ones that are used in SQL `LIKE`   clauses.    Examples:   - \"A\": matches the table \"A\"   - \"A_\": matches the tables \"AB\" and \"AC\"   - \"A%\": matches the tables \"ABC\" and \"ADEF\""},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "get_table_info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"catalog": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "schema_pattern": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "\"\""}, "table_name_pattern": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "table_types": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["catalog schema database table"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a `Table` containing metadata about tables. The table contains columns for table catalog, schema, name, type and more. See `jdbc.sql.DatabaseMetaData` for a full list of columns.","remarks": "! Patterns    Patterns can be literal strings, or can include wildcard characters.   The wildcard characters are the same ones that are used in SQL `LIKE`   clauses.    Examples:   - \"A\": matches the table \"A\"   - \"A_\": matches the tables \"AB\" and \"AC\"   - \"A%\": matches the tables \"ABC\" and \"ADEF\""},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "with_metadata", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {"f": {"lazy": false, "type": "DatabaseMetaData -> Any", "checked": true}},"aliases": ["enquote escape"],"description": "Execute the function with the database metadata."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "quote_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"identifier": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Quote an identifier using the driver\u0027s quoting convention. Only performs the quoting if the identifier requires it; otherwise, returns the identifier unchanged."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Connection", "name": "quote_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"literal": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Quote a literal using the driver\u0027s quoting convention. Only performs the quoting if the literal requires it; otherwise, returns the literal unchanged."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Details", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generic_JDBC_Details", "arguments": {"url": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Set up a connection to a JDBC database."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Details", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "Generic_JDBC_Details", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}},"aliases": [],"description": "Build the Connection resource."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "", "name": "rs_to_table_", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"rs": {"lazy": false}},"aliases": [],"description": "Convert a JDBC ResultSet to a Table using the fallback fetcher."},
{"module": "Standard.Database.JDBC.Generic_JDBC_Connection", "type": "", "name": "when_output_enabled_", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Run the action if Output is enabled, otherwise raise a dataflow error"},
{"module": "Standard.Database.Column_Constraint", "type": "Column_Constraint", "name": "Default_Expression", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "Column_Constraint", "arguments": {"sql_expression": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Specifies a default value for the column.","remarks": "! SQL Injection    Since `sql_expression` is a raw SQL expression, note that malicious   data can cause execution of arbitrary SQL queries. Only use this   parameter with trusted data."},
{"module": "Standard.Database.Column_Constraint", "type": "Column_Constraint", "name": "Not_Null", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Constraint", "arguments": {},"aliases": [],"description": "DEPRECATED This will be replaced by extending the `Value_Type` with the concept of non-nullable types. TODO in #5872  Specifies that the column does not accept `NULL` values."},
{"module": "Standard.Database.Column_Description", "type": "Column_Description", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Description", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "constraints": {"lazy": false, "type": "Vector Column_Constraint", "checked": true, "default": "[]"}},"aliases": [],"description": "Describes a column structure for `Connection.create_table`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Column", "arguments": {"internal_name": {"lazy": false, "type": "Text", "checked": true}, "connection": {"lazy": false, "type": "Connection | Any", "checked": true}, "sql_type_reference": {"lazy": false, "type": "SQL_Type_Reference", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}},"aliases": [],"description": "Represents a single column backed by a database. \n\n These columns may come from the Table or can be created by combining other columns with operators. Expressions created in this way may be materialized or used to apply filters, groupings etc. to tables from which they come. Combined expressions must come from the same context - they must both have the same filtering, grouping etc. rules applied to be able to be combined."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "var_args_functions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Helper for the expression to tell it which functions needs a Vector."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "The name of the column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "dialect_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"icon": "metadata","description": "The name of the SQL Dialect used by the table."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "display", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"show_rows": {"lazy": false, "default": "10"}, "format_terminal": {"lazy": false, "default": "False"}},"aliases": [],"description": "Returns a text containing an ASCII-art table displaying this data."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "print", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"show_rows": {"lazy": false, "default": "10"}},"aliases": [],"description": "Prints an ASCII-art table with this data to the standard output."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this column to JS_Object representation."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "to_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {},"aliases": [],"icon": "data_input","description": "Converts this column into a single-column table."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": ["column type", "field info", "metadata"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a Table describing this column\u0027s contents and type.  The table behaves like `DB_Table.column_info."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load"],"group": "Standard.Base.Input","icon": "data_input","description": "Returns a materialized column containing rows of this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Any", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Returns a vector containing all the elements in this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "(Any | Nothing) ! Index_Out_Of_Bounds", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the value contained in this column at the given index. \n\n If the value is an NA then this method returns nothing. If the index is not an index in the column it returns an `Index_Out_Of_Bounds`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any | Nothing", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "default": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the value contained in this column at the given index."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the first element in the column, if it exists.  If the column is empty, this method will return a dataflow error containing an `Index_Out_Of_Bounds`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "value_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the `Value_Type` associated with that column.  The value type determines what type of values the column is storing and what operations are permitted."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "inferred_precise_value_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a possibly more precise `Value_Type` based on the data in the column.  Most columns will return their type without changes. A mixed column may return a more precise type if a common type can be found for all of its values."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "should_be_selected_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Internal hook that says if a given column should be selected by a specific type in a `By_Type` selection."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "to_sql", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Statement", "arguments": {},"aliases": [],"icon": "convert","description": "Returns an SQL statement that will be used for materializing this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "let", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Column", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "callback": {"lazy": false, "type": "DB_Column -> DB_Column", "checked": true}},"aliases": [],"description": "Column-level manual CTE factoring. \n\n Calling `let` on a column wraps it as a CTE (common table expression), using a SQL `WITH ... AS` clause. More specifically, it takes a callback that receives a \"reference\" to the CTE; the callback then returns an arbitrary column that uses the reference. The `let` call itself returns the full `WITH` clause, containing both the CTE and the callback return value.  Using `let` can reduce the number of duplicates of a column expression in the final generated SQL, replacing them with references to a single CTE bound by the `WITH` clause.  `let` acts like a kind of \"let binding\". It works by giving a lexically scoped name to the query generated by `self`, and then generating the query returned by the callback inside of this scope. See the examples below to see how the generated SQL is structured.  Internally, `let` generates a unique name for the CTE, and creates a \"reference\" column which refers to that unique name. This \"reference\" column is passed to the callback, which can compute values based on the reference and any other values. Finally, the return value of the callback is wrapped in the binding `WITH ... AS` clause, which is returned from the original call to `let`.  `let` is only available in database backends that support `WITH` clauses inside expressions. For database backends that only support a single `WITH` clause at the top level, `let` returns `self` unchanged.  Semantically, the following expressions will always have the same value:      1. f column     2. column.let \"name\" f","remarks": "? When to use `let`    `let` can make queries shorter and/or simpler by eliminating   duplicates. However, the `WITH` clause itself, including the bound CTE   table name, also takes up space, so if the `self` argument to `let`   isn\u0027t very large, `let` can actually make the query longer.    For this reason, it makes sense to use let only on expressions that at   the same time: are expected to be relatively large (results of complex   transformations already) and are going to be repeated multiple times in   the query."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "make_op", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false}, "operands": {"lazy": false}, "new_name": {"lazy": false}, "metadata": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Sets up an operation of arbitrary arity."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "make_binary_op", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false}, "operand": {"lazy": false}, "new_name": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Creates a binary operation with given kind and operand."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "make_unary_op", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false}, "new_name": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Helper for implementing unary operators."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the length of this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "count_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "transform4","description": "Returns the number of missing items in this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "transform4","description": "Returns the number of non-null items in this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "==", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["equals"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise equality comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`.","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "equals_ignore_case", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Element-wise case-insensitive text equality comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "!=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["not equals"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise non-equality comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`.","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["greater than or equal"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`.  If `other` is a column, the comparison is performed pairwise between corresponding elements of `self` and `other`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["less than or equal"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`.  If `other` is a column, the comparison is performed pairwise between corresponding elements of `self` and `other`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["greater than"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`.  If `other` is a column, the comparison is performed pairwise between corresponding elements of `self` and `other`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["less than"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`.  If `other` is a column, the comparison is performed pairwise between corresponding elements of `self` and `other`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "between", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"lower": {"lazy": false, "type": "DB_Column | Any", "checked": true}, "upper": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Element-wise inclusive bounds check. \n\n Returns a column with boolean values indicating whether values of this column fit between the lower and upper bounds (both ends inclusive)."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["add", "concatenate", "plus"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise addition. Works on numeric types or text. \n\n Returns a column containing the result of adding `other` to each element of `self`.  If `other` is a column, the operation is performed pairwise between corresponding elements of `self` and `other`.","remarks": "? Arithmetic Overflow    For integer columns, the operation may yield results that will not fit   into the range supported by the column. In such case, the in-memory   backend will replace such results with `Nothing` and report a   `Arithmetic_Overflow` warning. The behaviour in Database backends is   not specified and will depend on the particular database - it may   cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["minus", "subtract", "time difference"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise subtraction. Allows to subtract numeric types or compute a difference between two date/time values. \n\n Returns a column containing the result of subtracting `other` from each element of `self`.  If `other` is a column, the operation is performed pairwise between corresponding elements of `self` and `other`.","remarks": "? Arithmetic Overflow    For integer columns, the operation may yield results that will not fit   into the range supported by the column. In such case, the in-memory   backend will replace such results with `Nothing` and report a   `Arithmetic_Overflow` warning. The behaviour in Database backends is   not specified and will depend on the particular database - it may   cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["multiply", "product", "times"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise multiplication. \n\n Returns a column containing the result of multiplying `other` by each element of `self`.  If `other` is a column, the operation is performed pairwise between corresponding elements of `self` and `other`.","remarks": "? Arithmetic Overflow    For integer columns, the operation may yield results that will not fit   into the range supported by the column. In such case, the in-memory   backend will replace such results with `Nothing` and report a   `Arithmetic_Overflow` warning. The behaviour in Database backends is   not specified and will depend on the particular database - it may   cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["divide"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise division. \n\n Returns a column containing the result of dividing each element of `self` by `other`.","errors": "","remarks": "? Arithmetic Overflow    For integer columns, the operation may yield results that will not fit   into the range supported by the column. In such case, the in-memory   backend will replace such results with `Nothing` and report a   `Arithmetic_Overflow` warning. The behaviour in Database backends is   not specified and will depend on the particular database - it may   cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "%", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["modulo", "modulus"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise modulus. \n\n Returns a column with results of modulus this column\u0027s elements against `other`.","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["power"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise raising to the power. \n\n Returns a column containing the result of raising each element of `self` by `other`.","remarks": "? Arithmetic Overflow    For integer columns, the operation may yield results that will not fit   into the range supported by the column. In such case, the in-memory   backend will replace such results with `Nothing` and report a   `Arithmetic_Overflow` warning. The behaviour in Database backends is   not specified and will depend on the particular database - it may   cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "&&", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["and"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise boolean conjunction. \n\n Returns a column containing the result of performing the boolean `and` on `other` and each element of `self`.  If `other` is a column, the operation is performed pairwise between corresponding elements of `self` and `other`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "||", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Any", "checked": true}},"aliases": ["or"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise boolean disjunction. \n\n Returns a column containing the result of performing the boolean `or` on `other` and each element of `self`.  If `other` is a column, the operation is performed pairwise between corresponding elements of `self` and `other`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "not", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Boolean negation of each element in this column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "iif", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"when_true": {"lazy": false, "type": "Any", "checked": true}, "when_false": {"lazy": false, "type": "Any", "checked": true}},"aliases": ["if"],"group": "Standard.Base.Logical","icon": "preparation","description": "Replaces `True` values with `when_true` and `False` with `when_false`. Only meant for use with boolean columns."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "const", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Creates a column from a single constant value. The value must be of a type supported by the database back-end.  This method is not static; it must be called on an existing column. That existing column is only used for its internal state; the contents of the column are not used."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "round", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Illegal_Argument | Invalid_Value_Type", "arguments": {"decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Round to a specified number of decimal places.  `round` is only valid for `Value_Type.Decimal`, `Value_Type.Float`, and `Value_Type.Integer` columns.  By default, rounding uses \"symmetric round-half-up\", also known as \"round towards 0.\" If use_bankers=True, then it uses \"round-half-even\", also known as \"banker\u0027s rounding\".  The return type depends on the backend.","errors": "","remarks": "! NaN/Inf   If a `NaN` or `Inf` value is passed to `round`, it immediately returns   the same value. \n\n? Negative decimal place counts   Rounding to `n` digits can be thought of as \"rounding to the nearest   multiple of 10^(-n)\". For negative decimal counts, this results in   rounding to the nearest positive integer power of 10."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "should_use_builtin_round", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": [],"description": "Determine whether to use built-in rounding. We use built-in rounding if: - It\u0027s not banker\u0027s rounding, and - If decimal_places is negative, the builtin `ROUND` supports that, and - We are not passing a floating point value to round with a non-zero decimal_places param (prohibited by postgres)   (Note that Postgres is fine with a `numeric` value here, just not `double precision`.)"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "round_builtin", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": [],"description": "Round a float-like column using the backend\u0027s builtin ROUND function."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "round_float", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": [],"description": "Round a float-like column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "round_decimal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": [],"description": "Round a float-like column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "round_integer", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"decimal_places": {"lazy": false}, "use_bankers": {"lazy": false}},"aliases": [],"description": "Round an integer column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "truncate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": ["int"],"group": "Standard.Base.Rounding","icon": "math","description": "Truncate the floating-point values to an integer by dropping the fractional part. This is equivalent to \"round-toward-zero\".","remarks": "! NaN/Inf   If a `NaN` or `Inf` value is passed to `truncate`, it immediately returns   the same value."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "ceil", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Rounding","icon": "math","description": "Takes the ceiling of floating-point values, returning integer values.","remarks": "! NaN/Inf   If a `NaN` or `Inf` value is passed to `ceil`, it immediately returns   the same value."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "floor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Rounding","icon": "math","description": "Takes the floor of floating-point values, returning integer values.","remarks": "! NaN/Inf   If a `NaN` or `Inf` value is passed to `floor`, it immediately returns   the same value."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "decimal_div", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"description": "`/` for decimals."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "decimal_mod", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"description": "`mod` for decimals."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "coalesce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Returns a column of first non-`Nothing` value on each row of `self` and `values` list."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "min", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Math","icon": "transform4","description": "Returns a column of minimum on each row of `self` and `values`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "max", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Math","icon": "transform4","description": "Returns a column of maximum on each row of `self` and `values`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Returns a column of booleans, with `True` items at the positions where this column contains a `Nothing`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_nan", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where this column contains a NaN. This is only applicable to double columns."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_infinite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where this column contains a +Inf/-Inf. This is only applicable to double columns."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_finite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where this column contains a non-infinite, non-NaN floating point value. This is only applicable to double columns."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a column of booleans, with `True` items at the positions where this column contains an empty string or `Nothing`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_present", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Returns a column of booleans, with `True` items at the positions where this column does not contain a `Nothing`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_blank", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"treat_nans_as_blank": {"lazy": false, "default": "False"}},"aliases": [],"description": "Returns a column of booleans with `True` at the positions where this column contains a blank value.","remarks": "? Blank values   Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "fill_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"default": {"lazy": false, "type": "DB_Column | Previous_Value | Any", "checked": true}},"aliases": ["fill missing", "if_nothing"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column where missing values have been replaced with the provided default."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "fill_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"default": {"lazy": false, "type": "DB_Column | Previous_Value | Any", "checked": true}},"aliases": ["fill empty", "if_empty"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column where empty Text values have been replaced with the provided default."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "offset", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"n": {"lazy": false, "default": "-1:Integer"}, "fill_with": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}},"aliases": ["displace", "lag", "lead", "shift", "slide"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column offset by n rows, where missing values have been replaced with the provided fill_with strategy."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "rename", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Illegal_Argument", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Standard.Base.Metadata","icon": "text_input","description": "Returns a new column, containing the same elements as `self`, but with the given name."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"order": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}},"aliases": ["order_by"],"group": "Standard.Base.Selections","icon": "order","description": "Sorts the column according to the specified rules."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Standard.Base.Selections","icon": "parse3","description": "Creates a new Column with the specified range of rows from the input Column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Standard.Base.Selections","icon": "parse3","description": "Creates a new column from the input with the specified range of rows removed."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "starts_with", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Checks for each element of the column if it starts with `other`. \n\n If `other` is a column, the operation is performed pairwise between corresponding elements of `self` and `other`.  If the argument is a missing value (a Nothing or a column with missing values), the behaviour on these missing values is vendor specific."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "ends_with", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Checks for each element of the column if it ends with `other`. \n\n If `other` is a column, the operation is performed pairwise between corresponding elements of `self` and `other`.  If the argument is a missing value (a Nothing or a column with missing values), the behaviour on these missing values is vendor specific."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "text_length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Calculates the text length for each element of the column.  In the Database backends, the default text length method of the particular database is used.  In the in-memory backend, this will give you the grapheme length of the string."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "text_left", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"n": {"lazy": false, "type": "DB_Column|Integer", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Gets the left n characters for each element of the column.  In the Database backends, the default text left method of the particular database is used.  In the in-memory backend, this will give you the left n graphemes of the string."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "text_right", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"n": {"lazy": false, "type": "DB_Column|Integer", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Gets the right n characters for each element of the column.  In the Database backends, the default text right method of the particular database is used.  In the in-memory backend, this will give you the right n graphemes of the string."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"other": {"lazy": false, "type": "DB_Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it contains `other`. \n\n If `other` is a column, the operation is performed pairwise between corresponding elements of `self` and `other`.  If the argument is a missing value (a Nothing or a column with missing values), the behaviour on these missing values is vendor specific."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "like", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"pattern": {"lazy": false, "type": "DB_Column | Text | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it matches an SQL-like pattern."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "regex_match", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"pattern": {"lazy": false, "type": "Column | Text | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it matches a regular expression."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "trim", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "type": "DB_Column | Text", "checked": true, "default": "\u0027\u0027"}},"aliases": [],"group": "Standard.Base.Text","icon": "text","description": "This function removes the specified characters, by default any whitespace, from the start, the end, or both ends of the input."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "text_replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Unsupported_Database_Operation", "arguments": {"term": {"lazy": false, "type": "Text | Regex | DB_Column", "checked": true, "default": "\"\""}, "new_text": {"lazy": false, "type": "Text | DB_Column", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["regex", "substitute"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces the first, or all occurrences of `term` with `new_text` in each row. If `term` is empty, the function returns the table unchanged.  This method follows the exact replacement semantics of the `Text.replace` method.  If regex is used the replacement string can contain references to groups matched. The following syntaxes are supported:     $0: the entire match string     $\u0026: the entire match string     $n: the nth group     $\u0026lt;foo\u0026gt;: Named group `foo`  The exact syntax of the regular expression is dependent on the database engine.","remarks": "! Backend Support    Each database backend supports different combinations of options:    Text:   +----------------+------------+----------+--------+   | case_sensitive | only_first | postgres | sqlite |   +----------------+------------+----------+--------+   |       t        |      f     |     ✓    |    ✓   |   |       t        |      t     |     ✓    |    ✓   |   |       f        |      f     |     ✓    |    ✗   |   |       f        |      t     |     ✓    |    ✓   |   +----------------+------------+----------+--------+    Regex:   +----------------+------------+----------+--------+   | case_sensitive | only_first | postgres | sqlite |   +----------------+------------+----------+--------+   |       t        |      f     |     ✓    |    ✗   |   |       t        |      t     |     ✓    |    ✗   |   |       f        |      f     |     ✓    |    ✗   |   |       f        |      t     |     ✓    |    ✗   |   +----------------+------------+----------+--------+    Text Column:   +----------------+------------+----------+--------+   | case_sensitive | only_first | postgres | sqlite |   +----------------+------------+----------+--------+   |       t        |      f     |     ✓    |    ✓   |   |       t        |      t     |     ✗    |    ✓   |   |       f        |      f     |     ✗    |    ✗   |   |       f        |      t     |     ✗    |    ✓   |   +----------------+------------+----------+--------+"},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "text_cleanse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Unsupported_Database_Operation", "arguments": {"remove": {"lazy": false, "type": "Vector Named_Pattern", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "column_add","description": "Applies the specified cleansings to the text in each row."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the year as a number from the date stored in the column.  Applies only to columns that hold the `Date` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the month as a number (1-12) from the date stored in the column.  Applies only to columns that hold the `Date` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "day", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the day of the month as a number (1-31) from the date stored in the column.  Applies only to columns that hold the `Date` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "day_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "date_and_time","description": "Gets the day of the year as a number (1 - 366) from the date stored in the column.  Applies only to columns that hold the `Date` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "day_of_week", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": ["weekday"],"group": "Standard.Base.DateTime","icon": "date_and_time","description": "Gets the weekday as a number (1 - 7) from the date stored in the column. Monday is 1, Tuesday is 2, ..., Sunday is 7.  Applies only to columns that hold the `Date` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "hour", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the hour as a number (0-23) from the time stored in the column.  Applies only to columns that hold the `Time_Of_Day` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "minute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the minute as a number (0-59) from the time stored in the column.  Applies only to columns that hold the `Time_Of_Day` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the second as an integer (0-60) from the time stored in the column.  Applies only to columns that hold the `Time_Of_Day` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "date_part", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the date part of the date/time value.  Returns a column of `Integer` type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "date_diff", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"end": {"lazy": false, "type": "DB_Column | Date | Date_Time | Time_Of_Day", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Computes a time difference between the two dates.  It returns a column of integers expressing how many periods fit between the two dates/times.  The difference will be positive if `end` is greater than `self`.","remarks": "? Time Zone handling    Some backends may not preserve the timezone data in a `Date_Time`   (preserving the represented time instant). This may lead to slight   differences in time calculations between backends, especially around   unusual events like DST."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "date_add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"amount": {"lazy": false, "type": "DB_Column | Integer", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true, "default": "default_date_period self"}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Shifts the date/time by a specified period, returning a new date/time column of the same type.","remarks": "? Time Zone handling    Some backends may not preserve the timezone data in a `Date_Time`   (preserving the represented time instant). This may lead to slight   differences in time calculations between backends, especially around   unusual events like DST."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "is_in", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"vector": {"lazy": false, "type": "DB_Column | Vector | Array", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it is contained within the provided vector or column."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "parse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"type": {"lazy": false, "type": "Value_Type | Auto", "checked": true}, "format": {"lazy": false, "type": "Text | Data_Formatter", "checked": true, "default": "\"\""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Parses a text column into values.  In the Database backends, the default formatting settings of the particular database are used.  In the in-memory backend, the default parser options only parse values where the process is reversible (e.g., 0123 would not be converted to an integer as there is a leading 0). However, settings in the `Data_Formatter` can control this.","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Illegal_Argument", "arguments": {"format": {"lazy": false, "type": "Text | Date_Time_Formatter | DB_Column", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Formatting values is not supported in database columns."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Illegal_Argument | Inexact_Type_Coercion | Conversion_Failure", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Cast the column to a specific type. \n\n In the Database backend, this will boil down to a CAST operation. In the in-memory backend, a conversion will be performed according to the following rules: - Anything can be cast into the `Mixed` type. - Converting to a `Char` type, the elements of the column will be   converted to text. If it is fixed length, the texts will be trimmed or   padded on the right with the space character to match the desired   length. - Conversion between numeric types will replace values exceeding the   range of the target type with `Nothing`. - Converting decimal numbers into integers will truncate or round them,   depending on the backend. If more control is needed, use the various   rounding functions (such as `round` or `floor`). - Booleans may also be converted to numbers, with `True` being converted   to `1` and `False` to `0`. The reverse is not supported - use `iif`   instead. - A `Date_Time` may be converted into a `Date` or `Time` type - the   resulting value will be truncated to the desired type. - If a `Date` is to be converted to `Date_Time`, it will be set at   midnight of the default system timezone. - For a `Mixed` column being converted into a specific type, each row is   converted individually.   If the target type cannot fit some of the values (for example due to too  small range), a `Conversion_Failure` may be reported according to the  `on_problems` rules. The Database backends may fail with `SQL_Error`  instead.","remarks": "? Inexact Target Type    If the backend does not support the requested target type, the closest   supported type is chosen and a `Inexact_Type_Coercion` problem is   reported. \n\n! Casting Text values    The `parse` method should be used to convert text values into other   types. Due to this, a Mixed column containing values `[2, \"3\"]` will   actually be converted into `[2, Nothing]` when casting to Integer type."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "auto_cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"shrink_types": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["auto_value_type"],"group": "Standard.Base.Conversions","icon": "convert","description": "Change the value type of the column to a more specific one, based on its contents.  This operation is currently not available in the Database backend."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "internal_do_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Shares the core CAST logic between `cast` and `parse`."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {"function": {"lazy": false, "type": "Any -> Any", "checked": true}, "skip_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_value_type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}},"aliases": ["transform column"],"icon": "column_add","description": "Applies `function` to each item in this column and returns the column of results.","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Invalid_Value_Type", "arguments": {"that": {"lazy": false, "type": "DB_Column", "checked": true}, "function": {"lazy": false, "type": "Any -> Any -> Any", "checked": true}, "skip_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_value_type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}},"aliases": ["combine", "join by row position", "merge"],"icon": "join2-1","description": "Applies `function` to consecutive pairs of elements of `self` and `that` and returns a column of results.","errors": ""},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "as_internal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a simplified text representation for display in the REPL and errors."},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "sql_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "DB_Column", "name": "short_circuit_special_floating_point", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"exp": {"lazy": false}},"aliases": [],"description": "If the column is NaN/Inf, return it immediately as the value; otherwise return the expression. If returning immediately, rename to the expression\u0027s name. If the column is not floating point, just return the expression."},
{"module": "Standard.Database.DB_Column", "type": "", "name": "make_text_case_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left": {"lazy": false}, "op": {"lazy": false}, "other": {"lazy": false}, "case_sensitivity": {"lazy": false}, "new_name": {"lazy": false}},"aliases": [],"description": "Helper for case case_sensitivity based text operations"},
{"module": "Standard.Database.DB_Column", "type": "", "name": "make_equality_check_with_floating_point_handling", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "other": {"lazy": false}, "op": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "", "name": "adapt_unified_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "expected_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "Vector", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Column", "checked": true}},"aliases": [],"description": "Conversion method to a Column to a Vector."},
{"module": "Standard.Database.DB_Column", "type": "Cleansable_Text", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Column", "type": "Many_Files_List", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Column", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Table", "arguments": {"internal_name": {"lazy": false, "type": "Text", "checked": true}, "connection": {"lazy": false, "type": "Connection | Any", "checked": true}, "internal_columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}},"aliases": [],"description": "Internal constructor that should not be used directly. Please use `DB_Table.new` instead."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "DB_Table", "arguments": {"internal_name": {"lazy": false, "type": "Text", "checked": true}, "connection": {"lazy": false, "type": "Connection | Any", "checked": true}, "internal_columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "context": {"lazy": false, "type": "Context", "checked": true}},"aliases": [],"description": "The internal constructor used to construct a DB_Table instance.  It can perform some additional operations, like refining the type, so it should always be preferred over calling `DB_Table.Value` directly."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "The name of the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "dialect_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"icon": "metadata","description": "The name of the SQL Dialect used by the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "display", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"show_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "format_terminal": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Returns a text containing an ASCII-art table displaying this data."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "print", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"show_rows": {"lazy": false, "default": "10"}},"aliases": [],"description": "Prints an ASCII-art table with this data to the standard output."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this column to JS_Object representation."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! No_Such_Column | Index_Out_Of_Bounds", "arguments": {"selector": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns the column with the given name."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column | Any", "arguments": {"selector": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": [],"icon": "select_column","description": "Returns the column with the given name or index."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "get_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {"selector": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "0"}, "index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": ["cell value", "get cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets a value from the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "get_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row | Any", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": ["row"],"group": "Standard.Base.Selections","icon": "select_row","description": "Gets a row from the table. This is a live read from the database, so the results may change on re-evaluation."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "first_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["first cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets the top left value from the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "last_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["last cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets the bottom right value from the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "first_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["first field"],"group": "Standard.Base.Selections","icon": "select_column","description": "Gets the first column."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "last_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["last field"],"group": "Standard.Base.Selections","icon": "select_column","description": "Gets the last column"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "column_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["field count"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the number of columns in the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "select_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "reorder": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["select fields"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with a chosen subset of columns, as specified by the `columns`, from the input table. Any unmatched input columns will be dropped from the output.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "select_columns_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["select fields by type"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the chosen set of columns filtered by the type of the column."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "remove_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["drop fields", "drop_columns", "remove fields", "select columns", "select fields"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the chosen set of columns, as specified by the `columns`, removed from the input table. Any unmatched input columns will be kept in the output. Columns are returned in the same order as in the input.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "remove_columns_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["remove fields by type", "select columns by type", "select fields by type"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the chosen set of columns filtering out based on the type of the column."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "select_blank_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["filter_blank_columns", "select_blank_fields", "select_missing_columns", "select_na"],"group": "Standard.Base.Selections","icon": "select_column","description": "Select columns which are either all blank or contain blank values. If no rows are present, all columns are considered blank.","remarks": "? Blank values   Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "remove_blank_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["drop_missing_columns", "drop_na", "select_blank_columns", "select_blank_fields", "select_missing_columns", "select_na"],"group": "Standard.Base.Selections","icon": "select_column","description": "Remove columns which are either all blank or contain blank values. If no rows are present, all columns are considered blank.","remarks": "? Blank values   Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "reorder_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "position": {"lazy": false, "type": "Position", "checked": true, "default": "..Before_Other_Columns"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the specified selection of columns moved to either the start or the end in the specified order.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "sort_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"order": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the columns sorted by name according to the specified sort method. By default, sorting will be according to case-sensitive ascending order based on the normalized Unicode ordering."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "rename_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Missing_Input_Columns | Ambiguous_Column_Rename | Too_Many_Column_Names_Provided | Invalid_Column_Names | Duplicate_Output_Column_Names", "arguments": {"column_map": {"lazy": false, "type": "Table | Dictionary (Text | Integer | Regex) Text | Vector Text | Vector Vector", "checked": true, "default": "[\"Column\"]"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "table_edit","description": "Returns a new table with the columns renamed based on either a mapping from the old name to the new or a positional list of new names.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "use_first_row_as_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["header", "rename"],"group": "Standard.Base.Metadata","icon": "table_edit","description": "Returns a new table with the columns renamed based on entries in the first row. \n\n   The following problems can occur:   - If any of the new names are invalid, an     `Invalid_Column_Names`.   - If any of the new names clash either with existing names or each     other, a Duplicate_Output_Column_Names."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Resolves the column name to a column within this table. \n\n If instead of a name, a column is provided, it is returned as-is as long as it comes from the same context."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Such_Column | Index_Out_Of_Bounds | Invalid_Value_Type", "arguments": {"column": {"lazy": false, "type": "DB_Column | Expression | Text | Integer", "checked": true, "default": "Missing_Argument.throw \"column\""}, "filter": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true, "default": "Filter_Condition.Equal True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["filter rows", "where"],"group": "Standard.Base.Selections","icon": "preparation","description": "Selects only the rows of this table that correspond to `True` values of `filter`.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "filter_by_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Text", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["filter rows"],"group": "Standard.Base.Selections","icon": "preparation","description": "Selects only the rows of this table that correspond to `True` values of `filter`.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Standard.Base.Selections","icon": "select_row","description": "Creates a new Table with the specified range of rows from the input Table. \n\n For the purposes of the `Index_Sub_Range.While` predicate a single \"element\" of the table is represented by the `Row` type.","remarks": "? Supported Range Types    Database backends support all range types except `While` and `Sample`    In-memory tables support all range types."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Standard.Base.Selections","icon": "select_row","description": "Creates a new Table from the input with the specified range of rows removed. \n\n For the purposes of the `Index_Sub_Range.While` predicate a single \"element\" of the table is represented by the `Row` type.","remarks": "? Supported Range Types    Database backends support all range types except `While` and `Sample`    In-memory tables support all range types."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "remove_all_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Filter out all rows."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "add_row_number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Row\""}, "from": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "group_by": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector (Text | Sort_Column) | Text", "checked": true, "default": "[]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add index column", "rank", "record id"],"group": "Standard.Base.Values","icon": "column_add","description": "Adds a new column to the table enumerating the rows.","errors": "","remarks": "? Ordering of rows    Note that the ordering of rows from the original table is preserved in   all cases. The grouping and ordering settings affect how the row   numbers are assigned to each row, but the order of the rows itself is   not changed by this operation."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "add_group_number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"grouping_method": {"lazy": false, "type": "Grouping_Method", "checked": true, "default": "..Unique"}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Group\""}, "from": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add group column", "bucket", "group id", "tile"],"group": "Standard.Base.Values","icon": "column_add","description": "Adds a new column to the table enumerating groups of rows, assigning each row to one group number. All rows in each group will get the same number.","errors": "","remarks": "? Grouping Methods    The following grouping methods are supported:   - `Unique`: Group rows by the specified columns.   - Equal_Count: Create the specified number of groups with the same     number of rows in each group (except possibly the last one). \n\n? Ordering of rows    In the in-memory database, the ordering of rows from the original table   is preserved in all cases. The grouping and ordering settings can   affect how the group numbers are assigned, depending on the grouping   method.  The order of the rows itself is not changed by this operation.    In the database backends, the ordering of rows is backend-dependent."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "limit", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"max_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "1000"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns a new Table that will include at most `max_rows` rows from the original Table. \n\n Since this Table is backed by an SQL database, the Table returned by the `limit` method is deterministic only if the Table has been ordered (using the `order_by` method).  Otherwise, no order is imposed, so the returned Table will include at most `max_rows` rows, but there are no guarantees on which rows will be selected. Moreover, even if the underlying table in the database did not change, different sets of rows may be returned each time the returned Table is materialized.  The limit is applied at the very end, so the new Table behaves exactly as the old one, just limiting its results when being materialized. Specifically, applying further filters will still apply to the whole result set and the limit will be taken after applying these filters."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "set", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Existing_Column | Missing_Column | No_Such_Column | Expression_Error", "arguments": {"value": {"lazy": false, "type": "DB_Column | Text | Expression | Array | Vector | Range | Date_Range | Constant_Column | Simple_Expression", "checked": true}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add_Or_Update"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add column", "expression", "formula", "new column", "update column"],"group": "Standard.Base.Values","icon": "column_add","description": "Sets the column value at the given name.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "evaluate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Text | Expression", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Given an expression, create a derived column where each value is the result of evaluating the expression for the row.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "make_table_from_dictionary", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dict": {"lazy": false}, "key_column_name": {"lazy": false}, "value_column_name": {"lazy": false}},"aliases": [],"description": "A helper that creates a two-column table from a Dictionary.  The keys of the `Dictionary` become the first column, with name `key_column_name`, and the values become the second column, with name `value_column_name`.  For the in-memory database, the `Dictionary` can be empty. For the database backends, it must not be empty."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "make_table_from_vectors", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_vectors": {"lazy": false}, "column_names": {"lazy": false}},"aliases": [],"description": "A helper that creates a literal table from `Vector`s.  For the in-memory database, the columns can be empty. For the database backends, they must not be empty."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "make_constant_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Create a constant column from a value."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "make_temp_column_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a unique temporary column name."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "with_temporary_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"new_column": {"lazy": false, "type": "DB_Column", "checked": true}, "f": {"lazy": false, "type": "Text -> DB_Table -> DB_Table", "checked": true}},"aliases": [],"description": "Run a table transformer with a temporary column added."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "filter_on_predicate_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"predicate_column": {"lazy": false}},"aliases": [],"description": "Filter a table on a boolean column. The column does not have to be part of the table, but it must be derived from it and share a context."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector DB_Column", "arguments": {},"aliases": [],"icon": "convert","description": "Returns the vector of columns contained in this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "column_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the vector of column names contained in this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Row", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": [],"icon": "select_row","description": "Returns a vector of rows contained in this table.  In the database backend, it first materializes the table to in-memory."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "first_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns the first row of the table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "last_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns the last row of the table.  In the database backend, this function has to scan through all the results of the query."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Incomparable_Values | No_Input_Columns_Selected | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector Sort_Column | Sort_Column", "checked": true, "default": "[(Sort_Column.Name (self.columns.at 0 . name))]"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["order_by"],"group": "Standard.Base.Selections","icon": "order","description": "Sorts the rows of the table according to the specified columns and order.","errors": "","remarks": "? Missing Values    Missing (`Nothing`) values are sorted as less than any other object."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "order_by", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false, "default": "[(Sort_Column.Name (self.columns.at 0 . name))]"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "order","description": "Deprecated - use `Table.sort` instead."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "default_ordering", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the default ordering used for operations like `add_row_number` or `take`.  If the table was recently ordered by operations like `order_by`, that will determine the ordering. Otherwise, the primary key is used if available."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "get_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the primary key defined for the table, if applicable."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "distinct", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Missing_Input_Columns | No_Input_Columns_Selected | Floating_Point_Equality", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "self.column_names"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["deduplicate", "unique"],"group": "Standard.Base.Selections","icon": "preparation","description": "Returns the distinct set of rows within the specified columns from the input table.  When multiple rows have the same values within the specified columns, the first row of each such set is returned if possible, but in database backends any row from each set may be returned (for example if the row ordering is unspecified).  For the in-memory table, the unique rows will be in the order they occurred in the input (this is not guaranteed for database operations).","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "duplicates", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Missing_Input_Columns | No_Input_Columns_Selected | Floating_Point_Equality", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "self.column_names"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "preparation","description": "Returns the set of rows which are duplicated within the specified columns from the input table.  When multiple rows have the same values within the specified columns all of those rows are  returned. Rows which are unique within the specified columns are removed.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"right": {"lazy": false, "type": "DB_Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "join_kind": {"lazy": false, "type": "Join_Kind", "checked": true, "default": "..Left_Outer"}, "on": {"lazy": false, "type": "Join_Condition | Text | Vector (Join_Condition | Text)", "checked": true, "default": "default_join_condition self join_kind"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["hlookup", "lookup", "merge", "vlookup", "xlookup"],"group": "Standard.Base.Calculations","icon": "join","description": "Joins two tables according to the specified join conditions. \n\n   - If a column name cannot be found, a `No_Such_Column` is reported     and an empty result is reported.   - If a column index is invalid, an `Index_Out_Of_Bounds` is     reported and an empty result is reported.   - If there are column names that are clashing between the two tables, a     `Duplicate_Output_Column_Names` is reported and the columns from the     table are renamed as described below.   - If a join condition correlates columns whose types are not compatible     (for example comparing numeric types with text), an     `Invalid_Value_Type` is reported.   - If decimal columns are joined on equality, a     `Floating_Point_Equality` is reported.    In any of the above cases, if a problem occurs, the resulting table   will have the desired structure, but it will be empty to indicate that   the join has failed due to an erroneous join condition.","remarks": "? Column Renaming    If columns from the two tables have colliding names, a prefix (by   default `Right_`) is added to the name of the column from the right   table. The left column remains unchanged. It is possible that the new   name will be in use, in this case it will be resolved using the normal   renaming strategy - adding subsequent `_1`, `_2` etc. \n\n? Row Ordering For In-Memory Tables    This operation requires a well-defined order of rows in the input   tables. In-memory tables rely on the ordering stemming directly from   their layout in memory. Database tables may not impose a deterministic   ordering. If the table defines a primary key, it is used to by default   to ensure deterministic ordering. That can be overridden by specifying   a different ordering using `Table.sort`. If no primary key was   defined nor any ordering was specified explicitly by the user, the   order of columns is undefined and the operation will fail, reporting a   `Undefined_Column_Order` problem and returning an empty table. \n\n? Row Ordering For Database Tables    The ordering of rows in the resulting table is not specified. \n\n? Joining on equality of columns with the same name    When performing an Inner join on two columns with the same name and an   equality condition, only one copy of column will be included in the   output (as these two columns would have the exact same content, so they   would be redundant). \n\n? Same-name column join shorthand    As a shorthand, providing a column name or a list of column names   allows to join the two tables on equality of corresponding columns with   the same name. So `table.join other on=[\"A\", \"B\"]` is a shorthand for:       table.join other on=[Join_Condition.Equals \"A\" \"A\", Join_Condition.Equals \"B\" \"B\"]"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "join_or_cross_join", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"right": {"lazy": false, "type": "DB_Table", "checked": true}, "join_kind": {"lazy": false}, "on": {"lazy": false}, "right_prefix": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "Implementation of both `join` and `cross_join`."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "cross_join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"right": {"lazy": false, "type": "DB_Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "right_row_limit": {"lazy": false, "type": "Row_Limit", "checked": true, "default": "..Limit 100"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["append", "cartesian join"],"group": "Standard.Base.Calculations","icon": "join","description": "Joins tables by pairing every row of the left table with every row of the right table. \n\n   - If the `right` table has more rows than the `right_row_limit` allows,     a `Cross_Join_Row_Limit_Exceeded` is reported. In warning/ignore     mode, the join is still executed.","remarks": "? Column Renaming    If columns from the two tables have colliding names, a prefix (by   default `Right_`) is added to the name of the column from the right   table. The left column remains unchanged. It is possible that the new   name will be in use, in this case it will be resolved using the normal   renaming strategy - adding subsequent `_1`, `_2` etc. \n\n? Row Ordering For In-Memory Tables    This operation requires a well-defined order of rows in the input   tables. In-memory tables rely on the ordering stemming directly from   their layout in memory. Database tables may not impose a deterministic   ordering. If the table defines a primary key, it is used to by default   to ensure deterministic ordering. That can be overridden by specifying   a different ordering using `Table.sort`. If no primary key was   defined nor any ordering was specified explicitly by the user, the   order of columns is undefined and the operation will fail, reporting a   `Undefined_Column_Order` problem and returning an empty table. \n\n? Result Ordering For Database Tables    The ordering of rows in the resulting table is not specified."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "merge", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Missing_Input_Columns | Non_Unique_Key | Unmatched_Rows_In_Lookup", "arguments": {"lookup_table": {"lazy": false, "type": "DB_Table", "checked": true, "default": "Missing_Argument.throw \"lookup_table\""}, "key_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "add_new_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "allow_unmatched_rows": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["hlookup", "join", "lookup", "vlookup", "xlookup"],"group": "Standard.Base.Calculations","icon": "join","description": "Merges this table with a lookup table. New values are looked up in the lookup table based on the `key_columns`. Columns that exist in the lookup table where a match was found are replaced by values from the lookup table. Columns not found are left unchanged. This operation is similar to `Table.update_rows`, but just returns a new `Table` instance, instead of updating the table in-place (which is only possible for Database tables).","errors": "","remarks": "? Result Ordering    When operating in-memory, this operation preserves the order of rows   from this table (unlike `join`).   In the Database backend, there are no guarantees related to ordering of   results."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Missing_Input_Columns | Non_Unique_Key | Unmatched_Rows_In_Lookup", "arguments": {"lookup_table": {"lazy": false, "type": "DB_Table | Dictionary", "checked": true}, "columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "from_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "to_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "allow_unmatched_rows": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["find replace"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces values in the columns using `lookup_table` to specify a mapping from old to new values.","errors": "","remarks": "? Result Ordering    When operating in-memory, this operation preserves the order of rows   from this table (unlike `join`).    In the Database backend, there are no guarantees related to ordering of   results."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"right": {"lazy": false, "type": "DB_Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "keep_unmatched": {"lazy": false, "type": "Boolean | Report_Unmatched", "checked": true, "default": "Report_Unmatched"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["join by row position"],"group": "Standard.Base.Calculations","icon": "join2-1","description": "Joins two tables by zipping rows from both tables table together - the first row of the left table is correlated with the first one of the right one etc. \n\n   - If the tables have different number of rows and `keep_unmatched` is     set to `Report_Unmatched`, the join will report `Row_Count_Mismatch`.","remarks": "? Column Renaming    If columns from the two tables have colliding names, a prefix (by   default `Right_`) is added to the name of the column from the right   table. The left column remains unchanged. It is possible that the new   name will be in use, in this case it will be resolved using the normal   renaming strategy - adding subsequent `_1`, `_2` etc. \n\n? Row Ordering    This operation requires a well-defined order of rows in the input   tables. In-memory tables rely on the ordering stemming directly from   their layout in memory. Database tables may not impose a deterministic   ordering. If the table defines a primary key, it is used to by default   to ensure deterministic ordering. That can be overridden by specifying   a different ordering using `Table.sort`. If no primary key was   defined nor any ordering was specified explicitly by the user, the   order of columns is undefined and the operation will fail, reporting a   `Undefined_Column_Order` problem and returning an empty table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "union", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"tables": {"lazy": false, "type": "DB_Table | Vector DB_Table", "checked": true}, "columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true, "default": "..In_Any_Warn_On_Missing"}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["append", "concat", "join"],"group": "Standard.Base.Calculations","icon": "union","description": "Appends records from other table(s) to this table.","errors": "","remarks": "? Unifying Column Types    Numeric columns are unified by finding the smallest type that can fit   all of the columns. The biggest integer type will be chosen and if   integers and decimals are mixed, the decimal type will be chosen.   If boolean columns are mixed with numeric columns, they will be coerced   to the numeric type (and converted to 0 and 1).    Text types will are also unified by finding the smallest type that can   fit all the values. If constant-length texts of different lengths are   mixed, they will be coerced to a varying-length type.    If date and date-time columns are unified, this yields a date-time   column. In-memory, the date is promoted by adding a time of 00:00 and   the system time-zone. In other backends that behaviour may differ.    If one of the matched columns has `Mixed` type, that type will be used   regardless of types of other columns. Note that the `Mixed` type may   not be supported by most Database backends.    Finally, if no common type is found using the rules above, everything   is converted to text. \n\n? Ordering of Columns in the result    When matching columns by name, it is possible that the ordering of   columns may vary between input tables. The ordering is determined as   following: columns that are kept from the first table are in the order   they appear in that table. If there are columns that do not appear in   the first table, they are appended to the end of the resulting table in   the order they appear in the input."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "aggregate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Invalid_Aggregate_Column | Invalid_Column_Names | Duplicate_Output_Column_Names | Floating_Point_Equality | Invalid_Aggregation | Unquoted_Delimiter | Additional_Warnings", "arguments": {"group_by": {"lazy": false, "type": "Vector (Integer | Text | Regex | Aggregate_Column) | Text | Integer | Regex", "checked": true, "default": "[]"}, "columns": {"lazy": false, "type": "Vector Aggregate_Column", "checked": true, "default": "[]"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["average", "count", "count distinct", "first", "group by", "last", "longest", "maximum", "mean", "median", "minimum", "mode", "percentile", "shortest", "standard deviation", "sum", "summarize", "variance"],"group": "Standard.Base.Calculations","icon": "transform4","description": "Aggregates the rows in a table using `group_by` columns. The columns argument specifies which additional aggregations to perform and to return.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "transpose", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! No_Output_Columns | Missing_Input_Columns | Duplicate_Output_Column_Names", "arguments": {"key_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "attribute_column_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Name\""}, "value_column_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Value\""}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["pivot", "unpivot"],"group": "Standard.Base.Calculations","icon": "map_row","description": "Returns a new table with a chosen subset of columns left unchanged and the other columns pivoted to rows with a single name field and a single value field.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "cross_tab", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Missing_Input_Columns | Invalid_Aggregate_Column | Floating_Point_Equality | Invalid_Aggregation | Unquoted_Delimiter | Additional_Warnings | Invalid_Column_Names", "arguments": {"group_by": {"lazy": false, "type": "Vector (Integer | Text | Regex | Aggregate_Column) | Text | Integer | Regex", "checked": true, "default": "[]"}, "names": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "self.column_names.first"}, "values": {"lazy": false, "type": "Aggregate_Column | Vector Aggregate_Column", "checked": true, "default": "..Count"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["pivot", "unpivot"],"group": "Standard.Base.Calculations","icon": "column_add","description": "Returns a new table using a chosen field as the column header and then aggregating the rows within each value as specified. Optionally, a set of fields can be used to group the rows.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "parse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "self.columns . filter (c-\u003e c.value_type.is_text) . map .name"}, "type": {"lazy": false, "type": "Value_Type | Auto", "checked": true}, "format": {"lazy": false, "type": "Text | Data_Formatter", "checked": true, "default": "\u0027\u0027"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Parses columns within a Table to a specific value type. By default, it looks at all `Text` columns and attempts to deduce the type (columns with other types are not affected).  In the Database backends, the default formatting settings of the particular database are used.  In the in-memory backend, the default parser options only parse values where the process is reversible (e.g., 0123 would not be converted to an integer as there is a leading 0). However, settings in the `Data_Formatter` can control this.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Date_Time_Format_Parse_Error | Illegal_Argument", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "format": {"lazy": false, "type": "Text | Date_Time_Formatter | DB_Column", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Formats `DB_Column`s within a `Table` using a format string, `Date_Time_Formatter`, or `DB_Column` of format strings.","errors": "","remarks": "? Supported Types   - `Value_Type.Date`   - `Value_Type.Date_Time`   - `Value_Type.Time`   - `Value_Type.Integer`   - `Value_Type.Float`   - `Value_Type.Boolean` \n\n? `Value_Type.Date`, `Value_Type.Date_Time`, `Value_Type.Time` format strings     See `Date_Time_Formatter` for more details. \n\n? `Value_Type.Integer`, `Value_Type.Float` format strings    Numeric format strings are specified by the Java DecimalFormat class.   See https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html   for a complete format specification. \n\n? `Value_Type.Boolean` format strings    Format strings for `Boolean` consist of two values that represent true   and false, separated by a `|`."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "split_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "delimiter": {"lazy": false, "type": "Text", "checked": true, "default": "\",\""}, "column_count": {"lazy": false, "type": "Columns_To_Add", "checked": true, "default": "..All_Columns"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["parse", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Splits a column of text into a set of new columns. The original column will be removed from the table. The new columns will be named with the name of the input column with a incrementing number after.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "split_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "delimiter": {"lazy": false, "type": "Text", "checked": true, "default": "\",\""}},"aliases": ["parse", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Splits a column of text into a set of new rows. The values of other columns are repeated for the new rows."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "tokenize_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "column_count": {"lazy": false, "type": "Columns_To_Add", "checked": true, "default": "..All_Columns"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["parse", "regex", "split"],"group": "Standard.Base.Conversions","icon": "split","description": "Tokenizes a column of text into a set of new columns using a regular expression. If the pattern contains marked groups, the values are concatenated together; otherwise the whole match is returned. The original column will be removed from the table. The new columns will be named with the name of the input column with a incrementing number after.","errors": ""},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "tokenize_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "at_least_one_row": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["parse", "regex", "split"],"group": "Standard.Base.Conversions","icon": "split","description": "Tokenizes a column of text into a set of new rows using a regular expression. If the pattern contains marked groups, the values are concatenated together; otherwise the whole match is returned. The values of other columns are repeated for the new rows."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "parse_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text | Regex", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "parse_values": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": ["regex", "split", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Converts a Text column into new columns using a regular expression pattern.  Each match becomes a row in the table. The values of other columns are repeated for the new rows.  If there are no marked groups, a single column with whole content of match is added. Otherwise, each group becomes a column (with group name if named in Regex).","remarks": "? Column Names  If no marked group, the new column will have the same name as the input. If the marked groups are named, the names will be used otherwise the column will be named `\u003cInput Column\u003e \u003cN\u003e` where `N` is the number of the marked group. If the new name is already in use it will be renamed following the normal suffixing strategy."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "expand_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Type_Error", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "fields": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}, "prefix": {"lazy": false, "type": "Prefix_Name", "checked": true, "default": "..Column_Name"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "split","description": "Expand a column of objects to a new set of columns."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "expand_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Type_Error | No_Such_Column | Index_Out_Of_Bounds", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "at_least_one_row": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "split","description": "Expand aggregate values in a column to separate rows.  For each value in the specified column, if it is an aggregate (`Vector`, `Range`, etc.), expand it to multiple rows, duplicating the values in the other columns. \n\n The following values are considered sequence-like: - `Array` - `Vector` - `List` - `Range` - `Date_Range` - `Pair` - `Table` (interpreted as a sequence of `Row`s) - `Column`  Some aggregates, like dictionaries (`Dictionary`, `JS_Object`) will expand into two columns - one for key and one for the value.  If a value is not an aggregate, or has no defined way of being expanded, it is left as a single row containing that value unchanged.  In in-memory tables, it is permitted to mix values of different types."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table ! Illegal_Argument | Inexact_Type_Coercion | Conversion_Failure", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "[0]"}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Cast the selected columns to a specific type.  Returns a new table in which the selected columns are replaced with columns having the new types. \n\n In the Database backend, this will boil down to a CAST operation. In the in-memory backend, a conversion will be performed according to the following rules: - Anything can be cast into the `Mixed` type. - Converting to a `Char` type, the elements of the column will be   converted to text. If it is fixed length, the texts will be trimmed or   padded on the right with the space character to match the desired   length. - Conversion between numeric types will replace values exceeding the   range of the target type with `Nothing`. - Converting decimal numbers into integers will truncate or round them,   depending on the backend. If more control is needed, use the various   rounding functions (such as `round` or `floor`). - Booleans may also be converted to numbers, with `True` being converted   to `1` and `False` to `0`. The reverse is not supported - use `iif`   instead. - A `Date_Time` may be converted into a `Date` or `Time` type - the   resulting value will be truncated to the desired type. - If a `Date` is to be converted to `Date_Time`, it will be set at   midnight of the default system timezone. - For a `Mixed` column being converted into a specific type, each row is   converted individually.   If the target type cannot fit some of the values (for example due to too  small range), a `Conversion_Failure` may be reported according to the  `on_problems` rules. The Database backends may fail with `SQL_Error`  instead.","remarks": "? Inexact Target Type    If the backend does not support the requested target type, the closest   supported type is chosen and a `Inexact_Type_Coercion` problem is   reported. \n\n! Casting Text values    The `parse` method should be used to convert text values into other   types. Due to this, a Mixed column containing values `[2, \"3\"]` will   actually be converted into `[2, Nothing]` when casting to Integer type."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "auto_cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "self.column_names"}, "shrink_types": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Change the value type of table columns to a more specific one, based on their contents.  This operation is currently not available in the Database backend."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "filter_blank_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["drop_empty_rows", "drop_missing_rows", "dropna", "filter_empty_rows", "remove_blank_rows", "remove_empty_rows", "remove_missing_rows"],"group": "Standard.Base.Selections","icon": "preparation","description": "Remove rows which are all blank or containing blank values.","remarks": "? Blank values   Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "row_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["count"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the amount of rows in this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load"],"group": "Standard.Base.Input","icon": "data_input","description": "Returns a materialized dataframe containing rows of this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "to_select_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a query corresponding to this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "to_sql", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Statement", "arguments": {},"aliases": [],"icon": "convert","description": "Returns an SQL statement that will be used for materializing this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "column_info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": ["column types", "field info", "metadata"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a Table describing this table\u0027s contents.  The table lists all columns, counts of non-null items and value types of each column."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "make_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal": {"lazy": false}},"aliases": [],"description": "Helper to create columns from internal columns."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "columns_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "column_naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "updated_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_columns": {"lazy": false}},"aliases": [],"description": "Returns a copy of this table with updated internal columns."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "updated_context", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ctx": {"lazy": false}},"aliases": [],"description": "Returns a copy of this table with updated context."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "updated_context_and_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ctx": {"lazy": false}, "internal_columns": {"lazy": false}, "subquery": {"lazy": false, "default": "False"}},"aliases": [],"description": "Returns a copy of this table with updated context and columns."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "as_subquery", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Nests a table as a subquery, using `updated_context_and_columns`, which causes its columns to be referenced as names rather than expressions."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "is_trivial_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean ! Table_Not_Found", "arguments": {"fail_if_not_found": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Checks if this table is a \u0027trivial query\u0027.  A trivial query is a result of `connection.query` that has not been further processed. If there are any columns that are added or removed, or any other operations like join or aggregate are performed, the resulting table is no longer trivial.  Some operations, like writing to tables, require their target to be a trivial query."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a simplified text representation for display in the REPL and errors."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing ! Column_Count_Mismatch | Illegal_Argument | File_Error", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "format": {"lazy": false, "default": "Auto_Detect"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Backup"}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["export", "output", "save", "to_file"],"group": "Standard.Base.Output","icon": "data_output","description": "This function writes the table into a file.  The specific behavior of the various `File_Format`s is specified below.","returns": "- If an unsupported `File_Format` is specified, an   `Illegal_Argument` is raised. - If the path to the parent location cannot be found or the filename is   invalid, a `File_Error.Not_Found` is raised. - If another IO error occurs, such as access denied, an   `File_Error.IO_Error` is raised. - If appending and the columns do not match, a `Column_Count_Mismatch` is   raised. - Other specific errors or warnings that can be raised depend on the   format argument. - Otherwise, the file is loaded following the rules of the format   parameter.","remarks": "? `File_Format` write behaviors    - `Auto_Detect`: The file format is determined by the provided file.   - `Bytes` and `Plain_Text`: The Table does not support these types in     the `write` function. If passed as format, an     `Illegal_Argument` is raised. To write out the table as plain     text, the user needs to convert the Table to Text     (e.g. using `to_delimited` method) and then use the `Text.write`     function."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "save_as_data_link", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Error"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a Data Link that will act as a view into the query represented by this table."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "fill_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "default": {"lazy": false, "type": "DB_Column | Column_Ref | Expression | Previous_Value | Any", "checked": true}},"aliases": ["fill missing", "if_nothing"],"group": "Standard.Base.Values","icon": "table_clean","description": "Returns a new table where missing values in the specified columns have been replaced with the provided default(s)."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "fill_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "default": {"lazy": false, "type": "DB_Column | Column_Ref | Expression | Previous_Value | Any", "checked": true}},"aliases": ["fill empty", "if_empty"],"group": "Standard.Base.Values","icon": "table_clean","description": "Returns a new column where empty Text values have been replaced with the provided default."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "text_replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Column", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "term": {"lazy": false, "type": "Text | DB_Column | Column_Ref | Expression | Regex", "checked": true, "default": "\"\""}, "new_text": {"lazy": false, "type": "Text | DB_Column | Column_Ref | Expression", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["regex", "substitute"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces the first, or all occurrences of `term` with `new_text` in each row of the specified column. If `term` is empty, the function returns the table unchanged.  This method follows the exact replacement semantics of `Text.replace`.  If regex is used the replacement string can contain references to groups matched. The following syntaxes are supported:     $0: the entire match string     $\u0026: the entire match string     $n: the nth group     $\u0026lt;foo\u0026gt;: Named group `foo`  The exact syntax of the regular expression is dependent on the database engine."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "text_cleanse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"from": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type)", "checked": true}, "remove": {"lazy": false, "type": "Vector Named_Pattern", "checked": true, "default": "[]"}},"aliases": [],"group": "Standard.Base.Text","icon": "column_add","description": "Applies the specified cleansings to the text in each row of the specified columns"},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "running", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}, "of": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "group_by": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector (Text | Sort_Column) | Text", "checked": true, "default": "[]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["count", "cumulative", "maximum", "mean", "minimum", "product", "standard deviation", "sum", "sum", "total", "variance"],"group": "Standard.Base.Values","icon": "data_input","description": "Adds a new column to the table with a running calculation.","errors": "","remarks": "? Ordering of rows    Note that the ordering of rows from the original table is preserved in   all cases. The grouping and ordering settings affect how the running statistic is   calculated for each row, but the order of the rows itself is   not changed by this operation."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "offset", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "DB_Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type)", "checked": true, "default": "Missing_Argument.throw \"columns\""}, "n": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}, "fill_with": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}, "group_by": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["displace", "lag", "lead", "shift", "slide"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a table with new columns offset by n rows, where missing values have been replaced with the provided fill_with strategy.","returns": "- A Table of all records, with the selected columns offset by the number specified by n.","errors": "- A Table of all records, with the selected columns offset by the number specified by n.","remarks": "? Ordering of rows    Note that the ordering of rows from the original table is preserved in   all cases. The grouping and ordering settings affect how the values move as they are offset, but the order of the rows itself is   not changed by this operation."},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "generate_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"over": {"lazy": false, "type": "Generate_Rows_Range", "checked": true, "default": "Missing_Argument.throw \"over\""}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["duplicate", "expand", "repeat", "replicate"],"group": "Standard.Base.Values","icon": "row_add","description": "Generates additional rows of data by repeating existing rows based on a provided range.","returns": "- A Table of records with each incoming record duplicated by the number of times specified in the range.","errors": "- A Table of records with each incoming record duplicated by the number of times specified in the range."},
{"module": "Standard.Database.DB_Table", "type": "", "name": "make_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}, "columns": {"lazy": false}, "ctx": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "Creates a Table out of a connection, name and list of column names."},
{"module": "Standard.Database.DB_Table", "type": "", "name": "default_join_condition", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "join_kind": {"lazy": false}},"aliases": [],"description": "By default, join on the first column, unless it\u0027s a cross join, in which case there are no join conditions."},
{"module": "Standard.Database.DB_Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "DB_Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "Table_Ref", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "", "name": "MAX_LITERAL_ELEMENT_COUNT", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The largest dataset that can be used to make a literal table, expressed in number of elements."},
{"module": "Standard.Database.DB_Table", "type": "", "name": "make_literal_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "column_vectors": {"lazy": false}, "column_names": {"lazy": false}, "alias": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "", "name": "_resolve_grouping_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector", "arguments": {"columns_helper": {"lazy": false, "type": "Table_Column_Helper", "checked": true}, "group_by": {"lazy": false, "type": "Vector", "checked": true}, "problem_builder": {"lazy": false, "type": "Problem_Builder", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "", "name": "_resolve_order_descriptors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "ordering": {"lazy": false}, "default_ordering": {"lazy": false}, "operation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.DB_Table", "type": "Many_Files_List", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "DB_Table", "checked": true}},"aliases": []},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect", "arguments": {},"aliases": [],"description": "Represents a specific SQL dialect.  It encapsulates dialect-specific code generation details allowing us to support differing SQL dialects."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "ensure_query_has_no_holes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation according to the specific dialect."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part\u0027s that determine what order each part gets written in for the final SQL output If you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.  One of the purposes of this method is to verify if the expected ordering settings are supported by the given database backend."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "prepare_distinct", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Prepares a distinct operation."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso `Value_Type`."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a helper object that handles the logic of setting values in a prepared statement.  This object may provide custom logic for handling dialect-specific handling of some types."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": [],"description": "Builds an SQL expression that casts the given expression to the given target type."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": [],"description": "Specifies if the `fetch_columns` operation needs to execute the query to get the column types.  In most backends, the `getMetaData` may be called on a `PreparedStatement` directly, to infer column types without actually executing the query. In some however, like SQLite, this is insufficient and will yield incorrect results, so the query needs to be executed (even though the full results may not need to be streamed).  The function takes the statement as an argument which can be used in heuristics telling whether the execute is needed."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": [],"description": "Performs any transformations on a column resulting from unifying other columns.  These transformations depend on the dialect. They can be used to align the result types, for example."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": [],"description": "Prepares a query that can be used to fetch the type of an expression in the provided context.  This method may modify the context to optimize the query while preserving the types. For example, in most databases, it is fine to add `WHERE FALSE` to the query - ensuring that the engine will not do any actual work, but the resulting type will still be the same. There are exceptions though, like SQLite, where the best we can do is add `LIMIT 1`."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate": {"lazy": false}},"aliases": [],"description": "Checks if the given aggregate is supported.  Should raise an appropriate dataflow error if not, or just return `True`."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a helper for mapping database-specific SQL errors into our common error types."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.  Returns `Nothing` if the key is not defined."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "prepare_metadata_for_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}, "operation_input_type": {"lazy": false}},"aliases": [],"description": "Prepares metadata for an operation taking a date/time period and checks if the given period is supported."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "if_replace_params_supports", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replace_params": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Returns true if the `replace` parameters are supported by this backend."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Determines the value type to use when uploading the given column to the Database.  This will usually just be `column.value_type`, but it allows the database to do custom fallback handling for datatypes that are not supported."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "should_check_table_integrity_at_beginning_of_transaction", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "An optional method. It only needs to be implemented if `DDL_Transaction.Support_Level` of this connection is different than `Allowed`.  It specifies if the table integrity should be checked at the beginning of the transaction - to check if there were no unexpected modifications between the table was created (outside of transaction) and the transaction was entered. Some dialects may decide to opt-out of this check for performance reasons."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "custom_build_aggregate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Pair Context (Vector (Internal_Column | DB_Wrapped_Error))", "arguments": {"base_table": {"lazy": false, "type": "DB_Table", "checked": true}, "key_columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "resolved_aggregates": {"lazy": false, "type": "Vector (Pair Text Aggregate_Column)", "checked": true}, "problem_builder": {"lazy": false, "type": "Problem_Builder", "checked": true}},"aliases": [],"description": "An optional method adding custom handling for the `aggregate` operation.  This method may be left undefined, in which case the default implementation defined in `Aggregate_Helper.default_build_aggregate` will be used. The method should be defined only if the dialect requires custom logic."},
{"module": "Standard.Database.Dialect", "type": "Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Generates a expression for use in the SELECT OR WHERE clause.  Used for databases where the expression syntax is different in the SELECT clause  to the syntax in the WHERE clause"},
{"module": "Standard.Database.Dialect", "type": "Temp_Table_Style", "name": "Temporary_Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Temp_Table_Style", "arguments": {},"aliases": [],"description": "The temporary table is created using a create table statement."},
{"module": "Standard.Database.Dialect", "type": "Temp_Table_Style", "name": "Hash_Prefix", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Temp_Table_Style", "arguments": {},"aliases": [],"description": "The temporary table is created using a # table name."},
{"module": "Standard.Database.Dialect", "type": "", "name": "sqlite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of SQLite databases."},
{"module": "Standard.Database.Dialect", "type": "", "name": "postgres", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of PostgreSQL databases."},
{"module": "Standard.Database.Dialect", "type": "", "name": "default_fetch_primary_key", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "Default implementation relying on DatabaseMetaData."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Negative_Decimal_Places", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": []},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Float_Decimal_Places", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": []},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Use_Builtin_Bankers", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": []},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Primary_Key_Allows_Nulls", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": []},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Separate_NaN", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the Database distinguishes a separate `NaN` value for floating point columns. Some databases will not be able to distinguish NaN from NULL."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Nested_With_Clause", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the Database backend supports WITH clauses in nested queries."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Case_Sensitive_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports case-sensitive column names. If `False`, the backend will match column names in a case insensitive way, so that \"Foo\" and \"foo\" will refer to the same column."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Infinity", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports the `Infinity` value for floating point columns."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Case_Sensitive_Text_Comparison", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies text comparisons are case sensitive by default."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Sort_Digits_As_Numbers", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports natural ordering operations."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Case_Insensitive_Ordering", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "PRIAVTE Specifies if the backend supports case insensitive ordering."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Case_Insensitive_Ordering_By_Default", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend uses case insensitive sort in its default ordering."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Order_By_Unicode_Normalization_By_Default", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend uses unicode normalization in its default ordering."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Order_By_Unicode_Normalization_When_Case_Insensitive", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend uses unicode normalization when doing case insentive ordering."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Allows_Mixed_Type_Comparisons", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if mixed operations comparing mixed types are allowed by a given backend. Some backends will allow such comparisons, when mixed type storage is allowed or by coercing to the target type; others will fail with a type error."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Unicode_Normalization", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend compares strings taking Unicode Normalization into account, i.e. whether \u0027s\\u0301\u0027 is considered equal to \u0027ś\u0027."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "NaN_Non_Comparable", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if NaN value is treated as greater than all numbers. If `False`, `NaN` is expected to yield False to both \u003c and \u003e comparisons."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Distinct_Returns_First_Row_From_Group_If_Ordered", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "PRIAVTE If `order_by` was applied before, the distinct operation will return the first row from each group. Guaranteed in the in-memory backend, but may not be supported by all databases."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Date_Time", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports date/time operations."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Text_Length_Limited_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports setting a length limit on text columns."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Fixed_Length_Text_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports fixed length text columns."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Length_Restricted_Text_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports length restrictions for text columns."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Removes_Trailing_Whitespace_Casting_From_Char_To_Varchar", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "if SELECT concat(\u0027X\u0027, CAST(CAST(\u0027   \u0027 AS CHAR(3)) AS VARCHAR(3)), \u0027X\u0027) returns XX then this should be set to True"},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Char_Max_Size_After_Substring_Kept", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies how the max size of the char type behaves after text_left/text_right. If True the orginal size is kept, if False the size is reset."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Different_Size_Integer_Types", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports integer types of various sizes, like 16-bit or 32-bit integers."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_8bit_Integer", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports 8-bit integers."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Decimal_Type", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports the `Decimal` high-precision type."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Time_Duration", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports a `Duration`/`Period` type."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Nanoseconds_In_Time", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports nanosecond precision in time values."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Mixed_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports mixed-type columns."},
{"module": "Standard.Database.Dialect_Flag", "type": "Dialect_Flag", "name": "Supports_Date_Time_Without_Timezone", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Dialect_Flag", "arguments": {},"aliases": [],"description": "Specifies if the backend supports date/time operations without a timezone (true for most Database backends). Defaults to `.is_integer`."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Operation", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unsupported_Database_Operation", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Operation", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Convert the SQL error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Operation", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Pretty print the error."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Type", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unsupported_Database_Type", "arguments": {"type": {"lazy": false, "type": "Text", "checked": true}, "db": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Type", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Convert the SQL error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Type", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Pretty print the error."},
{"module": "Standard.Database.Errors", "type": "Different_Connections", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Different_Connections", "arguments": {},"aliases": [],"description": "Indicates that the operation tried to use tables from different connections."},
{"module": "Standard.Database.Errors", "type": "Different_Connections", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Convert the SQL error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "Different_Connections", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Pretty print the error."},
{"module": "Standard.Database.Errors", "type": "Aggregagtion_Requires_Order", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Aggregagtion_Requires_Order", "arguments": {"op_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that an aggregation operation requires the input to be ordered."},
{"module": "Standard.Database.Errors", "type": "Aggregagtion_Requires_Order", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Convert the SQL error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "Aggregagtion_Requires_Order", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Pretty print the error."},
{"module": "Standard.Database.Errors", "type": "SQL_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Error", "arguments": {"java_exception": {"lazy": false}, "related_query": {"lazy": false, "default": "Nothing", "comment": "- related_query (optional): A string representation of a query that this   error is related to."}},"aliases": [],"description": "Indicates an error with executing a query, update or connecting to the database."},
{"module": "Standard.Database.Errors", "type": "SQL_Error", "name": "throw_sql_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Throws an error as if a SQL Exception was thrown."},
{"module": "Standard.Database.Errors", "type": "SQL_Error", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the SQL error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "SQL_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the SQL error."},
{"module": "Standard.Database.Errors", "type": "SQL_Timeout", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Timeout", "arguments": {"java_exception": {"lazy": false}, "related_query": {"lazy": false, "default": "Nothing", "comment": "- related_query (optional): A string representation of a query that this   error is related to."}},"aliases": [],"description": "Indicates that an operation has timed out."},
{"module": "Standard.Database.Errors", "type": "SQL_Timeout", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the timeout error to a textual representation."},
{"module": "Standard.Database.Errors", "type": "SQL_Timeout", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the timeout error."},
{"module": "Standard.Database.Errors", "type": "SQL_Warning", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Warning", "arguments": {"java_exception": {"lazy": false}},"aliases": [],"description": "Indicates that a database backend has reported a non-fatal warning when executing an operation."},
{"module": "Standard.Database.Errors", "type": "SQL_Warning", "name": "message", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Errors", "type": "SQL_Warning", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Errors", "type": "Integrity_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integrity_Error", "arguments": {"object_description": {"lazy": false}},"aliases": [],"description": "Signalizes that an operation tried using objects coming from different contexts.  To use columns from different tables, you must first join them."},
{"module": "Standard.Database.Errors", "type": "Integrity_Error", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a human-readable representation of the integrity error."},
{"module": "Standard.Database.Errors", "type": "Integrity_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the integrity error."},
{"module": "Standard.Database.Errors", "type": "Table_Not_Found", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Not_Found", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that a table was not found in the database."},
{"module": "Standard.Database.Errors", "type": "Table_Not_Found", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the table not found error."},
{"module": "Standard.Database.Errors", "type": "Table_Already_Exists", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Already_Exists", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that a table already exists in the database."},
{"module": "Standard.Database.Errors", "type": "Table_Already_Exists", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the table already exists error."},
{"module": "Standard.Database.Errors", "type": "Unmatched_Rows", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unmatched_Rows", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the `Update` operation encountered input rows that did not have any matching rows in the target table."},
{"module": "Standard.Database.Errors", "type": "Unmatched_Rows", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the rows already present error."},
{"module": "Standard.Database.Errors", "type": "Rows_Already_Present", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Rows_Already_Present", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the `Insert` operation encountered input rows that already had matching rows in the target table."},
{"module": "Standard.Database.Errors", "type": "Rows_Already_Present", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the rows already present error."},
{"module": "Standard.Database.Errors", "type": "Multiple_Target_Rows_Matched_For_Update", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Multiple_Target_Rows_Matched_For_Update", "arguments": {"example_key": {"lazy": false, "type": "Vector Any", "checked": true}, "example_count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the source table had rows matching multiple rows in the target table by the specified key."},
{"module": "Standard.Database.Errors", "type": "Multiple_Target_Rows_Matched_For_Update", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the multiple target rows matched for update error."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Encoding", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unsupported_Database_Encoding", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "A warning indicating that the encoding inferred to be used by the database is not supported by Enso.  This should not affect data passed to/from the database, as the connection driver should handle the translation. However, it affects how identifier names are being handled, and it may cause trouble when the length of identifier names is wrongly inferred, causing aliasing of names and generating invalid queries."},
{"module": "Standard.Database.Errors", "type": "Unsupported_Database_Encoding", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the unsupported database encoding warning."},
{"module": "Standard.Database.Errors", "type": "Invariant_Violation", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invariant_Violation", "arguments": {"message": {"lazy": false, "type": "Text|Nothing", "checked": true}, "original_cause": {"lazy": false, "type": "SQL_Error", "checked": true}},"aliases": [],"description": "Indicates that the database has been modified between the time the query was prepared and the time it was executed, breaking an expected invariant and potentially causing data corruption."},
{"module": "Standard.Database.Errors", "type": "Invariant_Violation", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Select_Columns", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "select, remove, reorder, and rename columns."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Filter", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "filter rows in a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Aggregate", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "aggregate values in a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Sort", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "sort rows in a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Join", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "join tables."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Union", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "combine the results of two queries."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Distinct", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "remove duplicate rows from a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Text_Cleanse", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "cleanse text data."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Integration_Tests", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "Catch all for tests that haven\u0027t yet been categorized correctly or use multiple features."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Add_Group_Number", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "add a group number column to a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Add_Row_Number", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "add a row number column to a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Make_Table_From", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "create a table from a dictionary or vectors."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Column_Operations", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "currently blocks getting a DB_Column from a DB_Table, but will soon refine to operations on DB_Column."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Sample", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "get_row, take, drop, limit"},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Replace", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "replace values in a table."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Merge", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "merge two tables."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Cross_Join", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "cross join two tables."},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Offset", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "offset one or more columns"},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "Generate_Rows", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Feature", "arguments": {},"aliases": [],"description": "generate rows from a range"},
{"module": "Standard.Database.Feature", "type": "Feature", "name": "if_supported_else_throw", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false, "type": "Any", "checked": true}, "error_name": {"lazy": false, "type": "Text", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Check if a feature is supported by a dialect, and throw an error if it is not."},
{"module": "Standard.Database.SQL", "type": "SQL_Fragment", "name": "Code_Part", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Fragment", "arguments": {"code": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A SQL fragment that represents raw SQL code."},
{"module": "Standard.Database.SQL", "type": "SQL_Fragment", "name": "Interpolation", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Fragment", "arguments": {"object": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "A SQL fragment that represents an object which will be interpolated into the query."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"fragments": {"lazy": false, "type": "Vector_Builder SQL_Fragment", "checked": true}},"aliases": [],"description": "A SQL_Builder for SQL queries. \n\n It can be used to concatenate parts of SQL code in O(1) time and at the end build the actual query in linear time."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a SQL_Builder representing and empty code fragment."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "code", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "Creates a SQL_Builder representing a code fragment containing the specified raw code."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "interpolation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"object": {"lazy": false}},"aliases": [],"description": "Creates a SQL_Builder representing an interpolation of the given object."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "from_fragments", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"fragments": {"lazy": false}},"aliases": [],"description": "Creates an SQL_Builder from a list of fragments."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "join", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"separator": {"lazy": false}, "statements": {"lazy": false}},"aliases": [],"description": "Joins a vector of code fragments with the provided separator."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "++", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"description": "Concatenates two code fragments."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the SQL_Builder represents an empty code fragment."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "is_constant", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if a code fragment is a constant."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "extract_constant", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Extracts the interpolated constant from the builder. This can only be called if `is_constant` returns `True`."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "build", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Builds a SQL statement."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "paren", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Wraps the code fragment in parentheses."},
{"module": "Standard.Database.SQL", "type": "SQL_Builder", "name": "prefix_if_present", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"prefix": {"lazy": false}},"aliases": [],"description": "If the fragment is non empty, prepends the specified prefix to it. \n\n Empty fragments are unaffected."},
{"module": "Standard.Database.SQL", "type": "", "name": "optimize_fragments", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"fragments": {"lazy": false}},"aliases": [],"description": "Merges neighboring code fragments to create a more compact representation of the same code."},
{"module": "Standard.Database.SQL_Query", "type": "SQL_Query", "name": "Table_Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Query", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"name\""}},"aliases": [],"description": "Query a whole table or view."},
{"module": "Standard.Database.SQL_Query", "type": "SQL_Query", "name": "Raw_SQL", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQL_Query", "arguments": {"sql": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"sql\""}},"aliases": [],"description": "Raw SQL query statement."},
{"module": "Standard.Database.SQL_Query", "type": "SQL_Query", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Statement", "arguments": {"internal_fragments": {"lazy": false, "type": "Vector SQL_Fragment", "checked": true}},"aliases": [],"description": "Represents a built SQL statement. \n\n The statement consists of SQL code with parameters and values that will be interpolated for these parameters."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "deserialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Statement ! Illegal_Argument", "arguments": {"json": {"lazy": false, "type": "Text | JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "fragments", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "A vector of code fragments.  Consists of two types of values: - SQL_Fragment.Code_Part, representing parts of raw SQL code and - SQL_Fragment.Interpolation, representing objects that will be   interpolated in between the SQL code."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "unsafe_to_raw_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "This function returns a raw SQL string for the query, manually handling the interpolation that is normally handled by the database engine itself.  It should be used EXTREMELY carefully - the returned SQL code should always be read by a human to ensure that it does what is expected before executing it in any REPLs or other database interfaces.  It should NEVER be used in production code."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "prepare", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a pair consisting of the SQL code with holes for values and a list for values that should be substituted."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a JS_Object representation of the statement."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "serialize", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object ! Unable_To_Serialize_SQL_Statement", "arguments": {"ensure_roundtrip": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Serializes this SQL statement to JSON."},
{"module": "Standard.Database.SQL_Statement", "type": "SQL_Statement", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Database.SQL_Statement", "type": "Unable_To_Serialize_SQL_Statement", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unable_To_Serialize_SQL_Statement", "arguments": {"obj": {"lazy": false}},"aliases": []},
{"module": "Standard.Database.SQL_Statement", "type": "Unable_To_Serialize_SQL_Statement", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Database.SQL_Type", "type": "SQL_Type", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Type", "arguments": {"typeid": {"lazy": false, "type": "Integer", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}, "precision": {"lazy": false, "type": "Nothing | Integer", "checked": true, "default": "Nothing"}, "scale": {"lazy": false, "type": "Nothing | Integer", "checked": true, "default": "Nothing"}, "nullable": {"lazy": false, "type": "Boolean | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Represents an internal SQL data-type."},
{"module": "Standard.Database.SQL_Type", "type": "SQL_Type", "name": "null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "The SQL type representing a null value."},
{"module": "Standard.Database.SQL_Type", "type": "SQL_Type", "name": "from_metadata", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"metadata": {"lazy": false}, "ix": {"lazy": false}},"aliases": [],"description": "Constructs a `SQL_Type` from a `ResultSetMetaData` object."},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "Take_Drop", "name": "Take", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Take_Drop", "arguments": {},"aliases": []},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "Take_Drop", "name": "Drop", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Take_Drop", "arguments": {},"aliases": []},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "", "name": "take_drop_helper", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"take_drop": {"lazy": false}, "table": {"lazy": false}, "selector": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true}},"aliases": [],"description": "Apply `take` or `drop` to a table, returning the specified by the selector."},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "", "name": "collect_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"take_drop": {"lazy": false}, "length": {"lazy": false}, "selector": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true}},"aliases": [],"description": "Turn the selector into a vector of ranges"},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "", "name": "check_supported", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selector": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true}, "cont": {"lazy": true}},"aliases": [],"description": "Throw Unsupported_Database_Operation for selectors that are not supported by database backends."},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "", "name": "cleanup_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ranges": {"lazy": false, "type": "Vector Range", "checked": true}},"aliases": [],"description": "Remove empty ranges."},
{"module": "Standard.Database.Take_Drop_Helpers", "type": "", "name": "generate_subquery", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "row_column_name": {"lazy": false}, "range": {"lazy": false}},"aliases": [],"description": "Filter a table with a single range. Returns only those rows whose row column fall within the range."},
{"module": "Standard.Database.Update_Action", "type": "Update_Action", "name": "Insert", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Update_Action", "arguments": {},"aliases": [],"description": "Records are appended but if cause a primary key clash will fail."},
{"module": "Standard.Database.Update_Action", "type": "Update_Action", "name": "Update", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Update_Action", "arguments": {},"aliases": [],"description": "Just update the existing records. Unmatched columns are left unchanged. Errors if any record is not matched in the target table."},
{"module": "Standard.Database.Update_Action", "type": "Update_Action", "name": "Update_Or_Insert", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Update_Action", "arguments": {},"aliases": [],"description": "Append the records to the new table if not found. Updates existing records to the new values. Unmatched columns are left unchanged."},
{"module": "Standard.Database.Update_Action", "type": "Update_Action", "name": "Align_Records", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Update_Action", "arguments": {},"aliases": [],"description": "Appends new records, updates existing records, removes records not in the target table"},
{"module": "Standard.Examples.Main", "type": "Example_Error_Type", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Example_Error_Type", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Create an example error."},
{"module": "Standard.Examples.Main", "type": "No_Methods", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "No_Methods", "arguments": {},"aliases": [],"description": "A dummy type that is used for example purposes."},
{"module": "Standard.Examples.Main", "type": "My_Error", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "My_Error", "arguments": {"message": {"lazy": false}},"aliases": [],"description": "Construct a simple error."},
{"module": "Standard.Examples.Main", "type": "", "name": "data_dir", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The data directory of the Examples project."},
{"module": "Standard.Examples.Main", "type": "", "name": "csv", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example CSV file for experimenting with Table and its APIs."},
{"module": "Standard.Examples.Main", "type": "", "name": "csv_path", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The path to the CSV."},
{"module": "Standard.Examples.Main", "type": "", "name": "csv_2500_rows", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example CSV file with 2,500 rows.","remarks": "! Downloading   Calling this method will result in the CSV file being downloaded from the   internet if it is not already present on your disk. If you do not   want this to happen, please place the spreadsheet in the   `lib/Standard/Examples/\u003cversion\u003e/data` folder for your Enso distribution."},
{"module": "Standard.Examples.Main", "type": "", "name": "xls", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example XLS file for experimenting with Table and its APIs.","remarks": "! Downloading   Calling this method will result in the spreadsheet file being downloaded   from the internet if it is not already present on your disk. If you do not   want this to happen, please place the spreadsheet in the   `lib/Standard/Examples/\u003cversion\u003e/data` folder for your Enso distribution."},
{"module": "Standard.Examples.Main", "type": "", "name": "xlsx", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example XLSX file for experimenting with Table and its APIs.","remarks": "! Downloading   Calling this method will result in the spreadsheet file being downloaded   from the internet if it is not already present on your disk. If you do not   want this to happen, please place the spreadsheet in the   `lib/Standard/Examples/\u003cversion\u003e/data` folder for your Enso distribution."},
{"module": "Standard.Examples.Main", "type": "", "name": "scratch_file", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A file that is used for writing temporary data as part of tests."},
{"module": "Standard.Examples.Main", "type": "", "name": "duration", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example duration for experimenting with duration APIs."},
{"module": "Standard.Examples.Main", "type": "", "name": "json_text", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example amount of JSON as text."},
{"module": "Standard.Examples.Main", "type": "", "name": "json", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Example JSON for working with."},
{"module": "Standard.Examples.Main", "type": "", "name": "json_object", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example JSON object."},
{"module": "Standard.Examples.Main", "type": "", "name": "list", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example cons-list."},
{"module": "Standard.Examples.Main", "type": "", "name": "dictionary", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A simple dictionary that contains some numbers mapped to their word equivalents."},
{"module": "Standard.Examples.Main", "type": "", "name": "no_such_method", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a no_such_method_error as a value."},
{"module": "Standard.Examples.Main", "type": "", "name": "throw_error", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Throws an error."},
{"module": "Standard.Examples.Main", "type": "", "name": "throw_panic", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Throws a panic."},
{"module": "Standard.Examples.Main", "type": "", "name": "geo_data_url", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A URL for open-source geographic data about the locations of bus-stop ads in Los Angeles."},
{"module": "Standard.Examples.Main", "type": "", "name": "get_response", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets an HTTP response from a network endpoint.","remarks": "! Makes a Network Request   Calling this method will cause Enso to make a network request to a data   endpoint."},
{"module": "Standard.Examples.Main", "type": "", "name": "get_geo_data", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets HTTP data from a network endpoint.","remarks": "! Makes a Network Request   Calling this method will cause Enso to make a network request to a data   endpoint."},
{"module": "Standard.Examples.Main", "type": "", "name": "uri", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A basic URI for examples."},
{"module": "Standard.Examples.Main", "type": "", "name": "image_file", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A file that contains an image.","remarks": "! Downloading   Calling this method will result in the image file being downloaded from   the internet if it is not already present on your disk. If you do not want   this to happen, please place the image in the   `lib/Standard/Examples/\u003cversion\u003e/data` folder for your Enso distribution."},
{"module": "Standard.Examples.Main", "type": "", "name": "image", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A PNG image.","remarks": "! Downloading   Calling this method will result in the image file being downloaded from   the internet if it is not already present on your disk. If you do not want   this to happen, please place the image in the   `lib/Standard/Examples/\u003cversion\u003e/data` folder for your Enso distribution."},
{"module": "Standard.Examples.Main", "type": "", "name": "matrix", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A matrix that corresponds to `image`."},
{"module": "Standard.Examples.Main", "type": "", "name": "add_1_to", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}},"aliases": [],"description": "A silly little function that adds one to the provided number."},
{"module": "Standard.Examples.Main", "type": "", "name": "get_boolean", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A function that just returns a constant boolean value."},
{"module": "Standard.Examples.Main", "type": "", "name": "simple_table_json", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A simple small piece of JSON that can easily be converted into a table."},
{"module": "Standard.Examples.Main", "type": "", "name": "simple_table_json_headers", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The headers for the columns in the JSON table `simple_table_json`."},
{"module": "Standard.Examples.Main", "type": "", "name": "geo_json", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Some simple GeoJSON."},
{"module": "Standard.Examples.Main", "type": "", "name": "integer_column", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing integers."},
{"module": "Standard.Examples.Main", "type": "", "name": "decimal_column", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing decimal numbers."},
{"module": "Standard.Examples.Main", "type": "", "name": "bool_column_1", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing booleans."},
{"module": "Standard.Examples.Main", "type": "", "name": "bool_column_2", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing booleans."},
{"module": "Standard.Examples.Main", "type": "", "name": "text_column_1", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing text."},
{"module": "Standard.Examples.Main", "type": "", "name": "text_column_2", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A small table column containing text."},
{"module": "Standard.Examples.Main", "type": "", "name": "inventory_table", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A simple table that contains basic shop inventory data for the food shop."},
{"module": "Standard.Examples.Main", "type": "", "name": "popularity_table", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A simple table that contains basic item popularity data for the food shop."},
{"module": "Standard.Examples.Main", "type": "", "name": "transactions_table", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A simple tablethat contains basic transaction data for the food shop."},
{"module": "Standard.Examples.Main", "type": "", "name": "match", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An example regex match."},
{"module": "Standard.Examples.Main", "type": "", "name": "welcome", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The welcome file for Enso."},
{"module": "Standard.Geo.Geo_Json", "type": "", "name": "geo_json_to_table", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"geo_json": {"lazy": false}, "fields": {"lazy": false, "default": "Nothing"}},"aliases": [],"icon": "convert","description": "Converts a GeoJSON object to a Table."},
{"module": "Standard.Geo.Helpers", "type": "Object_Type", "name": "Feature", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Object_Type", "arguments": {},"aliases": [],"description": "A Geo JSON feature."},
{"module": "Standard.Geo.Helpers", "type": "Object_Type", "name": "Feature_Collection", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Object_Type", "arguments": {},"aliases": [],"description": "A Geo JSON feature collection."},
{"module": "Standard.Geo.Helpers", "type": "Object_Type", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert GeoJSON object type to Text."},
{"module": "Standard.Geo.Helpers", "type": "", "name": "get_feature_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"feature": {"lazy": false}},"aliases": [],"description": "Get JS_Object of a Feature GeoJSON object with properties and geometry merged."},
{"module": "Standard.Geo.Helpers", "type": "", "name": "get_geometry_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"feature": {"lazy": false}},"aliases": [],"description": "Get column key-value pairs of a feature\u0027s \"geometry\" object."},
{"module": "Standard.Geo.Helpers", "type": "", "name": "get_point_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Get column key-value pairs of a \"Point\" geometry object."},
{"module": "Standard.Geo.Main", "type": "", "name": "point", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"latitude": {"lazy": false}, "longitude": {"lazy": false}, "elevation": {"lazy": false, "default": "0"}},"aliases": [],"icon": "location","description": "Create a `Table` representing a geographic point with the specified latitude, longitude, and elevation."},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Meters", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use meters as the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Kilometers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use kilometers as the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Feet", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use feet as the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Yards", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use yards as the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Miles", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use miles as the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "Smoots", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Distance_Units", "arguments": {},"aliases": [],"description": "Use Smoots as the unit. https://en.wikipedia.org/wiki/Smoot"},
{"module": "Standard.Geo.Table_Extensions", "type": "Distance_Units", "name": "from_meters", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Float", "arguments": {"meters": {"lazy": false, "type": "Float", "checked": true}},"aliases": [],"description": "Converts meters to the unit."},
{"module": "Standard.Geo.Table_Extensions", "type": "Table", "name": "geo_distance", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Table", "arguments": {"lat1": {"lazy": false, "type": "Float | Column | Column_Ref", "checked": true, "default": "_find_column_with_similar_name  self \"latitude\" \"lat\" (Missing_Argument.throw \"lat1\")"}, "long1": {"lazy": false, "type": "Float | Column | Column_Ref", "checked": true, "default": "_find_column_with_similar_name  self \"longitude\" \"long\" (Missing_Argument.throw \"long1\")"}, "lat2": {"lazy": false, "type": "Float | Column | Column_Ref", "checked": true, "default": "Missing_Argument.throw \"lat2\""}, "long2": {"lazy": false, "type": "Float | Column | Column_Ref", "checked": true, "default": "Missing_Argument.throw \"long2\""}, "units": {"lazy": false, "type": "Distance_Units", "checked": true, "default": "..Meters"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"icon": "geo_map_distance","description": "Computes the distance between two latitude/longitude points on each row of the table."},
{"module": "Standard.Geo.Table_Extensions", "type": "", "name": "_find_column_with_similar_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "column_name": {"lazy": false, "type": "Text", "checked": true}, "prefix": {"lazy": false, "type": "Text", "checked": true, "default": "column_name"}, "on_fail": {"lazy": true, "default": "Missing_Argument.throw column_name"}},"aliases": []},
{"module": "Standard.Geo.Table_Extensions", "type": "", "name": "compute_distance", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "lat1": {"lazy": false, "type": "Column | Float", "checked": true}, "lng1": {"lazy": false, "type": "Column | Float", "checked": true}, "lat2": {"lazy": false, "type": "Column | Float", "checked": true}, "lng2": {"lazy": false, "type": "Column | Float", "checked": true}, "units": {"lazy": false, "type": "Distance_Units", "checked": true}, "as": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Geo.Table_Extensions", "type": "", "name": "_to_radians", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"degrees": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Google_Analytics", "arguments": {},"aliases": [],"description": "Type providing API access to Google Analytics."},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "read", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "Missing_Argument.throw \"credentials\""}, "property": {"lazy": false, "type": "Google_Analytics_Property", "checked": true, "default": "Missing_Argument.throw \"property\""}, "dimensions": {"lazy": false, "type": "Vector", "checked": true, "default": "[\u0027country\u0027]"}, "metrics": {"lazy": false, "type": "Vector", "checked": true, "default": "[\u0027activeUsers\u0027]"}, "start_date": {"lazy": false, "type": "Date", "checked": true, "default": "Date.today.previous ..Year"}, "end_date": {"lazy": false, "type": "Date", "checked": true, "default": "Date.today"}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Performs Google Analytics call This method calls the Google Analytics Reporting v4 API."},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "list_accounts", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "..Default"}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}, "include_deleted": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_input","description": "Reads the set of accounts from Google Analytics Admin API."},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "list_properties", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "..Default"}, "account": {"lazy": false, "type": "Google_Analytics_Account_Filter", "checked": true, "default": "..All_Accounts"}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}, "include_deleted": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"icon": "data_input","description": "Reads the set of properties from Google Analytics Admin API."},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "list_metrics", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "Missing_Argument.throw \"credentials\""}, "property": {"lazy": false, "type": "Google_Analytics_Property", "checked": true, "default": "Missing_Argument.throw \"property\""}},"aliases": [],"icon": "data_input","description": "Reads the set of metrics from Google Analytics for a property."},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics", "name": "list_dimensions", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "Missing_Argument.throw \"credentials\""}, "property": {"lazy": false, "type": "Google_Analytics_Property", "checked": true, "default": "Missing_Argument.throw \"property\""}},"aliases": [],"icon": "data_input","description": "Reads the set of dimensions from Google Analytics for a property."},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics_Error", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Analytics_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}, "payload": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics_Error", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "Google_Analytics_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "", "name": "_make_metrics_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"self_arg": {"lazy": false}, "cache": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "", "name": "_make_dimensions_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"self_arg": {"lazy": false}, "cache": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "", "name": "_make_start_date_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "", "name": "_read_sample_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"dimensions": {"lazy": false, "type": "Vector", "checked": true}, "metrics": {"lazy": false, "type": "Vector", "checked": true}, "start_date": {"lazy": false, "type": "Date", "checked": true}, "end_date": {"lazy": false, "type": "Date", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics", "type": "", "name": "_handle_google_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Analytics_Account", "arguments": {"java_record": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "id", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Account ID."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Account display name."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "create_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Account creation time."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "region_code", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Account region code."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "is_deleted", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Has the account been deleted?"},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account", "name": "properties", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "..Default"}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}, "include_deleted": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "data_input","description": "List of all properties of the account."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "All_Accounts", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Google_Analytics_Account_Filter", "arguments": {},"aliases": [],"description": "Filter to all accounts."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "Account", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Google_Analytics_Account_Filter", "arguments": {"account": {"lazy": false, "type": "Text|Google_Analytics_Account", "checked": true}},"aliases": [],"description": "Filter to a single account"},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "Accounts", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Google_Analytics_Account_Filter", "arguments": {"accounts": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Filter to set of accounts"},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"self_arg": {"lazy": false}, "cache": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "as_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Array | Nothing", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "", "name": "_create_analytics_account_from_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "AnalyticsAccount", "arguments": {"account": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Creates a Google Analytics account from a text ID. Most values are defaulted."},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Google_Analytics_Account", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Account", "type": "Google_Analytics_Account_Filter", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "Dimension", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Analytics_Field", "arguments": {"java_record": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "Metric", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Analytics_Field", "arguments": {"java_record": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "api_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Dimension API Name."},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Dimension display name."},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "category", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Dimension category."},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "description", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Dimension description."},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Field", "type": "Google_Analytics_Field", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Analytics_Property", "arguments": {"java_record": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"self_arg": {"lazy": false}, "cache": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "id", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Property ID."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Property display name."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "create_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Property creation time."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "account", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Parent account"},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "currency", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Property currency."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "time_zone", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Property time zone."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "metrics", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "data_input","description": "List of all metrics of the property."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "dimensions", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"credentials": {"lazy": false, "type": "Google_Credential", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "data_input","description": "List of all dimensions of the property."},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Analytics_Property", "type": "Google_Analytics_Property", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "From_File", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Credential", "arguments": {"file": {"lazy": false, "type": "File", "checked": true, "default": "Missing_Argument.throw \"file\""}},"aliases": [],"icon": "key","description": "Access using a json credentials file downloaded from your Google account."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "Default", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Credential", "arguments": {},"aliases": [],"icon": "key","description": "Access using the defaults provided by the environment variables."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "Sample", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Credential", "arguments": {},"aliases": [],"icon": "key","description": "Feeding this into supporting components will give sample data for that component."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Enso_File | File | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"icon": "key","description": "Creates a Google credential either from a json file or the default environment variables."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "default", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Credential", "arguments": {},"aliases": [],"icon": "key","description": "Creates a Google credential either from the default environment variables."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "as_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "CredentialsProvider | Nothing", "arguments": {},"aliases": [],"description": "Gets the Java version of the credentials."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": [],"description": "To enable cloud file to work as a credential, need to localise it."},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "File", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Credential", "type": "Google_Credential", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Google_Api.Google_Sheets", "type": "Google_Sheets", "name": "Service", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Google_Sheets", "arguments": {"java_service": {"lazy": false}},"aliases": []},
{"module": "Standard.Google_Api.Google_Sheets", "type": "Google_Sheets", "name": "initialize", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"secret_file": {"lazy": false}},"aliases": [],"icon": "cloud","description": "Initializes the Google Sheets instance using the given credentials file."},
{"module": "Standard.Google_Api.Google_Sheets", "type": "Google_Sheets", "name": "get_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet_id": {"lazy": false}, "sheet_range": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Gets a table with the given ID and sheet range."},
{"module": "Standard.Image.Histogram", "type": "Histogram", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Histogram", "arguments": {"channel": {"lazy": false}, "data": {"lazy": false}},"aliases": [],"description": "The histogram of a single image channel."},
{"module": "Standard.Image.Histogram", "type": "Histogram", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert histogram data to a JS_Object."},
{"module": "Standard.Image.Image", "type": "Image", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Image", "arguments": {"opencv_mat": {"lazy": false}},"aliases": [],"description": "The image data type. \n\n The image is represented with a matrix of rows x columns. Each pixel is represented with a vector of 1 to 4 values (channels). Pixel values are normalized in a range [0.0 .. 1.0]."},
{"module": "Standard.Image.Image", "type": "Image", "name": "from_vector", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"values": {"lazy": false}, "rows": {"lazy": false, "default": "1"}, "channels": {"lazy": false, "default": "1"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Create an image from the array of values. \n\n The function expects the array of normalized values to have each value in the range of [0.0 .. 1.0]."},
{"module": "Standard.Image.Image", "type": "Image", "name": "read", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"location": {"lazy": false, "type": "File", "checked": true}, "flags": {"lazy": false, "default": "[]"}},"aliases": ["import", "load", "open"],"icon": "data_input","description": "Read an image from a file.  The function reads images in RGB format, or RGBA if the `Read_Flag.Alpha_Channel` flag is specified."},
{"module": "Standard.Image.Image", "type": "Image", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "flags": {"lazy": false, "default": "[]"}},"aliases": ["export", "output", "save", "to_file"],"icon": "data_output","description": "Write an image to a file."},
{"module": "Standard.Image.Image", "type": "Image", "name": "rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of image rows."},
{"module": "Standard.Image.Image", "type": "Image", "name": "columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of image columns."},
{"module": "Standard.Image.Image", "type": "Image", "name": "channels", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of image channels."},
{"module": "Standard.Image.Image", "type": "Image", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"row": {"lazy": false}, "column": {"lazy": false}},"aliases": [],"icon": "image","description": "Get the pixel value indexed by row and column."},
{"module": "Standard.Image.Image", "type": "Image", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "operators","description": "Calculates the per-element sum of an image and a scalar or a matrix. \n\n The matrix should have the same dimensions as the image."},
{"module": "Standard.Image.Image", "type": "Image", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "operators","description": "Calculates the per-element difference between an image and a scalar or a matrix. \n\n The matrix should have the same dimensions as the image."},
{"module": "Standard.Image.Image", "type": "Image", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "math","description": "Calculates the per-element product of an image and a scalar or a matrix. \n\n The matrix should have the same dimensions as the image."},
{"module": "Standard.Image.Image", "type": "Image", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "math","description": "Performs per-element division of an image and a scalar or a matrix. \n\n The matrix should have the same dimensions as the image."},
{"module": "Standard.Image.Image", "type": "Image", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Convert the image to a vector."},
{"module": "Standard.Image.Image", "type": "Image", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert the image to a JS_Object."},
{"module": "Standard.Image.Image", "type": "Image", "name": "to_matrix", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Convert the image to a Matrix."},
{"module": "Standard.Image.Image", "type": "Image", "name": "histogram", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"channel": {"lazy": false}},"aliases": [],"icon": "image","description": "Create a histogram for the specified channel of the image."},
{"module": "Standard.Image.Image", "type": "Image_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Image_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Image.Image", "type": "Image_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Image.Image", "type": "Image_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Image.Image", "type": "", "name": "core_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"mat": {"lazy": false}, "value": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"description": "Apply a core matrix operation."},
{"module": "Standard.Image.Image", "type": "", "name": "core_op_handler", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Handles errors in `core_op`."},
{"module": "Standard.Image.Image", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Image", "checked": true}},"aliases": []},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "Image", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Image_File_Format", "arguments": {},"aliases": [],"description": "File_Format to read Image files"},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Image.Image_File_Format", "type": "Image_File_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Image.Image_File_Format", "type": "", "name": "supported", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "List comes from org.opencv.imgcodecs.Imgcodecs#imread doc comment."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Matrix", "arguments": {"opencv_mat": {"lazy": false}},"aliases": [],"description": "The matrix data type. \n\n Each value of the matrix is represented with an array of channels. In contrast to an Image data type, Matrix values are not normalized."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "zeros", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"rows": {"lazy": false}, "columns": {"lazy": false}, "channels": {"lazy": false, "default": "1"}},"aliases": [],"icon": "data_input","description": "Create a matrix with all elements set to zero."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "ones", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"rows": {"lazy": false}, "columns": {"lazy": false}, "channels": {"lazy": false, "default": "1"}},"aliases": [],"icon": "data_input","description": "Create a matrix with all elements set to one."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "identity", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"rows": {"lazy": false}, "columns": {"lazy": false}, "channels": {"lazy": false, "default": "1"}},"aliases": [],"icon": "data_input","description": "Create an identity matrix containing ones on a main diagonal."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"values": {"lazy": false}, "rows": {"lazy": false, "default": "1"}, "channels": {"lazy": false, "default": "1"}},"aliases": [],"description": "Create a matrix from the provided vector."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of matrix rows."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of matrix columns."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "channels", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "image","description": "Return the number of matrix channels."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"row": {"lazy": false}, "column": {"lazy": false}},"aliases": [],"icon": "image","description": "Get the matrix value at the specified row and column."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "reshape", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"rows": {"lazy": false}, "channels": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "image","description": "Reshape the matrix specifying new number of rows and channels."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "operators","description": "Calculates the per-element sum of two matrices or a matrix and a scalar."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "operators","description": "Calculates the per-element difference of two matrices or of a matrix and a scalar."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "math","description": "Calculates the per-element product of two matrices or a matrix and a scalar."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"group": "Standard.Base.Operators","icon": "math","description": "Performs per-element division of two matrices or a matrix and a scalar."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "normalize", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"min_value": {"lazy": false, "default": "0.0"}, "max_value": {"lazy": false, "default": "1.0"}},"aliases": [],"icon": "image","description": "Normalize the matrix into a range of [min_value .. max_value] so that the minimum value of the matrix becomes `min_value` and the maximum value of the matrix becomes `max_value`."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "to_image", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Convert this matrix to an image."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Get the elements of this matrix as a vector."},
{"module": "Standard.Image.Matrix", "type": "Matrix", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert this matrix to a JS_Object."},
{"module": "Standard.Image.Matrix", "type": "Matrix_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Matrix_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Image.Matrix", "type": "Matrix_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Image.Matrix", "type": "Matrix_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Image.Matrix", "type": "", "name": "core_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"mat": {"lazy": false}, "value": {"lazy": false}, "function": {"lazy": false}},"aliases": [],"description": "Apply a core matrix operation."},
{"module": "Standard.Image.Matrix", "type": "", "name": "core_op_handler", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Handles errors in `core_op`."},
{"module": "Standard.Image.Matrix", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Matrix", "checked": true}},"aliases": []},
{"module": "Standard.Image.Matrix_Error", "type": "Matrix_Error", "name": "Index_Out_Of_Bounds", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Matrix_Error", "arguments": {"rows": {"lazy": false}, "columns": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "Indicates that a matrix has been accessed with an illegal index."},
{"module": "Standard.Image.Matrix_Error", "type": "Matrix_Error", "name": "Dimensions_Not_Equal", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Matrix_Error", "arguments": {},"aliases": [],"description": "An error indicating that an operation has failed due to a mismatch of matrix dimensions."},
{"module": "Standard.Image.Matrix_Error", "type": "Matrix_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty-prints a matrix error to be readable by the users."},
{"module": "Standard.Image.Read_Flag", "type": "Read_Flag", "name": "Alpha_Channel", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Read_Flag", "arguments": {},"aliases": [],"description": "Read the image with its alpha channel, otherwise the channel gets cropped."},
{"module": "Standard.Image.Read_Flag", "type": "Read_Flag", "name": "Grayscale", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Read_Flag", "arguments": {},"aliases": [],"description": "Always convert the image to a single channel grayscale image."},
{"module": "Standard.Image.Read_Flag", "type": "Read_Flag", "name": "GDAL", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Read_Flag", "arguments": {},"aliases": [],"description": "Use Geographic Data Abstraction Library (GDAL) driver to load images in geospatial raster data formats."},
{"module": "Standard.Image.Read_Flag", "type": "Read_Flag", "name": "to_integer", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "JPEG_Quality", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {"val": {"lazy": false, "type": "Integer", "checked": true, "default": "95"}},"aliases": [],"description": "Sets the quality used when writing a JPEG."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "JPEG_Progressive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {},"aliases": [],"description": "Enable progressive JPEG compression format. Disabled by default."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "JPEG_Optimize", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {},"aliases": [],"description": "Enable optimized JPEG encoding algorithms. Disabled by default."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "JPEG_Luma_Quality", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {"val": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"description": "Sets the luma quality level used when writing a JPEG."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "JPEG_Chroma_Quality", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {"val": {"lazy": false, "default": "0"}},"aliases": [],"description": "Sets the chroma quality level used when writing a JPEG."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "PNG_Compression", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {"val": {"lazy": false, "type": "Integer", "checked": true, "default": "3"}},"aliases": [],"description": "Sets the compression level used when writing a PNG."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "WEBP_Quality", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "Write_Flag", "arguments": {"val": {"lazy": false, "default": "101"}},"aliases": [],"description": "Sets the quality used when writing a WEBP image."},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "value", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Image.Write_Flag", "type": "Write_Flag", "name": "to_integer", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "SQLServer_Details", "name": "SQLServer", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "SQLServer_Details", "arguments": {"host": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"host\""}, "credentials": {"lazy": false, "type": "Credentials", "checked": true, "default": "Missing_Argument.throw \"credentials\""}, "port": {"lazy": false, "type": "Integer", "checked": true, "default": "1433"}, "database": {"lazy": false, "type": "Text", "checked": true, "default": "\"master\""}},"aliases": [],"description": "Connect to a SQLServer database."},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "SQLServer_Details", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "SQLServer_Details", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}, "allow_data_links": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Build the Connection resource."},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "SQLServer_Details", "name": "jdbc_url", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the jdbc url for the connection."},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "SQLServer_Details", "name": "jdbc_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the properties for the connection."},
{"module": "Standard.Microsoft.Connection.SQLServer_Details", "type": "", "name": "create_data_link_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"details": {"lazy": false, "type": "SQLServer_Details", "checked": true}, "data_link_location": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Dialect", "arguments": {"dialect_operations": {"lazy": false}},"aliases": [],"description": "The dialect of SQL Server databases."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation according to the specific dialect."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part\u0027s that determine what order each part gets written in for the final SQL output If you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "wrap_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps and possibly escapes the identifier so that it can be used in a generated query regardless of what characters it contains. The quotes used will depend on the dialect."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "make_table_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": [],"description": "Generates a SQL expression for a table literal."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.  One of the purposes of this method is to verify if the expected ordering settings are supported by the given database backend."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "prepare_distinct", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Prepares a distinct operation."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso `Value_Type`."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "cast_op_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of certain operations with certain arguments.  It is used when the normal type inference provided by the database engine needs to be adjusted.  In most cases this method will just return the expression unchanged, it is used only to override the type in cases where the default one that the database uses is not what we want."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "cast_aggregate_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of aggregate operations. Some DBs do CAST(SUM(x) AS FLOAT) others do SUM(CAST(x AS FLOAT))."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean ! Unsupported_Database_Operation", "arguments": {"aggregate": {"lazy": false, "type": "Aggregate_Column", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.  Returns `Nothing` if the key is not defined."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "prepare_metadata_for_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}, "operation_input_type": {"lazy": false}},"aliases": [],"description": "Prepares metadata for an operation taking a date/time period and checks if the given period is supported."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "if_replace_params_supports", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replace_params": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Returns true if the `replace` parameters are supported by this backend."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "needs_literal_table_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "SQLServer_Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "Expression_Kind", "name": "Boolean_Condition", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "Expression_Kind", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "sqlserver", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of SQL Server databases."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_generate_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dialect": {"lazy": false}, "base_gen": {"lazy": false}, "expr": {"lazy": false}, "expression_kind": {"lazy": false, "type": "Expression_Kind", "checked": true}, "materialize_null_check": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Returns a pair of a SQL_Builder for the given expression and a vector of columns that have been used in the expression and need to be checked for nulls. SQL Server needs special handling commpared to ther databases as it does not have a boolean data type. This means that you can write     SELECT * FROM MyTable WHERE [Column1] \u003e [Column2] but you cannot write     SELECT [Column1] \u003e [Column2] FROM MyTable to write the second query you need to write     SELECT CASE WHEN [Column1] IS NULL OR [Column2] IS NULL WHEN [Column1] \u003e [Column2] THEN 1 ELSE 0 END FROM MyTable The below function collects all of the fields which are needed to be checked for nulls returning them in a vector as the second element of the pair. The first element of the pair is the SQL_Builder for the expression."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_align_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}, "has_kind": {"lazy": false, "type": "Expression_Kind", "checked": true}, "expected_kind": {"lazy": false, "type": "Expression_Kind", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_convert_value_to_boolean_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_convert_boolean_to_value_expression", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_generate_null_check_sql_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"null_checks": {"lazy": false, "type": "Vector", "checked": true}, "expr": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_generate_is_null_expr", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"null_checks": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_op_expected_kind", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Kind", "arguments": {"op": {"lazy": false}, "arg_pos": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_op_return_kind", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Kind", "arguments": {"op": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_op_needs_to_materialize_null_checks", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"op": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_dialect_operations", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_make_iif", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_count_is_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_count_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_count_not_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_shortest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_longest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "concat_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "trim_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_count_distinct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "agg_count_distinct_include_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "is_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "starts_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "like", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "ends_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_contains_expr", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}, "substring": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "contains", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "left", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "right", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_build_partition_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"grouping": {"lazy": false, "type": "SQL_Builder", "checked": true}, "ordering": {"lazy": false, "type": "SQL_Builder", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_build_lead_lag_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "n": {"lazy": false, "type": "SQL_Builder", "checked": true}, "colName": {"lazy": false, "type": "SQL_Builder", "checked": true}, "grouping": {"lazy": false, "type": "SQL_Builder", "checked": true}, "ordering": {"lazy": false, "type": "SQL_Builder", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_make_lead_lag", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_make_lead_lag_closest_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"lead_lag": {"lazy": false, "type": "Text", "checked": true}, "arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_order_descriptor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "bool_or", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "bool_not", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "floating_point_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "mod_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "decimal_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "decimal_mod", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "supported_replace_params", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "replace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_datepart", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"enso_name": {"lazy": false}, "sql_name": {"lazy": false, "default": "enso_name"}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_day_of_week", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_extract_microsecond", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_get_sqlserver_interval", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"interval": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_date_add", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_date_diff", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "_make_month_datediff", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_date_trunc_to_day", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_runtime_error_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "The RUNTIME_ERROR operation should allow the query to compile fine and it will not prevent it from running if the branch including this operation is not taken. But if the branch is computed, it should ensure the query fails.  This query never returns a value, so its type should be polymorphic. However, that is not possible - so currently it just \u0027pretends\u0027 that it would return a Boolean - because that is the type we expect in the use-case. This can be altered if needed.  It takes a variable as the second argument. It can be any value that is not statically known - this ensure that the optimizer will not be able to pre-compute the expression too early (which could make the query fail spuriously). See `make_invariant_check` in `Lookup_Query_Helper` for an example."},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "make_distinct_extension", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expressions": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Dialect", "type": "", "name": "sqlserver_dialect_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Error_Mapper", "type": "SQLServer_Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Error_Mapper", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Error_Mapper", "type": "SQLServer_Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Error_Mapper", "type": "SQLServer_Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Error_Mapper", "type": "SQLServer_Error_Mapper", "name": "is_table_already_exists_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Error_Mapper", "type": "SQLServer_Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Type_Mapping", "arguments": {},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "value_type_to_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "sql_type_to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"infer_from_database_callback": {"lazy": false}, "op_name": {"lazy": false}, "arguments": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "The SQLServer_Type_Mapping always relies on the return type determined by the database backend except for boolean types."},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "prepare_type_overrides", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type_suggestions": {"lazy": false}},"aliases": [],"description": "We want to respect any overriding references, but references that rely on computing the type by the database are resolved to Nothing to just rely on the `ResultSet` metadata and decrease overhead."},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "is_implicit_conversion", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"source_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "is_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "is_same_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type1": {"lazy": false, "type": "Value_Type", "checked": true}, "value_type2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "SQLServer_Type_Mapping", "name": "make_column_fetcher", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Creates a `Column_Fetcher` used to fetch data from a result set and build an in-memory column from it, based on the given column type."},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "", "name": "on_unknown_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "", "name": "operations_dict", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Maps operation names to functions that infer its result type."},
{"module": "Standard.Microsoft.Internal.SQLServer_Type_Mapping", "type": "", "name": "max_length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This is the maximum size that JDBC driver reports for \u0027unbounded\u0027 types in SQLServer."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Connection", "arguments": {"connection": {"lazy": false}, "make_new": {"lazy": false}},"aliases": [],"description": "A SQLServer database connection."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "properties": {"lazy": false}, "make_new": {"lazy": false}, "data_link_setup": {"lazy": false}},"aliases": [],"description": "Creates a SQLServer connection based on a URL and properties."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "close", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "close","description": "Closes the connection releasing the underlying database resources immediately instead of waiting for them to be automatically released.  The connection is not usable afterwards."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "databases", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current database (or catalog)."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "set_database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified database set as default."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "set_schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "metadata","description": "Returns a new Connection with the specified schema set as default."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "table_types", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets a list of the table types."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "database": {"lazy": false, "type": "Text", "checked": true, "default": "self.database"}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "self.schema"}, "types": {"lazy": false, "default": "[\"TABLE\", \"VIEW\"]"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialized Table of all the matching views and tables.","remarks": "? Temporary Tables    Note that the temporary tables may be created in a different schema   than the current one, so take this into account when filtering by schema."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "alias": {"lazy": false, "default": "\"\""}},"aliases": ["import", "load", "open", "read"],"group": "Standard.Base.Input","icon": "data_input","description": "Set up a query returning a Table object, which can be used to work with data within the database or load it into memory.","errors": ""},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load", "open", "query"],"group": "Standard.Base.Input","icon": "data_input","description": "Execute the query and load the results into memory as a Table.","remarks": "? Side Effects    Note that the `read` method is running without restrictions when the   output context is disabled, but it can technically cause side effects,   if it is provided with a DML query. Usually it is preferred to use   `execute_update` for DML queries, or if they are supposed to return   results, the `read` should be wrapped in an execution context check."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "create_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description | DB_Table | Table", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "[first_column_name_in_structure structure]"}, "temporary": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "Problem_Behavior.Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a new empty table in the database and returns a query referencing the new table.","errors": "","remarks": "? Dry Run if Output disabled    If performing output actions is disabled, only a dry run is performed   and no permanent changes occur. The operation will test for errors   (like missing columns) and if successful, return a temporary table with   a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "execute_update", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw update query. If the query was inserting, updating or deleting rows, the number of affected rows is returned; otherwise it returns 0 for other types of queries (like creating or altering tables)."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw query. If the query was inserting, updating or deleting rows, the number of affected rows is returned; otherwise it returns 0 for other types of queries (like creating or altering tables)."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "dialect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the dialect."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "jdbc_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the underlying JDBC connection."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "drop_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "if_exists": {"lazy": false, "default": "False"}},"aliases": [],"description": "Drops a table."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "truncate_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Removes all rows from a table."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "base_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the base `Connection` instance.  Used, so that all internal helper functions do not need to be replicated on the \u0027subclasses\u0027."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "save_as_data_link", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Error"}},"aliases": [],"icon": "data_output","description": "Creates a Data Link that will open the same connection."},
{"module": "Standard.Microsoft.SQLServer_Connection", "type": "SQLServer_Connection", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Microsoft.SQLServer_Data_Link", "type": "SQLServer_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Data_Link", "arguments": {"details": {"lazy": false, "type": "SQLServer_Details", "checked": true}, "source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true}, "link_type": {"lazy": false, "type": "DB_Data_Link_Type", "checked": true}},"aliases": []},
{"module": "Standard.Microsoft.SQLServer_Data_Link", "type": "SQLServer_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQLServer_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false}},"aliases": []},
{"module": "Standard.Microsoft.SQLServer_Data_Link", "type": "SQLServer_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Searcher.Main", "type": "", "name": "text_input", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["text input"],"group": "Standard.Base.Constants","icon": "text_input","description": "Creating text in Enso is as simple as adding a node that contains the text that you would like to create."},
{"module": "Standard.Searcher.Main", "type": "", "name": "input_number", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["number input"],"group": "Standard.Base.Constants","icon": "input_number","description": "Creating a number in Enso is as simple as adding a node that contains the number that you would like to create.  Enso supports both integer and decimal literals."},
{"module": "Standard.Searcher.Main", "type": "", "name": "table_input", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": ["table input"],"group": "Standard.Base.Constants","icon": "table_edit","description": "Creating a table in Enso is usually done directly from data. Nevertheless, it can be useful to create tables manually."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Key_Pair_Credentials", "name": "Key_Pair", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Key_Pair_Credentials", "arguments": {"username": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"username\""}, "private_key": {"lazy": false, "type": "Enso_Secret|File|Enso_File", "checked": true, "default": "Missing_Argument.throw \"private_key\""}, "passphrase": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Credentials for key-pair based authentication."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Key_Pair_Credentials", "name": "generate_key_pair", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generated_Key_Pair", "arguments": {"location": {"lazy": false, "type": "Enso_File", "checked": true, "default": "Enso_File.home"}, "name": {"lazy": false, "type": "Text", "checked": true}, "if_exists": {"lazy": false, "type": "On_Existing_Key_Pair", "checked": true, "default": "..Use_Existing"}},"aliases": [],"group": "Output","icon": "key","description": "Generate a key pair that can be used for authentication.  This function will generate a new key pair and store it in the provided Cloud location. The private key will be stored as an `Enso_Secret` that can be used when establishing a Database connection. The public key will be saved as a text file next to that secret.  To finalize the setup, the public key must be associated with your account. To do so, you need to run a query like:     ALTER USER \u003cyour_username\u003e SET RSA_PUBLIC_KEY=\u003cpublic_key_content\u003e;  See https://docs.snowflake.com/en/user-guide/key-pair-auth#assign-the-public-key-to-a-snowflake-user for more information on the setup."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Generated_Key_Pair", "arguments": {"secret": {"lazy": false, "type": "Enso_Secret", "checked": true}, "internal_file": {"lazy": false, "type": "Enso_File", "checked": true}, "public_key_content": {"lazy": true, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"secret": {"lazy": false, "type": "Enso_Secret", "checked": true}, "public_key_file": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "public_key_file", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Enso_File", "arguments": {},"aliases": [],"description": "Returns the file containing the public key."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "alter_user_query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"username": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Returns the query that should be run to associate the public key with the user."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Generated_Key_Pair", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "On_Existing_Key_Pair", "name": "Use_Existing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "On_Existing_Key_Pair", "arguments": {},"aliases": [],"description": "Skips generation and returns the already existing key pair."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "On_Existing_Key_Pair", "name": "Overwrite", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "On_Existing_Key_Pair", "arguments": {},"aliases": [],"description": "Generates a new key pair, overwriting the existing one."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "On_Existing_Key_Pair", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "On_Existing_Key_Pair", "arguments": {},"aliases": [],"description": "Throws an error if the key pair already exists."},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "", "name": "parse_public_key", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"public_key_content": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "", "name": "generate_alter_user_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"username": {"lazy": false, "type": "Text|Nothing", "checked": true}, "public_key_file_content": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Key_Pair_Credentials", "type": "Enso_Secret", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Generated_Key_Pair", "checked": true}},"aliases": [],"description": "Allows to pass `Generated_Key_Pair` directly into credentials, as an `Enso_Secret`."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "Snowflake_Details", "name": "Snowflake", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Snowflake_Details", "arguments": {"account": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"account\""}, "credentials": {"lazy": false, "type": "Credentials|Key_Pair_Credentials", "checked": true, "default": "Missing_Argument.throw \"credentials\""}, "database": {"lazy": false, "type": "Text", "checked": true, "default": "\"SNOWFLAKE\""}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "\"PUBLIC\""}, "warehouse": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Connect to a Snowflake database."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "Snowflake_Details", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Attempt to resolve the constructor."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "Snowflake_Details", "name": "connect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"options": {"lazy": false}, "allow_data_links": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Build the Connection resource."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "Snowflake_Details", "name": "jdbc_url", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the jdbc url for the connection."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "Snowflake_Details", "name": "jdbc_properties", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the properties for the connection."},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "", "name": "create_data_link_structure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "JS_Object", "arguments": {"details": {"lazy": false, "type": "Snowflake_Details", "checked": true}, "data_link_location": {"lazy": false, "type": "Enso_File", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Snowflake_Details", "type": "", "name": "_enhance_connection_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"details": {"lazy": false, "type": "Snowflake_Details", "checked": true}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Snowflake.Connection.Widgets", "type": "", "name": "password_or_keypair_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Key_Pair_Generator", "type": "Key_Pair", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Key_Pair", "arguments": {"raw_private_key": {"lazy": false, "type": "Text", "checked": true}, "raw_public_key": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A pair of RSA keys stored as base64 encoded strings."},
{"module": "Standard.Snowflake.Internal.Key_Pair_Generator", "type": "Key_Pair", "name": "formatted_public_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Key_Pair_Generator", "type": "", "name": "public_key_prefix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Key_Pair_Generator", "type": "", "name": "public_key_suffix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Key_Pair_Generator", "type": "", "name": "generate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Dialect", "arguments": {"dialect_operations": {"lazy": false}},"aliases": [],"description": "The dialect of Snowflake databases."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the dialect."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "generate_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"description": "A function which generates SQL code from the internal representation according to the specific dialect."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "generate_truncate_table_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Generates SQL to truncate a table."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "get_limit_sql_modifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}},"aliases": [],"description": "Generates SQL modifier for limiting the number of rows and its position in the query"},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "get_part_order", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {"part": {"lazy": false, "type": "SQL_Part", "checked": true}},"aliases": [],"description": "Returns an ordering of SQL_Part\u0027s that determine what order each part gets written in for the final SQL output If you add extensions using Context_Extension you have to provide an order for them here"},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "wrap_identifier", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"identifier": {"lazy": false}},"aliases": [],"description": "Wraps and possibly escapes the identifier so that it can be used in a generated query regardless of what characters it contains. The quotes used will depend on the dialect."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "make_table_literal", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vecs": {"lazy": false}, "column_names": {"lazy": false}, "as_name": {"lazy": false}},"aliases": [],"description": "Generates a SQL expression for a table literal."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "prepare_order_descriptor", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "Prepares an ordering descriptor.  One of the purposes of this method is to verify if the expected ordering settings are supported by the given database backend."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "prepare_distinct", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "key_columns": {"lazy": false}, "case_sensitivity": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Prepares a distinct operation."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "get_type_mapping", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the mapping between SQL types of this dialect and Enso `Value_Type`."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "get_statement_setter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "make_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "target_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "needs_execute_query_for_type_inference", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"statement": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "temp_table_style", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies how the database creates temp tables."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "adapt_unified_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "approximate_result_type": {"lazy": false}, "infer_result_type_from_database_callback": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "cast_op_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector Internal_Column", "checked": true}, "expression": {"lazy": false, "type": "SQL_Expression", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of certain operations with certain arguments.  It is used when the normal type inference provided by the database engine needs to be adjusted.  In most cases this method will just return the expression unchanged, it is used only to override the type in cases where the default one that the database uses is not what we want."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "cast_aggregate_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"op_kind": {"lazy": false, "type": "Text", "checked": true}, "columns": {"lazy": false, "type": "Vector Internal_Column", "checked": true}},"aliases": [],"description": "Add an extra cast to adjust the output type of aggregate operations. Some DBs do CAST(SUM(x) AS FLOAT) others do SUM(CAST(x AS FLOAT))."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "prepare_fetch_types_query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}, "context": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "generate_collate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"collation_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "check_aggregate_support", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "is_operation_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"operation": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Checks if an operation is supported by the dialect."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "is_feature_supported", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"feature": {"lazy": false, "type": "Feature", "checked": true}},"aliases": [],"description": "Checks if a feature is supported by the dialect."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "flagged", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"flag": {"lazy": false, "type": "Dialect_Flag", "checked": true}},"aliases": [],"description": "Checks a dialect flag"},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "default_table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default table types to use when listing tables."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "get_error_mapper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "fetch_primary_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"connection": {"lazy": false}, "table_name": {"lazy": false}},"aliases": [],"description": "The dialect-dependent strategy to get the Primary Key for a given table.  Returns `Nothing` if the key is not defined."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "prepare_metadata_for_period", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}, "operation_input_type": {"lazy": false}},"aliases": [],"description": "Prepares metadata for an operation taking a date/time period and checks if the given period is supported."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "if_replace_params_supports", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"replace_params": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Returns true if the `replace` parameters are supported by this backend."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "value_type_for_upload_of_existing_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "needs_literal_table_cast", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "generate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Builder", "arguments": {"base_gen": {"lazy": false}, "expr": {"lazy": false, "type": "SQL_Expression | Order_Descriptor | Query", "checked": true}, "for_select": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "ensure_query_has_no_holes", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"jdbc": {"lazy": false, "type": "JDBC_Connection", "checked": true}, "raw_sql": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "should_check_table_integrity_at_beginning_of_transaction", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "In Snowflake we need to create tables outside of transactions. However, currently we decide to opt-out of the integrity check for performance reasons - there is too much overhead to each query. The check would fail extremely rarely so it currently does not seem worth the cost. We can revisit this choice in the future."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "Snowflake_Dialect", "name": "custom_build_aggregate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "We need custom handling for First and Last aggregations, because in Snowflake the `FIRST_VALUE` and `LAST_VALUE` functions in Snowflake are purely window functions - they cannot be directly used in aggregate queries.  If tried to be used inside of a group by, it yields an error:     Window function [FIRST_VALUE(T.A) OVER (PARTITION BY T.B ORDER BY T.C ASC NULLS LAST)] may not appear inside an aggregate function."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "snowflake", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The dialect of Snowflake databases."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_dialect_operations", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_count_is_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_count_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_count_not_empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "replace_with_zero_if_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": [],"description": "A helper needed because Snowflake\u0027s aggregators return NULL if there were no rows. But for aggregators like COUNT we prefer to return 0 in such cases."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_median", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_mode", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_percentile", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "first_last_aggregators", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_first_aggregator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"reverse": {"lazy": false}, "ignore_null": {"lazy": false}, "args": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_shortest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_longest", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "concat_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "trim_ops", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_count_distinct", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "agg_count_distinct_include_null", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "replace_null_with_marker", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}},"aliases": [],"description": "A helper function that coalesces a NULL column replacing it with a marker value that is expected to not be present in real world data. It is sometimes needed when we want to count distinct values in a column that contains NULLs and still include the rows containing NULLs. The columns are converted to VARIANT type because of that, which may incur some overhead. But there seems to be no other reliable way to handle this for columns like numeric where no non-NULL value exists that can be guaranteed to be unused."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_row_number_in_group", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "A helper for `lookup_and_replace`, and perhaps other operation. It creates an expression that returns a row number within a group. This is a specialization for Snowflake that adds a dummy ORDER BY clause to satisfy its compiler."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_group_number_equal_count", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "starts_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "ends_with", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "contains", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_contains_expr", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expr": {"lazy": false}, "substring": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "left", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "right", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_order_descriptor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_column": {"lazy": false}, "sort_direction": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "round_bankers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "is_nan", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "is_inf", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "is_finite", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "bool_or", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "floating_point_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "mod_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "decimal_div", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "decimal_mod", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "supported_replace_params", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "replace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"args": {"lazy": false}, "metadata": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "extract_just_nanoseconds", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "extract_just_microseconds", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "extract_just_milliseconds", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "date_period_to_part_with_multiplier", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"period": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_date_add", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_date_diff", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}, "metadata": {"lazy": false, "type": "Date_Period_Metadata", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_date_trunc_to_day", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "sql_type_string_for_date_time", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_runtime_error_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": [],"description": "The RUNTIME_ERROR operation should allow the query to compile fine and it will not prevent it from running if the branch including this operation is not taken. But if the branch is computed, it should ensure the query fails.  This query never returns a value, so its type should be polymorphic. However, that is not possible - so currently it just \u0027pretends\u0027 that it would return a Boolean - because that is the type we expect in the use-case. This can be altered if needed.  It takes a variable as the second argument. It can be any value that is not statically known - this ensure that the optimizer will not be able to pre-compute the expression too early (which could make the query fail spuriously). See `make_invariant_check` in `Lookup_Query_Helper` for an example."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_iif", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_distinct_extension", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"distinct_expressions": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "make_custom_cast", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "SQL_Expression | Nothing", "arguments": {"column": {"lazy": false, "type": "Internal_Column", "checked": true}, "source_value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Returns a custom cast expression if it is needed for a specific pair of types, or Nothing if the default cast is sufficient."},
{"module": "Standard.Snowflake.Internal.Snowflake_Dialect", "type": "", "name": "snowflake_dialect_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Error_Mapper", "type": "Snowflake_Error_Mapper", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Error_Mapper", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Error_Mapper", "type": "Snowflake_Error_Mapper", "name": "is_duplicate_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Error_Mapper", "type": "Snowflake_Error_Mapper", "name": "is_null_primary_key_violation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Error_Mapper", "type": "Snowflake_Error_Mapper", "name": "is_table_already_exists_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Error_Mapper", "type": "Snowflake_Error_Mapper", "name": "transform_custom_errors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Type_Mapping", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "value_type_to_sql", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "sql_type_to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "sql_type_to_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "infer_return_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"infer_from_database_callback": {"lazy": false}, "op_name": {"lazy": false}, "arguments": {"lazy": false}, "expression": {"lazy": false}},"aliases": [],"description": "The Snowflake_Type_Mapping always relies on the return type determined by the database backend."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "prepare_type_overrides", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type_suggestions": {"lazy": false}},"aliases": [],"description": "We want to respect any overriding references, but references that rely on computing the type by the database are resolved to Nothing to just rely on the `ResultSet` metadata and decrease overhead."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "is_implicit_conversion", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"source_type": {"lazy": false, "type": "Value_Type", "checked": true}, "target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "should_warn_on_materialize", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"db_type": {"lazy": false, "type": "Value_Type", "checked": true}, "in_memory_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "is_integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "is_same_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type1": {"lazy": false, "type": "Value_Type", "checked": true}, "value_type2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "Snowflake_Type_Mapping", "name": "make_column_fetcher", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": [],"description": "Creates a `Column_Fetcher` used to fetch data from a result set and build an in-memory column from it, based on the given column type."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "simple_types_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "complex_types_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "on_unknown_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sql_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "max_length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This is the maximum size that JDBC driver reports for \u0027unbounded\u0027 types in Snowflake."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "time_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "date_time_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "smart_integer_fetcher", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A fetcher for Snowflake Decimal integer columns. Integer columns in Snowflake are represented as `NUMBER(38, 0)`, meaning there is no separate Integer type.  In Enso, using `Decimal` values incurs a significant overhead. Thus, when fetching such an integer column from Snowflake, we try to first fetch it as lightweight `Integer` and only fall back to `Decimal` if needed."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "integer_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The actual SQL type that Snowflake uses for all integer types."},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "integer_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Internal.Snowflake_Type_Mapping", "type": "", "name": "float_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Connection", "arguments": {"connection": {"lazy": false}, "make_new": {"lazy": false}},"aliases": [],"description": "A Snowflake database connection."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "create", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"url": {"lazy": false}, "properties": {"lazy": false}, "make_new": {"lazy": false}, "data_link_setup": {"lazy": false}},"aliases": [],"description": "Creates a Snowflake connection based on a URL and properties."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "close", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "close","description": "Closes the connection releasing the underlying database resources immediately instead of waiting for them to be automatically released.  The connection is not usable afterwards."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "warehouses", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of warehouses for the connection."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "warehouse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current warehouse."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "set_warehouse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"warehouse": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified database set as default."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "databases", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current database (or catalog)."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "set_database", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified database set as default."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "set_schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Connection with the specified schema set as default."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "table_types", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets a list of the table types."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "database": {"lazy": false, "type": "Text", "checked": true, "default": "self.database"}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "self.schema"}, "types": {"lazy": false, "default": "[\"TABLE\", \"VIEW\"]"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialized Table of all the matching views and tables.","remarks": "? Temporary Tables    Note that the temporary tables may be created in a different schema   than the current one, so take this into account when filtering by schema."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "query", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "alias": {"lazy": false, "default": "\"\""}},"aliases": ["import", "load", "open", "read"],"group": "Standard.Base.Input","icon": "data_input","description": "Set up a query returning a Table object, which can be used to work with data within the database or load it into memory.","errors": ""},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "SQL_Query", "checked": true}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..First_With_Warning 1000"}},"aliases": ["import", "load", "open", "query"],"group": "Standard.Base.Input","icon": "data_input","description": "Execute the query and load the results into memory as a Table.","remarks": "? Side Effects    Note that the `read` method is running without restrictions when the   output context is disabled, but it can technically cause side effects,   if it is provided with a DML query. Usually it is preferred to use   `execute_update` for DML queries, or if they are supposed to return   results, the `read` should be wrapped in an execution context check."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "create_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false, "type": "Text", "checked": true}, "structure": {"lazy": false, "type": "Vector Column_Description | DB_Table | Table", "checked": true}, "primary_key": {"lazy": false, "type": "Vector Text | Nothing", "checked": true, "default": "[first_column_name_in_structure structure]"}, "temporary": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "allow_existing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Creates a new empty table in the database and returns a query referencing the new table.","errors": "","remarks": "? Dry Run if Output disabled    If performing output actions is disabled, only a dry run is performed   and no permanent changes occur. The operation will test for errors   (like missing columns) and if successful, return a temporary table with   a `Dry_Run_Operation` warning attached."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "execute_update", "methodType": "method", "accessor": "PUBLIC", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw update query. If the query was inserting, updating or deleting rows, the number of affected rows is returned; otherwise it returns 0 for other types of queries (like creating or altering tables)."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "execute", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"query": {"lazy": false}},"aliases": [],"group": "Standard.Base.Output","icon": "data_output","description": "Executes a raw query. If the query was inserting, updating or deleting rows, the number of affected rows is returned; otherwise it returns 0 for other types of queries (like creating or altering tables)."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "dialect", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the dialect."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "jdbc_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Access the underlying JDBC connection."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "drop_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}, "if_exists": {"lazy": false, "default": "False"}},"aliases": [],"description": "Drops a table."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "truncate_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_name": {"lazy": false}},"aliases": [],"description": "Removes all rows from a table."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "base_connection", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the base `Connection` instance.  Used, so that all internal helper functions do not need to be replicated on the \u0027subclasses\u0027."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "save_as_data_link", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"destination": {"lazy": false}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Error"}},"aliases": [],"icon": "data_output","description": "Creates a Data Link that will open the same connection."},
{"module": "Standard.Snowflake.Snowflake_Connection", "type": "Snowflake_Connection", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this value to a JSON serializable object."},
{"module": "Standard.Snowflake.Snowflake_Data_Link", "type": "Snowflake_Data_Link", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Data_Link", "arguments": {"details": {"lazy": false, "type": "Snowflake_Details", "checked": true}, "source": {"lazy": false, "type": "Data_Link_Source_Metadata", "checked": true}, "link_type": {"lazy": false, "type": "DB_Data_Link_Type", "checked": true}},"aliases": []},
{"module": "Standard.Snowflake.Snowflake_Data_Link", "type": "Snowflake_Data_Link", "name": "parse", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Snowflake_Data_Link", "arguments": {"json": {"lazy": false}, "source": {"lazy": false}},"aliases": []},
{"module": "Standard.Snowflake.Snowflake_Data_Link", "type": "Snowflake_Data_Link", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "default": "Auto_Detect"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Convertible_To_Columns", "arguments": {"field_names": {"lazy": false, "type": "Vector Text", "checked": true}, "getter": {"lazy": false, "type": "Text->Any", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Dictionary", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Pair", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Row", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Array", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Columns", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "XML_Element", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Convertible_To_Rows", "arguments": {"original_value": {"lazy": false, "type": "Any", "checked": true}, "length": {"lazy": false, "type": "Integer", "checked": true}, "getter": {"lazy": false, "type": "Integer->Any", "checked": true}, "columns": {"lazy": false, "type": "Vector", "checked": true, "default": "[\"Value\"]"}, "is_sequence": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "to_vector", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Return the iterator values as a `Vector`."},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "align_sequence_only", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Convertible_To_Rows", "arguments": {"sequence_only": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Aligns this conversion depending on if we want to only expand sequences or all kinds of objects.  If `sequence_only` is `False` or the conversion reports `is_sequence=True`, no changes are made. However, `sequence_only` is `True` and the conversion reports `is_sequence=False`, the conversion is replaced with a single row - same as the `Any` fallback."},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Key_Value", "name": "Pair", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Key_Value", "arguments": {"key": {"lazy": false, "type": "Any", "checked": true}, "value": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Key_Value", "name": "at", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"idx": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Key_Value", "name": "get", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"idx": {"lazy": false}},"aliases": [],"description": "Return the key of the pair."},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Key_Value", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Key_Value", "name": "length", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Array", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "List", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Pair", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Dictionary", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "", "name": "_conversion_from_value_as_single_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Conversions.Convertible_To_Rows", "type": "Convertible_To_Columns", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Key_Value", "checked": true}},"aliases": []},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "Delimited", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Delimited_Format", "arguments": {"delimiter": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027,\u0027"}, "encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "Encoding.default"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "row_limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}, "quote_style": {"lazy": false, "type": "Quote_Style", "checked": true, "default": "..With_Quotes"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "value_formatter": {"lazy": false, "type": "Data_Formatter|Nothing", "checked": true, "default": "Data_Formatter.Value"}, "on_invalid_rows": {"lazy": false, "type": "Invalid_Rows", "checked": true, "default": "..Add_Extra_Columns"}, "line_endings": {"lazy": false, "type": "Line_Ending_Style|Infer", "checked": true, "default": "Infer"}, "comment_character": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Read delimited files such as CSVs into a Table.  When reading this format, the following problems may occur: - If a row does not match the first row\u0027s column count, the function   raises an `Invalid_Row`. - If an empty file is passed, an `Empty_File_Error` is thrown. - If a quote is opened and never closed, a `File_Error.Corrupted_Format`   error is raised."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "write_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false}, "table": {"lazy": false}, "on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `Table.write` for this `File_Format`."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "clone", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"encoding": {"lazy": false, "type": "Encoding", "checked": true, "default": "self.encoding"}, "quote_style": {"lazy": false, "type": "Quote_Style", "checked": true, "default": "self.quote_style"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "self.headers"}, "value_formatter": {"lazy": false, "default": "self.value_formatter"}, "on_invalid_rows": {"lazy": false, "type": "Invalid_Rows", "checked": true, "default": "self.on_invalid_rows"}, "line_endings": {"lazy": false, "default": "self.line_endings"}, "comment_character": {"lazy": false, "default": "self.comment_character"}},"aliases": [],"description": "Clone the instance with some properties overridden."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "with_quotes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"quote": {"lazy": false, "default": "\u0027\"\u0027"}, "quote_escape": {"lazy": false, "default": "quote"}, "always_quote": {"lazy": false, "default": "False"}},"aliases": [],"icon": "data_input","description": "Create a clone of this with specified quoting settings."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "without_quotes", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Create a clone of this with specified quoting settings."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "with_headers", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Create a clone of this with first row treated as header."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "without_headers", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Create a clone of this where the first row is treated as data, not a header."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "with_parsing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value_formatter": {"lazy": false, "default": "Data_Formatter.Value"}},"aliases": [],"icon": "data_input","description": "Create a clone of this with value parsing.  A custom `Data_Formatter` can be provided to customize parser options."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "without_parsing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Create a clone of this without value parsing."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "with_line_endings", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"line_endings": {"lazy": false, "type": "Line_Ending_Style | Infer", "checked": true, "default": "Infer"}},"aliases": [],"icon": "data_input","description": "Creates a clone of this with a changed line ending style."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "with_comments", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"comment_character": {"lazy": false, "default": "\u0027#\u0027"}},"aliases": [],"icon": "data_input","description": "Creates a clone of this with comment parsing enabled."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "without_comments", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "data_input","description": "Creates a clone of this with comment parsing disabled."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "Delimited_Format", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Constructs a `Delimited` instance from JSON."},
{"module": "Standard.Table.Delimited.Delimited_Format", "type": "", "name": "_catch_compatibility_changes", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Table.Delimited.Invalid_Rows", "type": "Invalid_Rows", "name": "Drop_Invalid_Rows", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Invalid_Rows", "arguments": {},"aliases": [],"description": "Rows that contain too few or too many columns are dropped."},
{"module": "Standard.Table.Delimited.Invalid_Rows", "type": "Invalid_Rows", "name": "Keep_Invalid_Rows", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Invalid_Rows", "arguments": {},"aliases": [],"description": "Rows that contain too few or too many columns are kept  - If a row has too few columns, the missing columns are filled with `Nothing`. - If it has too many, the extra columns are dropped."},
{"module": "Standard.Table.Delimited.Invalid_Rows", "type": "Invalid_Rows", "name": "Add_Extra_Columns", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Invalid_Rows", "arguments": {},"aliases": [],"description": "Rows that contain more columns than expected are kept, and the extra columns are added.  - If a row has too few columns, the missing columns are filled with `Nothing`. - If it has too many, the extra columns are kept. The previous rows that   had less columns are filled with `Nothing`."},
{"module": "Standard.Table.Delimited.Invalid_Rows", "type": "Invalid_Rows", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "A conversion for backward compatibility."},
{"module": "Standard.Table.Delimited.Quote_Style", "type": "Quote_Style", "name": "No_Quotes", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Quote_Style", "arguments": {},"aliases": [],"description": "Do not quote any values or parse quotes when reading a `Delimited` file.  In write mode, values are not quoted even if this would result in an invalid file."},
{"module": "Standard.Table.Delimited.Quote_Style", "type": "Quote_Style", "name": "With_Quotes", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Quote_Style", "arguments": {"quote": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\"\u0027"}, "quote_escape": {"lazy": false, "type": "Text", "checked": true, "default": "quote"}},"aliases": [],"description": "Specifies the style of quotes when reading or writing a `Delimited` file.","remarks": "! Quote Character    The quote and escape characters must consist of exactly one code-point   (i.e. it can be only one character and complex characters like emojis   may not be used)."},
{"module": "Standard.Table.Delimited.Quote_Style", "type": "Quote_Style", "name": "Always_Quote", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Quote_Style", "arguments": {"quote": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\"\u0027"}, "quote_escape": {"lazy": false, "type": "Text", "checked": true, "default": "quote"}},"aliases": [],"description": "Always quote text values when reading or writing a `Delimited` file.","remarks": "! Quote Character    The quote and escape characters must consist of exactly one code-point   (i.e. it can be only one character and complex characters like emojis   may not be used)."},
{"module": "Standard.Table.Delimited.Quote_Style", "type": "Quote_Style", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "Workbook", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Excel_Format", "arguments": {"xls_format": {"lazy": false, "type": "Boolean | Infer", "checked": true, "default": "Infer"}, "default_sheet": {"lazy": false, "type": "Text", "checked": true, "default": "\"EnsoSheet\""}},"aliases": [],"description": "Reads an Excel file as a connection to an `Excel_Workbook`."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "Sheet", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Excel_Format", "arguments": {"sheet": {"lazy": false, "type": "Integer|Text", "checked": true, "default": "1"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "row_limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}, "xls_format": {"lazy": false, "type": "Boolean|Infer", "checked": true, "default": "Infer"}},"aliases": [],"description": "Reads a sheet from an Excel file as a `Table`."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Excel_Format", "arguments": {"address": {"lazy": false, "type": "Text|Excel_Range", "checked": true, "default": "Missing_Argument.throw \u0027address\u0027"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "row_limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}, "xls_format": {"lazy": false, "type": "Boolean | Infer", "checked": true, "default": "Infer"}},"aliases": [],"description": "Reads a range from an Excel file as a `Table`."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true, "default": "File_Format_Metadata.no_information"}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "write_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false}, "table": {"lazy": false}, "on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `Table.write` for this `File_Format`.  Depending on the `section` will control where to write. - If `Excel_Section.Workbook` (the default), the `table` will be written   to a new sheet in the workbook named `Sheet\u003cn\u003e` where n is the first   integer \u003e1 that is not already used as a sheet name. If too many sheets   are present an `Illegal_Argument` error will be thrown. - If `Excel_Section.Worksheet`, the `table` will be written to the   specified sheet (either adding or replacing). - If `Excel_Section.Cell_Range`, the `table` will be written to the   specified range."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "", "name": "should_treat_as_xls_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"xls_format": {"lazy": false}, "file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Resolve the xls_format setting to a boolean."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "", "name": "xls_format_from_metadata", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "This function returns: - `True` if the file is an XLS format, - `False` if the file is an XLSX format, - `Nothing` if the file is not an Excel format."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "", "name": "as_section", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Excel_Section", "arguments": {"format": {"lazy": false, "type": "Excel_Format", "checked": true}},"aliases": [],"description": "Converts this format to a corresponding `Excel_Section`."},
{"module": "Standard.Table.Excel.Excel_Format", "type": "Excel_Format", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}},"aliases": [],"description": "Constructs an `Excel_Format` instance from JSON. Only a subset of options is currently supported."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Excel_Range", "arguments": {"java_range": {"lazy": false, "type": "Java_Range", "checked": true}},"aliases": [],"description": "Specifies a range within an Excel Workbook."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "is_valid_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Validates if a column index (1-based) is within the valid range for Excel."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "is_valid_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"row": {"lazy": false}},"aliases": [],"description": "Validates if a row index (1-based) is within the valid range for Excel."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "column_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Given a column name, parses to the index (1-based) or return index unchanged."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "from_address", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"address": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Creates a Range from an address."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "for_cell", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet": {"lazy": false}, "column": {"lazy": false}, "row": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Create a Range for a single cell."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "for_range", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet": {"lazy": false}, "left": {"lazy": false}, "top": {"lazy": false}, "right": {"lazy": false}, "bottom": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Create an Excel_Range for a range of cells."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "for_columns", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet": {"lazy": false}, "left": {"lazy": false}, "right": {"lazy": false, "default": "left"}},"aliases": [],"icon": "data_input","description": "Create an Excel_Range for a set of columns."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "for_rows", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet": {"lazy": false}, "top": {"lazy": false}, "bottom": {"lazy": false, "default": "top"}},"aliases": [],"icon": "data_input","description": "Create an Excel_Range for a set of rows."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "column_name_for_index", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"icon": "data_input","description": "Convert an index (1-based) to a column name"},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "column_index_for_name", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "data_input","description": "Convert a column name to an index (1-based)"},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "sheet_name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the name of the sheet."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "top_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the index (1-based) of the top row of the range. Returns `Nothing` if referring to a complete column."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "bottom_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the index (1-based) of the bottom row of the range. Returns `Nothing` if referring to a complete column."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "left_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the index (1-based) of the left column of the range. Returns `Nothing` if referring to a complete row."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "right_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the index (1-based) of the right column of the range. Returns `Nothing` if referring to a complete row."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "is_single_cell", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Is the Excel_Range referring to a single cell"},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "address", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the address to this in A1 format."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "Excel_Range", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Displays the Excel_Range."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "", "name": "validate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"validation": {"lazy": false}, "error_message": {"lazy": true}, "wrapped": {"lazy": true}},"aliases": [],"description": "Wrapper for validation of a value prior to execution."},
{"module": "Standard.Table.Excel.Excel_Range", "type": "", "name": "excel_2007_column_limit", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Range", "type": "", "name": "excel_2007_row_limit", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Excel_Workbook", "arguments": {"excel_connection_resource_ref": {"lazy": false, "type": "Ref (Managed_Resource ReadOnlyExcelConnection)", "checked": true}, "file": {"lazy": false, "type": "File|Temporary_File|Nothing", "checked": true}, "internal_xls_format": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Creates an Excel_Workbook connection."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File | Temporary_File", "checked": true}, "xls_format": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Load a File as a connection to an Excel workbook."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "from_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"stream": {"lazy": false}, "xls_format": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "file": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Load an Input_Stream as a connection to an Excel workbook."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "xls_format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Is the Workbook in the old XLS format?"},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "databases", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of databases (or catalogs) for the connection."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "database", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current file."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "set_database", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"database": {"lazy": false, "type": "Text | File", "checked": true}},"aliases": [],"icon": "data_input","description": "Returns a new Workbook with the specified file."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "schemas", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "schema", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "set_schema", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Workbook with the specified schema set as default."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "sheet_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the number of sheets."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "sheet_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the names of all the sheets."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "named_ranges_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the number of named ranges."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "named_ranges", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the names of all the named ranges."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "table_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Gets a list of the table types."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "tables", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name_like": {"lazy": false, "default": "Nothing"}, "database": {"lazy": false, "default": "self.database"}, "schema": {"lazy": false, "default": "self.schema"}, "types": {"lazy": false, "default": "Nothing"}, "all_fields": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a materialised Table of all the matching views and tables."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "query", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "Text", "checked": true}, "alias": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "Headers.Detect_Headers"}},"aliases": [],"icon": "data_input","description": "Read a range into a Table."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"query": {"lazy": false, "type": "Text | Excel_Range | Integer", "checked": true}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["get", "import", "load", "open", "range", "sheet", "worksheet"],"group": "Standard.Base.Input","icon": "data_input","description": "Read a range into a Table."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "read_section", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"section": {"lazy": false}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Read an Excel_Section from the Workbook"},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "sheet", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text | Integer", "checked": true}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "Headers.Detect_Headers"}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Reads a worksheet from the workbook."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "close", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Closes the workbook, releasing any resources it holds.  This method may be used to release the underlying workbook file, e.g. to be able to delete it.  After this method is called, this instance is not usable any more - any operation on it will throw an `Illegal_State` error."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a simple text description of the workbook."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a short human-readable text representation of the workbook."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a JS object representation for use in visualizations."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "with_java_workbook", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Excel_Workbook", "name": "read_many", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"sheet_names": {"lazy": false, "type": "Vector", "checked": true, "default": "self.sheet_names"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "return": {"lazy": false, "default": "..As_Merged_Table"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Reads one or more sheets into a Table."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Return_As", "name": "Table_Of_Tables", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Return_As", "arguments": {},"aliases": [],"description": "DEPRECATED Each sheet is returned as a row.  This option is deprecated, because it has been renamed. Please use the equivalent `With_New_Column` instead."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Return_As", "name": "Merged_Table", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Return_As", "arguments": {"columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true, "default": "Columns_To_Keep.In_Any"}, "match": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "Match_Columns.By_Name"}},"aliases": [],"description": "DEPRECATED All sheets are merged into a single table. A union operation is performed.  This option is deprecated, because it has been renamed. Please use the equivalent `As_Merged_Table` instead."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "close_connection", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"c": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "build_sheet_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"workbook": {"lazy": false, "type": "Excel_Workbook", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "_resolve_return_as_compatibility", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"return": {"lazy": false}},"aliases": [],"description": "A helper method that ensures that we can take the new `Return_As_Table` type as well as the deprecated `Return_As` type, together with autoscoping. With autoscoping, the `As_Merged_Table` constructor is ambiguous, so plain autoscoping would not work and we do some workarounds to make it work. In case of the ambiguity, the new-style `Return_As_Table.As_Merged_Table` variant is preferred."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "_query_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"wb": {"lazy": false, "type": "Excel_Workbook", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Creates a query widget for the `read` method."},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "_read_sheets", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector (Pair Text (Table | Nothing))", "arguments": {"workbook": {"lazy": false, "type": "Excel_Workbook", "checked": true}, "sheet_names": {"lazy": false, "type": "Vector Text", "checked": true}, "headers": {"lazy": false, "type": "Headers", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "", "name": "_sheet_names_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"sheet_names": {"lazy": false, "type": "Vector Text", "checked": true}, "loaded_tables": {"lazy": false, "type": "Vector Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Excel.Excel_Workbook", "type": "Read_Many_As_Merged_Table_Strategy", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Excel_Workbook", "checked": true}},"aliases": [],"description": "Loads all sheets in the Excel workbook and merges them into a single table."},
{"module": "Standard.Table.Extensions.Column_Vector_Extensions", "type": "Vector", "name": "to_column", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "default": "\"Vector\""}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Creates a column from a `Vector` of values."},
{"module": "Standard.Table.Extensions.Column_Vector_Extensions", "type": "Range", "name": "to_column", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "default": "\"Range\""}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Creates a column from a `Range` of values."},
{"module": "Standard.Table.Extensions.Column_Vector_Extensions", "type": "Date_Range", "name": "to_column", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "default": "\"Date_Range\""}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Creates a column from a `Date_Range` of values."},
{"module": "Standard.Table.Extensions.Excel_Extensions", "type": "Date", "name": "from_excel", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"excel_date": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"group": "Standard.Base.Conversions","icon": "date_and_time","description": "Converts an Excel date to a `Date`."},
{"module": "Standard.Table.Extensions.Excel_Extensions", "type": "Date_Time", "name": "from_excel", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"excel_date": {"lazy": false, "type": "Number", "checked": true}},"aliases": [],"group": "Standard.Base.Conversions","icon": "date_and_time","description": "Converts an Excel date time to a `Date_Time`."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "Vector", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fields": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `Vector` into a `Table`."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "Range", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Range\""}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `Range` into a `Table`."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "Date_Range", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "self.default_column_name"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `Date_Range` into a `Table`."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "JS_Object", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fields": {"lazy": false, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `JS_Object` into a `Table`."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "XML_Document", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `XML_Document` into a `Table`."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "XML_Element", "name": "to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts this `XML_Document` into a `Table`."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "Table", "name": "from_objects", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "fields": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Constants","icon": "data_input","description": "Converts an object or a Vector of object into a Table, by looking up the requested fields from each item."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "Text", "name": "parse_to_table", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false, "type": "Text | Regex", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "parse_values": {"lazy": false, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Converts a Text into a Table using a regular expression pattern.  Each match becomes a row in the table.  If there are no marked groups, there will be a single column with the whole content of the match. Otherwise, each group becomes a column (with the column name taken from the group name if the group is named in the regex).  For details on Enso\u0027s Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions).","remarks": "? Column Names  If there are no marked groups, the new column will be named `Column`. If the marked groups are named, the names will be used otherwise the column will be named `Column \u003cN\u003e` where `N` is the number of the marked group. (Group 0 is not included.)"},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "JSON_Format", "name": "write_table", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}, "table": {"lazy": false}, "on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Implements the `Table.write` for this `JSON_File`."},
{"module": "Standard.Table.Extensions.Table_Conversions", "type": "", "name": "append_to_json_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "table": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Handles appending to a file containing a JSON table by removing the closing bracket and appending to it."},
{"module": "Standard.Table.Internal.Type_Refinements.Column_Refinements", "type": "", "name": "refine_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Type_Refinements.Column_Refinements", "type": "", "name": "is_single_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Column", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Integer", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Float", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Text", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Boolean", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Date", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Time_Of_Day", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Of_Day", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Date_Time", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Time", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Column_Table_Conversions", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Integer", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Float", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Text", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Boolean", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Boolean", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Date", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Time_Of_Day", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Of_Day", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Date_Time", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Time", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Single_Value_Column_Conversions", "type": "Decimal", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Decimal", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "This conversion is internal and should never be exported."},
{"module": "Standard.Table.Internal.Type_Refinements.Table_Refinements", "type": "", "name": "refine_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Type_Refinements.Table_Refinements", "type": "", "name": "is_single_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Group_Number", "type": "", "name": "add_group_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "grouping_method": {"lazy": false, "type": "Grouping_Method", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}, "from": {"lazy": false, "type": "Integer", "checked": true}, "step": {"lazy": false, "type": "Integer", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Group_Number", "type": "", "name": "_prepare_group_by", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "problem_builder": {"lazy": false}, "group_by": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Group_Number", "type": "", "name": "_prepare_ordering", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "problem_builder": {"lazy": false}, "order_by": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Group_Number", "type": "", "name": "_illegal_if", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"b": {"lazy": false}, "msg": {"lazy": false}, "cont": {"lazy": true}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Row_Number", "type": "", "name": "add_row_number", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "name": {"lazy": false}, "from": {"lazy": false}, "step": {"lazy": false}, "group_by": {"lazy": false}, "order_by": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Row_Number", "type": "", "name": "create_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "name": {"lazy": false}, "from": {"lazy": false}, "step": {"lazy": false}, "grouping_columns": {"lazy": false}, "ordering": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Row_Number", "type": "", "name": "rename_columns_if_needed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "name": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "build_table_from_columns": {"lazy": false}},"aliases": [],"description": "If the table already contains a column called `name` it will be renamed to a unique name, so that a new column with this name can be added."},
{"module": "Standard.Table.Internal.Add_Row_Number", "type": "", "name": "nth_index", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "step": {"lazy": false}, "n": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Row_Number", "type": "", "name": "make_range_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "start": {"lazy": false}, "step": {"lazy": false}, "length": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Add_Running", "type": "", "name": "add_running", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "Statistic.Count"}, "of": {"lazy": false, "type": "Text|Integer", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "group_by": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": []},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "Validated_Aggregate_Columns", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Validated_Aggregate_Columns", "arguments": {"key_columns": {"lazy": false, "type": "Vector Column", "checked": true}, "valid_columns": {"lazy": false, "type": "Vector (Pair Text Aggregate_Column)", "checked": true}, "problems": {"lazy": false, "type": "Vector Any", "checked": true}, "old_style": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "Internal_Order_By_Column_Reference", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Order_By_Column_Reference", "arguments": {"column": {"lazy": false}, "direction": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "Internal_Missing_Column_Error", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Internal_Missing_Column_Error", "arguments": {},"aliases": [],"description": "A marker for missing columns during resolution."},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "", "name": "prepare_aggregate_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"naming_helper": {"lazy": false}, "group_by": {"lazy": false}, "aggregates": {"lazy": false}, "table": {"lazy": false}, "error_on_missing_columns": {"lazy": false}},"aliases": [],"description": "Prepares an aggregation input for further processing: - resolves the column descriptors, reporting any issues, - ensures that the output names are unique, - finds the key columns."},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "", "name": "default_aggregate_column_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregate_column": {"lazy": false}, "include_column": {"lazy": false, "default": "True"}},"aliases": [],"description": "Defines the default name of an `Aggregate_Column`.  To be used when `as` is `Nothing`.  Assumes that the `Aggregate_Column` is resolved. You may need to transform it with `resolve_aggregate` first."},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "", "name": "all_same_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"aggregates": {"lazy": false}},"aliases": [],"description": "Utility function to check if all aggregates are operating on the same source column."},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "", "name": "resolve_aggregate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "problem_builder": {"lazy": false}, "aggregate_column": {"lazy": false, "type": "Aggregate_Column", "checked": true}},"aliases": [],"description": "Returns a copy of this aggregate where all column descriptors (names, indices or column references potentially from a different table) are replaced with column references from the provided table.  It also verifies that the columns have the right types.  `Sort_Column`s are replaced with column references of matched columns coming from the provided table.  This preprocess step is required by some helper function, to avoid having to pass the table reference and resolve the column descriptors all the time.  If some columns cannot be resolved, `Nothing` is returned. Any issues are reported to the `Problem_Builder`."},
{"module": "Standard.Table.Internal.Aggregate_Column_Helper", "type": "", "name": "java_aggregator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "column": {"lazy": false}},"aliases": [],"description": "Creates a Java Aggregator for the Aggregate_Column"},
{"module": "Standard.Table.Internal.Cast_Helpers", "type": "", "name": "check_cast_compatibility", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_type": {"lazy": false}, "target_type": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if one type can be cast into another and returns a dataflow error explaining the situation if not."},
{"module": "Standard.Table.Internal.Column_Format", "type": "", "name": "make_value_formatter_for_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "locale": {"lazy": false}},"aliases": [],"description": "Create a formatter for the specified `Value_Type`."},
{"module": "Standard.Table.Internal.Column_Format", "type": "", "name": "make_value_formatter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"locale": {"lazy": false}, "format": {"lazy": false, "type": "Text | Nothing", "checked": true}},"aliases": [],"description": "Create a formatter for the given format string. The `value` parameter has to have a `format` method that takes a format and locale."},
{"module": "Standard.Table.Internal.Column_Format", "type": "", "name": "make_boolean_formatter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Text | Nothing", "checked": true}},"aliases": [],"description": "Create a `Boolean` formatter that takes the format string as the second parameter."},
{"module": "Standard.Table.Internal.Column_Format", "type": "", "name": "make_datetime_formatter", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"locale_override": {"lazy": false, "type": "Locale", "checked": true}, "format": {"lazy": false, "type": "Text | Date_Time_Formatter | Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Column_Format", "type": "", "name": "handle_illegal_argument_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format_string": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Rethrow a Java IllegalArgumentException as an Illegal_Argument."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Naming_Helper", "arguments": {"naming_properties": {"lazy": false}, "generated_name_properties": {"lazy": false, "default": "naming_properties"}},"aliases": []},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "in_memory", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A `Column_Naming_Helper` for the in-memory backend - having no length limits."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "has_length_limit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "create_unique_name_strategy", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a `Unique_Name_Strategy` that will generate names keeping the column naming limitations in mind."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "ensure_name_is_valid", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the name is valid and runs the action, otherwise raises an error."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "validate_many_column_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"names": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the names are valid and runs the action, otherwise raises an error."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "sanitize_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Ensures that the name does not contain the null character."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "check_ambiguity", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"existing_names": {"lazy": false}, "new_name": {"lazy": false}, "continuation": {"lazy": true}},"aliases": [],"description": "Checks if the new name is unambiguously different from the existing ones. In particular, it is used for case-insensitive backends to ensure that there are no two columns that while not equal, are equal ignoring case - which could introduce problems."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "binary_operation_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"operation_name": {"lazy": false}, "left": {"lazy": false}, "right": {"lazy": false}},"aliases": [],"description": "Generates a column name for a binary operation."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "function_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"function_name": {"lazy": false}, "arguments": {"lazy": false}},"aliases": [],"description": "Generates a column name for a function-like transformation."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "to_expression_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Serializes a given object into an expression-like text approximation. Note that it may not necessarily be a valid expression, it just tries to be similar to one. In many cases it will be valid, but it is not a guarantee.  For columns, it will return its name wrapped in `[` and `]`. For other objects, it will return its pretty-printed representation."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "concat", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"texts": {"lazy": false}, "add_spaces": {"lazy": false, "default": "True"}},"aliases": [],"description": "Concatenates a vector of texts that are meant to make a single column name, ensuring it will fit within the limit.  It may truncate the whole text or also truncate individual parts to try to display every part."},
{"module": "Standard.Table.Internal.Column_Naming_Helper", "type": "Column_Naming_Helper", "name": "make_temp_column_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"existing_column_names": {"lazy": false}},"aliases": [],"description": "Create a column called \"temp\", possibly renamed."},
{"module": "Standard.Table.Internal.Column_Ops", "type": "", "name": "map_over_storage", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_column": {"lazy": false}, "function": {"lazy": false}, "builder": {"lazy": false}, "skip_nothing": {"lazy": false, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Map a text-returning function over the column values, using Storage directly. The output column has the same name as the input."},
{"module": "Standard.Table.Internal.Column_Ops", "type": "", "name": "map_2_over_storage", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_column_0": {"lazy": false}, "input_column_1": {"lazy": false}, "function": {"lazy": false}, "builder": {"lazy": false}, "skip_nothing": {"lazy": false, "default": "True"}},"aliases": [],"description": "Map a text-returning function over the values of two columns, using Storage directly. The output column has the same name as the first input column. `skip_nothing` applies to the first input to the function, not both inputs."},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Constant_Column", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Number", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Number."},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Time", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Date_Time."},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Date."},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Time_Of_Day", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Time_Of_Day."},
{"module": "Standard.Table.Internal.Constant_Column", "type": "Constant_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Boolean."},
{"module": "Standard.Table.Internal.Date_Time_Helpers", "type": "", "name": "align_period_with_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Date_Time_Helpers", "type": "", "name": "make_date_part_function", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "period": {"lazy": false}, "make_unary_op": {"lazy": false}, "naming_helper": {"lazy": false}},"aliases": [],"description": "Common logic for `Column.date_part`."},
{"module": "Standard.Table.Internal.Date_Time_Helpers", "type": "", "name": "make_period_selector_for_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "Detected_Headers", "name": "Existing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Detected_Headers", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "Represents the headers found in the file."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "Detected_Headers", "name": "None", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Detected_Headers", "arguments": {"column_count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the file exists but no headers have been found, so only positional column matching is possible.  Note that the file may still contain rows that have less or more columns than specified here. This column count is only based on the first row."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "Detected_File_Metadata", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Detected_File_Metadata", "arguments": {"headers": {"lazy": false, "type": "Detected_Headers | Nothing", "checked": true}, "line_separator": {"lazy": false, "type": "Text|Nothing", "checked": true}, "ends_with_newline": {"lazy": false, "type": "Boolean", "checked": true}, "has_any_content": {"lazy": false, "type": "Boolean", "checked": true}, "detected_encoding": {"lazy": false, "type": "Encoding", "checked": true}},"aliases": [],"description": "An internal type representing metadata describing the format of a specific Delimited file."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "read_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false}, "file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Reads a delimited file according to the provided format."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "read_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "format": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "read_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false}, "stream": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "max_columns": {"lazy": false, "default": "default_max_columns"}, "related_file": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Reads an input stream according to the provided format."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "read_from_reader", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false}, "java_reader": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "max_columns": {"lazy": false, "default": "4096"}},"aliases": [],"description": "Reads data from the provided `Reader` according to the provided format.  The `encoding` parameter is ignored, instead the provided reader should handle any necessary decoding."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "prepare_reader", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"format": {"lazy": false, "type": "Delimited_Format", "checked": true}, "max_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "java_problem_aggregator": {"lazy": false}, "newline_override": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "detect_metadata", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "format": {"lazy": false}},"aliases": [],"description": "Reads the beginning of the file to detect the existing headers and column count."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "newline_at_eof", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "encoding": {"lazy": false}},"aliases": [],"description": "Checks if the file has a newline at the end.  Returns the newline sequence if found, `Nothing` otherwise."},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "handle_parsing_failure", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "handle_parsing_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "handle_io_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"related_file": {"lazy": false}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Reader", "type": "", "name": "default_max_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "write_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}, "file": {"lazy": false, "type": "Writable_File", "checked": true}, "on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Writes a delimited file according to the provided format."},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "append_to_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}, "file": {"lazy": false, "type": "Writable_File", "checked": true}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Handles appending to an existing file, ensuring that the columns are matched against the ones already in the file.  If the file does not exist or is empty, it acts like a regular overwrite."},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "append_to_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}, "file": {"lazy": false, "type": "File", "checked": true}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "write_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}},"aliases": [],"description": "Returns a Text value representing the table in the delimited format."},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "write_to_stream", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}, "stream": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "related_file": {"lazy": false, "default": "Nothing"}, "separator_override": {"lazy": false, "default": "Nothing"}, "needs_leading_newline": {"lazy": false, "default": "False"}},"aliases": [],"description": "Writes to an output stream according to the provided format."},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "write_to_writer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "format": {"lazy": false}, "java_writer": {"lazy": false}, "separator_override": {"lazy": false, "default": "Nothing"}, "needs_leading_newline": {"lazy": false, "default": "False"}},"aliases": [],"description": "Writes data to the provided `Writer` according to the provided format.  The `encoding` parameter is ignored, instead the provided writer should handle any necessary encoding."},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "should_write_headers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"headers": {"lazy": false, "type": "Headers", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Delimited_Writer", "type": "", "name": "default_line_separator_for_writing", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default line separator used for newly written delimited files, if no specific separator has been set."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "display_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "add_row_index": {"lazy": false, "type": "Boolean", "checked": true}, "max_rows_to_show": {"lazy": false, "type": "Integer", "checked": true}, "all_rows_count": {"lazy": false, "type": "Integer", "checked": true}, "format_terminal": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Renders an ASCII-art representation for a Table from a dataframe that contains a fragment of the underlying data and count of all rows."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "print_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"header": {"lazy": false}, "rows": {"lazy": false}, "indices_count": {"lazy": false}, "format_term": {"lazy": false}},"aliases": [],"description": "A helper function for creating an ASCII-art representation of tabular data."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "pad", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"txt": {"lazy": false}, "len": {"lazy": false}},"aliases": [],"description": "Ensures that the `txt` has at least `len` characters by appending spaces at the end."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "ansi_bold", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"enabled": {"lazy": false}, "txt": {"lazy": false}},"aliases": [],"description": "Adds ANSI bold escape sequences to text if the feature is enabled."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "_get_item_as_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"storage": {"lazy": false}, "ix": {"lazy": false}},"aliases": [],"description": "Gets a textual representation of the item at position `ix` in `storage`."},
{"module": "Standard.Table.Internal.Display_Helpers", "type": "", "name": "_normalize_text_for_display", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "Ensures that the text can be safely displayed in a terminal.  If the string contains special characters, it will be wrapped in quotes and the characters escaped. Otherwise, the string is returned as-is."},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "make_java_headers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"headers": {"lazy": false, "type": "Headers", "checked": true}},"aliases": [],"description": "Convert Headers to the correct HeaderBehavior"},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "handle_reader", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "reader": {"lazy": false}},"aliases": [],"description": "Handle and map the Java errors when reading an Excel file"},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "read_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "section": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "xls_format": {"lazy": false, "default": "False"}},"aliases": [],"description": "Reads an input Excel file according to the provided section."},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "handle_bad_format", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "A helper that handles the Java exceptions reported when a malformed XLS file is opened."},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "handle_bad_format_with_handler", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"handler": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "A helper that handles the Java exceptions reported when a malformed XLS file is opened."},
{"module": "Standard.Table.Internal.Excel_Reader", "type": "", "name": "handle_invalid_location", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "A helper that handles the Java exceptions reported when a sheet, range or address is invalid."},
{"module": "Standard.Table.Internal.Excel_Section", "type": "Excel_Section", "name": "Worksheet", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Excel_Section", "arguments": {"sheet": {"lazy": false, "type": "Integer|Text", "checked": true, "default": "1"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "Headers.Detect_Headers"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "row_limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": [],"description": "Gets the data from a specific sheet."},
{"module": "Standard.Table.Internal.Excel_Section", "type": "Excel_Section", "name": "Cell_Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Excel_Section", "arguments": {"address": {"lazy": false, "type": "Text|Excel_Range", "checked": true}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "Headers.Detect_Headers"}, "skip_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "row_limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": [],"description": "Gets a specific range (taking either a defined name or external style address) from the workbook. If it is a single cell, it will be treated as the top left cell and will expand right and down to cover the connected cells."},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "make_java_existing_file_behavior", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"on_existing_file": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "write_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}, "table": {"lazy": false, "type": "Table", "checked": true}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true}, "section": {"lazy": false, "type": "Excel_Section", "checked": true}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "xls_format": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Writes a Table to an Excel file."},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "write_local_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "table": {"lazy": false}, "on_existing_file": {"lazy": false}, "section": {"lazy": false}, "match_columns": {"lazy": false}, "xls_format": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "find_temp_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_file": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "find_bak_file", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_file": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "prepare_file_modification_strategy", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "section": {"lazy": false}, "on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "handle_writer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"writer": {"lazy": true}},"aliases": [],"description": "Handle and map the Java errors when writing an Excel file"},
{"module": "Standard.Table.Internal.Excel_Writer", "type": "", "name": "make_java_existing_data_mode", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"on_existing_file": {"lazy": false}, "match_columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Expand_Objects_Helpers", "type": "", "name": "expand_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "column": {"lazy": false, "type": "Text | Integer", "checked": true}, "fields": {"lazy": false, "type": "(Vector Text) | Nothing", "checked": true, "default": "Nothing"}, "prefix": {"lazy": false, "type": "Prefix_Name", "checked": true, "default": "Prefix_Name.Column_Name"}},"aliases": []},
{"module": "Standard.Table.Internal.Expand_Objects_Helpers", "type": "", "name": "expand_to_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "column": {"lazy": false, "type": "Text | Integer", "checked": true}, "at_least_one_row": {"lazy": false, "default": "False"}, "sequences_only": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Conversions","description": "Expand aggregate values in a column to separate rows.  For each value in the specified column, if it is an aggregate (`Vector`, `Range`, etc.), expand it to multiple rows, duplicating the values in the other columns. \n\n The following aggregate values are supported: - `Array` - `Vector` - `List` - `Range` - `Date_Range` - `Pair  Any other values are treated as non-aggregate values, and their rows are kept unchanged.  In in-memory tables, it is permitted to mix values of different types."},
{"module": "Standard.Table.Internal.Expand_Objects_Helpers", "type": "", "name": "create_table_from_objects", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"base_value": {"lazy": false, "type": "Convertible_To_Rows", "checked": true}, "fields": {"lazy": false, "type": "Vector | Nothing", "checked": true}, "treat_dictionary_as_sequence": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": []},
{"module": "Standard.Table.Internal.Expand_Objects_Helpers", "type": "", "name": "_fill_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"builder": {"lazy": false}, "size": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "fan_out_to_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "function": {"lazy": false}, "column_count": {"lazy": false}, "column_builder": {"lazy": false, "default": "make_string_builder"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"description": "Transform a table by transforming a column into a set of columns. Takes a function that maps a single element of the input column to a vector of output values. The original column is replaced by the new columns."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "fan_out_to_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false, "type": "Text", "checked": true}, "function": {"lazy": false}, "column_names": {"lazy": false, "default": "[input_column_id]"}, "at_least_one_row": {"lazy": false, "default": "False"}, "column_builder": {"lazy": false, "default": "make_string_builder"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"description": "Transform a column by applying the given function to the values in the column. The function produces multiple outputs, so each row is duplicated, with each row getting a distinct output value in place of the original input value. The other column values are just duplicated."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "fan_out_to_rows_and_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "function": {"lazy": false}, "column_names": {"lazy": false}, "at_least_one_row": {"lazy": false, "default": "False"}, "column_builder": {"lazy": false, "default": "make_string_builder"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"description": "Transform a column by applying the given function to the values in the column. The function returns a `Vector` of `Vectors`. Each inner vector turns into multiple new columns in a single row. Each inner vector within the outer vector produces an output row, so each row is duplicated, with each row getting a distinct set of output values in place of the original input value. The other column values are just duplicated.","errors": ""},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "fan_out_to_rows_and_columns_fixed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_storage": {"lazy": false}, "function": {"lazy": false}, "at_least_one_row": {"lazy": false, "type": "Boolean", "checked": true}, "column_names": {"lazy": false, "type": "Vector", "checked": true}, "column_builder": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Inner method for fan_out_to_rows_and_columns where the column names are fixed."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "fan_out_to_rows_and_columns_dynamic", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_storage": {"lazy": false}, "function": {"lazy": false}, "at_least_one_row": {"lazy": false}, "column_names_for_row": {"lazy": false}, "column_builder": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Inner method for fan_out_to_rows_and_columns where the column names are determined by each row."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "map_columns_to_multiple", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input_column": {"lazy": false}, "function": {"lazy": false}, "column_count": {"lazy": false}, "column_builder": {"lazy": false, "default": "make_string_builder"}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Map a multi-valued function over a column and return the results as set of output columns.  Returns a Pair of a Vector of Columns and a Vector of problems."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "rename_new_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "removed_column_name": {"lazy": false}, "columns": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Rename a vector of columns to be unique when added to a table."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "replace_column_with_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "old_column": {"lazy": false}, "new_columns": {"lazy": false}},"aliases": [],"description": "Replace a single column in a table with new columns. Does not ensure names are unique; that must be done before calling this."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "maximum", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vec": {"lazy": false}},"aliases": [],"description": "Return the maximum value of the vector. Throws Empty_Error if the vector is empty."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "repeat_each", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"n": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Repeat a computation n times."},
{"module": "Standard.Table.Internal.Fan_Out", "type": "", "name": "uniform_length", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target_length": {"lazy": false}, "v": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Pad or truncate a vector to be a specified length; if altered, report it as a Column_Count_Mismatch warning."},
{"module": "Standard.Table.Internal.Filter_Condition_Helpers", "type": "", "name": "make_filter_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"source_column": {"lazy": false}, "filter_condition": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "A helper function gathering the common logic that generates a boolean mask from a given source column and a filter condition. It contains logic common for all backends.  It also performs validation and will throw errors if unexpected column types are encountered."},
{"module": "Standard.Table.Internal.Filter_Condition_Helpers", "type": "", "name": "warn_on_nothing_in_comparison", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"filter_condition": {"lazy": false}, "value": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Attach a warning if the provided value is `Nothing`."},
{"module": "Standard.Table.Internal.Filter_Condition_Helpers", "type": "", "name": "warn_on_nothing_in_comparison_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"filter_condition": {"lazy": false}, "values": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Attach a warning if the provided value is a `Vector` that contains `Nothing`."},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_builder_for_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "initial_size": {"lazy": false}, "java_problem_aggregator": {"lazy": false, "default": "Missing_Argument.throw \"java_problem_aggregator\""}},"aliases": [],"description": "Note: Value_Type must have an exact representation in Java."},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_bool_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"initial_size": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_double_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"initial_size": {"lazy": false}, "java_problem_aggregator": {"lazy": false, "default": "Missing_Argument.throw \"java_problem_aggregator\""}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_long_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"initial_size": {"lazy": false}, "bits": {"lazy": false}, "java_problem_aggregator": {"lazy": false, "default": "Missing_Argument.throw \"java_problem_aggregator\""}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_string_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"initial_size": {"lazy": false}, "value_type": {"lazy": false, "default": "Value_Type.Char"}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Exports", "type": "", "name": "make_inferred_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"initial_size": {"lazy": false}, "java_problem_aggregator": {"lazy": false, "default": "Missing_Argument.throw \"java_problem_aggregator\""}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Problems", "type": "", "name": "translate_problem", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"p": {"lazy": false}},"aliases": [],"description": "Convert a Java problem into its Enso equivalent."},
{"module": "Standard.Table.Internal.Java_Problems", "type": "", "name": "unpack_problem_summary", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_summary": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Java_Problems", "type": "", "name": "with_problem_aggregator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "f": {"lazy": false}},"aliases": [],"description": "This is the new preferred way of running Java methods that may report problems."},
{"module": "Standard.Table.Internal.Java_Problems", "type": "", "name": "with_map_operation_problem_aggregator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"location": {"lazy": false, "type": "Text | Nothing", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "f": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Join_Helpers", "type": "Join_Condition_Resolver", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Join_Condition_Resolver", "arguments": {"left_at": {"lazy": false}, "right_at": {"lazy": false}, "make_equals": {"lazy": false}, "make_equals_ignore_case": {"lazy": false}, "make_between": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Join_Helpers", "type": "Join_Condition_Resolver", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"conditions": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Resolves the columns in the provided join conditions, handling any errors and capturing redundant columns.  Resolution errors are aggregated from all conditions (all found errors are reported instead of only the first one). If there were any errors, `Nothing` will be returned as the conditions indicating that state. Besides, a list of redundant columns from equality joins is aggregated which can be used to deduplicate them."},
{"module": "Standard.Table.Internal.Join_Helpers", "type": "Join_Condition_Resolution", "name": "Result", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Join_Condition_Resolution", "arguments": {"conditions": {"lazy": false, "type": "Vector Any", "checked": true}, "redundant_column_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Join_Kind_Cross", "type": "Join_Kind_Cross", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind_Cross", "arguments": {},"aliases": [],"description": "Cartesian product: each row of the left table is paired with each row of the right table."},
{"module": "Standard.Table.Internal.Join_Kind_Cross", "type": "Join_Kind_Cross", "name": "to_sql", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the SQL representation of this join kind as text."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "Lookup_Column", "name": "Key_Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Lookup_Column", "arguments": {"base_column": {"lazy": false}, "lookup_column": {"lazy": false}},"aliases": [],"description": "A key column used to correlate rows between the two tables."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "Lookup_Column", "name": "Keep_Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Lookup_Column", "arguments": {"base_column": {"lazy": false}},"aliases": [],"description": "A column from the base table that is kept as-is."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "Lookup_Column", "name": "Replace_Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Lookup_Column", "arguments": {"base_column": {"lazy": false}, "lookup_column": {"lazy": false}, "common_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "A column that is present in both tables. If the row is matched with a row from the lookup table, the value from the lookup table is used; otherwise the value from the base table is kept."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "Lookup_Column", "name": "Add_Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Lookup_Column", "arguments": {"lookup_column": {"lazy": false}},"aliases": [],"description": "A new column added from the lookup table. If the row has no match, it will be `Nothing`."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "Lookup_Column", "name": "is_key", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "", "name": "prepare_columns_for_lookup", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_table": {"lazy": false}, "lookup_table": {"lazy": false}, "key_columns_selector": {"lazy": false}, "add_new_columns": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Checks if `key_columns` are present in both tables and returns settings indicating which columns will be updated and which will be added.  It also reports any errors or warnings related to selecting these columns."},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "", "name": "merge_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_column": {"lazy": false}, "lookup_column": {"lazy": false}, "allow_unmatched_rows": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Lookup_Helpers", "type": "", "name": "make_java_lookup_column_description", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"lookup_column": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "Column_Set", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Set", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "column_indices": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "Column_Set", "name": "resolve_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"all_tables": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "match_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}, "matching_mode": {"lazy": false}, "columns_to_keep": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "A helper that encapsulates the common backend-agnostic logic of matching columns in `Table.union`.  It matches columns according to the provided matching settings and returns a list of column sets to be merged.  Each column set consists of a name of the resulting column and a list of indices for columns in corresponding tables that will be merged to form this result column. The first column index corresponds to the first table in the input and so on. If no column corresponding to a given column set was matched in a particular table, its entry will be contain `Nothing` instead.  The column sets are returned in the order in which the corresponding result columns should appear in the resulting table.  The method assumes at least one table is provided in its input."},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "_match_columns_by_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}, "columns_to_keep": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "_build_column_set_by_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}, "output_column_names": {"lazy": false}},"aliases": [],"description": "Common logic for computing the final result of by-name matching. Once the set of output column names is determined, we compute the `Column_Set` by finding the corresponding column indices in each table (if found)."},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "_match_columns_by_position", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}, "columns_to_keep": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "_find_column_counts", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}},"aliases": [],"description": "Returns a map indicating in how many tables did a column with a given name appear."},
{"module": "Standard.Table.Internal.Match_Columns_Helpers", "type": "", "name": "_distinct_columns_in_appearance_order", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false}},"aliases": [],"description": "Returns a list of distinct column names, in the order of first appearance, starting from the first table."},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key", "name": "Key", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unordered_Multi_Value_Key", "arguments": {"hash_code": {"lazy": false, "type": "Integer", "checked": true}, "columns": {"lazy": false, "type": "Vector Column", "checked": true}, "row_index": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key", "name": "from_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false}, "row_index": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key", "name": "validate_grouping_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Checks which column may cause problems in the grouping due to imprecise floating-point values."},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unordered_Multi_Value_Key_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Unordered_Multi_Value_Key_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Ordered_Multi_Value_Key", "name": "Key", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ordered_Multi_Value_Key", "arguments": {"columns": {"lazy": false, "type": "Vector Column", "checked": true}, "flip_direction": {"lazy": false, "type": "Vector Boolean", "checked": true}, "row_index": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Ordered_Multi_Value_Key", "name": "from_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false}, "flip_directions": {"lazy": false}, "row_index": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Ordered_Multi_Value_Key_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ordered_Multi_Value_Key_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Ordered_Multi_Value_Key_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Ordered_Multi_Value_Key_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Unordered_Multi_Value_Key", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Multi_Value_Key", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Ordered_Multi_Value_Key", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Naming_Properties", "arguments": {},"aliases": [],"description": "An interface for a helper managing limitations of entity names.  It extends the API of the Java counterpart `NamingProperties`."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "encoded_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Returns the size of the string in the target encoding. It may throw a panic if `size_limit` is `Nothing`."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "truncate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "size": {"lazy": false}},"aliases": [],"description": "Truncates the string to the given size in the target encoding. It may throw a panic if `size_limit` is `Nothing`."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "size_limit", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the maximum size of an entity name in the target encoding, or `Nothing` if there is no limit."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "is_case_sensitive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies if names are case sensitive. If not, names that are equal case insensitively, need to be deduplicated."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Naming_Properties", "name": "raise_name_too_long_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity_kind": {"lazy": false}, "name": {"lazy": false}},"aliases": [],"description": "Raises a `Name_Too_Long` error for the given name. The implementation may customize the extra message appended to the error explaining the limitations."},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Unlimited_Naming_Properties", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unlimited_Naming_Properties", "arguments": {"is_case_sensitive": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Unlimited_Naming_Properties", "name": "encoded_size", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Unlimited_Naming_Properties", "name": "truncate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "size": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Unlimited_Naming_Properties", "name": "size_limit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Unlimited_Naming_Properties", "name": "raise_name_too_long_error", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity_kind": {"lazy": false}, "name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Enso_Length_Limited_Naming_Properties", "name": "Instance", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Enso_Length_Limited_Naming_Properties", "arguments": {"limit": {"lazy": false, "type": "Integer", "checked": true}, "is_case_sensitive": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Enso_Length_Limited_Naming_Properties", "name": "encoded_size", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Enso_Length_Limited_Naming_Properties", "name": "truncate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "size": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Enso_Length_Limited_Naming_Properties", "name": "size_limit", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "Enso_Length_Limited_Naming_Properties", "name": "raise_name_too_long_error", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"entity_kind": {"lazy": false}, "name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Naming_Properties", "type": "", "name": "recover_panics", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "A helper method that recovers panics thrown by `Naming_Properties`. The `Naming_Properties` must throw panics and not dataflow errors to comply with the Java `NamingProperties` interface (handling dataflow errors would complicate the usage). This method allows to recover such panics and turn them into dataflow errors."},
{"module": "Standard.Table.Internal.Offset_Helper", "type": "", "name": "table_offset_impl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "columns": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "[]"}, "n": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}, "fillWith": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}, "group_by": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": []},
{"module": "Standard.Table.Internal.Offset_Helper", "type": "", "name": "column_offset_impl", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}, "n": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}, "fillWith": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}},"aliases": []},
{"module": "Standard.Table.Internal.Parse_To_Table", "type": "", "name": "parse_text_to_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "regex_or_pattern": {"lazy": false, "default": "\".\""}, "case_sensitivity": {"lazy": false, "default": "Case_Sensitivity.Default"}, "parse_values": {"lazy": false, "default": "True"}, "on_problems": {"lazy": false, "default": "..Report_Warning"}},"aliases": [],"description": "Converts a Text into a Table using a regular expression pattern.  See Text.parse_to_table."},
{"module": "Standard.Table.Internal.Parse_Values_Helper", "type": "", "name": "valid_parse_targets", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Parse_Values_Helper", "type": "", "name": "is_a_valid_parse_target", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"target_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Checks if the type is a valid argument for `parse`."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Problem_Builder", "arguments": {"types_to_always_throw": {"lazy": false}, "oob_indices": {"lazy": false}, "missing_input_columns": {"lazy": false}, "missing_input_columns_location": {"lazy": false}, "other": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types_to_always_throw": {"lazy": false, "default": "[]"}, "error_on_missing_columns": {"lazy": false, "default": "False"}, "missing_input_columns_location": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Creates a new helper object for aggregating problems to report."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "report_oob_indices", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"indices": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "report_missing_input_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "report_unique_name_strategy", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"unique_name_strategy": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "report_other_warning", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"warning": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "build_problemset", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a vector containing all reported problems, aggregated."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "attach_problems_after", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_behavior": {"lazy": false}, "result": {"lazy": false}},"aliases": [],"description": "Attaches gathered warnings to the result. Any errors from the `result` take precedence over the ones owned by this builder."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "attach_problems_before", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"problem_behavior": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "computation": {"lazy": true}},"aliases": [],"description": "Attaches gathered warnings to the result of the provided computation. If in `Report_Error` mode and there are any problems gathered, the first one will be returned as error without even running the computation."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "get_problemset_throwing_distinguished_errors", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the generated problem set if no errors force throwing or throws the first error that is meant to be thrown regardless of problem behavior."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "Problem_Builder", "name": "raise_no_output_columns_with_cause", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Raises `No_Output_Columns` error, with cause set to the first problem from this builder (if any were reported)."},
{"module": "Standard.Table.Internal.Problem_Builder", "type": "", "name": "append_to_ref", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"ref": {"lazy": false}, "vector": {"lazy": false}},"aliases": [],"description": "Appends a `Vector` to a `Vector_Builder` stored in a `Ref`."},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Merged_Table_Strategy", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Read_Many_As_Merged_Table_Strategy", "arguments": {"into_table": {"lazy": false, "type": "Any -> Columns_To_Keep -> Match_Columns -> Problem_Behavior -> Read_Many_As_Table_Result", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Table_Result", "name": "Table", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Read_Many_As_Table_Result", "arguments": {"metadata": {"lazy": false, "type": "Nothing|Table", "checked": true}, "data": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Table_Result", "name": "No_Data", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Read_Many_As_Table_Result", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Merged_Table_Strategy", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Merged_Table_Strategy", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Merged_Table_Strategy", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Failed_To_Load", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "Read_Many_As_Merged_Table_Strategy", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "The fallback strategy for converting a generic object into a table. Custom data types may implement a conversion to override this strategy, like above."},
{"module": "Standard.Table.Internal.Read_Many_As_Merged_Table_Strategy", "type": "", "name": "_interpret_as_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false, "type": "Any", "checked": true}, "path": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "find_files_list_in_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Many_Files_List", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "ensure_column_type_valid_to_be_files_list", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}, "action": {"lazy": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "make_return", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"return_shape": {"lazy": false, "type": "Return_As_Table", "checked": true}, "input": {"lazy": false, "type": "Many_Files_List", "checked": true}, "objects": {"lazy": false, "type": "Vector (Any | Failed_To_Load)", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_input_as_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"input": {"lazy": false, "type": "Many_Files_List", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_merge_input_and_tables", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"input_table": {"lazy": false, "type": "Table", "checked": true}, "tables_for_rows": {"lazy": false, "type": "Vector Read_Many_As_Table_Result", "checked": true}, "columns_to_keep": {"lazy": false}, "match_columns": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "Expands each table from `tables_for_rows` and computes their union, also duplicating the corresponding rows from `input_table`."},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_unify_metadata", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table | Nothing", "arguments": {"tables": {"lazy": false, "type": "Vector Read_Many_As_Table_Result", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Unifies provided metadata tables, knowing that some tables may have no  metadata - in such case we want to insert as many Nothing rows for metadata  as there are rows in the corresponding data table."},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_make_table_with_one_null_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"empty_table": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_add_objects_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"base_table": {"lazy": false, "type": "Table", "checked": true}, "objects": {"lazy": false, "type": "Vector Any", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Read_Many_Helpers", "type": "", "name": "_inherit_warnings_from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false, "type": "Vector", "checked": true}, "action": {"lazy": true}},"aliases": [],"description": "Workaround for bug https://github.com/enso-org/enso/issues/11570 TODO: Remove workaround one #11570 is closed."},
{"module": "Standard.Table.Internal.Replace_Helpers", "type": "", "name": "replace", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_table": {"lazy": false}, "lookup_table": {"lazy": false}, "columns": {"lazy": false, "type": "Text | Integer | By_Type | Vector (Text | Integer | By_Type)", "checked": true}, "from_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "to_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "allow_unmatched_rows": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": []},
{"module": "Standard.Table.Internal.Rows_View", "type": "Rows_View", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Rows_View", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Rows_View", "type": "Rows_View", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the number of rows in the table."},
{"module": "Standard.Table.Internal.Rows_View", "type": "Rows_View", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Gets the specified row."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "split_to_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "delimiter": {"lazy": false, "default": "\",\""}, "column_count": {"lazy": false, "type": "Columns_To_Add", "checked": true, "default": "..All_Columns"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"description": "Splits a column of text into a set of new columns. See `Table.split_to_columns`."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "split_to_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false, "type": "Text | Integer", "checked": true}, "delimiter": {"lazy": false, "default": "\",\""}},"aliases": [],"description": "Splits a column of text into a set of new rows. See `Table.split_to_rows`."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "tokenize_to_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "pattern": {"lazy": false}, "case_sensitivity": {"lazy": false}, "column_count": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Tokenizes a column of text into a set of new columns using a regular expression. See `Table.tokenize_to_columns`."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "tokenize_to_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "pattern": {"lazy": false, "default": "\".\""}, "case_sensitivity": {"lazy": false, "default": "Case_Sensitivity.Sensitive"}, "at_least_one_row": {"lazy": false, "default": "False"}},"aliases": [],"description": "Tokenizes a column of text into a set of new rows using a regular expression. See `Table.tokenize_to_rows`."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "parse_to_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "input_column_id": {"lazy": false}, "pattern": {"lazy": false, "type": "Text | Regex", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "default": "Case_Sensitivity.Sensitive"}, "parse_values": {"lazy": false, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": [],"description": "Converts a Text column into new columns using a regular expression pattern. See `Table.parse_to_columns`."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "regex_parse_to_vectors", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}},"aliases": [],"description": "Create a parser from a regex to a nested `Vector`. Each match becomes an element of the vector; each group (or the whole match, if there are no groups) becomes an element of the inner vectors."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "regex_to_column_names", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"pattern": {"lazy": false}, "original_column_name": {"lazy": false}},"aliases": [],"description": "Generate column names for the output columns from a regex match. If the regex has no explicit groups, it uses the original column name unchanged; otherwise, it uses the group name if it exists, or the original column name with a number."},
{"module": "Standard.Table.Internal.Split_Tokenize", "type": "", "name": "handle_nothing", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"function": {"lazy": false}},"aliases": [],"description": "Wrap a function so that it returns [] if passed Nothing."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "to_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"storage_type": {"lazy": false}},"aliases": [],"description": "Gets the value type represented by this Java Storage."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "closest_storage_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "enso_to_java", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Convert an Enso value to a Java value before storing it in a Java `Column`. This step is unnecessary for primitive and builtin values, but necessary for values such as `Decimal`/`BigDecimal`."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "java_to_enso", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Convert a Java value to an Enso value before returning it to Enso from a Java `Column`.  This step is unnecessary for primitive and builtin values, but necessary for values such as `Decimal`/`BigDecimal`."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "from_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Converts a value type to an in-memory storage type, possibly approximating it to the closest supported type."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "from_value_type_strict", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": [],"description": "A strict variant of `from_value_type` that expects that we can represent the provided value type exactly."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "make_builder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"storage": {"lazy": false}, "initial_size": {"lazy": false}, "java_problem_aggregator": {"lazy": false}},"aliases": [],"description": "Creates a column storage builder for the given storage type."},
{"module": "Standard.Table.Internal.Storage", "type": "", "name": "get_storage_for_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "Helper function for tests to get the storage of a Column"},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Column_Helper", "arguments": {"columns": {"lazy": false}, "internal_columns": {"lazy": false}, "make_column": {"lazy": false}, "table": {"lazy": false}, "materialize": {"lazy": false}},"aliases": [],"description": "Helps managing table columns."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "select_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selectors": {"lazy": false, "type": "Text | Integer | Regex | By_Type | Vector", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "reorder": {"lazy": false, "type": "Boolean", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}, "error_on_empty": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "A helper function encapsulating shared code for `select_columns` implementations of various Table variants. See the documentation for the Table type for details.  It returns the selected columns. It is the responsibility of each implementation to reconstruct a proper table from the resulting list of columns."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "select_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types": {"lazy": false, "type": "Vector", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "A helper to returns a set of columns filtered by the type of the column."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "remove_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selectors": {"lazy": false, "type": "Text | Integer | Regex | Vector", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "A helper function encapsulating shared code for `remove_columns` implementations of various Table variants. See the documentation for the Table type for details.  It returns the columns which should be kept. It is the responsibility of each implementation to reconstruct a proper table from the resulting list of columns."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "remove_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types": {"lazy": false, "type": "Vector", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "A helper to returns a set of columns filtering out based on the type of the column."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "reorder_columns", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selectors": {"lazy": false, "type": "Text | Integer | Regex | Vector", "checked": true}, "position": {"lazy": false, "type": "Position", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "A helper function encapsulating shared code for `reorder_columns` implementations of various Table variants. See the documentation for the Table type for details.  It returns the columns which should be kept. It is the responsibility of each implementation to reconstruct a proper table from the resulting list of columns."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "select_columns_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selectors": {"lazy": false, "type": "Text | Integer | Regex | By_Type | Vector", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "reorder": {"lazy": false, "type": "Boolean", "checked": true}, "problem_builder": {"lazy": false, "type": "Problem_Builder", "checked": true}},"aliases": [],"description": "A helper function which selects columns from the table based on the provided selection criteria."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "resolve_column_or_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selector": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "A helper function which selects a single column from the table.  It may allow selection of columns by index, name or computing a derived expression."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Table_Column_Helper", "name": "select_blank_columns_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "Blank_Selector.All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true}, "invert_selection": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "A helper method that gets the columns from the provided table that are completely blank or have some blanks. \n\n-TODO docs - when: By default, only columns consisting of all blank cells are   selected. If set to Blank_Selector.Any_Cell, columns with one or more blank values are   selected. - treat_nans_as_blank: If `True`, then `Number.nan` is considered as   blank. - invert_selection: If `True`, then the selection is inverted."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Not_Renamed", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Not_Renamed", "arguments": {},"aliases": [],"description": "An internal marker type for `rename_columns`."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Column_Transform_Element", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Transform_Element", "arguments": {"column": {"lazy": false}, "associated_selector": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Union_Result_Type", "name": "Common_Type", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Union_Result_Type", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Union_Result_Type", "name": "Fallback_To_Text", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Union_Result_Type", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "Union_Result_Type", "name": "No_Types_To_Unify", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Union_Result_Type", "arguments": {},"aliases": [],"description": "This case is returned if the requested column was missing from _all_ tables, so there were no types to unify. An all-null column should be created."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "read_name_mapping_from_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_map": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "A helper function which takes a Table like object and a Table for a name mapping and returns a new Table with the columns renamed according to the mapping."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "rename_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"naming_helper": {"lazy": false, "type": "Column_Naming_Helper", "checked": true}, "internal_columns": {"lazy": false, "type": "Vector", "checked": true}, "mapping": {"lazy": false, "type": "Dictionary | Vector", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "A helper function encapsulating shared code for `rename_columns` implementations of various Table variants. See the documentation for the Table type for details.  It takes a list of columns and a mapping, and returns the complete new set of column names which should be applied to the table. It is the responsibility of each implementation to reconstruct a proper table from the resulting list of names."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "sort_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_columns": {"lazy": false}, "order": {"lazy": false}, "text_ordering": {"lazy": false}},"aliases": [],"description": "A helper function encapsulating shared code for `sort_columns` implementations of various Table variants. See the documentation for the Table type for details.  It takes a list of columns and returns the columns in the new order. It is the responsibility of each implementation to reconstruct a proper table from the resulting list of columns."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "select_indices_reordering", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "indices": {"lazy": false}},"aliases": [],"description": "Selects element from the vector based on the given indices.  The elements are returned in the same order as their provided indices."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "select_indices_preserving_order", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "indices": {"lazy": false}},"aliases": [],"description": "Selects element from the vector based on the given indices.  The elements are returned in the same order as they appeared in the original vector."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "is_index_valid", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false}, "ix": {"lazy": false}},"aliases": [],"description": "Checks if the given index is in the valid range for the provided vector."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "match_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text | Regex", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "columns": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "A helper method to match columns by name"},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "prepare_order_by", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_columns": {"lazy": false}, "column_selectors": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Resolves the `Sort_Column` selectors and ensures that at least one column was selected."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "resolve_order_by", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"internal_columns": {"lazy": false}, "column_selectors": {"lazy": false}, "problem_builder": {"lazy": false}},"aliases": [],"description": "Resolves the `Sort_Column` selectors and returns a list of elements containing the original selector and the selected column."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "filter_blank_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "when": {"lazy": false}, "treat_nans_as_blank": {"lazy": false}},"aliases": [],"description": "A helper method gathering the common logic for constructing expressions that can filter out blank rows."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "is_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"obj": {"lazy": false}},"aliases": [],"description": "Checks if the given object implements a Table interface.  Currently, it relies on a hack - it checks if the object has a method `is_table` and if it returns `True`."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "unify_result_type_for_union", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Union_Result_Type", "arguments": {"column_set": {"lazy": false, "type": "Column_Set", "checked": true}, "all_tables": {"lazy": false, "type": "Vector", "checked": true}, "problem_builder": {"lazy": false, "type": "Problem_Builder", "checked": true}},"aliases": [],"description": "A helper method that resolves what should be the result type of a particular column set based on the union settings."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "replace_columns_with_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "old_columns": {"lazy": false}, "new_columns": {"lazy": false}},"aliases": [],"description": "Replace a set of columns in the table with a new set of columns. The old columns must all exist in the table, and the list of new columns must be the same length and have the same names."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "replace_columns_with_transformed_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "selectors": {"lazy": false}, "transformer": {"lazy": false}, "error_on_missing_columns": {"lazy": false, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Replace a set of columns in the table with a new set of columns produced by transforming the old columns. The old columns must all exist in the table, and the new columns must all have the same name."},
{"module": "Standard.Table.Internal.Table_Helpers", "type": "", "name": "duplicate_rows", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "counts": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": [],"description": "Takes a table and a list of counts and returns a new table with the rows duplicated according to the counts. The vector should have the same number of elements as the number of rows in the table."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Ref", "arguments": {"underlying": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "at", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"selector": {"lazy": false, "default": "0"}},"aliases": [],"description": "Get a column. Column must implement all the expected calculations. This returns a Column, but the type is not known statically because it may be an in-memory or Database column."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "evaluate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Expression", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Given an expression, create a derived column where each value is the result of evaluating the expression for the row."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "resolve", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Resolve a Column_Ref to a Column, keeping any other values as-is."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "resolve_as_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Resolve a Column_Ref to a Column, converting any other values into a constant column."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "resolve_condition", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"condition": {"lazy": false}},"aliases": [],"description": "Transforms a condition, changing any Column_Ref instances into Column instances resolved in this table."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "set", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "as": {"lazy": false, "type": "Text", "checked": true}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "Set_Mode.Add_Or_Update"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Set a column."},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "column_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets a list of column names"},
{"module": "Standard.Table.Internal.Table_Ref", "type": "Table_Ref", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Table_Ref", "type": "", "name": "check_is_in_values", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"operation_name": {"lazy": false}, "values": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Telemetry", "type": "", "name": "log", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {"logger_name": {"lazy": false, "type": "Text", "checked": true}, "msg": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Schedules a single telemetry message for sending."},
{"module": "Standard.Table.Internal.Telemetry", "type": "", "name": "_root_logger_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Union", "type": "", "name": "make_union", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"tables": {"lazy": false, "type": "Vector", "checked": true}, "columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "The implementation of common logic that is used by `Table.from_union`. The caller should ensure that `tables` contains only `Table` instances or `Nothing`. Each `Nothing` is replaced by a single all-nothing row, not introducing any new columns.  The `tables` vector must contain at least one non-nothing entry."},
{"module": "Standard.Table.Internal.Union", "type": "", "name": "_concat_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_set": {"lazy": false}, "tables": {"lazy": false}, "result_type": {"lazy": false}, "result_row_count": {"lazy": false}, "needs_cast": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "A helper that efficiently concatenates storages of in-memory columns."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unique_Name_Strategy", "arguments": {"deduplicator": {"lazy": false}},"aliases": [],"description": "Creates a Unique_Name_Strategy"},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "new", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"naming_properties": {"lazy": false}},"aliases": [],"description": "Creates a new Unique_Name_Strategy instance.  This is a mutable data structure, that allows for creating a collection of columns names and making them unique. It will track any duplicates or invalid names that are passed to it."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "combine_with_prefix", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"first": {"lazy": false}, "second": {"lazy": false}, "second_prefix": {"lazy": false}},"aliases": [],"description": "Changes names from the second list so that they do not clash with names from the first list and with each other.  It returns a new list where each new name corresponds to a name from the second list.  It assumes that names on each list are unique within that list and that all of the provided names are already valid. The behavior is unspecified if they are not.  The names are renamed using the following strategy: - if the name does not collide with any name from the first list, it will   always be kept as-is, - if the name collides, we first append the provided prefix, if it is now   unique (looking at the first list and the non-renamed elements of the   second one), we return that, - if the name with the prefix still collides, we append a numeric suffix   (starting with `_1`) to it, increasing the number as many times as   necessary to get a name that will not collide.  Note that non-renamed names from the second list have precedence over elements being renamed, even if they show up on the list later."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "renames", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Vector of any duplicates renamed.  Note that this vector will not contain renames where just the second_prefix was added."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "invalid_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {},"aliases": [],"description": "Vector of any invalid names."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "truncated_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A mapping of original names to their truncated counterpart."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "make_valid_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"input": {"lazy": false}},"aliases": [],"description": "Takes a value and converts to a valid (but not necessarily unique) name."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "make_unique", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Takes a name and gets a unique version."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "is_unique", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Tells if the given name has not yet been encountered.  It does not use up the name - it needs to be marked with `mark_used` if needed."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "make_all_unique", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"names": {"lazy": false}},"aliases": [],"description": "Takes a list of names and gets a list of unique versions."},
{"module": "Standard.Table.Internal.Unique_Name_Strategy", "type": "Unique_Name_Strategy", "name": "mark_used", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"names": {"lazy": false}},"aliases": [],"description": "Takes a list of names and marks them as used, so that any further names clashing with those will have a prefix added."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "Addition_Kind", "name": "Numeric_Add", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Addition_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "Addition_Kind", "name": "Text_Concat", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Addition_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "Subtraction_Kind", "name": "Numeric_Subtract", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Subtraction_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "Subtraction_Kind", "name": "Date_Time_Difference", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Subtraction_Kind", "arguments": {},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "most_specific_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}, "use_smallest": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Finds the most specific `Value_Type` that can be used to hold the given value.  This method will still prefer default types used in the in-memory backend, so for integers it will return 64-bit integers even if the value could fit in a smaller one; and for Text values variable-length text will be preferred over fixed-length."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "reconcile_types", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type", "arguments": {"current": {"lazy": false, "type": "Value_Type", "checked": true}, "new": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Finds a type that can fit both a current type and a new type."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "max_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"a": {"lazy": false}, "b": {"lazy": false}},"aliases": [],"description": "Reconciles two size parameters. If either of them is `Nothing` (meaning unbounded), returns `Nothing`. If both are bounded, the larger one is returned."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "find_common_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type | Nothing", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": [],"description": "Finds the most specific value type that will fit all the provided types."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "find_common_date_types", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type | Nothing", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "related_column_name": {"lazy": false, "type": "Text | Nothing", "checked": true}, "problem_builder": {"lazy": false, "type": "Problem_Builder", "checked": true}},"aliases": [],"description": "An extra helper function that reconciles Date_Time types with varying timezone setting, as well as Date type, reporting any warnings. It can be used as a fallback after `find_common_type` does not find a simple common type. If non-date types are provided, it will fail by returning `Nothing`. It will not report any warnings in that case. It assumes that the list of `types` is not empty."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "find_common_numeric_boolean_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type | Nothing", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}},"aliases": [],"description": "An extra helper function that reconciles numeric and boolean types. Unifying Boolean and numeric types is not expected by all operations, but some may want to opt-in to it. This method allows to do so.  If non-numeric or non-boolean types are provided, it will fail by returning `Nothing`.  No warnings are reported, as coercing boolean to integer is harmless, it was just chosen not to be done by default."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "find_argument_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Value_Type", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}, "infer_precise_type": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Finds the type of an argument to a column operation.  If the argument is a column, the type of that column is returned. If it is an Enso value, the smallest `Value_Type` that can fit that value will be returned (but the Database is free to widen it to the closest type that it supports without warning).  Since there is no special type for `Nothing` and `Nothing` technically can fit any nullable type, it usually needs to be handled specially. This method returns `Nothing` if the value is `Nothing` - so the caller can try to treat this value as fitting any type, or accordingly to specific semantics of each method."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "resolve_operation_kind", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Any | Nothing", "arguments": {"arg1": {"lazy": false, "type": "Any", "checked": true}, "arg2": {"lazy": false, "type": "Any", "checked": true}, "operation_name": {"lazy": false, "type": "Text", "checked": true}, "find_operation_kind": {"lazy": false, "type": "Value_Type -> Any", "checked": true}},"aliases": [],"description": "Returns the operation kind based on types of the inputs, or an error if the inferred kinds are incompatible. If both inputs are Null, it is impossible to tell the kind, so Nothing is returned and the caller may decide what to do."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "resolve_addition_kind", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Addition_Kind | Nothing", "arguments": {"arg1": {"lazy": false}, "arg2": {"lazy": false}},"aliases": [],"description": "A helper which resolves if numeric addition or string concatenation should be used when the a `+` operator is used with the two provided types. It will return an error if the provided types are incompatible."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "resolve_subtraction_kind", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Subtraction_Kind | Nothing", "arguments": {"arg1": {"lazy": false}, "arg2": {"lazy": false}},"aliases": [],"description": "A helper which resolves if numeric subtraction or date-time difference should be used when the a `-` operator is used with the two provided types. It will return an error if the provided types are incompatible."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "check_binary_numeric_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arg1": {"lazy": false}, "arg2": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks that both provided arguments have numeric type and runs the action if they do."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "check_binary_boolean_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arg1": {"lazy": false}, "arg2": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks that both provided arguments have boolean type and runs the action if they do."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "check_multi_argument_comparable_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "arg_or_args": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks that all provided argument are comparable with the provided column."},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "raise_unexpected_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expected_type": {"lazy": false}, "argument": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "find_common_type_for_arguments", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arguments": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Internal.Value_Type_Helpers", "type": "", "name": "is_decimal_integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": [],"description": "Checks if `Value_Type.Decimal` represents integers."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "Leaf", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector_Builder", "arguments": {"vec": {"lazy": false}},"aliases": [],"description": "A leaf in the vector builder."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "Append", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector_Builder", "arguments": {"left": {"lazy": false}, "right": {"lazy": false}, "len": {"lazy": false}},"aliases": [],"description": "A node that appends the two child nodes."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "empty", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates an empty vector builder."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vec": {"lazy": false}},"aliases": [],"description": "Creates a vector builder from a vector."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "length", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Number of elements inside of the to-be-built vector."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if this builder contains any elements."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "not_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if this builder is not empty."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "build", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Materializes the actual vector from this builder."},
{"module": "Standard.Table.Internal.Vector_Builder", "type": "Vector_Builder", "name": "++", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false}},"aliases": [],"description": "Concatenates another builder or vector to this. \n\n It returns a new builder that will yield a vector that is a concatenation of `self` and the argument."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Types_To_Include", "arguments": {"types": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any number columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "boolean", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any boolean columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any text columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "date", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any date columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any time columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "Types_To_Include", "name": "date_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Are there any date_time columns?"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_aggregate_column_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make an aggregate column selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_aggregate_column_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make an Aggregate_Column list editor"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_column_name_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "add_expression": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make a column name selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_column_name_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make a multiple column name selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_column_name_multi_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "add_regex": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_by_type": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Make a multiple column-name selector that allows each value to be selected at most once."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_column_ref_by_name_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "add_text": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_regex": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_number": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_boolean": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_named_pattern": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_date": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_date_time": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "add_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "columns_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Make a column reference by name selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_column_ref_by_name_selector_for_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "add_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "if_value_type_numeric_include_all_numeric": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Make a column reference by name selector filtered by type."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_fill_default_value_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_source": {"lazy": false, "default": "Nothing"}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "value_types": {"lazy": false, "default": "Value_Type.Mixed"}, "add_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "If `column_source` is Nothing, `Column_Ref` options will not be added."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_filter_condition_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "cache": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Make a filter condition selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_join_condition_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "cache": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Make a join condition selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_grouping_method_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": []},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_order_by_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "name_only": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Make a column name selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_rename_name_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}, "cache": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Make a column rename name selector."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "parse_type_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"include_auto": {"lazy": false, "default": "True"}},"aliases": [],"description": "Selector for type argument on `Column.parse`."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "write_table_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Selector for writing a table to a file."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_format_chooser_for_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": [],"description": "Make format selector based off value type"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_value_type_vector_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Make value type selector for type filtering"},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "make_replace_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Make a replace builder."},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "_get_column_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "cache": {"lazy": false}, "parameter": {"lazy": false, "type": "Text", "checked": true, "default": "\"column\""}, "default": {"lazy": false, "type": "Value_Type", "checked": true, "default": "Value_Type.Mixed"}},"aliases": []},
{"module": "Standard.Table.Internal.Widget_Helpers", "type": "", "name": "_include_all", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Treat Value_Type as if it could be any type (i.e. include all constants and types)."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Group_By", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "Missing_Argument.throw \"column\""}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Specifies a column to group the rows by. Deprecated but used internally."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Creates a new column with the row count of each group. If no rows, evaluates to 0."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count_Distinct", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"columns": {"lazy": false, "type": "Text | Integer | Regex | Vector (Integer | Text | Regex | Any)", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "ignore_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the count of unique items in the selected column(s) within each group. If no rows, evaluates to 0."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count_Not_Nothing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the count of not `Nothing` (null) values of the specified column within each group. If no rows, evaluates to 0."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count_Nothing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the count of `Nothing` (null) values of the specified column within each group. If no rows, evaluates to 0."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count_Not_Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the count of not `Nothing` (null) and non-empty (\"\") values of the column within each group. If no rows, evaluates to 0."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Count_Empty", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the count of `Nothing` (null) or empty (\"\") text values of the column within each group. If no rows, evaluates to 0."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Sum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the sum of values (ignoring missing values) of the column within each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Average", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the mean of values (ignoring missing values) of the column within each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Median", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the median of values (ignoring missing values) of the column within each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Percentile", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"percentile": {"lazy": false, "type": "Number", "checked": true, "default": "0.5"}, "column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the percentile of values (ignoring missing values) of the column within each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Mode", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the mode of values (ignoring missing values) of the column within each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Standard_Deviation", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "population": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the standard deviation of values (ignoring missing values) of the column within each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Concatenate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "separator": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "suffix": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "quote_char": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the values concatenated together. `Nothing` values will become an empty string. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "First", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "ignore_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "order_by": {"lazy": false, "type": "Sort_Column | Text | Nothing | Vector (Text | Sort_Column)", "checked": true, "default": "[]"}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the first value in each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Last", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "ignore_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "order_by": {"lazy": false, "type": "Sort_Column | Text | Nothing | Vector (Text | Sort_Column)", "checked": true, "default": "[]"}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the last value in each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Maximum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the maximum value in each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Minimum", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the maximum value in each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Shortest", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the shortest text in each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Aggregate_Column", "type": "Aggregate_Column", "name": "Longest", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Aggregate_Column", "arguments": {"column": {"lazy": false, "type": "Text|Integer|Any", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "#": {"lazy": false}, "Any": {"lazy": false}, "needed": {"lazy": false}, "because": {"lazy": false}, "of": {"lazy": false}, "6866": {"lazy": false}},"aliases": [],"description": "Creates a new column with the longest text in each group. If no rows, evaluates to `Nothing`."},
{"module": "Standard.Table.Blank_Selector", "type": "Blank_Selector", "name": "Any_Cell", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Blank_Selector", "arguments": {},"aliases": [],"description": "Select when any cell is blank or Nothing."},
{"module": "Standard.Table.Blank_Selector", "type": "Blank_Selector", "name": "All_Cells", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Blank_Selector", "arguments": {},"aliases": [],"description": "Select when all the cells are blank or Nothing."},
{"module": "Standard.Table.Column", "type": "Column", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"internal_java_column": {"lazy": false}},"aliases": [],"description": "Internal constructor that should not be used directly. Please use `from_java_column` instead."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from_vector", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "items": {"lazy": false, "type": "Vector", "checked": true}, "value_type": {"lazy": false, "type": "Auto | Value_Type", "checked": true, "default": "Auto"}},"aliases": [],"group": "Standard.Base.Input","icon": "data_input","description": "Creates a new column given a name and a vector of elements.","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": "from_storage", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}, "storage": {"lazy": false}},"aliases": [],"description": "Creates a new column given a name and an internal Java storage."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from_java_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"java_column": {"lazy": false, "type": "Java_Column", "checked": true}},"aliases": [],"description": "Creates a new column given a Java Column object."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from_repeated_item", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"name": {"lazy": false}, "item": {"lazy": false}, "repeats": {"lazy": false}},"aliases": [],"description": "Creates a new column given a name and an element repeated over and over."},
{"module": "Standard.Table.Column", "type": "Column", "name": "can_contain_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Determines if a value type is eligable for a text data quality count"},
{"module": "Standard.Table.Column", "type": "Column", "name": "default_sample_size", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"description": "Default size for sampling data quality indicators."},
{"module": "Standard.Table.Column", "type": "Column", "name": "var_args_functions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Helper for the expression to tell it which functions needs a Vector."},
{"module": "Standard.Table.Column", "type": "Column", "name": "java_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A getter that is a workaround for bug https://github.com/enso-org/enso/issues/12180"},
{"module": "Standard.Table.Column", "type": "Column", "name": "display", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {"show_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "format_terminal": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Returns a text containing an ASCII-art table displaying this data."},
{"module": "Standard.Table.Column", "type": "Column", "name": "print", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Nothing", "arguments": {"show_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}},"aliases": [],"description": "Prints an ASCII-art table with this data to the standard output."},
{"module": "Standard.Table.Column", "type": "Column", "name": "==", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["equals"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise equality comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`.","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": "equals_ignore_case", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Element-wise case-insensitive text equality comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "!=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["not equals"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise non-equality comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`.","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": ">=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["greater than or equal"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "<=", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["less than or equal"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`."},
{"module": "Standard.Table.Column", "type": "Column", "name": ">", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["greater than"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "<", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["less than"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise order comparison. \n\n Returns a column with results of comparing this column\u0027s elements against `other`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "between", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"lower": {"lazy": false, "type": "Column | Any", "checked": true}, "upper": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Element-wise inclusive bounds check. \n\n Returns a column with boolean values indicating whether values of this column fit between the lower and upper bounds (both ends inclusive)."},
{"module": "Standard.Table.Column", "type": "Column", "name": "+", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["add", "concatenate", "plus"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise addition. Works on numeric types or text. \n\n Returns a column with results of adding `other` from each element of `self`.","remarks": "? Arithmetic Overflow    For integer columns, the operation may yield results that will not fit   into the range supported by the column. In such case, the in-memory   backend will replace such results with `Nothing` and report a   `Arithmetic_Overflow` warning. The behaviour in Database backends is   not specified and will depend on the particular database - it may   cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Table.Column", "type": "Column", "name": "-", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["minus", "subtract"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise subtraction. Allows to subtract numeric types or compute a difference between two date/time values. \n\n Returns a column with results of subtracting `other` from each element of `self`.","remarks": "? Arithmetic Overflow    For integer columns, the operation may yield results that will not fit   into the range supported by the column. In such case, the in-memory   backend will replace such results with `Nothing` and report a   `Arithmetic_Overflow` warning. The behaviour in Database backends is   not specified and will depend on the particular database - it may   cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Table.Column", "type": "Column", "name": "*", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["multiply", "product", "times"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise multiplication. \n\n Returns a column containing the result of multiplying each element of `self` by `other`.","remarks": "? Arithmetic Overflow    For integer columns, the operation may yield results that will not fit   into the range supported by the column. In such case, the in-memory   backend will replace such results with `Nothing` and report a   `Arithmetic_Overflow` warning. The behaviour in Database backends is   not specified and will depend on the particular database - it may   cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Table.Column", "type": "Column", "name": "/", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["divide"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise division. \n\n Returns a column containing the result of dividing each element of `self` by `other`.","errors": "","remarks": "? Arithmetic Overflow    For integer columns, the operation may yield results that will not fit   into the range supported by the column. In such case, the in-memory   backend will replace such results with `Nothing` and report a   `Arithmetic_Overflow` warning. The behaviour in Database backends is   not specified and will depend on the particular database - it may   cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Table.Column", "type": "Column", "name": "%", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["modulo", "modulus"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise modulus. \n\n Returns a column with results of modulus this column\u0027s elements against `other`.","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": "^", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["power"],"group": "Standard.Base.Operators","icon": "math","description": "Element-wise raising to the power. \n\n Returns a column containing the result of raising each element of `self` by `other`.","remarks": "? Arithmetic Overflow    For integer columns, the operation may yield results that will not fit   into the range supported by the column. In such case, the in-memory   backend will replace such results with `Nothing` and report a   `Arithmetic_Overflow` warning. The behaviour in Database backends is   not specified and will depend on the particular database - it may   cause a hard error, the value may be truncated or wrap-around etc."},
{"module": "Standard.Table.Column", "type": "Column", "name": "&&", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["and"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise boolean conjunction. \n\n Returns a column containing the result of performing boolean `and` on each element of `self` and `other`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "||", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["or"],"group": "Standard.Base.Operators","icon": "operators","description": "Element-wise boolean disjunction. \n\n Returns a column containing the result of performing the boolean `or` on each element of `self` and `other`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "not", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": ["not"],"group": "Standard.Base.Logical","icon": "operators","description": "Boolean negation of each element in self column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "iif", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"when_true": {"lazy": false, "type": "Column | Any", "checked": true}, "when_false": {"lazy": false, "type": "Column | Any", "checked": true}},"aliases": ["if"],"group": "Standard.Base.Logical","icon": "preparation","description": "Replaces `True` values with `when_true` and `False` with `when_false`. Only meant for use with boolean columns."},
{"module": "Standard.Table.Column", "type": "Column", "name": "const", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Creates a column from a single constant value.  This method is not static; it must be called on an existing column. That existing column is only used for its internal state; the contents of the column are not used."},
{"module": "Standard.Table.Column", "type": "Column", "name": "round", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Illegal_Argument | Invalid_Value_Type", "arguments": {"decimal_places": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Round the values in a numeric column to a specified number of decimal places.  For integers, rounding to 0 or more decimal places simply returns the argument. For negative decimal places, see below.  By default, rounding uses \"asymmetric round-half-up\", also known as \"round towards positive infinity.\" If use_bankers=True, then it uses \"round-half-even\", also known as \"banker\u0027s rounding\".  If the column is of type `Float` and `decimal_places` \u003e 0, `round` returns a column of `Float`; otherwise, it returns a column of `Integer`.","errors": "","remarks": "! Precision   As floating-point numbers are inexact, rounding can have unexpected   results near the precision limit (about 15 decimal places), especially   when rounding mid-point values. For example:    Rounding 1.2222222222222235 to 15 decimal places returns:   - 1.222222222222224 in Postgres.   - 1.222222222222223 in SQLite. \n\n? Negative decimal place counts   Rounding to `n` digits can be thought of as \"rounding to the nearest   multiple of 10^(-n)\". For negative decimal counts, this results in   rounding to the nearest positive integer power of 10."},
{"module": "Standard.Table.Column", "type": "Column", "name": "truncate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": ["int"],"group": "Standard.Base.Rounding","icon": "math","description": "If the column is numeric, truncate the floating-point values to an integer by dropping the fractional part. This is equivalent to \"round-toward-zero\". If the column is of type `Date_Time`, truncates the values to `Date`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "ceil", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Rounding","icon": "math","description": "Computes the nearest integer above this number for values in a numeric column.  Returns a column of `Integer`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "floor", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Rounding","icon": "math","description": "Computes the nearest integer below this number for values in a numeric column.  Returns a column of `Integer`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "coalesce", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "operators","description": "Returns a column of first non-`Nothing` value on each row of `self` and `values` list."},
{"module": "Standard.Table.Column", "type": "Column", "name": "min", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Math","icon": "transform4","description": "Returns a column of minimum on each row of `self` and `values`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "max", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"values": {"lazy": false, "type": "Any | Vector Any", "checked": true}},"aliases": [],"group": "Standard.Base.Math","icon": "transform4","description": "Returns a column of maximum on each row of `self` and `values`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Returns a column of booleans, with `True` items at the positions where this column contains a `Nothing`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_nan", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where this column contains a NaN. This is only applicable to double columns."},
{"module": "Standard.Table.Column", "type": "Column", "name": "internal_is_nan", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_infinite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where this column contains a +Inf/-Inf. This is only applicable to double columns."},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_finite", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Math","icon": "math","description": "Returns a column of booleans, with `True` items at the positions where this column contains a non-infinite, non-NaN floating point value. This is only applicable to double columns."},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"description": "Returns a column of booleans, with `True` items at the positions where this column contains an empty string or `Nothing`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "internal_is_empty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_present", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Returns a column of booleans, with `True` items at the positions where this column does not contain a `Nothing`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_blank", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Returns a column of booleans with `True` at the positions where this column contains a blank value.","remarks": "? Blank values   Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "fill_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"default": {"lazy": false, "type": "Column | Previous_Value | Any", "checked": true}},"aliases": ["fill missing", "if_nothing"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column where missing values have been replaced with the provided default."},
{"module": "Standard.Table.Column", "type": "Column", "name": "fill_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"default": {"lazy": false, "type": "Column | Previous_Value | Any", "checked": true}},"aliases": ["fill empty", "if_empty"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column where empty Text values have been replaced with the provided default."},
{"module": "Standard.Table.Column", "type": "Column", "name": "starts_with", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Checks for each element of the column if it starts with `other`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "ends_with", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Checks for each element of the column if it ends with `other`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "text_length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Calculates the text length for each element of the column.  In the Database backends, the default text length method of the particular database is used.  In the in-memory backend, this will give you the grapheme length of the string."},
{"module": "Standard.Table.Column", "type": "Column", "name": "text_left", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"n": {"lazy": false, "type": "Column | Integer", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Gets the left n characters for each element of the column.  In the Database backends, the default text left method of the particular database is used.  In the in-memory backend, this will give you the left n graphemes of the string."},
{"module": "Standard.Table.Column", "type": "Column", "name": "text_right", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"n": {"lazy": false, "type": "Column | Integer", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "preparation","description": "Gets the right n characters for each element of the column.  In the Database backends, the default text right method of the particular database is used.  In the in-memory backend, this will give you the right n graphemes of the string."},
{"module": "Standard.Table.Column", "type": "Column", "name": "contains", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"other": {"lazy": false, "type": "Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it contains `other`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "like", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"pattern": {"lazy": false, "type": "Column | Text | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it matches an SQL-like pattern."},
{"module": "Standard.Table.Column", "type": "Column", "name": "regex_match", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"pattern": {"lazy": false, "type": "Column | Text | Any", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it matches a regular expression."},
{"module": "Standard.Table.Column", "type": "Column", "name": "trim", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "type": "Text | Column", "checked": true, "default": "\u0027\u0027"}},"aliases": [],"group": "Standard.Base.Text","icon": "text","description": "This function removes the specified characters, by default any whitespace, from the start, the end, or both ends of the input."},
{"module": "Standard.Table.Column", "type": "Column", "name": "text_replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"term": {"lazy": false, "type": "Text | Regex | Column", "checked": true, "default": "\"\""}, "new_text": {"lazy": false, "type": "Text | Column", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["regex", "substitute"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces the first, or all occurrences of `term` with `new_text` in each row. If `term` is empty, the function returns the column unchanged.  This method follows the exact replacement semantics of the `Text.replace` method.  If regex is used the replacement string can contain references to groups matched. The following syntaxes are supported:     $0: the entire match string     $\u0026: the entire match string     $n: the nth group     $\u0026lt;foo\u0026gt;: Named group `foo`  For details on Enso\u0027s Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions)."},
{"module": "Standard.Table.Column", "type": "Column", "name": "text_cleanse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"remove": {"lazy": false, "type": "Vector Named_Pattern", "checked": true}},"aliases": [],"group": "Standard.Base.Text","icon": "column_add","description": "Applies the specified cleansings to the text in each row."},
{"module": "Standard.Table.Column", "type": "Column", "name": "year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the year as a number from the date stored in the column.  Applies only to columns that hold the `Date` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "month", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the month as a number (1-12) from the date stored in the column.  Applies only to columns that hold the `Date` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "day", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the day of the month as a number (1-31) from the date stored in the column.  Applies only to columns that hold the `Date` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "day_of_year", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "date_and_time","description": "Gets the day of the year as a number (1 - 366) from the date stored in the column.  Applies only to columns that hold the `Date` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "day_of_week", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": ["weekday"],"group": "Standard.Base.DateTime","icon": "date_and_time","description": "Gets the weekday as a number (1 - 7) from the date stored in the column. Monday is 1, Tuesday is 2, ..., Sunday is 7.  Applies only to columns that hold the `Date` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "hour", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the hour as a number (0-23) from the time stored in the column.  Applies only to columns that hold the `Time_Of_Day` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "minute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the minute as a number (0-59) from the time stored in the column.  Applies only to columns that hold the `Time_Of_Day` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "second", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the second as an integer (0-60) from the time stored in the column.  Applies only to columns that hold the `Time_Of_Day` or `Date_Time` types. Returns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "date_part", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true, "default": "..Day"}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Gets the date part of the date/time value.  Returns a column of `Integer` type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "date_diff", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"end": {"lazy": false, "type": "Column | Date | Date_Time | Time_Of_Day", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true, "default": "..Day"}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Computes a time difference between the two dates.  It returns a column of integers expressing how many periods fit between the two dates/times.  The difference will be positive if `end` is greater than `self`.","remarks": "? Time Zone handling    Some backends may not preserve the timezone data in a `Date_Time`   (preserving the represented time instant). This may lead to slight   differences in time calculations between backends, especially around   unusual events like DST."},
{"module": "Standard.Table.Column", "type": "Column", "name": "date_add", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type | Illegal_Argument", "arguments": {"amount": {"lazy": false, "type": "Column | Integer", "checked": true}, "period": {"lazy": false, "type": "Date_Period | Time_Period", "checked": true, "default": "default_date_period self"}},"aliases": [],"group": "Standard.Base.DateTime","icon": "time","description": "Shifts the date/time by a specified period, returning a new date/time column of the same type.","remarks": "? Time Zone handling    Some backends may not preserve the timezone data in a `Date_Time`   (preserving the represented time instant). This may lead to slight   differences in time calculations between backends, especially around   unusual events like DST."},
{"module": "Standard.Table.Column", "type": "Column", "name": "is_in", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"vector": {"lazy": false, "type": "Vector | Column | Array", "checked": true}},"aliases": [],"group": "Standard.Base.Logical","icon": "preparation","description": "Checks for each element of the column if it is contained within the provided vector or column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "parse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}, "format": {"lazy": false, "type": "Text | Data_Formatter", "checked": true, "default": "\"\""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Parses a text column into values.  In the Database backends, the default formatting settings of the particular database are used.  In the in-memory backend, the default parser options only parse values where the process is reversible (e.g., 0123 would not be converted to an integer as there is a leading 0). However, settings in the `Data_Formatter` can control this.","errors": "","remarks": "? Number Formats    If parsing a column to a number, by default, the parser will attempt   to find the most appropriate format for the column. This is done by   finding the format that parses the longest set without an issue from   the first record.    It will try the following separators in British, German, French and   Swiss order.    - Thousand separators must be followed by groups of 3 numbers.   - Scientific notation is only allowed on decimals and must be on a     value between -10 and 10. The notation is an `E` followed by an     integer and must be enabled on the `Data_Formatter`,    The following formats are supported:   - Sign (+/-) followed by Number (e.g. +1,234.56)   - Using brackets to indicate a negative number (e.g. (1,234.56))   - Currency symbols (if not in Auto mode) can be placed before or after     the sign and number.   - If using brackets, the currency symbol must be placed after the     opening bracket."},
{"module": "Standard.Table.Column", "type": "Column", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Illegal_Argument", "arguments": {"format": {"lazy": false, "type": "Text | Date_Time_Formatter | Column", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Format a `Column` using a format string (or `Column` of format strings).","errors": "","remarks": "? Supported Types   - `Value_Type.Date`   - `Value_Type.Date_Time`   - `Value_Type.Time`   - `Value_Type.Integer`   - `Value_Type.Float`   - `Value_Type.Boolean` \n\n? `Value_Type.Date`, `Value_Type.Date_Time`, `Value_Type.Time` format strings     See `Date_Time_Formatter` for more details. \n\n? `Value_Type.Integer`, `Value_Type.Float` format strings    Numeric format strings are specified by the Java DecimalFormat class.   See https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html   for a complete format specification. \n\n? `Value_Type.Boolean` format strings    Format strings for `Boolean` consist of two values that represent true   and false, separated by a `|`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Illegal_Argument | Inexact_Type_Coercion | Conversion_Failure", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Cast the column to a specific type. \n\n In the Database backend, this will boil down to a CAST operation. In the in-memory backend, a conversion will be performed according to the following rules: - Anything can be cast into the `Mixed` type. - Converting to a `Char` type, the elements of the column will be   converted to text. If it is fixed length, the texts will be trimmed or   padded on the right with the space character to match the desired   length. - Conversion between numeric types will replace values exceeding the   range of the target type with `Nothing`. - Converting decimal numbers into integers will truncate or round them,   depending on the backend. If more control is needed, use the various   rounding functions (such as `round` or `floor`). - Booleans may also be converted to numbers, with `True` being converted   to `1` and `False` to `0`. The reverse is not supported - use `iif`   instead. - A `Date_Time` may be converted into a `Date` or `Time` type - the   resulting value will be truncated to the desired type. - If a `Date` is to be converted to `Date_Time`, it will be set at   midnight of the default system timezone. - For a `Mixed` column being converted into a specific type, each row is   converted individually.   If the target type cannot fit some of the values (for example due to too  small range), a `Conversion_Failure` may be reported according to the  `on_problems` rules. The Database backends may fail with `SQL_Error`  instead.","remarks": "? Inexact Target Type    If the backend does not support the requested target type, the closest   supported type is chosen and a `Inexact_Type_Coercion` problem is   reported. \n\n! Casting Text values    The `parse` method should be used to convert text values into other   types. Due to this, a Mixed column containing values `[2, \"3\"]` will   actually be converted into `[2, Nothing]` when casting to Integer type."},
{"module": "Standard.Table.Column", "type": "Column", "name": "auto_cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"shrink_types": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["auto_value_type"],"group": "Standard.Base.Conversions","icon": "convert","description": "Change the value type of the column to a more specific one, based on its contents.","remarks": "? Auto Type Selection Rules    - If a `Mixed` column can be assigned a single type, like `Char` or     `Integer`, that will be used.   - Text columns are not parsed. To do that, use the `parse` method.   - If a `Float` column contains only integers, it will be converted to     an Integer column.   - If a `Decimal` column contains only integers that could fit in a     64-bit integer storage, it will be converted to an Integer column.   - If `shrink_types` is `False` (default), no other transformations are     applied.   - However, if `shrink_types` is set to `True`, then:     - Integer columns will be assigned the smallest size that can fit all       values (down to 16-bit integers; converting to the `Byte` type has       to be done manually through `cast`).     - If all elements in a text column have the same length, the type       will become fixed length.     - Otherwise, if a text column is variable length, but all text       elements are no longer than 255 characters, the column will get a       max length of 255. Otherwise, the column size limit will stay       unchanged."},
{"module": "Standard.Table.Column", "type": "Column", "name": "auto_value_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"shrink_types": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Deprecated: Use `auto_cast` instead.  Change the value type of the column to a more specific one, based on its contents.","remarks": "? Auto Type Selection Rules    - If a `Mixed` column can be assigned a single type, like `Char` or     `Integer`, that will be used.   - Text columns are not parsed. To do that, use the `parse` method.   - If a `Float` column contains only integers, it will be converted to     an Integer column.   - If a `Decimal` column contains only integers that could fit in a     64-bit integer storage, it will be converted to an Integer column.   - If `shrink_types` is `False` (default), no other transformations are     applied.   - However, if `shrink_types` is set to `True`, then:     - Integer columns will be assigned the smallest size that can fit all       values (down to 16-bit integers; converting to the `Byte` type has       to be done manually through `cast`).     - If all elements in a text column have the same length, the type       will become fixed length.     - Otherwise, if a text column is variable length, but all text       elements are no longer than 255 characters, the column will get a       max length of 255. Otherwise, the column size limit will stay       unchanged."},
{"module": "Standard.Table.Column", "type": "Column", "name": "map", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {"function": {"lazy": false, "type": "Any -> Any", "checked": true}, "skip_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_value_type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}},"aliases": ["transform column"],"icon": "column_add","description": "Applies `function` to each item in this column and returns the column of results.","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Invalid_Value_Type", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}, "function": {"lazy": false, "type": "Any -> Any -> Any", "checked": true}, "skip_nothing": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "expected_value_type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}},"aliases": ["combine", "join by row position", "merge"],"icon": "join2-1","description": "Applies `function` to consecutive pairs of elements of `self` and `that` and returns a column of results.","errors": ""},
{"module": "Standard.Table.Column", "type": "Column", "name": "rename", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Illegal_Argument", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"group": "Standard.Base.Metadata","icon": "text_input","description": "Returns a new column, containing the same elements as `self`, but with the given name."},
{"module": "Standard.Table.Column", "type": "Column", "name": "name", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the name of this column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the length of this column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "count_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the number of missing items in this column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "count_untrimmed", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sample_size": {"lazy": false, "type": "Integer", "checked": true, "default": "Column.default_sample_size"}},"aliases": [],"description": "Counts the number of text values with leading or trailing whitespace. Used for data quality indicator in Table Viz."},
{"module": "Standard.Table.Column", "type": "Column", "name": "requires_numeric_formatter_check", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Indicates if a numeric column requires formatting in table viz"},
{"module": "Standard.Table.Column", "type": "Column", "name": "count_non_trivial_whitespace", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"sample_size": {"lazy": false, "type": "Integer", "checked": true, "default": "Column.default_sample_size"}},"aliases": [],"description": "Counts the number of text values with non trivial whitespace. Used for data quality indicator in Table Viz."},
{"module": "Standard.Table.Column", "type": "Column", "name": "count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the number of non-null items in this column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any | Nothing ! Index_Out_Of_Bounds", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the value contained in this column at the given index. \n\n If the value is an NA then this method returns nothing. If the index is not an index in the column it returns an `Index_Out_Of_Bounds`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any | Nothing", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "default": {"lazy": true, "default": "Nothing"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the value contained in this column at the given index."},
{"module": "Standard.Table.Column", "type": "Column", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": [],"icon": "data_input","description": "Returns a column containing rows of this column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Returns a vector containing all the elements in this column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "value_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the `Value_Type` associated with that column.  The value type determines what type of values the column is storing and what operations are permitted."},
{"module": "Standard.Table.Column", "type": "Column", "name": "inferred_precise_value_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a possibly more precise `Value_Type` based on the data in the column.  Most columns will return their type without changes. A mixed column may return a more precise type if a common type can be found for all of its values."},
{"module": "Standard.Table.Column", "type": "Column", "name": "should_be_selected_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Internal hook that says if a given column should be selected by a specific type in a `By_Type` selection."},
{"module": "Standard.Table.Column", "type": "Column", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this column to JS_Object representation."},
{"module": "Standard.Table.Column", "type": "Column", "name": "to_table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": [],"icon": "data_input","description": "Converts this column into a single-column table."},
{"module": "Standard.Table.Column", "type": "Column", "name": "info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": ["column type", "field info", "metadata"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a Table describing this column\u0027s contents and type.  The table behaves like `Table.column_info."},
{"module": "Standard.Table.Column", "type": "Column", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"order": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}, "missing_last": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "by": {"lazy": false, "type": "(Any -> Any -> Ordering) | Nothing", "checked": true, "default": "Nothing"}},"aliases": ["order_by"],"group": "Standard.Base.Selections","icon": "order","description": "Sorts the column according to the specified rules."},
{"module": "Standard.Table.Column", "type": "Column", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Standard.Base.Selections","icon": "parse3","description": "Creates a new Column with the specified range of rows from the input Column.","returns": "A new Column containing the selected rows.","errors": "A new Column containing the selected rows."},
{"module": "Standard.Table.Column", "type": "Column", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Standard.Base.Selections","icon": "parse3","description": "Creates a new Column from the input with the specified range of rows removed."},
{"module": "Standard.Table.Column", "type": "Column", "name": "slice", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": [],"description": "Returns a column with a continuous sub-range of rows taken."},
{"module": "Standard.Table.Column", "type": "Column", "name": "first", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Returns the first element in the column, if it exists.  If the column is empty, this method will return a dataflow error containing an `Index_Out_Of_Bounds`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "last", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns the last element in the column, if it exists.  If the column is empty, this method will return a dataflow error containing an `Index_Out_Of_Bounds`."},
{"module": "Standard.Table.Column", "type": "Column", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "order","description": "Returns a column containing the values of `self` column with their order reversed."},
{"module": "Standard.Table.Column", "type": "Column", "name": "duplicate_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a column of numbers, in which every entry denotes how many times the value at the given position occured before."},
{"module": "Standard.Table.Column", "type": "Column", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Provides a simplified text representation for display in the REPL and errors."},
{"module": "Standard.Table.Column", "type": "Column", "name": "naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "This is a shortcut for API compatibility."},
{"module": "Standard.Table.Column", "type": "Column", "name": "compute", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}},"aliases": ["count", "kurtosis", "maximum", "mean", "median", "minimum", "mode", "skew", "standard_deviation", "statistic", "sum", "variance"],"group": "Standard.Base.Statistics","icon": "transform4","description": "Compute a single statistic on the column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "compute_bulk", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"statistics": {"lazy": false, "type": "Vector Statistic", "checked": true, "default": "[Statistic.Count, Statistic.Sum]"}},"aliases": ["count", "kurtosis", "maximum", "mean", "median", "minimum", "mode", "skew", "standard_deviation", "statistic", "sum", "variance"],"icon": "transform4","description": "Compute statistics on the column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "running", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "statistic.to_text+\" \"+self.name"}},"aliases": ["count", "cumulative", "maximum", "mean", "minimum", "product", "standard deviation", "sum", "sum", "total", "variance"],"group": "Standard.Base.Statistics","icon": "transform4","description": "Compute a single running statistic on the column."},
{"module": "Standard.Table.Column", "type": "Column", "name": "offset", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column", "arguments": {"n": {"lazy": false, "default": "-1:Integer"}, "fill_with": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}},"aliases": ["displace", "lag", "lead", "shift", "slide"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a new column offset by n rows, where missing values have been replaced with the provided fill_with strategy."},
{"module": "Standard.Table.Column", "type": "Column", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "_run_vectorized_many_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}, "fallback_fn": {"lazy": false, "type": "Any -> Any -> Any", "checked": true}, "operands": {"lazy": false}, "new_name": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Folds the vectorized operation over the provided column and values. When more than one value to is provided, the result is folded with subsequent values."},
{"module": "Standard.Table.Column", "type": "", "name": "run_vectorized_binary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "name": {"lazy": false}, "operand": {"lazy": false}, "new_name": {"lazy": false, "default": "Nothing"}, "fallback_fn": {"lazy": false, "default": "Nothing"}, "expected_result_type": {"lazy": false, "default": "Nothing"}, "skip_nulls": {"lazy": false, "default": "True"}},"aliases": [],"description": "Executes a vectorized binary operation over the provided column."},
{"module": "Standard.Table.Column", "type": "", "name": "run_vectorized_ternary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "name": {"lazy": false}, "operand0": {"lazy": false}, "operand1": {"lazy": false}, "new_name": {"lazy": false, "default": "Nothing"}, "expected_result_type": {"lazy": false, "default": "Nothing"}, "skip_nulls": {"lazy": false, "default": "True"}},"aliases": [],"description": "Executes a vectorized ternary operation over the provided column."},
{"module": "Standard.Table.Column", "type": "", "name": "run_binary_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "function": {"lazy": false}, "operand": {"lazy": false}, "new_name": {"lazy": false}, "skip_nulls": {"lazy": false, "default": "True"}, "expected_result_type": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Runs a binary operation over the provided column and operand which may be another column or a scalar value."},
{"module": "Standard.Table.Column", "type": "", "name": "run_vectorized_binary_op_with_fallback_problem_handling", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "name": {"lazy": false}, "operand": {"lazy": false}, "fallback_fn": {"lazy": false}, "new_name": {"lazy": false}, "expected_result_type": {"lazy": false, "default": "Nothing"}, "skip_nulls": {"lazy": false, "default": "True"}},"aliases": [],"description": "Executes a vectorized binary operation over the provided column."},
{"module": "Standard.Table.Column", "type": "", "name": "slice_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "ranges": {"lazy": false}},"aliases": [],"description": "A helper to create a new table consisting of slices of the original table."},
{"module": "Standard.Table.Column", "type": "", "name": "make_storage_builder_for_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}, "on_problems": {"lazy": false}, "initial_size": {"lazy": false}, "java_problem_aggregator": {"lazy": false}},"aliases": [],"description": "Creates a storage builder suitable for building a column for the provided column type.  If a value type is not supported, its closest match is selected and an `Inexact_Type_Coercion` problem is reported."},
{"module": "Standard.Table.Column", "type": "", "name": "run_vectorized_binary_case_text_op", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left": {"lazy": false}, "op": {"lazy": false}, "other": {"lazy": false}, "case_sensitivity": {"lazy": false}, "fallback": {"lazy": false}, "new_name": {"lazy": false}},"aliases": [],"description": "Helper for case case_sensitivity based text operations. The fallback is needed to handle custom case sensitivity options, until the vectorized operation can take that parameter."},
{"module": "Standard.Table.Column", "type": "", "name": "resolve_storage_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": [],"description": "Converts the value type to a storage type, passing `Nothing` through.  Sometimes we do not specify the storage type as it should be inferred by the vectorized operation, in which case it can be `Nothing`."},
{"module": "Standard.Table.Column", "type": "", "name": "wrap_text_argument_as_value_provider", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "wrap_text_or_regex_argument_as_value_provider", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "cast_if_needed", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "value_type": {"lazy": false}},"aliases": [],"description": "Cast a column to a `Value_Type`, unless it already has that type."},
{"module": "Standard.Table.Column", "type": "", "name": "naming_helper", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "default_date_period", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Resolves the default date period for `date_add` depending on the source column value type."},
{"module": "Standard.Table.Column", "type": "", "name": "fill_previous", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "is_missing": {"lazy": false}},"aliases": [],"description": "Fills the missing values in a provided column with the previous non-missing value."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Vector\""}},"aliases": [],"description": "Conversion method to a Column from a Vector."},
{"module": "Standard.Table.Column", "type": "Vector", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "Conversion method to a Column to a Vector."},
{"module": "Standard.Table.Column", "type": "Vector", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": [],"description": "Conversion method to a Table to a Vector."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Range\""}},"aliases": [],"description": "Conversion method to a Column from a Vector."},
{"module": "Standard.Table.Column", "type": "Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "that.default_column_name"}},"aliases": [],"description": "Conversion method to a Column from a Vector."},
{"module": "Standard.Table.Column", "type": "Cleansable_Text", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "apply_unary_operation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}, "operation": {"lazy": false, "type": "UnaryOperation", "checked": true}, "new_name": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}, "if_unsupported": {"lazy": true, "default": "Panic.throw (Illegal_State.Error \"Unsupported unary operation for column called \"+column.name+\". This is a bug in the Table library.\")"}},"aliases": [],"description": "Applies a UnaryOperation to a column."},
{"module": "Standard.Table.Column", "type": "", "name": "apply_unary_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Column", "checked": true}, "new_name": {"lazy": false, "type": "Text", "checked": true}, "function": {"lazy": false}, "expected_result_type": {"lazy": false, "type": "Value_Type|Nothing", "checked": true, "default": "Nothing"}, "nothing_unchanged": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Applies a function to every row in the column."},
{"module": "Standard.Table.Column", "type": "Many_Files_List", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": []},
{"module": "Standard.Table.Column", "type": "", "name": "_call_comparator", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left": {"lazy": false}, "other": {"lazy": false}, "new_name": {"lazy": false}, "comparator": {"lazy": true}, "enso_action": {"lazy": true}},"aliases": [],"description": "Temporary function to determine if to use the Comparators statics or embedded operations."},
{"module": "Standard.Table.Column", "type": "", "name": "_apply_case_sensitive_text_operation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"left": {"lazy": false, "type": "Column", "checked": true}, "other": {"lazy": false, "type": "Column | Text | Any", "checked": true}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true}, "operation": {"lazy": false}, "fallback_fn": {"lazy": false}, "new_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "All_Columns", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Add", "arguments": {},"aliases": [],"description": "Add all available columns."},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "First", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Add", "arguments": {"columns": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Add the first specified number of columns."},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "columns_to_split", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer | Nothing", "arguments": {},"aliases": [],"description": "Gets the number of columns to add (or Nothing if all columns)."},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Columns_To_Add", "type": "Columns_To_Add", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Columns_To_Keep", "type": "Columns_To_Keep", "name": "In_Any", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Keep", "arguments": {},"aliases": [],"description": "All columns are kept.  If a column is present only in some of the tables, it is padded with `Nothing` for tables where it is missing."},
{"module": "Standard.Table.Columns_To_Keep", "type": "Columns_To_Keep", "name": "In_All", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Keep", "arguments": {},"aliases": [],"description": "Only columns that are present in all tables are kept.  If there are columns that are only present in some of the tables, a problem is reported."},
{"module": "Standard.Table.Columns_To_Keep", "type": "Columns_To_Keep", "name": "In_List", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Keep", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true, "default": "Missing_Argument.throw \"column_names\""}},"aliases": [],"description": "Specific list of column names to keep.  If a table does not have a column that is specified in the list, it is padded with `Nothing` and a problem is reported."},
{"module": "Standard.Table.Columns_To_Keep", "type": "Columns_To_Keep", "name": "In_Any_Warn_On_Missing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Columns_To_Keep", "arguments": {},"aliases": [],"description": "All columns are kept, but it will warn about columns that are not present in all tables.  If a column is present only in some of the tables, it is padded with `Nothing` for tables where it is missing."},
{"module": "Standard.Table.Columns_To_Keep", "type": "Columns_To_Keep", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": [],"description": "The default widget for `Columns_To_Keep`. It does not display the internal `In_Any_Warn_On_Missing` variant, since that variant is only meant to be used as the default value."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number|Text", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number|Text", "checked": true}},"aliases": [],"description": "Add two values/columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Subtract", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Subtract two values/columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Multiply", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Multiply two values/columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Divide", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Divide a fixed value or column by another value or column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Mod", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Compute the remainder of a fixed value or column divided by another value or column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Power", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Raise a fixed value or column to the power of another value or column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Round", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}, "precision": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Rounds values in the column to the specified precision."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Ceil", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Rounds values in the column up to the nearest integer."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Floor", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true}},"aliases": [],"description": "Rounds values in the column down to the nearest integer."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Truncate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Number|Date_Time", "checked": true}},"aliases": [],"description": "Truncates the fractional part of values in the column. If a Date_Time, returns the Date."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Min", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true}},"aliases": [],"description": "Returns the minimum value of two columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Max", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true}},"aliases": [],"description": "Returns the maximum value of two columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Date_Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true}, "length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Adds a period to a date/time column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Date_Part", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true}},"aliases": [],"description": "Returns part of a date/time column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Date_Diff", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true}, "end": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Returns the difference between two date/time columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Not", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true}},"aliases": [],"description": "Negate a boolean column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "And", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true}},"aliases": [],"description": "Boolean AND on two boolean columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Or", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true}, "rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true}},"aliases": [],"description": "Boolean OR on two boolean columns."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "If", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true}, "condition": {"lazy": false, "type": "Filter_Condition", "checked": true}, "true_value": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "True"}, "false_value": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "False"}},"aliases": [],"description": "If input meets a condition return true value, otherwise false value.  The `true_value` and `false_value` can be either a constant or a column."},
{"module": "Standard.Table.Column_Operation", "type": "Column_Operation", "name": "Trim", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Operation", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true}, "where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "type": "Text|Column_Ref", "checked": true, "default": "\"\""}},"aliases": [],"description": "Removes the specified characters, by default any whitespace, from the start, the end, or both ends of the input."},
{"module": "Standard.Table.Column_Operation", "type": "Simple_Expression", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column_Operation", "checked": true}},"aliases": []},
{"module": "Standard.Table.Column_Ref", "type": "Column_Ref", "name": "Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Ref", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Reference to a column by name in a table."},
{"module": "Standard.Table.Column_Ref", "type": "Column_Ref", "name": "Index", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column_Ref", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": [],"description": "Reference to a column by index in a table."},
{"module": "Standard.Table.Constants", "type": "Previous_Value", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Previous_Value", "arguments": {},"aliases": [],"description": "Indicates that the operation should use the previous non-missing value to when filling in missing values, for example in `fill_nothing` and `fill_empty`."},
{"module": "Standard.Table.Constants", "type": "Report_Unmatched", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Report_Unmatched", "arguments": {},"aliases": [],"description": "A value that marks the mode that allows column mismatches but reports them as a problem."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Data_Formatter", "arguments": {"trim_values": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "allow_leading_zeros": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "decimal_point": {"lazy": false, "type": "Text|Auto", "checked": true, "default": "Auto"}, "thousand_separator": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "allow_exponential_notation": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "datetime_formats": {"lazy": false, "type": "Vector Date_Time_Formatter", "checked": true, "default": "[Date_Time_Formatter.default_enso_zoned_date_time]"}, "date_formats": {"lazy": false, "type": "Vector Date_Time_Formatter", "checked": true, "default": "[Date_Time_Formatter.iso_date]"}, "time_formats": {"lazy": false, "type": "Vector Text", "checked": true, "default": "[Date_Time_Formatter.iso_time]"}, "true_values": {"lazy": false, "type": "Vector Text", "checked": true, "default": "[\"True\",\"true\",\"TRUE\"]"}, "false_values": {"lazy": false, "type": "Vector Text", "checked": true, "default": "[\"False\",\"false\",\"FALSE\"]"}},"aliases": [],"description": "Specifies options for reading text data in a table to more specific types and serializing them back.  For date and time formats, see `Date_Time_Formatter`."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "parse", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"text": {"lazy": false}, "type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Parse a Text into a value."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "format", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Format a value into a Text."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "with_number_formatting", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"decimal_point": {"lazy": false, "default": "self.decimal_point"}, "thousand_separator": {"lazy": false, "default": "self.thousand_separator"}, "allow_leading_zeros": {"lazy": false, "default": "self.allow_leading_zeros"}, "allow_exponential_notation": {"lazy": false, "default": "self.allow_exponential_notation"}},"aliases": [],"icon": "convert","description": "Create a clone of self with specified number formatting options."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "with_datetime_formats", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"datetime_formats": {"lazy": false, "type": "Vector | Date_Time_Formatter", "checked": true, "default": "self.datetime_formats"}, "date_formats": {"lazy": false, "type": "Vector | Date_Time_Formatter", "checked": true, "default": "self.date_formats"}, "time_formats": {"lazy": false, "type": "Vector | Date_Time_Formatter", "checked": true, "default": "self.time_formats"}},"aliases": [],"icon": "convert","description": "Specify values for Date/Time parsing.  A plain text pattern can be provided and it will be automatically converted into a `Date_Time_Formatter` using simple pattern parsing rules. See `Date_Time_Formatter` for available options."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "with_boolean_values", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"true_values": {"lazy": false}, "false_values": {"lazy": false}},"aliases": [],"icon": "convert","description": "Specify values for Boolean parsing."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "with_format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"type": {"lazy": false}, "format": {"lazy": false}},"aliases": [],"icon": "convert","description": "Create a clone of self with a changed format string for a particular datatype.  It is mostly a convenience function to easily specify a datatype format."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "clone", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"trim_values": {"lazy": false, "default": "self.trim_values"}, "allow_leading_zeros": {"lazy": false, "default": "self.allow_leading_zeros"}, "decimal_point": {"lazy": false, "default": "self.decimal_point"}, "thousand_separator": {"lazy": false, "default": "self.thousand_separator"}, "allow_exponential_notation": {"lazy": false, "default": "self.allow_exponential_notation"}, "datetime_formats": {"lazy": false, "default": "self.datetime_formats"}, "date_formats": {"lazy": false, "default": "self.date_formats"}, "time_formats": {"lazy": false, "default": "self.time_formats"}, "true_values": {"lazy": false, "default": "self.true_values"}, "false_values": {"lazy": false, "default": "self.false_values"}},"aliases": [],"description": "Clone the instance with some properties overridden."},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "get_thousand_separator", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "wrap_base_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"base_parser": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_integer_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"auto_mode": {"lazy": false, "default": "False"}, "target_type": {"lazy": false, "default": "Value_Type.Integer"}},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_decimal_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"auto_mode": {"lazy": false, "default": "False"}},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_boolean_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_date_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_date_time_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_time_of_day_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_identity_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_value_type_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value_type": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "get_specific_type_parsers", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_auto_parser", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_integer_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_decimal_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_date_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_time_of_day_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_date_time_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_boolean_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_text_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "get_specific_type_formatters", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_auto_formatter", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "Data_Formatter", "name": "make_formatter_for_column_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": []},
{"module": "Standard.Table.Data_Formatter", "type": "", "name": "wrap_text_in_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false}},"aliases": [],"description": "Utility function to convert single text value to a vector"},
{"module": "Standard.Table.Data_Formatter", "type": "", "name": "make_vector_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"single_choice_widget": {"lazy": false}, "display": {"lazy": false, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Missing_Input_Columns", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Missing_Input_Columns", "arguments": {"criteria": {"lazy": false, "type": "[Text | Integer]", "checked": true}, "where": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "One or more columns not found in the input table."},
{"module": "Standard.Table.Errors", "type": "Missing_Input_Columns", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert a missing input error to a human-readable form."},
{"module": "Standard.Table.Errors", "type": "Too_Many_Column_Names_Provided", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Too_Many_Column_Names_Provided", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "More names than the column count provided to the function. Can occur when using By_Position."},
{"module": "Standard.Table.Errors", "type": "Too_Many_Column_Names_Provided", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Convert a too many columns error to a human-readable form."},
{"module": "Standard.Table.Errors", "type": "Invalid_Column_Names", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Column_Names", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "extra_message": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Create an invalid column names error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Column_Names", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Handles the Java counterpart `InvalidColumnNameException` and converts it into a dataflow error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Column_Names", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the invalid output columns error."},
{"module": "Standard.Table.Errors", "type": "Duplicate_Output_Column_Names", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Duplicate_Output_Column_Names", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "Create an duplicate column names error."},
{"module": "Standard.Table.Errors", "type": "Duplicate_Output_Column_Names", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the duplicate output column names error."},
{"module": "Standard.Table.Errors", "type": "No_Output_Columns", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Output_Columns", "arguments": {"cause": {"lazy": false, "type": "Any | Nothing", "checked": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "No_Output_Columns", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the no output columns error."},
{"module": "Standard.Table.Errors", "type": "Ambiguous_Column_Rename", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ambiguous_Column_Rename", "arguments": {"column_name": {"lazy": false, "type": "Text", "checked": true}, "new_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Ambiguous_Column_Rename", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty prints the error."},
{"module": "Standard.Table.Errors", "type": "No_Input_Columns_Selected", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "No_Input_Columns_Selected", "arguments": {},"aliases": [],"description": "Indicates that no input columns were selected for the operation, so the operation will cause no effect."},
{"module": "Standard.Table.Errors", "type": "No_Input_Columns_Selected", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Aggregation", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Aggregation", "arguments": {"column": {"lazy": false, "type": "Text", "checked": true}, "rows": {"lazy": false, "type": "Vector Integer", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Aggregation", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Ignored_NaN_Values", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ignored_NaN_Values", "arguments": {"column": {"lazy": false, "type": "Text", "checked": true}, "rows": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Ignored_NaN_Values", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Ignored_Nothing_Values", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ignored_Nothing_Values", "arguments": {"column": {"lazy": false, "type": "Text", "checked": true}, "rows": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Ignored_Nothing_Values", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Unquoted_Delimiter", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unquoted_Delimiter", "arguments": {"column": {"lazy": false, "type": "Text", "checked": true}, "rows": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unquoted_Delimiter", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Row", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Row", "arguments": {"source_file_line_number": {"lazy": false, "type": "Integer", "checked": true}, "index": {"lazy": false, "type": "Integer | Nothing", "checked": true}, "row": {"lazy": false, "type": "Vector Text", "checked": true}, "expected_columns": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Row", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Additional_Invalid_Rows", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Additional_Invalid_Rows", "arguments": {"count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Additional_Invalid_Rows", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Mismatched_Quote", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Mismatched_Quote", "arguments": {"cell_text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Mismatched_Quote", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Parser_Error", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Parser_Error", "arguments": {"cause": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unquoted_Characters_In_Output", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unquoted_Characters_In_Output", "arguments": {"column": {"lazy": false, "type": "Text", "checked": true}, "rows": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unquoted_Characters_In_Output", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the unquoted characters error."},
{"module": "Standard.Table.Errors", "type": "Unquoted_Characters_In_Output", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Location", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Location", "arguments": {"location": {"lazy": false, "type": "Text | Any", "checked": true}, "message": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Location", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the invalid location error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Format", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Format", "arguments": {"column": {"lazy": false, "type": "Text|Nothing", "checked": true}, "value_type": {"lazy": false, "type": "Value_Type|Integer|Number|Date|Date_Time|Time_Of_Day|Boolean|Any", "checked": true}, "count": {"lazy": false, "type": "Integer", "checked": true}, "cells": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Format", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the invalid format error."},
{"module": "Standard.Table.Errors", "type": "Empty_File_Error", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Empty_File_Error", "arguments": {},"aliases": [],"description": "Indicates that an empty file was encountered, so no data could be loaded."},
{"module": "Standard.Table.Errors", "type": "Empty_File_Error", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Empty_File_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the empty file error."},
{"module": "Standard.Table.Errors", "type": "Empty_Sheet", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Empty_Sheet", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Empty_Sheet", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Empty_Sheet", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the empty sheet error."},
{"module": "Standard.Table.Errors", "type": "Existing_Column", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Column", "arguments": {"column_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Existing_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Missing_Column", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Missing_Column", "arguments": {"column_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Missing_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Existing_Data", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Existing_Data", "arguments": {"message": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Existing_Data", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Range_Exceeded", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Range_Exceeded", "arguments": {"message": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Range_Exceeded", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Column_Count_Mismatch", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Count_Mismatch", "arguments": {"expected": {"lazy": false}, "actual": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Column_Count_Mismatch", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Column_Count_Mismatch", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Column_Name_Mismatch", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Name_Mismatch", "arguments": {"missing": {"lazy": false}, "extras": {"lazy": false}, "message": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Column_Name_Mismatch", "name": "handle_java_exception", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Column_Name_Mismatch", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "No_Such_Column", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Such_Column", "arguments": {"column_name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "No_Such_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the no such column error."},
{"module": "Standard.Table.Errors", "type": "No_Index_Set_Error", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "No_Index_Set_Error", "arguments": {},"aliases": [],"description": "An error returned when getting an index but no index is set for that table."},
{"module": "Standard.Table.Errors", "type": "No_Index_Set_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the no index set error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "Column", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Value_Type", "arguments": {"expected": {"lazy": false, "type": "Value_Type|Text", "checked": true}, "actual": {"lazy": false, "type": "Value_Type", "checked": true}, "related_column": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that a column with an unexpected value type has been encountered."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Value_Type", "arguments": {"expected": {"lazy": false, "type": "Value_Type|Text", "checked": true}, "actual": {"lazy": false, "type": "Value_Type", "checked": true}, "value": {"lazy": false, "type": "Any", "checked": true}},"aliases": [],"description": "Indicates that a value with an unexpected value type has been encountered."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "Not_Ordered", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Value_Type", "arguments": {"actual": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Indicates that a value type does not support comparisons."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "Incomparable", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Value_Type", "arguments": {"type_1": {"lazy": false, "type": "Value_Type", "checked": true}, "type_2": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Indicates that the two value types cannot be compared with each other."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_Type", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_JSON_Format", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_JSON_Format", "arguments": {"input": {"lazy": false}, "message": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_JSON_Format", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a human-readable representation of the Invalid_JSON_Format."},
{"module": "Standard.Table.Errors", "type": "Column_Type_Mismatch", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Type_Mismatch", "arguments": {"column_name": {"lazy": false, "type": "Text", "checked": true}, "expected_type": {"lazy": false, "type": "Text | Value_Type", "checked": true}, "got_type": {"lazy": false, "type": "Text | Value_Type", "checked": true}},"aliases": [],"description": "An error indicating a mismatch of column types of merged columns."},
{"module": "Standard.Table.Errors", "type": "Column_Type_Mismatch", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "No_Common_Type", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Common_Type", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "related_column_name": {"lazy": false, "type": "Nothing|Text", "checked": true}},"aliases": [],"description": "An error indicating that no common type could be found, and the operation could not be performed."},
{"module": "Standard.Table.Errors", "type": "No_Common_Type", "name": "Warning_Convert_To_Text", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Common_Type", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "related_column_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A warning indicating that no common type could be found, so the operation had to fall back to converting all values to text."},
{"module": "Standard.Table.Errors", "type": "No_Common_Type", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "No_Common_Type", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unmatched_Columns", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unmatched_Columns", "arguments": {"column_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "An error indicating that some columns were not present in all of the merged tables."},
{"module": "Standard.Table.Errors", "type": "Unmatched_Columns", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Cross_Join_Row_Limit_Exceeded", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Cross_Join_Row_Limit_Exceeded", "arguments": {"limit": {"lazy": false, "type": "Integer", "checked": true}, "existing_rows": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that a `cross_join` has been attempted where the right table has more rows than allowed by the limit."},
{"module": "Standard.Table.Errors", "type": "Cross_Join_Row_Limit_Exceeded", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Row_Count_Mismatch", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Row_Count_Mismatch", "arguments": {"left_rows": {"lazy": false, "type": "Integer", "checked": true}, "right_rows": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the row counts of zipped tables do not match."},
{"module": "Standard.Table.Errors", "type": "Row_Count_Mismatch", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Invalid_Aggregate_Column", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Aggregate_Column", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "expression_error": {"lazy": false, "type": "Expression_Error | No_Such_Column | Nothing", "checked": true}},"aliases": [],"description": "Indicates that a provided name is not found within available columns nor represents a valid expression."},
{"module": "Standard.Table.Errors", "type": "Invalid_Aggregate_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Inexact_Type_Coercion", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Inexact_Type_Coercion", "arguments": {"requested_type": {"lazy": false, "type": "Value_Type", "checked": true}, "actual_type": {"lazy": false, "type": "Value_Type", "checked": true}, "unavailable": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Indicates that the requested `Value_Type` is not available in the given backend, so it was replaced by its closest available type."},
{"module": "Standard.Table.Errors", "type": "Inexact_Type_Coercion", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Inexact_Type_Coercion", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Conversion_Failure", "name": "Error", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Conversion_Failure", "arguments": {"target_type": {"lazy": false, "type": "Value_Type", "checked": true}, "related_column": {"lazy": false, "type": "Text|Nothing", "checked": true}, "affected_rows_count": {"lazy": false, "type": "Nothing|Integer", "checked": true}, "example_values": {"lazy": false, "type": "Vector Any", "checked": true}},"aliases": [],"description": "Indicates that some values from the column could not be converted to the desired type.  This may occur for example when a number does not fit the range of the target type."},
{"module": "Standard.Table.Errors", "type": "Conversion_Failure", "name": "Text_Too_Long", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Conversion_Failure", "arguments": {"target_type": {"lazy": false, "type": "Value_Type", "checked": true}, "related_column": {"lazy": false, "type": "Text|Nothing", "checked": true}, "affected_rows_count": {"lazy": false, "type": "Nothing|Integer", "checked": true}, "example_values": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": [],"description": "Indicates that for some values, their text representation is too long for the target text type."},
{"module": "Standard.Table.Errors", "type": "Conversion_Failure", "name": "Out_Of_Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Conversion_Failure", "arguments": {"target_type": {"lazy": false, "type": "Value_Type", "checked": true}, "related_column": {"lazy": false, "type": "Text|Nothing", "checked": true}, "affected_rows_count": {"lazy": false, "type": "Nothing|Integer", "checked": true}, "example_values": {"lazy": false, "type": "Vector Integer", "checked": true}},"aliases": [],"description": "Indicates that some values are out of the range of the target type."},
{"module": "Standard.Table.Errors", "type": "Conversion_Failure", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Integer_Precision", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Loss_Of_Integer_Precision", "arguments": {"affected_rows_count": {"lazy": false, "type": "Integer", "checked": true}, "example_value": {"lazy": false, "type": "Integer", "checked": true}, "example_value_converted": {"lazy": false, "type": "Float", "checked": true}},"aliases": [],"description": "Indicates that an automatic conversion of an Integer column to a Float column is losing precision because some of the large integers cannot be exactly represented by the floating-point type.  Currently, this error is only reported in-memory."},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Integer_Precision", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Integer_Precision", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Decimal_Precision", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Loss_Of_Decimal_Precision", "arguments": {"affected_rows_count": {"lazy": false, "type": "Integer", "checked": true}, "example_value": {"lazy": false, "type": "Decimal", "checked": true}, "example_value_converted": {"lazy": false, "type": "Float", "checked": true}},"aliases": [],"description": "Indicates that an automatic conversion of a Decimal column to a Float column is losing precision because some of the values cannot be exactly represented by the floating-point type.  Currently, this error is only reported in-memory."},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Decimal_Precision", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Loss_Of_Decimal_Precision", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Arithmetic_Overflow", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Arithmetic_Overflow", "arguments": {"target_type": {"lazy": false, "type": "Value_Type", "checked": true}, "affected_rows_count": {"lazy": false, "type": "Nothing|Integer", "checked": true}, "example_operands": {"lazy": false, "type": "Nothing | Vector Any", "checked": true}},"aliases": [],"description": "Indicates that the result of an arithmetic operation is too large to fit the target type."},
{"module": "Standard.Table.Errors", "type": "Arithmetic_Overflow", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Arithmetic_Overflow", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_For_Type", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Invalid_Value_For_Type", "arguments": {"value": {"lazy": false, "type": "Any", "checked": true}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "Indicates that a column construction/transformation failed because the provided value is not valid for the requested column type."},
{"module": "Standard.Table.Errors", "type": "Invalid_Value_For_Type", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Column_Count_Exceeded", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column_Count_Exceeded", "arguments": {"limit": {"lazy": false, "type": "Integer", "checked": true}, "column_count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that an operation generating new columns produced more columns than allowed by the limit."},
{"module": "Standard.Table.Errors", "type": "Column_Count_Exceeded", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Errors", "type": "Name_Too_Long", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Name_Too_Long", "arguments": {"entity_kind": {"lazy": false, "type": "Text", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}, "extra_message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that a table/column name is too long for the given backend."},
{"module": "Standard.Table.Errors", "type": "Name_Too_Long", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the column name too long error."},
{"module": "Standard.Table.Errors", "type": "Truncated_Column_Names", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Truncated_Column_Names", "arguments": {"names_map": {"lazy": false, "type": "Dictionary Text Text", "checked": true}},"aliases": [],"description": "Indicates that some column names were truncated to fit the maximum length supported by the backend."},
{"module": "Standard.Table.Errors", "type": "Truncated_Column_Names", "name": "original_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get the original column names."},
{"module": "Standard.Table.Errors", "type": "Truncated_Column_Names", "name": "truncated_names", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get the truncated names."},
{"module": "Standard.Table.Errors", "type": "Truncated_Column_Names", "name": "find_truncated_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Truncated_Column_Names", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the truncated column names warning."},
{"module": "Standard.Table.Errors", "type": "Clashing_Column_Name", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Clashing_Column_Name", "arguments": {"provided_name": {"lazy": false, "type": "Text", "checked": true}, "clashing_name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Indicates that a provided column name is clashing with another column name in the `Table.set` operation."},
{"module": "Standard.Table.Errors", "type": "Clashing_Column_Name", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the clashing column name error."},
{"module": "Standard.Table.Errors", "type": "Unexpected_Extra_Columns", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unexpected_Extra_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unexpected_Extra_Columns", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the unexpected extra columns warning."},
{"module": "Standard.Table.Errors", "type": "Unmatched_Rows_In_Lookup", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Unmatched_Rows_In_Lookup", "arguments": {"example_key_values": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Unmatched_Rows_In_Lookup", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the unmatched rows in lookup error."},
{"module": "Standard.Table.Errors", "type": "Non_Unique_Key", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Non_Unique_Key", "arguments": {"key_column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "clashing_example_key_values": {"lazy": false, "type": "Vector Any", "checked": true}, "clashing_example_row_count": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Indicates that the columns selected for the primary key do not uniquely identify rows in the table."},
{"module": "Standard.Table.Errors", "type": "Non_Unique_Key", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Pretty print the non-unique primary key error."},
{"module": "Standard.Table.Errors", "type": "Null_Values_In_Key_Columns", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Null_Values_In_Key_Columns", "arguments": {"example_row": {"lazy": false, "type": "Vector Any", "checked": true}, "add_sql_suffix": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Indicates that the source table contained NULL values in key columns. Rows containing NULL values as part of their key will not be correctly correlated with target rows due to how NULL equality works in SQL."},
{"module": "Standard.Table.Errors", "type": "Null_Values_In_Key_Columns", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Not_All_Rows_Downloaded", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Not_All_Rows_Downloaded", "arguments": {"max_rows": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Not_All_Rows_Downloaded", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Nothing_Value_In_Filter_Condition", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Nothing_Value_In_Filter_Condition", "arguments": {"filter_condition": {"lazy": false, "type": "Filter_Condition", "checked": true}},"aliases": [],"description": "Indicates that a Nothing/NULL value was used as a parameter to a `Filter_Condition` comparison or `is_in` operation."},
{"module": "Standard.Table.Errors", "type": "Nothing_Value_In_Filter_Condition", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Mixing_Date_Time_Types", "name": "Date_To_Date_Time", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Mixing_Date_Time_Types", "arguments": {"related_column_name": {"lazy": false, "type": "Text | Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Mixing_Date_Time_Types", "name": "Implicit_Time_Zone", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Mixing_Date_Time_Types", "arguments": {"related_column_name": {"lazy": false, "type": "Text | Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Errors", "type": "Mixing_Date_Time_Types", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Table.Errors", "type": "No_Rows", "name": "Warning", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Rows", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "The message should be used to provide additional context."},
{"module": "Standard.Table.Errors", "type": "No_Rows", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": []},
{"module": "Standard.Table.Expression", "type": "Expression", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Expression", "arguments": {"expression": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Creates an expression from a Text value."},
{"module": "Standard.Table.Expression", "type": "Expression", "name": "evaluate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Expression", "checked": true}, "get_column": {"lazy": false}, "make_constant": {"lazy": false}, "is_column": {"lazy": false}, "module_name": {"lazy": false}, "type_name": {"lazy": false}, "var_args_functions": {"lazy": false}},"aliases": [],"description": "Evaluates an expression and returns the result"},
{"module": "Standard.Table.Expression", "type": "Expression_Error", "name": "Syntax_Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}, "line": {"lazy": false, "type": "Integer", "checked": true}, "column": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "The expression supplied could not be parsed due to a syntax error."},
{"module": "Standard.Table.Expression", "type": "Expression_Error", "name": "Unsupported_Operation", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Error", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Expression error when a function could not be found on the target type."},
{"module": "Standard.Table.Expression", "type": "Expression_Error", "name": "Argument_Mismatch", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Expression_Error", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Expression error when the number of arguments for a function is incorrect."},
{"module": "Standard.Table.Expression", "type": "Expression_Error", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a human-readable version of the error."},
{"module": "Standard.Table.Expression", "type": "", "name": "expr", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Expression", "arguments": {"expression": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"icon": "column_add","description": "Create an expression from a Text value."},
{"module": "Standard.Table.Expression", "type": "", "name": "handle_java_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"java_type": {"lazy": false}, "enso_constructor": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Expression_Statics", "arguments": {},"aliases": [],"description": "Set of static functions for expression support allowing callback to Enso code."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "today", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date", "arguments": {},"aliases": [],"description": "Obtains the current date from the system clock in the system timezone."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "now", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Time", "arguments": {},"aliases": [],"description": "Obtains the current date-time from the system clock in the system timezone."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "time", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Time_Of_Day", "arguments": {},"aliases": [],"description": "Obtains the current time from the system clock in the default time-zone."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "regex", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false}},"aliases": [],"description": "Creates a regular expression (alternatively use r/expression/)"},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "*", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Multiples two values."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "/", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Divides this by that."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "+", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Adds two values."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "-", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Subtracts that from this."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "==", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares two values for equality."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "!=", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares two values for inequality."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "^", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compute the result of raising this to the power that."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "%", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Computes the remainder when dividing this by that."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "<", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares if this is less than that"},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "<=", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares if this is less than or equal to that"},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": ">", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares if this is greater than that"},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": ">=", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"this": {"lazy": false}, "that": {"lazy": false}},"aliases": [],"description": "Compares if this is greater than or equal to that"},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "pi", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"description": "The mathematical constant pi, equal to the ratio of a circle circumference to its diameter."},
{"module": "Standard.Table.Expression_Statics", "type": "Expression_Statics", "name": "e", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Float", "arguments": {},"aliases": [],"description": "The mathematical constant e, the base of the natural logarithm."},
{"module": "Standard.Table.Fill_With", "type": "Fill_With", "name": "Nothing", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fill_With", "arguments": {},"aliases": [],"description": "Fills gaps created by offset with Nothing Values"},
{"module": "Standard.Table.Fill_With", "type": "Fill_With", "name": "Closest_Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fill_With", "arguments": {},"aliases": [],"description": "Fills gaps created by offset with the first value when shifting downwards or the last value when shifting upwards"},
{"module": "Standard.Table.Fill_With", "type": "Fill_With", "name": "Wrap_Around", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Fill_With", "arguments": {},"aliases": [],"description": "Fills the gaps created by offset with the values that got slid off the other end"},
{"module": "Standard.Table.Fill_With", "type": "Fill_With", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "Integer_Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generate_Rows_Range", "arguments": {"from": {"lazy": false, "type": "Integer | Column_Ref | Expression", "checked": true, "default": "Missing_Argument.throw \"from\""}, "to": {"lazy": false, "type": "Integer | Column_Ref | Expression", "checked": true, "default": "Missing_Argument.throw \"to\""}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": [],"description": "A integer range"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "Date_Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generate_Rows_Range", "arguments": {"from": {"lazy": false, "type": "Date | Column_Ref | Expression", "checked": true, "default": "Missing_Argument.throw \"from\""}, "to": {"lazy": false, "type": "Date | Column_Ref | Expression", "checked": true, "default": "Missing_Argument.throw \"to\""}, "include_end": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "step": {"lazy": false, "type": "Date_Period|Period", "checked": true, "default": "..Day"}},"aliases": [],"description": "A date range"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "Range", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generate_Rows_Range", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "An existing range that will be used for each row"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "Integer_Column", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Generate_Rows_Range", "arguments": {"value": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "An existing column of integers that will be used to to create a 0 to n range for each row"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Create a widget for operation"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "get_range_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Column", "arguments": {"table": {"lazy": false}, "on_problems": {"lazy": false}},"aliases": [],"description": "Gets the column of ranges to use for generating rows"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": [],"description": "Convert an integer to a Generate_Rows_Range"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}},"aliases": [],"description": "Convert from an integer range to a Generate_Rows_Range"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}},"aliases": [],"description": "Convert from a date range to a Generate_Rows_Range"},
{"module": "Standard.Table.Generate_Rows_Range", "type": "Generate_Rows_Range", "name": "from", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "Convert from a column of integers to a Generate_Rows_Range"},
{"module": "Standard.Table.Grouping_Method", "type": "Grouping_Method", "name": "Unique", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Grouping_Method", "arguments": {"on": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "Missing_Argument.throw \"on\""}},"aliases": [],"description": "Group rows by the specified columns."},
{"module": "Standard.Table.Grouping_Method", "type": "Grouping_Method", "name": "Equal_Count", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Grouping_Method", "arguments": {"group_count": {"lazy": false, "type": "Integer", "checked": true, "default": "5"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}},"aliases": [],"description": "Create the specified number of groups with the same number of rows in each group (except possibly the last one).  Arguments - group_count: The number of groups to divide the table into. - order_by: (Optional.) Specifies the order in which rows should be   assigned to groups. Only affects the assignment of group numbers, not   the ordering of the output rows. Defaults to the order of the rows in   the table."},
{"module": "Standard.Table.Headers", "type": "Headers", "name": "Detect_Headers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Headers", "arguments": {},"aliases": [],"description": "Attempt to detect if the data has headers or not."},
{"module": "Standard.Table.Headers", "type": "Headers", "name": "Has_Headers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Headers", "arguments": {},"aliases": [],"description": "The first row of the data is the column names."},
{"module": "Standard.Table.Headers", "type": "Headers", "name": "No_Headers", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Headers", "arguments": {},"aliases": [],"description": "Treat the first row of data as a normal row."},
{"module": "Standard.Table.Headers", "type": "Headers", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Infer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Headers", "type": "Headers", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Table.Join_Condition", "type": "Join_Condition", "name": "Equals", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Condition", "arguments": {"left": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "Missing_Argument.throw \"left\""}, "right": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\"\""}},"aliases": [],"description": "Correlates rows from the two tables if the `left` element is equal to the `right` element.  `Nothing` (or null in database) is considered equal to itself."},
{"module": "Standard.Table.Join_Condition", "type": "Join_Condition", "name": "Equals_Ignore_Case", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Condition", "arguments": {"left": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "Missing_Argument.throw \"left\""}, "right": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}},"aliases": [],"description": "Correlates rows from the two tables if the `left` element is equal to the `right` element, ignoring case. This is only supported for text columns.  Case insensitive comparisons may mean a database has to perform a row scan, which can cause a performance degradation.  `Nothing` (or null in database) is considered equal to itself."},
{"module": "Standard.Table.Join_Condition", "type": "Join_Condition", "name": "Between", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Condition", "arguments": {"left": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "Missing_Argument.throw \"left\""}, "right_lower": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\"\""}, "right_upper": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "\"\""}},"aliases": [],"description": "Correlates rows from the two tables if the `left` element fits between the `right_lower` and `right_upper` elements. The comparison is inclusive for both lower and upper bounds.  If any of the values on row are `Nothing` (or null in database) then the rows won\u0027t be joined."},
{"module": "Standard.Table.Join_Condition", "type": "Join_Condition", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Inner", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Returns only rows where a match between the left and right table is found. If one row from the left table matches multiple rows in the right table, it is duplicated this many times to be correlated with each matched row, and vice-versa."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Left_Outer", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Correlated rows are returned in the same way as with `Inner`, but each row from the left table that did not match any rows from the right one is also included - with columns of the right table being set to null for that row."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Right_Outer", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Correlated rows are returned in the same way as with `Inner`, but each row from the right table that did not match any rows from the right one is also included - with columns of the right table being set to null for that row."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Full", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Correlated rows are returned in the same way as with `Inner`, but each row from the left and right table that did not match any rows from the other one is also included - with columns of the other table being set to null for that row."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Left_Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Returns just rows of the left table that did not match any in the right table.  In this mode, unlike in others, only columns of the left table are returned, since all columns of the right table would be all null anyway."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "Right_Exclusive", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Join_Kind", "arguments": {},"aliases": [],"description": "Returns just rows of the right table that did not match any in the left table.  In this mode, unlike in others, only columns of the right table are returned, since all columns of the left table would be all null anyway."},
{"module": "Standard.Table.Join_Kind", "type": "Join_Kind", "name": "to_java", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Match_Columns", "type": "Match_Columns", "name": "By_Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Match_Columns", "arguments": {},"aliases": [],"description": "Columns are matched by Name."},
{"module": "Standard.Table.Match_Columns", "type": "Match_Columns", "name": "By_Position", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Match_Columns", "arguments": {},"aliases": [],"description": "Columns are matched by Position.  Note: column names are not compared."},
{"module": "Standard.Table.Position", "type": "Position", "name": "Before_Other_Columns", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Position", "arguments": {},"aliases": [],"description": "Selected columns will be moved to the front of the output table."},
{"module": "Standard.Table.Position", "type": "Position", "name": "After_Other_Columns", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Position", "arguments": {},"aliases": [],"description": "Selected columns will be moved to the back of the output table."},
{"module": "Standard.Table.Prefix_Name", "type": "Prefix_Name", "name": "None", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Prefix_Name", "arguments": {},"aliases": [],"description": "Do not add a prefix to the column name."},
{"module": "Standard.Table.Prefix_Name", "type": "Prefix_Name", "name": "Column_Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Prefix_Name", "arguments": {},"aliases": [],"description": "Use the column name as a prefix."},
{"module": "Standard.Table.Prefix_Name", "type": "Prefix_Name", "name": "Custom", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Prefix_Name", "arguments": {"value": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Add a custom prefix to the new name."},
{"module": "Standard.Table.Prefix_Name", "type": "Prefix_Name", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As_Table", "name": "With_New_Column", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Return_As_Table", "arguments": {},"aliases": [],"description": "Returns a table with a new column `Value` containing the objects loaded from each file.  When the source for files to load was a table, all columns from the original table are also retained. In case of name clashes, the newly added columns will get a suffix.  When the source was a simple Vector, the returned table will also contain a `Path` column."},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As_Table", "name": "As_Merged_Table", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Return_As_Table", "arguments": {"columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true, "default": "..In_Any"}, "match": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}},"aliases": [],"description": "All files are interpreted as tables and then merged into a single table by a union operation.  Each file is loaded according to the provided/detected format. If the format reads it as something else than a table, then it is expanded in the same way as `Table.from_objects`."},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As_Table", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As_Table", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As_Table", "name": "make_return", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false, "type": "Many_Files_List", "checked": true}, "objects": {"lazy": false, "type": "Vector Any", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": []},
{"module": "Standard.Table.Return_As_Table", "type": "Return_As", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Return_As_Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Row", "type": "Row", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Row", "arguments": {"table": {"lazy": false, "type": "Table", "checked": true}, "index": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Row", "type": "Row", "name": "column_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the set of column column_names"},
{"module": "Standard.Table.Row", "type": "Row", "name": "length", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Gets the number of columns in the table."},
{"module": "Standard.Table.Row", "type": "Row", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "parse3","description": "Gets the value of the specified column."},
{"module": "Standard.Table.Row", "type": "Row", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "parse3","description": "Gets the value of the specified column."},
{"module": "Standard.Table.Row", "type": "Row", "name": "to_vector", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Gets the row as a Vector."},
{"module": "Standard.Table.Row", "type": "Row", "name": "to_dictionary", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Gets the row as a Dictionary."},
{"module": "Standard.Table.Row", "type": "Row", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this row into a JS_Object."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "All_Rows", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rows_To_Read", "arguments": {},"aliases": [],"description": "Read all rows."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "First", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rows_To_Read", "arguments": {"rows": {"lazy": false, "type": "Integer", "checked": true, "default": "1000"}},"aliases": [],"description": "Read the first specified number of rows."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "First_With_Warning", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Rows_To_Read", "arguments": {"rows": {"lazy": false, "type": "Integer", "checked": true, "default": "1000"}},"aliases": [],"description": "Read a limited number of rows, attaching warning if there is more. By default, a 1000 rows are read. This is the default for database reading."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"display": {"lazy": false, "type": "Display", "checked": true, "default": "..When_Modified"}},"aliases": []},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "rows_to_read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer | Nothing", "arguments": {},"aliases": [],"description": "Gets the number of rows to read (or Nothing if all rows). For the First_With_Warning case, the number of rows is one more than maximum rows."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "rows_to_write", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Integer | Nothing", "arguments": {},"aliases": [],"description": "Gets the number of rows to write (or Nothing if all rows)."},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "attach_warning_vector", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector", "arguments": {"input": {"lazy": false, "type": "Vector", "checked": true}},"aliases": []},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "attach_warning", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"input": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Rows_To_Read", "type": "Rows_To_Read", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Row_Limit", "type": "Row_Limit", "name": "No_Limit", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row_Limit", "arguments": {},"aliases": [],"description": "Allow unlimited."},
{"module": "Standard.Table.Row_Limit", "type": "Row_Limit", "name": "Limit", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row_Limit", "arguments": {"n": {"lazy": false, "type": "Integer", "checked": true, "default": "100"}},"aliases": [],"description": "Limit to a specific number of rows."},
{"module": "Standard.Table.Row_Limit", "type": "Row_Limit", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Table.Row_Limit", "type": "Row_Limit", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Set_Mode", "type": "Set_Mode", "name": "Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Set_Mode", "arguments": {},"aliases": [],"description": "Add a new column to the table. If already present an `Existing_Column` error is returned."},
{"module": "Standard.Table.Set_Mode", "type": "Set_Mode", "name": "Update", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Set_Mode", "arguments": {},"aliases": [],"description": "Update the column in the table. If not present a `Missing_Column` error is returned."},
{"module": "Standard.Table.Set_Mode", "type": "Set_Mode", "name": "Add_Or_Update", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Set_Mode", "arguments": {},"aliases": [],"description": "Add the column to the table if not present, or update if present."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Expression", "name": "Simple_Expr", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Simple_Expression", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "..Index 0"}, "operation": {"lazy": false, "type": "Simple_Calculation", "checked": true, "default": "..Copy"}},"aliases": [],"description": "A simple expression based off an input column and an operation to perform."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Expression", "name": "From", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Simple_Expression", "arguments": {"input": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "..Index 0"}, "operation": {"lazy": false, "type": "Simple_Calculation", "checked": true, "default": "..Copy"}},"aliases": [],"description": "A simple expression based off an input column and an operation to perform."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Expression", "name": "default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Widget", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "..Always"}},"aliases": [],"description": "Create a widget for operation"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Expression", "name": "evaluate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "use_input_name": {"lazy": false, "type": "Boolean", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Interprets the `Simple_Expression` as operation on columns of a provided table, resolving the column references. It creates a new column instance which can be added to the table."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Left", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Takes the first characters from the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Right", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Takes the first characters from the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Length", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {},"aliases": [],"description": "Returns the character length of the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Trim", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Removes the specified characters, by default any whitespace, from the start, the end, or both ends of the input."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Starts_With", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"prefix": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Does the input start with the specified prefix."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Ends_With", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"suffix": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Does the input end with the specified suffix."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "Contains", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text_Operation", "arguments": {"substring": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Does the input contain the specified substring."},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "create_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Simple_Expression", "type": "Text_Operation", "name": "evaluate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "table": {"lazy": false, "type": "Table_Ref", "checked": true}},"aliases": [],"description": "Evaluate the operation - will be passed a Column or DB_Column"},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Subtract", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "0"}},"aliases": [],"description": "Subtract two values/columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Multiply", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Multiply two values/columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Divide", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Divide a fixed value or column by another value or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Negate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {},"aliases": [],"description": "Negate a column."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Mod", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Compute the remainder of a fixed value or column divided by another value or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Power", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Raise a fixed value or column to the power of another value or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Round", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {"precision": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Rounds values in the column to the specified precision."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Ceil", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {},"aliases": [],"description": "Rounds values in the column up to the nearest integer."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Floor", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {},"aliases": [],"description": "Rounds values in the column down to the nearest integer."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "Truncate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Math_Operation", "arguments": {},"aliases": [],"description": "Truncates the fractional part of values in the column."},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "create_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Simple_Expression", "type": "Math_Operation", "name": "evaluate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "table": {"lazy": false, "type": "Table_Ref", "checked": true}},"aliases": [],"description": "Evaluate the operation - will be passed a Column or DB_Column"},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Adds a period to a date/time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Part", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {"period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Returns part of a date/time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Diff", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {"end": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true, "default": "Missing_Argument.throw \"end\""}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Returns the difference between two date/time columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Truncate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Removes the Time portion of a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Year", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the year of a Date or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Month", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the month of a Date or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Day", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the day of a Date or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Hour", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the hour of a Time or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Minute", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the minute of a Time or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "Second", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Date_Operation", "arguments": {},"aliases": [],"description": "Returns the second of a Time or a Date_Time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "create_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Simple_Expression", "type": "Date_Operation", "name": "evaluate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "table": {"lazy": false, "type": "Table_Ref", "checked": true}},"aliases": [],"description": "Evaluate the operation - will be passed a Column or DB_Column"},
{"module": "Standard.Table.Simple_Expression", "type": "Logical_Operation", "name": "Not", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Logical_Operation", "arguments": {},"aliases": [],"description": "Negate a boolean column."},
{"module": "Standard.Table.Simple_Expression", "type": "Logical_Operation", "name": "And", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Logical_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Boolean AND on two boolean columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Logical_Operation", "name": "Or", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Logical_Operation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Boolean OR on two boolean columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Logical_Operation", "name": "create_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Table_Ref", "checked": true}, "display": {"lazy": false, "type": "Display", "checked": true, "default": "Display.Always"}},"aliases": []},
{"module": "Standard.Table.Simple_Expression", "type": "Logical_Operation", "name": "evaluate", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}, "table": {"lazy": false, "type": "Table_Ref", "checked": true}},"aliases": [],"description": "Evaluate the operation - will be passed a Column or DB_Column"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Copy", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Creates a copy of the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Text", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"operation": {"lazy": false, "type": "Text_Operation", "checked": true, "default": "..Left 1"}},"aliases": [],"description": "Perform a Text Operation"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Math", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"operation": {"lazy": false, "type": "Math_Operation", "checked": true, "default": "..Subtract 0"}},"aliases": [],"description": "Perform a Math Operation"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Date", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"operation": {"lazy": false, "type": "Date_Operation", "checked": true, "default": "..Add"}},"aliases": [],"description": "Perform a Date Operation"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Logical", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"operation": {"lazy": false, "type": "Logical_Operation", "checked": true, "default": "..Not"}},"aliases": [],"description": "Perform a Logical Operation"},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number|Text", "checked": true, "default": "Missing_Argument.throw \"rhs\""}},"aliases": [],"description": "Add two values/columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Subtract", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "0"}},"aliases": [],"description": "Subtract two values/columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Multiply", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Multiply two values/columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Divide", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Divide a fixed value or column by another value or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Mod", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Compute the remainder of a fixed value or column divided by another value or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Power", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Number", "checked": true, "default": "1"}},"aliases": [],"description": "Raise a fixed value or column to the power of another value or column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Round", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"precision": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "use_bankers": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Rounds values in the column to the specified precision."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Ceil", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Rounds values in the column up to the nearest integer."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Floor", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Rounds values in the column down to the nearest integer."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Truncate", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Truncates the fractional part of values in the column. If a Date_Time, returns the Date."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Min", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "Missing_Argument.throw \"rhs\""}},"aliases": [],"description": "Returns the minimum value of two columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Max", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "Missing_Argument.throw \"rhs\""}},"aliases": [],"description": "Returns the maximum value of two columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Date_Add", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Adds a period to a date/time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Date_Part", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Returns part of a date/time column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Date_Diff", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"end": {"lazy": false, "type": "Column_Ref|Expression|Date_Time|Date|Time_Of_Day", "checked": true, "default": "Missing_Argument.throw \"end\""}, "period": {"lazy": false, "type": "Date_Period|Time_Period", "checked": true, "default": "Date_Period.Day"}},"aliases": [],"description": "Returns the difference between two date/time columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Not", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Negate a boolean column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "And", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Boolean AND on two boolean columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Or", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"rhs": {"lazy": false, "type": "Column_Ref|Expression|Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Boolean OR on two boolean columns."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "If", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"condition": {"lazy": false, "type": "Filter_Condition", "checked": true, "default": "..Equal True"}, "true_value": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "True"}, "false_value": {"lazy": false, "type": "Column_Ref|Expression|Any", "checked": true, "default": "False"}},"aliases": [],"description": "If input meets a condition return true value, otherwise false value. The `true_value` and `false_value` can be either a constant or a column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Trim", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"where": {"lazy": false, "type": "Location", "checked": true, "default": "..Both"}, "what": {"lazy": false, "type": "Column_Ref|Expression|Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Removes the specified characters, by default any whitespace, from the start, the end, or both ends of the input."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Text_Left", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Takes the first characters from the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Text_Right", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"length": {"lazy": false, "type": "Column_Ref|Expression|Integer", "checked": true, "default": "1"}},"aliases": [],"description": "Takes the last characters from the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Text_Length", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {},"aliases": [],"description": "Returns the character length of the input column."},
{"module": "Standard.Table.Simple_Expression", "type": "Simple_Calculation", "name": "Format", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Simple_Calculation", "arguments": {"format": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}},"aliases": [],"description": "Formats a column with the specified format."},
{"module": "Standard.Table.Sort_Column", "type": "Sort_Column", "name": "Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Sort_Column", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "Missing_Argument.throw \"name\""}, "direction": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}},"aliases": [],"description": "A column to sort by, selected by its name.  For case insensitive column name matching, use the `Select_By_Name` selector."},
{"module": "Standard.Table.Sort_Column", "type": "Sort_Column", "name": "Index", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Sort_Column", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "direction": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}},"aliases": [],"description": "A column to sort by, selected by its index."},
{"module": "Standard.Table.Sort_Column", "type": "Sort_Column", "name": "Select_By_Name", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Sort_Column", "arguments": {"name": {"lazy": false, "type": "Text|Regex", "checked": true, "default": "Missing_Argument.throw \"name\""}, "direction": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Insensitive"}},"aliases": [],"description": "A selector allowing to match columns by their name.  It can do regex-based and case insensitive matching if requested. It is possible for it to match multiple columns, in which case all the matched columns will be placed in the ORDER BY clause at the position of this selector. Their relative order between each other will be the same as in the table."},
{"module": "Standard.Table.Sort_Column", "type": "Sort_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Table.Sort_Column", "type": "Sort_Column", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Table.Table", "type": "Table", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"internal_java_table": {"lazy": false}},"aliases": [],"description": "Internal constructor that should not be used directly. Please use `from_java_table` if needed."},
{"module": "Standard.Table.Table", "type": "Table", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Vector | Column)", "checked": true}},"aliases": [],"group": "Standard.Base.Constants","icon": "table_edit","description": "Creates a new table from a set of columns. This can either be provided as a set of pairs of names and data, or existing Column objects.","returns": "- A Table of all of the input data.","errors": "- A Table of all of the input data."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from_rows", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"header": {"lazy": false, "type": "Vector", "checked": true}, "rows": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"group": "Standard.Base.Constants","icon": "data_input","description": "Creates a new table from a vector of column names and a vector of vectors specifying row contents."},
{"module": "Standard.Table.Table", "type": "Table", "name": "input", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Vector | Column)", "checked": true}},"aliases": [],"group": "Standard.Base.Constants","icon": "table_edit","description": "Creates a new table from a set of columns parsing the resulting table.","returns": "- A Table of all of the input data.","errors": "- A Table of all of the input data."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from_union", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Illegal_Argument", "arguments": {"tables": {"lazy": false, "type": "Vector Table", "checked": true}, "columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true, "default": "..In_Any_Warn_On_Missing"}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "select_column","description": "Appends records from the vector of tables into a single table.","errors": "","remarks": "? Unifying Column Types    Numeric columns are unified by finding the smallest type that can fit   all of the columns. The biggest integer type will be chosen and if   integers and decimals are mixed, the decimal type will be chosen.   If boolean columns are mixed with numeric columns, they will be coerced   to the numeric type (and converted to 0 and 1).    Text types will are also unified by finding the smallest type that can   fit all the values. If constant-length texts of different lengths are   mixed, they will be coerced to a varying-length type.    If date and date-time columns are unified, this yields a date-time   column. In-memory, the date is promoted by adding a time of 00:00 and   the system time-zone. In other backends that behaviour may differ.    If one of the matched columns has `Mixed` type, that type will be used   regardless of types of other columns. Note that the `Mixed` type may   not be supported by most Database backends.    Finally, if no common type is found using the rules above, everything   is converted to text. \n\n? Ordering of Columns in the result    When matching columns by name, it is possible that the ordering of   columns may vary between input tables. The ordering is determined as   following: columns that are kept from the first table are in the order   they appear in that table. If there are columns that do not appear in   the first table, they are appended to the end of the resulting table in   the order they appear in the input."},
{"module": "Standard.Table.Table", "type": "Table", "name": "java_table", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "A getter that is a workaround for bug https://github.com/enso-org/enso/issues/12180"},
{"module": "Standard.Table.Table", "type": "Table", "name": "display", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Text", "arguments": {"show_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}, "format_terminal": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Returns a text containing an ASCII-art table displaying this data."},
{"module": "Standard.Table.Table", "type": "Table", "name": "print", "methodType": "method", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "Nothing", "arguments": {"show_rows": {"lazy": false, "type": "Integer", "checked": true, "default": "10"}},"aliases": [],"description": "Prints an ASCII-art table with this data to the standard output."},
{"module": "Standard.Table.Table", "type": "Table", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Converts this table into a JS_Object."},
{"module": "Standard.Table.Table", "type": "Table", "name": "at", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! No_Such_Column | Index_Out_Of_Bounds", "arguments": {"selector": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns the column with the given name or index.","returns": "- The column with the given name or index, or the `if_missing` value if   the column is not found.","errors": "- The column with the given name or index, or the `if_missing` value if   the column is not found."},
{"module": "Standard.Table.Table", "type": "Table", "name": "get", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column | Any", "arguments": {"selector": {"lazy": false, "type": "Integer | Text", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "default": "Nothing"}},"aliases": [],"icon": "select_column","description": "Returns the column with the given name or index.","returns": "- The column with the given name or index, or the `if_missing` value if   the column is not found."},
{"module": "Standard.Table.Table", "type": "Table", "name": "get_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any", "arguments": {"selector": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "0"}, "index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": ["cell value", "get cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets a value from the table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "get_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row | Any", "arguments": {"index": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "if_missing": {"lazy": true, "type": "Any", "checked": true, "default": "Nothing"}},"aliases": ["row"],"group": "Standard.Base.Selections","icon": "select_row","description": "Gets a row from the table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "first_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["first cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets the top left value from the table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "last_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Any ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["last cell"],"group": "Standard.Base.Selections","icon": "local_scope4","description": "Gets the bottom right value from the table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "first_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["first field"],"group": "Standard.Base.Selections","icon": "select_column","description": "Gets the first column."},
{"module": "Standard.Table.Table", "type": "Table", "name": "last_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Column ! Index_Out_Of_Bounds", "arguments": {},"aliases": ["last field"],"group": "Standard.Base.Selections","icon": "select_column","description": "Gets the last column"},
{"module": "Standard.Table.Table", "type": "Table", "name": "column_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["field count"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the number of columns in the table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "select_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "reorder": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["select fields"],"group": "Standard.Base.Selections","icon": "select_column","suggested": 1,"description": "Creates a new table with a chosen subset of columns, as specified by the `columns`, from the input table. Any unmatched input columns will be dropped from the output.","returns": "- A new table with the chosen subset of columns.","errors": "- A new table with the chosen subset of columns.","remarks": "? Selecting By Type    If selecting by type, then the length, scale and precision are ignored.   In other words, `..Text` will match any text column, regardless of its   length or being fixed or variable length. Similarly, `..Integer` will   match any integer column, regardless of its size."},
{"module": "Standard.Table.Table", "type": "Table", "name": "select_columns_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["select fields by type"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the chosen set of columns filtered by the type of the column."},
{"module": "Standard.Table.Table", "type": "Table", "name": "remove_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["drop fields", "drop_columns", "remove fields", "select columns", "select fields"],"group": "Standard.Base.Selections","icon": "select_column","description": "Creates a new table with the chosen set of columns, as specified by the `columns`, removed from the input table. Any unmatched input columns will be kept in the output. Columns are returned in the same order as in the input.","returns": "- A new table with the chosen subset of columns removed.","errors": "- A new table with the chosen subset of columns removed.","remarks": "? Selecting By Type    If selecting by type, then the length, scale and precision are ignored.   In other words, `..Text` will match any text column, regardless of its   length or being fixed or variable length. Similarly, `..Integer` will   match any integer column, regardless of its size."},
{"module": "Standard.Table.Table", "type": "Table", "name": "remove_columns_by_type", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"types": {"lazy": false, "type": "Vector Value_Type", "checked": true}, "strict": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["remove fields by type", "select columns by type", "select fields by type"],"group": "Standard.Base.Selections","icon": "select_column","description": "Returns a new table with the chosen set of columns filtering out based on the type of the column."},
{"module": "Standard.Table.Table", "type": "Table", "name": "select_blank_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["drop_empty_rows", "drop_missing_rows", "dropna", "filter_empty_rows", "remove_blank_rows", "remove_empty_rows", "remove_missing_rows"],"group": "Standard.Base.Selections","icon": "select_column","description": "Selects columns which are either all blank or contain blank values. If no rows are present, all columns are considered blank.","returns": "- A new table of the blank columns.","errors": "- A new table of the blank columns.","remarks": "? What is a blank value?   Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Table.Table", "type": "Table", "name": "remove_blank_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..All_Cells"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["drop_missing_columns", "drop_na", "filter_blank_columns", "select_blank_columns", "select_blank_fields", "select_missing_columns", "select_na"],"group": "Standard.Base.Selections","icon": "select_column","description": "Remove columns which are either all blank or contain blank values. If no rows are present, all columns are considered blank.","returns": "- A new table with the blank columns removed.","errors": "- A new table with the blank columns removed.","remarks": "? What is a blank value?   Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Table.Table", "type": "Table", "name": "reorder_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector | Text | Integer | Regex | By_Type", "checked": true, "default": "[self.columns.first.name]"}, "position": {"lazy": false, "type": "Position", "checked": true, "default": "..Before_Other_Columns"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Reorders the columns by moving the selected columns to the start (or end) of the Table. By default, the selected columns are moved to the front. Other columns are left in their original order.","returns": "- A new table with the columns reordered.","errors": "- A new table with the columns reordered."},
{"module": "Standard.Table.Table", "type": "Table", "name": "sort_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"order": {"lazy": false, "type": "Sort_Direction", "checked": true, "default": "..Ascending"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}},"aliases": [],"group": "Standard.Base.Selections","icon": "select_column","description": "Reorders the columns sorted by name in the specified order and the text ordering method. By default, sorting will be according to case-sensitive ascending order.","remarks": "? Unicode Normalization   The text ordering method uses Unicode normalization to ensure that the   text is sorted correctly. This means that text that looks the same but   is represented differently will be sorted in the same way."},
{"module": "Standard.Table.Table", "type": "Table", "name": "rename_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Missing_Input_Columns | Ambiguous_Column_Rename | Too_Many_Column_Names_Provided | Invalid_Column_Names | Duplicate_Output_Column_Names", "arguments": {"column_map": {"lazy": false, "type": "Table | Dictionary (Text | Integer | Regex) Text | Vector Text | Vector Vector", "checked": true, "default": "[\"Column\"]"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["rename_fields", "select_columns", "select_fields"],"group": "Standard.Base.Metadata","icon": "table_edit","description": "Returns a new table with the columns renamed based on either a mapping from the old name to the new or a positional list of new names.","returns": "- A new table with the columns renamed based on the column_map.","errors": "- A new table with the columns renamed based on the column_map.","remarks": "? Pattern based renaming  `Regex` objects can be used within the column_map to do pattern based renaming. Marked groups can be used in the new name by using `$1`, `$2`, etc."},
{"module": "Standard.Table.Table", "type": "Table", "name": "use_first_row_as_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["header", "rename"],"group": "Standard.Base.Metadata","icon": "table_edit","description": "Returns a new table with the columns renamed based on entries in the first row, and then the first row is removed.","returns": "- A new table with the columns renamed based on the first row.","errors": "- A new table with the columns renamed based on the first row."},
{"module": "Standard.Table.Table", "type": "Table", "name": "aggregate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Invalid_Aggregate_Column | Invalid_Column_Names | Duplicate_Output_Column_Names | Floating_Point_Equality | Invalid_Aggregation | Unquoted_Delimiter | Additional_Warnings", "arguments": {"group_by": {"lazy": false, "type": "Vector (Integer | Text | Regex | Aggregate_Column) | Text | Integer | Regex", "checked": true, "default": "[]"}, "columns": {"lazy": false, "type": "Vector Aggregate_Column", "checked": true, "default": "[]"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["average", "count", "count distinct", "first", "group by", "last", "longest", "maximum", "mean", "median", "minimum", "mode", "percentile", "shortest", "standard deviation", "sum", "summarize", "variance"],"group": "Standard.Base.Calculations","icon": "transform4","suggested": 7,"description": "Aggregates the rows in a table using `group_by` columns. The columns argument specifies which additional aggregations to perform and to return.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "sort", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Incomparable_Values | No_Input_Columns_Selected | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector Sort_Column | Sort_Column", "checked": true, "default": "[self.columns.first.name]"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["order_by"],"group": "Standard.Base.Selections","icon": "order","suggested": 8,"description": "Reorders the table by sorting them based on the specified columns. Optionally, the method of ordering text values can be specified allowing for case-insensitively or dictionary ordering.","returns": "- A new table with the rows sorted as specified.","errors": "- A new table with the rows sorted as specified.","remarks": "? Missing Values    Missing (`Nothing`) values are sorted as less than any other object."},
{"module": "Standard.Table.Table", "type": "Table", "name": "order_by", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table ! Incomparable_Values | No_Input_Columns_Selected | Missing_Input_Columns", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Sort_Column) | Text", "checked": true, "default": "[self.columns.first.name]"}, "text_ordering": {"lazy": false, "type": "Text_Ordering", "checked": true, "default": "..Default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "order","description": "Deprecated - use `Table.sort` instead."},
{"module": "Standard.Table.Table", "type": "Table", "name": "distinct", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Missing_Input_Columns | No_Input_Columns_Selected | Floating_Point_Equality", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "self.column_names"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["deduplicate", "unique"],"group": "Standard.Base.Selections","icon": "preparation","suggested": 5,"description": "Returns the distinct set of rows within the specified columns from the input table.  When multiple rows have the same values within the specified columns, the first row of each such set is returned if possible, but in database backends any row from each set may be returned (for example if the row ordering is unspecified).  For the in-memory table, the unique rows will be in the order they occurred in the input (this is not guaranteed for database operations). \n\n Returns - A new table with the distinct rows.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "duplicates", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Missing_Input_Columns | No_Input_Columns_Selected | Floating_Point_Equality", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "self.column_names"}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Default"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Selections","icon": "preparation","description": "Returns the set of rows which are duplicated within the specified columns from the input table.  When multiple rows have the same values within the specified columns all of those rows are  returned. Rows which are unique within the specified columns are removed.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "parse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "self.columns . filter (c-\u003e c.value_type.is_text) . map .name"}, "type": {"lazy": false, "type": "Value_Type | Auto", "checked": true, "default": "Auto"}, "format": {"lazy": false, "type": "Text | Data_Formatter", "checked": true, "default": "\u0027\u0027"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Parses columns within a `Table` into a more specific value type. By default, it looks at all `Text` columns and attempts to deduce the type (columns with other types are not affected).","returns": "- A new table with the parsed columns replacing the original text ones.","errors": "- A new table with the parsed columns replacing the original text ones.","remarks": "? Auto type detection    In the in-memory backend, if the `type` is `Auto, the process will   attempt to work out the type of the column.    The default parser only parse values where the process is reversible   (e.g., 0123 would not be converted to an integer as there is a leading   0). However, this can be overriden by providing a `Data_Formatter`. \n\n? In Database Support    In the Database backends, the default formatting settings of the   particular database are used. Custom formats are not currently   supported.    The target type must be specified explicitly, the `Auto` option is not   currently support there. \n\n? Default Number Parsing    If the type is set to a number, the default parser will attempt   to find the most appropriate format for the column. This is done by   finding the format that parses the longest set without an issue from   the first record.    It will try the following separators in British, German, French and   Swiss order. Thousand separators must be followed by groups of 3   numbers.    The following formats are supported:   - Sign (+/-) followed by Number (e.g. +1,234.56)   - Using brackets to indicate a negative number (e.g. (1,234.56))   - Currency symbols (if not in Auto mode) can be placed before or after     the sign and number.   - If using brackets, the currency symbol must be placed after the     opening bracket.    Scientific notation is only allowed on decimals and must be on a value   between -10 and 10. The notation is an `E` followed by an integer and   must be enabled on a `Data_Formatter`."},
{"module": "Standard.Table.Table", "type": "Table", "name": "format", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Date_Time_Format_Parse_Error | Illegal_Argument", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "format": {"lazy": false, "type": "Text | Date_Time_Formatter | Column", "checked": true, "default": "\"\""}, "locale": {"lazy": false, "type": "Locale", "checked": true, "default": "Locale.default"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Formats specified columns to text, optionally using a specified format. The original columns are replaced by the formatted columns.","returns": "- A new table with the specified columns formatted.","errors": "- A new table with the specified columns formatted.","remarks": "? Supported Types   - `Value_Type.Date`   - `Value_Type.Date_Time`   - `Value_Type.Time`   - `Value_Type.Integer`   - `Value_Type.Float`   - `Value_Type.Boolean` \n\n? `Value_Type.Date`, `Value_Type.Date_Time`, `Value_Type.Time` formats     See https://help.enso.org/docs/using-enso/custom-formats for details. \n\n? `Value_Type.Integer`, `Value_Type.Float` formats    Numeric format strings are specified by the Java DecimalFormat class.   See https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html   for a complete format specification. \n\n? `Value_Type.Boolean` format strings    Format strings for `Boolean` consist of two values that represent true   and false, separated by a `|`."},
{"module": "Standard.Table.Table", "type": "Table", "name": "cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Illegal_Argument | Inexact_Type_Coercion | Conversion_Failure", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "[0]"}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Cast the selected columns to a specific type.  Change the value type of the selected columns with the specified type.","returns": "- A new table with the specified columns cast to the desired type.","errors": "- A new table with the specified columns cast to the desired type.","remarks": "? Casting Rules  In the Database backend, this will boil down to a CAST operation.  In the in-memory backend, a conversion will be performed according to the following rules:  - Anything can be cast into the `Mixed` type. - Converting to a `Char` type, the elements of the column will be   converted to text. If it is fixed length, the texts will be trimmed or   padded on the right with the space character to match the desired   length. - Conversion between numeric types will replace values exceeding the   range of the target type with `Nothing`. - Converting decimal numbers into integers will truncate or round them,   depending on the backend. If more control is needed, use the various   rounding functions (such as `round` or `floor`). - Booleans may also be converted to numbers, with `True` being converted   to `1` and `False` to `0`. The reverse is not supported - use `iif`   instead. - A `Date_Time` may be converted into a `Date` or `Time` type - the   resulting value will be truncated to the desired type. - If a `Date` is to be converted to `Date_Time`, it will be set at   midnight of the default system timezone. - For a `Mixed` column being converted into a specific type, each row is   converted individually. \n\n? Inexact Target Type    If the backend does not support the requested target type, the closest   supported type is chosen and a `Inexact_Type_Coercion` problem is   reported. \n\n? Casting Text values    The `parse` method should be used to convert text values into other   types. Due to this, a Mixed column containing values `[2, \"3\"]` will   actually be converted into `[2, Nothing]` when casting to Integer type."},
{"module": "Standard.Table.Table", "type": "Table", "name": "auto_cast", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "self.column_names"}, "shrink_types": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["auto_value_types"],"group": "Standard.Base.Conversions","icon": "convert","description": "Automatically detect the appropriate data type and size for specified columns and change them, based on the contents.  This is most useful for Mixed types to narrow down the type if all values could fit into one type. \n\n Returns - A new table with the specified columns converted to the most   appropriate type.","remarks": "? Auto Type Selection Rules    - If a `Mixed` column can be assigned a single type, like `Char` or     `Integer`, that will be used.   - Text columns are not parsed. To do that, use the `parse` method.   - If a `Float` column contains only integers, it will be converted to     an Integer column.   - If a `Decimal` column contains only integers that could fit in a     64-bit integer storage, it will be converted to an Integer column.   - If `shrink_types` is `False` (default), no other transformations are     applied.   - However, if `shrink_types` is set to `True`, then:     - Integer columns will be assigned the smallest size that can fit all       values (down to 16-bit integers; converting to the `Byte` type has       to be done manually through `cast`).     - If all elements in a text column have the same length, the type       will become fixed length.     - Otherwise, if a text column is variable length, but all text       elements are no longer than 255 characters, the column will get a       max length of 255. Otherwise, the column size limit will stay       unchanged."},
{"module": "Standard.Table.Table", "type": "Table", "name": "auto_value_types", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"columns": {"lazy": false, "type": "Vector (Text | Integer | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true, "default": "self.column_names"}, "shrink_types": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Deprecated: Use `auto_cast` instead.  Change the value type of table columns to a more specific one, based on their contents.  This is most useful for `Mixed` type columns and will allow to narrow down the type if all values in the column fit a more specific type.","remarks": "? Auto Type Selection Rules    - If a `Mixed` column can be assigned a single type, like `Char` or     `Integer`, that will be used.   - Text columns are not parsed. To do that, use the `parse` method.   - If a `Float` column contains only integers, it will be converted to     an Integer column.   - If a `Decimal` column contains only integers that could fit in a     64-bit integer storage, it will be converted to an Integer column.   - If `shrink_types` is `False` (default), no other transformations are     applied.   - However, if `shrink_types` is set to `True`, then:     - Integer columns will be assigned the smallest size that can fit all       values (down to 16-bit integers; converting to the `Byte` type has       to be done manually through `cast`).     - If all elements in a text column have the same length, the type       will become fixed length.     - Otherwise, if a text column is variable length, but all text       elements are no longer than 255 characters, the column will get a       max length of 255. Otherwise, the column size limit will stay       unchanged."},
{"module": "Standard.Table.Table", "type": "Table", "name": "split_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "delimiter": {"lazy": false, "type": "Text", "checked": true, "default": "\",\""}, "column_count": {"lazy": false, "type": "Columns_To_Add", "checked": true, "default": "..All_Columns"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["parse", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Creates a new table by splitting the chosen column of text, by the specified delimiter into a set of new columns. The original column will be removed from the table.  The new columns will be named with the name of the input column with a incrementing number after. \n\n Returns - Returns a Table with the newly split columns and the original removed.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "split_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "delimiter": {"lazy": false, "type": "Text", "checked": true, "default": "\",\""}},"aliases": ["parse", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Creates a new table by splitting the chosen column of text, by the specified delimiter into a set of new rows.  The values of other columns are repeated for the new rows. \n\n Returns - Returns a Table with the newly generated rows."},
{"module": "Standard.Table.Table", "type": "Table", "name": "tokenize_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "column_count": {"lazy": false, "type": "Columns_To_Add", "checked": true, "default": "..All_Columns"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["parse", "regex", "split"],"group": "Standard.Base.Conversions","icon": "split","description": "Creates a new Table with the chosen column of Text split by the `pattern` regular expression into a set of new columns. If the pattern contains marked groups, the values are concatenated together; otherwise the whole match is returned.  The values of other columns are repeated for the new rows.  For details on Enso\u0027s Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions). \n\n Returns - Returns a Table with the newly split columns.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "tokenize_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "at_least_one_row": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["parse", "regex", "split"],"group": "Standard.Base.Conversions","icon": "split","description": "Creates a new Table with the chosen column of Text split by the `pattern` regular expression into a set of new rows. If the pattern contains marked groups, the values are concatenated together; otherwise the whole match is returned.  The values of other columns are repeated for the new rows.  For details on Enso\u0027s Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions). \n\n Returns - Returns a Table with the newly split rows."},
{"module": "Standard.Table.Table", "type": "Table", "name": "parse_to_columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "pattern": {"lazy": false, "type": "Text | Regex", "checked": true, "default": "\".\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "parse_values": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Error"}},"aliases": ["regex", "split", "tokenize"],"group": "Standard.Base.Conversions","icon": "split","description": "Converts a Text column into new columns using a regular expression pattern.  Each match becomes a row in the table. The values of other columns are repeated for the new rows.  If there are no marked groups, a single column with whole content of match is added. Otherwise, each group becomes a column (with group name if named in Regex).","remarks": "? Column Names  If no marked group, the new column will have the same name as the input. If the marked groups are named, the names will be used otherwise the column will be named `\u003cInput Column\u003e \u003cN\u003e` where `N` is the number of the marked group. If the new name is already in use it will be renamed following the normal suffixing strategy."},
{"module": "Standard.Table.Table", "type": "Table", "name": "expand_column", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Type_Error | No_Such_Column | Index_Out_Of_Bounds", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "fields": {"lazy": false, "type": "(Vector Text) | Nothing", "checked": true, "default": "Nothing"}, "prefix": {"lazy": false, "type": "Prefix_Name", "checked": true, "default": "..Column_Name"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "split","description": "Expand a column of objects to a new set of columns."},
{"module": "Standard.Table.Table", "type": "Table", "name": "expand_to_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Type_Error | No_Such_Column | Index_Out_Of_Bounds", "arguments": {"column": {"lazy": false, "type": "Text | Integer", "checked": true}, "at_least_one_row": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"group": "Standard.Base.Calculations","icon": "split","description": "Expand aggregate values in a column to separate rows.  For each value in the specified column, if it is an aggregate (`Vector`, `Range`, etc.), expand it to multiple rows, duplicating the values in the other columns. \n\n The following values are considered sequence-like: - `Array` - `Vector` - `List` - `Range` - `Date_Range` - `Pair` - `Table` (interpreted as a sequence of `Row`s) - `Column`  Some aggregates, like dictionaries will expand into two columns - one for key and one for the value.  If a value is not an aggregate, or has no defined way of being expanded, it is left as a single row containing that value unchanged.  In in-memory tables, it is permitted to mix values of different types."},
{"module": "Standard.Table.Table", "type": "Table", "name": "filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Such_Column | Index_Out_Of_Bounds | Invalid_Value_Type", "arguments": {"column": {"lazy": false, "type": "Column | Expression | Text | Integer", "checked": true, "default": "Missing_Argument.throw \"column\""}, "filter": {"lazy": false, "type": "Filter_Condition | (Any -> Boolean)", "checked": true, "default": "Filter_Condition.Equal True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["filter rows", "regex", "where"],"group": "Standard.Base.Selections","icon": "preparation","suggested": 2,"description": "Filter is used to select data from a table using a condition. The rows that meet the condition will remain after the filter. Filters can compare columns, compare against static values, or compare against an argument from another component. \n\n   - `action`:     This can be set to `Keep`, which keeps all rows which meet the     condition. It can also be set to `Remove`, which will instead only     keep the rows that do not meet the condition.     For example, `[people] Is Null` would keep all the rows where the     column `people` had a Null value. Changing this to `Remove` would     remove all of the rows where `people` had a Null value, leaving only     the records that are not null.  - `on_problems`: specified how to report any issues encountered during    the operation.","returns": "- Returns a Table of all of the rows that met the specified condition.","errors": "- Returns a Table of all of the rows that met the specified condition.","remarks": "? Nothing Equality  When comparing `Nothing` values, filter follows the ANSI SQL conventions that `Nothing ==  Nothing` results in a `Nothing`. This includes both `Equal` and `Is_In` conditions. If you want to filter out `Nothing` use `Is_Not_Nothing` condition (or `Is_Nothing` to filter out non-`Nothing`)."},
{"module": "Standard.Table.Table", "type": "Table", "name": "filter_by_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table ! No_Such_Column | Invalid_Value_Type | Expression_Error", "arguments": {"expression": {"lazy": false, "type": "Text", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["filter rows"],"group": "Standard.Base.Selections","icon": "preparation","description": "Selects only the rows of this table that correspond to `True` values of `filter`.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "take", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["first", "head", "keep", "last", "limit", "sample", "slice", "tail", "top"],"group": "Standard.Base.Selections","icon": "select_row","description": "Creates a new Table with the specified range of rows from the input Table.","returns": "- Returns a Table with the selected rows.","remarks": "? Supported Range Types    Database backends support all range types except `While` and `Sample`   In-memory tables support all range types. \n\n? While    For the purposes of the `Index_Sub_Range.While` predicate a single   \"element\" of the table is represented by the `Row` type."},
{"module": "Standard.Table.Table", "type": "Table", "name": "drop", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"range": {"lazy": false, "type": "Index_Sub_Range | Range | Integer", "checked": true, "default": "..First"}},"aliases": ["remove", "skip"],"group": "Standard.Base.Selections","icon": "select_row","description": "Creates a new Table from the input with the specified range of rows removed. \n\n For the purposes of the `Index_Sub_Range.While` predicate a single \"element\" of the table is represented by the `Row` type.","remarks": "? Supported Range Types    Database backends support all range types except `While` and `Sample`    In-memory tables support all range types."},
{"module": "Standard.Table.Table", "type": "Table", "name": "remove_all_rows", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Filter out all rows."},
{"module": "Standard.Table.Table", "type": "Table", "name": "add_row_number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Row\""}, "from": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "group_by": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add index column", "rank", "record id"],"group": "Standard.Base.Values","icon": "column_add","suggested": 6,"description": "Adds a new column to the table enumerating the rows.","errors": "","remarks": "? Ordering of rows    Note that the ordering of rows from the original table is preserved in   all cases. The grouping and ordering settings affect how the row   numbers are assigned to each row, but the order of the rows itself is   not changed by this operation."},
{"module": "Standard.Table.Table", "type": "Table", "name": "add_group_number", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"grouping_method": {"lazy": false, "type": "Grouping_Method", "checked": true, "default": "Missing_Argument.throw \"grouping_method\""}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Group\""}, "from": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}, "step": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add group column", "bucket", "group id", "tile"],"group": "Standard.Base.Values","icon": "column_add","description": "Adds a new column to the table enumerating groups of rows, assigning each row to one group number. All rows in each group will get the same number.","errors": "","remarks": "? Grouping Methods    The following grouping methods are supported:   - `Unique`: Group rows by the specified columns.   - Equal_Count: Create the specified number of groups with the same     number of rows in each group (except possibly the last one). \n\n? Ordering of rows    In the in-memory database, the ordering of rows from the original table   is preserved in all cases. The grouping and ordering settings can   affect how the group numbers are assigned, depending on the grouping   method.  The order of the rows itself is not changed by this operation.    In the database backends, the ordering of rows is backend-dependent."},
{"module": "Standard.Table.Table", "type": "Table", "name": "set", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Existing_Column | Missing_Column | No_Such_Column | Expression_Error", "arguments": {"value": {"lazy": false, "type": "Text | Expression | Column | Constant_Column | Simple_Expression", "checked": true}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add_Or_Update"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["add column", "expression", "formula", "new column", "update column"],"group": "Standard.Base.Values","icon": "column_add","suggested": 3,"description": "Sets the column value at the given name.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "evaluate_expression", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"expression": {"lazy": false, "type": "Text | Expression", "checked": true}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Given an expression, create a derived column where each value is the result of evaluating the expression for the row.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "make_table_from_dictionary", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dict": {"lazy": false}, "key_column_name": {"lazy": false}, "value_column_name": {"lazy": false}},"aliases": [],"description": "A helper that creates a two-column table from a Dictionary.  The keys of the `Dictionary` become the first column, with name `key_column_name`, and the values become the second column, with name `value_column_name`.  For the in-memory database, the `Dictionary` can be empty. For the database backends, it must not be empty."},
{"module": "Standard.Table.Table", "type": "Table", "name": "make_table_from_vectors", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column_vectors": {"lazy": false}, "column_names": {"lazy": false}},"aliases": [],"description": "A helper that creates a literal table from `Vector`s.  For the in-memory database, the columns can be empty. For the database backends, they must not be empty."},
{"module": "Standard.Table.Table", "type": "Table", "name": "make_constant_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Create a constant column from a value."},
{"module": "Standard.Table.Table", "type": "Table", "name": "make_temp_column_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Create a unique temporary column name."},
{"module": "Standard.Table.Table", "type": "Table", "name": "columns", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector", "arguments": {},"aliases": [],"icon": "convert","description": "Returns the vector of columns contained in this table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "column_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Text", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the vector of column names contained in this table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Vector Row", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": [],"icon": "select_row","description": "Returns a vector of rows contained in this table.  In the database backend, it first materializes the table to in-memory."},
{"module": "Standard.Table.Table", "type": "Table", "name": "first_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns the first row of the table.  In the database backend, it first materializes the table to in-memory."},
{"module": "Standard.Table.Table", "type": "Table", "name": "last_row", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Row ! Index_Out_Of_Bounds", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "select_row","description": "Returns the last row of the table.  In the database backend, it first materializes the table to in-memory."},
{"module": "Standard.Table.Table", "type": "Table", "name": "join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"right": {"lazy": false, "type": "Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "join_kind": {"lazy": false, "type": "Join_Kind", "checked": true, "default": "..Left_Outer"}, "on": {"lazy": false, "type": "Vector (Join_Condition | Text) | Text | Join_Condition", "checked": true, "default": "[Join_Condition.Equals self.column_names.first]"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["hlookup", "lookup", "merge", "vlookup", "xlookup"],"group": "Standard.Base.Calculations","icon": "join","suggested": 4,"description": "Joins two tables according to the specified join conditions.","returns": "- Returns a new table with the rows from the two tables joined according   to the specified conditions.","errors": "- Returns a new table with the rows from the two tables joined according   to the specified conditions.","remarks": "? Join Kind    Enso supports the following join kinds:     - `..Inner` - Only the records that matched from the left and right      tables.    - `..Left_Outer` - all records from the left table, and the matched      values from the right.    - `..Right_Outer` - all records from the right table, and the matched      values from the left.    - `..Full` - all records, matched or unmatched.    - `..Left_Exclusive` - only the records that did not match from the      left table.    - `..Right_Exclusive` - only the records that did not match from the      right table.    It is possible to do a cartesian join (where every row from the left   table is paired with every row from the right table) as well, by using   the `cross_join` function. \n\n? Column Renaming    If columns from the two tables have colliding names, a prefix (by   default `Right_`) is added to the name of the column from the right   table. The left column remains unchanged. It is possible that the new   name will be in use, in this case it will be resolved using the normal   renaming strategy - adding subsequent `_1`, `_2` etc. \n\n? Nothing Equality    When comparing `Nothing` values, filter follows the ANSI SQL   conventions that `Nothing ==  Nothing` results in a `Nothing`. This   means that in a join this `Nothing` values will not match each other. \n\n? Result Ordering    The ordering of rows in the resulting table is not specified. \n\n? Joining on equality of columns with the same name    When performing an Inner join on two columns with the same name and an   equality condition, only one copy of column will be included in the   output (as these two columns would have the exact same content, so they   would be redundant). \n\n? Same-name column join shorthand    As a shorthand, providing a column name or a list of column names   allows to join the two tables on equality of corresponding columns with   the same name.    So `table.join other on=[\"A\", \"B\"]` is a shorthand for:        `table.join other on=[..Equals \"A\" \"A\", ..Equals \"B\" \"B\"]`"},
{"module": "Standard.Table.Table", "type": "Table", "name": "cross_join", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"right": {"lazy": false, "type": "Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "right_row_limit": {"lazy": false, "type": "Row_Limit", "checked": true, "default": "..Limit 100"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["append", "cartesian"],"group": "Standard.Base.Calculations","icon": "join","description": "Joins tables by pairing every row of the left table with every row of the right table. \n\n   - If the `right` table has more rows than the `right_row_limit` allows,     a `Cross_Join_Row_Limit_Exceeded` is reported. In warning/ignore     mode, the join is still executed.","remarks": "? Column Renaming    If columns from the two tables have colliding names, a prefix (by   default `Right_`) is added to the name of the column from the right   table. The left column remains unchanged. It is possible that the new   name will be in use, in this case it will be resolved using the normal   renaming strategy - adding subsequent `_1`, `_2` etc. \n\n? Result Ordering    Rows in the result are first ordered by the order of the corresponding   rows from the left table and then the order of rows from the right   table. This applies only if the order of the rows was specified (for   example, by sorting the table; in-memory tables will keep the memory   layout order while for database tables the order may be unspecified)."},
{"module": "Standard.Table.Table", "type": "Table", "name": "merge", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Missing_Input_Columns | Non_Unique_Key | Unmatched_Rows_In_Lookup", "arguments": {"lookup_table": {"lazy": false, "type": "Table", "checked": true, "default": "Missing_Argument.throw \"lookup_table\""}, "key_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "add_new_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "allow_unmatched_rows": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["hlookup", "join", "lookup", "vlookup", "xlookup"],"group": "Standard.Base.Calculations","icon": "join","description": "Merges this table with a lookup table New values are looked up in the lookup table based on the `key_columns`. Columns that exist in the lookup table where a match was found are replaced by values from the lookup table. Columns not found are left unchanged. This operation is similar to `Table.update_rows`, but just returns a new `Table` instance, instead of updating the table in-place (which is only possible for Database tables).","errors": "","remarks": "? Result Ordering    When operating in-memory, this operation preserves the order of rows   from this table (unlike `join`).   In the Database backend, there are no guarantees related to ordering of   results."},
{"module": "Standard.Table.Table", "type": "Table", "name": "replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Missing_Input_Columns | Non_Unique_Key | Unmatched_Rows_In_Lookup", "arguments": {"lookup_table": {"lazy": false, "type": "Table | Dictionary", "checked": true}, "columns": {"lazy": false, "type": "Text | Integer | Regex | By_Type | Vector (Text | Integer | Regex | By_Type)", "checked": true}, "from_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "to_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "allow_unmatched_rows": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["find replace"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces values in the columns using `lookup_table` to specify a mapping from old to new values.","errors": "","remarks": "? Result Ordering    When operating in-memory, this operation preserves the order of rows   from this table (unlike `join`).    In the Database backend, there are no guarantees related to ordering of   results."},
{"module": "Standard.Table.Table", "type": "Table", "name": "zip", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"right": {"lazy": false, "type": "Table", "checked": true, "default": "Missing_Argument.throw \"right\""}, "keep_unmatched": {"lazy": false, "type": "Boolean | Report_Unmatched", "checked": true, "default": "Report_Unmatched"}, "right_prefix": {"lazy": false, "type": "Text", "checked": true, "default": "\"Right \""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["join by row position"],"group": "Standard.Base.Calculations","icon": "join2-1","description": "Joins two tables by zipping rows from both tables table together - the first row of the left table is correlated with the first one of the right one etc. \n\n   - If the tables have different number of rows and `keep_unmatched` is     set to `Report_Unmatched`, the join will report `Row_Count_Mismatch`.","remarks": "? Column Renaming    If columns from the two tables have colliding names, a prefix (by   default `Right `) is added to the name of the column from the right   table. The left column remains unchanged. It is possible that the new   name will be in use, in this case it will be resolved using the normal   renaming strategy - adding subsequent ` 1`, ` 2` etc. \n\n? Row Ordering For In-Memory Tables    This operation requires a well-defined order of rows in the input   tables. In-memory tables rely on the ordering stemming directly from   their layout in memory. Database tables may not impose a deterministic   ordering. If the table defines a primary key, it is used to by default   to ensure deterministic ordering. That can be overridden by specifying   a different ordering using `Table.sort`. If no primary key was   defined nor any ordering was specified explicitly by the user, the   order of columns is undefined and the operation will fail, reporting a   `Undefined_Column_Order` problem and returning an empty table. \n\n? Row Ordering For Database Tables    The ordering of rows in the resulting table is not specified."},
{"module": "Standard.Table.Table", "type": "Table", "name": "union", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"tables": {"lazy": false, "type": "Table | Vector", "checked": true}, "columns_to_keep": {"lazy": false, "type": "Columns_To_Keep", "checked": true, "default": "..In_Any_Warn_On_Missing"}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["append", "concat", "join"],"group": "Standard.Base.Calculations","icon": "union","description": "Appends records from other table(s) to this table.","errors": "","remarks": "? Unifying Column Types    Numeric columns are unified by finding the smallest type that can fit   all of the columns. The biggest integer type will be chosen and if   integers and decimals are mixed, the decimal type will be chosen.   If boolean columns are mixed with numeric columns, they will be coerced   to the numeric type (and converted to 0 and 1).    Text types will are also unified by finding the smallest type that can   fit all the values. If constant-length texts of different lengths are   mixed, they will be coerced to a varying-length type.    If date and date-time columns are unified, this yields a date-time   column. In-memory, the date is promoted by adding a time of 00:00 and   the system time-zone. In other backends that behaviour may differ.    If one of the matched columns has `Mixed` type, that type will be used   regardless of types of other columns. Note that the `Mixed` type may   not be supported by most Database backends.    Finally, if no common type is found using the rules above, everything   is converted to text. \n\n? Ordering of Columns in the result    When matching columns by name, it is possible that the ordering of   columns may vary between input tables. The ordering is determined as   following: columns that are kept from the first table are in the order   they appear in that table. If there are columns that do not appear in   the first table, they are appended to the end of the resulting table in   the order they appear in the input."},
{"module": "Standard.Table.Table", "type": "Table", "name": "filter_blank_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"when": {"lazy": false, "type": "Blank_Selector", "checked": true, "default": "..Any_Cell"}, "treat_nans_as_blank": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["drop_empty_rows", "drop_missing_rows", "dropna", "filter_empty_rows", "remove_blank_rows", "remove_empty_rows", "remove_missing_rows"],"group": "Standard.Base.Selections","icon": "preparation","description": "Remove rows which are all blank or containing blank values.","remarks": "? Blank values   Blank values are `Nothing`, `\"\"` and depending on setting `Number.nan`."},
{"module": "Standard.Table.Table", "type": "Table", "name": "row_count", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Integer", "arguments": {},"aliases": ["count"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the number of rows in this table."},
{"module": "Standard.Table.Table", "type": "Table", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": [],"icon": "data_input","description": "Returns a materialized dataframe containing rows of this table.  In the in-memory backend, this returns the same table, truncated to `max_rows`. This is only kept for API compatibility between database and in-memory tables. The `read` operation can be used to ensure that the table is now in-memory, regardless of its origin."},
{"module": "Standard.Table.Table", "type": "Table", "name": "column_info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": ["column types", "field info", "metadata"],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a Table describing this table\u0027s contents.  The table lists all columns, counts of non-null items and value types of each column."},
{"module": "Standard.Table.Table", "type": "Table", "name": "transpose", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! No_Output_Columns | Missing_Input_Columns | Duplicate_Output_Column_Names", "arguments": {"key_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "attribute_column_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Name\""}, "value_column_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Value\""}, "error_on_missing_columns": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["pivot", "unpivot"],"group": "Standard.Base.Calculations","icon": "map_row","suggested": 10,"description": "Returns a new table with a chosen subset of columns left unchanged and the other columns pivoted to rows with a single name field and a single value field.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "cross_tab", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table ! Missing_Input_Columns | Invalid_Aggregate_Column | Floating_Point_Equality | Invalid_Aggregation | Unquoted_Delimiter | Additional_Warnings | Invalid_Column_Names", "arguments": {"group_by": {"lazy": false, "type": "Vector (Integer | Text | Regex | Aggregate_Column) | Text | Integer | Regex", "checked": true, "default": "[]"}, "names": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "self.column_names.first"}, "values": {"lazy": false, "type": "Aggregate_Column | Vector Aggregate_Column", "checked": true, "default": "..Count"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["pivot", "unpivot"],"group": "Standard.Base.Calculations","icon": "column_add","suggested": 11,"description": "Returns a new table using a chosen field as the column header and then aggregating the rows within each value as specified. Optionally, a set of fields can be used to group the rows.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "slice", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"start": {"lazy": false}, "end": {"lazy": false}},"aliases": [],"description": "Returns a table with a continuous sub-range of rows taken."},
{"module": "Standard.Table.Table", "type": "Table", "name": "reverse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {},"aliases": [],"group": "Standard.Base.Selections","icon": "order","description": "Returns a table containing the rows of `self` table with their order reversed."},
{"module": "Standard.Table.Table", "type": "Table", "name": "write", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "File | Any ! Column_Count_Mismatch | Illegal_Argument | File_Error", "arguments": {"path": {"lazy": false, "type": "Writable_File", "checked": true}, "format": {"lazy": false, "default": "Auto_Detect"}, "on_existing_file": {"lazy": false, "type": "Existing_File_Behavior", "checked": true, "default": "..Backup"}, "match_columns": {"lazy": false, "type": "Match_Columns", "checked": true, "default": "..By_Name"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["export", "output", "save", "to_file"],"group": "Standard.Base.Output","icon": "data_output","suggested": 9,"description": "This function writes a table from memory into a file.  The specific behavior of the various `File_Format`s is specified below.","returns": "- If an unsupported `File_Format` is specified, an   `Illegal_Argument` is raised. - If the path to the parent location cannot be found or the filename is   invalid, a `File_Error.Not_Found` is raised. - If another IO error occurs, such as access denied, an   `File_Error.IO_Error` is raised. - If appending and the columns do not match, a `Column_Mismatch` is   raised. - Other specific errors or warnings that can be raised depend on the   format argument. - On success, a `File` object for the written file is returned.","remarks": "? `File_Format` write behaviors    - `Auto_Detect`: The file format is determined by the provided file.   - `Bytes` and `Plain_Text`: The Table does not support these types in     the `write` function. If passed as format, an     `Illegal_Argument` is raised. To write out the table as plain     text, the user needs to convert the Table to Text     (e.g. using `to_delimited` method) and then use the `Text.write`     function."},
{"module": "Standard.Table.Table", "type": "Table", "name": "to_csv", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Creates a text representation of the table using the CSV format."},
{"module": "Standard.Table.Table", "type": "Table", "name": "to_xml", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "XML_Document", "arguments": {"element_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "self.column_names"}, "attribute_columns": {"lazy": false, "type": "Vector (Integer | Text | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "value_column": {"lazy": false, "type": "Text | Integer | Nothing", "checked": true, "default": "Nothing"}, "root_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Table\""}, "row_name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Row\""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"group": "Standard.Base.Conversions","icon": "convert","description": "Returns an `XML_Document` representation of the table.","errors": ""},
{"module": "Standard.Table.Table", "type": "Table", "name": "columns_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Table", "type": "Table", "name": "fill_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "default": {"lazy": false, "type": "Column | Column_Ref | Expression | Previous_Value | Any", "checked": true}},"aliases": ["fill missing", "if_nothing"],"group": "Standard.Base.Values","icon": "table_clean","description": "Returns a new table where missing values in the specified columns have been replaced with the provided default(s)."},
{"module": "Standard.Table.Table", "type": "Table", "name": "fill_empty", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "default": {"lazy": false, "type": "Column | Column_Ref | Expression | Previous_Value | Any", "checked": true}},"aliases": ["fill empty", "if_empty"],"group": "Standard.Base.Values","icon": "table_clean","description": "Returns a new column where empty Text values have been replaced with the provided default(s)."},
{"module": "Standard.Table.Table", "type": "Table", "name": "text_replace", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type) | Text | Integer | Regex | By_Type", "checked": true}, "term": {"lazy": false, "type": "Text | Column | Column_Ref | Expression | Regex", "checked": true, "default": "\"\""}, "new_text": {"lazy": false, "type": "Text | Column | Column_Ref | Expression", "checked": true, "default": "\"\""}, "case_sensitivity": {"lazy": false, "type": "Case_Sensitivity", "checked": true, "default": "..Sensitive"}, "only_first": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": ["regex", "substitute"],"group": "Standard.Base.Text","icon": "column_add","description": "Replaces the first, or all occurrences of `term` with `new_text` in each row of the specified column. If `term` is empty, the function returns the table unchanged.  This method follows the exact replacement semantics of the `Text.replace` method.  If regex is used the replacement string can contain references to groups matched. The following syntaxes are supported:     $0: the entire match string     $\u0026: the entire match string     $n: the nth group     $\u0026lt;foo\u0026gt;: Named group `foo`  For details on Enso\u0027s Regex syntax, see the [Help Documentation](https://help.enso.org/docs/using-enso/regular-expressions)."},
{"module": "Standard.Table.Table", "type": "Table", "name": "text_cleanse", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"from": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type)", "checked": true}, "remove": {"lazy": false, "type": "Vector Named_Pattern", "checked": true, "default": "[]"}},"aliases": [],"group": "Standard.Base.Text","icon": "column_add","description": "Applies the specified cleansing operations to text values in each column specified in `from`.","returns": "- A Table of all records, with the cleansing operations performed on the   specified columns. Original columns are removed and replaced with the   cleansed columns."},
{"module": "Standard.Table.Table", "type": "Table", "name": "running", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"statistic": {"lazy": false, "type": "Statistic", "checked": true, "default": "..Count"}, "of": {"lazy": false, "type": "Text | Integer", "checked": true, "default": "0"}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027\u0027"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "group_by": {"lazy": false, "type": "Vector (Text | Integer | Regex) | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector (Text | Sort_Column) | Text", "checked": true, "default": "[]"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["count", "cumulative", "maximum", "mean", "minimum", "product", "standard deviation", "sum", "sum", "total", "variance"],"group": "Standard.Base.Values","icon": "column_add","description": "Adds a new column to the table with a running calculation.","errors": "","remarks": "? Ordering of rows    Note that the ordering of rows from the original table is preserved in   all cases. The grouping and ordering settings affect how the running statistic is   calculated for each row, but the order of the rows itself is   not changed by this operation."},
{"module": "Standard.Table.Table", "type": "Table", "name": "offset", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Table", "arguments": {"columns": {"lazy": false, "type": "Vector (Integer | Text | Regex | By_Type)", "checked": true, "default": "Missing_Argument.throw \"columns\""}, "n": {"lazy": false, "type": "Integer", "checked": true, "default": "-1"}, "fill_with": {"lazy": false, "type": "Fill_With", "checked": true, "default": "..Nothing"}, "group_by": {"lazy": false, "type": "Vector | Text | Integer | Regex", "checked": true, "default": "[]"}, "order_by": {"lazy": false, "type": "Vector | Text", "checked": true, "default": "[]"}, "set_mode": {"lazy": false, "type": "Set_Mode", "checked": true, "default": "..Add"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["displace", "lag", "lead", "shift", "slide"],"group": "Standard.Base.Values","icon": "column_add","description": "Returns a table with new columns offset by n rows, where missing values have been replaced with the provided fill_with strategy.","returns": "- A Table of all records, with the selected columns offset by the number specifed by n.","errors": "- A Table of all records, with the selected columns offset by the number specifed by n.","remarks": "? Ordering of rows    Note that the ordering of rows from the original table is preserved in   all cases. The grouping and ordering settings affect how the values move as they are offset, but the order of the rows itself is   not changed by this operation."},
{"module": "Standard.Table.Table", "type": "Table", "name": "generate_rows", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"over": {"lazy": false, "type": "Generate_Rows_Range", "checked": true, "default": "Missing_Argument.throw \"over\""}, "as": {"lazy": false, "type": "Text", "checked": true, "default": "\"\""}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": ["duplicate", "expand", "repeat", "replicate"],"group": "Standard.Base.Values","icon": "row_add","description": "Generates additional rows of data by repeating existing rows based on a provided range.","returns": "- A Table of records with each incoming record duplicated by the number of times specified in the range.","errors": "- A Table of records with each incoming record duplicated by the number of times specified in the range."},
{"module": "Standard.Table.Table", "type": "Table", "name": "column_naming_helper", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Table", "type": "Table", "name": "pretty", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Table", "type": "Table", "name": "to_delimited", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Text", "arguments": {"delimiter": {"lazy": false, "type": "Delimited_Format|Text", "checked": true, "default": "\u0027\\t\u0027"}, "quote_style": {"lazy": false, "type": "Quote_Style", "checked": true, "default": "..With_Quotes"}, "headers": {"lazy": false, "type": "Headers", "checked": true, "default": "..Detect_Headers"}, "value_formatter": {"lazy": false, "type": "Data_Formatter|Nothing", "checked": true, "default": "Data_Formatter.Value"}, "line_endings": {"lazy": false, "type": "Line_Ending_Style|Infer", "checked": true, "default": "Infer"}},"aliases": [],"description": "Converts all table contents to a text value in delimited format."},
{"module": "Standard.Table.Table", "type": "", "name": "slice_ranges", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "ranges": {"lazy": false}},"aliases": [],"description": "A helper to create a new table consisting of slices of the original table."},
{"module": "Standard.Table.Table", "type": "", "name": "make_join_helpers", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"left_table": {"lazy": false}, "right_table": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Column", "checked": true}},"aliases": [],"description": "Conversion method to a Table from a Column."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Text", "checked": true}, "format": {"lazy": false, "default": "Delimited_Format.Delimited \u0027\\t\u0027"}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true, "default": "..Report_Warning"}},"aliases": [],"description": "Converts a Text value into a Table.  The format of the text is determined by the `format` argument."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Vector", "checked": true}, "fields": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Conversion method to a Table from a Vector."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "JS_Object", "checked": true}, "fields": {"lazy": false, "type": "Vector | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Conversion method to a Table from a JS_Object."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Range", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "\"Range\""}},"aliases": [],"description": "Conversion method to a Column from a Vector."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Date_Range", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true, "default": "that.default_column_name"}},"aliases": [],"description": "Conversion method to a Column from a Vector."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "XML_Element", "checked": true}},"aliases": [],"description": "Convert an `XML_Element` into a `Table`  Generates a single-row table with columns for the tag\u0027s contents. \n\n The columns generated are: - Name: the root tag name - @[attribute name]: the attribute with that name. - Children: the children of the tag, including `XML_Element`s and text   elements. This is only generated if the tag has `XML_Element` children - Value: the text content of the tag. This is only generated if the tag does   not have `XML_Element` children  Either `Children` or `Value` will be generated, but not both."},
{"module": "Standard.Table.Table", "type": "Table", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "XML_Document", "checked": true}},"aliases": [],"description": "Convert an `XML_Document` into a `Table`  Generates a single-row table with columns for the root tag\u0027s contents. \n\n The columns generated are: - Name: the root tag name - @[attribute name]: the attribute with that name - Children: the children of the tag, including `XML_Element`s and text   elements. This is only generated if the tag has `XML_Element` children - Value: the text content of the tag. This is only generated if the tag does   not have `XML_Element` children  Either `Children` or `Value` will be generated, but not both."},
{"module": "Standard.Table.Table", "type": "", "name": "make_fill_nothing_default_widget", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "cache": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Table.Table", "type": "", "name": "from_java_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table", "arguments": {"java_table": {"lazy": false}},"aliases": [],"description": "Helper method for internal use to make a Table from a Java Table."},
{"module": "Standard.Table.Table", "type": "Many_Files_List", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Table", "checked": true}},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "Bits_16", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bits", "arguments": {},"aliases": [],"description": "16-bit (2 byte) value"},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "Bits_32", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bits", "arguments": {},"aliases": [],"description": "32-bit (4 byte) value"},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "Bits_64", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bits", "arguments": {},"aliases": [],"description": "64-bit (8 byte) value"},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "from_integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bits": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "to_integer", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Bits", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the text representation of the bit-size."},
{"module": "Standard.Table.Value_Type", "type": "Bits_Comparator", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Bits_Comparator", "arguments": {},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Bits_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}, "y": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Bits_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": []},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Boolean", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "Boolean or Bit value: 0 or 1.  ANSI SQL: BIT / BOOLEAN"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Byte", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "Integer value: 0 to 255  ANSI SQL: TINYINT"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Integer", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"size": {"lazy": false, "type": "Bits", "checked": true, "default": "Bits.Bits_64"}},"aliases": [],"description": "Integer value:  16-bit: -32,768 to 32,767 32-bit: -2,147,483,648 to -2,147,483,648 64-bit: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 ANSI SQL: SMALLINT (16-bit), INT (32-bit), BIGINT (64-bit)"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Float", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"size": {"lazy": false, "type": "Bits", "checked": true, "default": "Bits.Bits_64"}},"aliases": [],"description": "Floating point value.  ANSI SQL: REAL, FLOAT, DOUBLE"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Decimal", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"precision": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}, "scale": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Arbitrary precision numerical value with a scale and precision.  ANSI SQL: NUMERIC, DECIMAL"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Char", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"size": {"lazy": false, "type": "Positive_Integer | Nothing", "checked": true, "default": "Nothing"}, "variable_length": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Character string.  ANSI SQL: CHAR, VARCHAR, TEXT, LONGVARCHAR, NCHAR, NVARCHAR, TEXT, CLOB, NCLOB","remarks": "! Counting Characters    Note that different backends may count the text in different ways.   The in-memory backend treats a single grapheme cluster (e.g. 💡) as a   single character unit. In most database systems more complex grapheme   clusters may be counted as multiple characters. So there isn\u0027t a 1-1   correspondence between these limits across backends which may cause   strings to be truncated if they contain such characters and are close   to the limit."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Date", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "Date  ANSI SQL: DATE"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Date_Time", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"with_timezone": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Date and Time  ANSI SQL: TIMESTAMP / DateTime"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Time", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "Time of day  ANSI SQL: TIME, TIME WITHOUT TIME ZONE"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Binary", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"size": {"lazy": false, "type": "Integer|Nothing", "checked": true, "default": "Nothing"}, "variable_length": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Binary data.  ANSI SQL: BINARY, VARBINARY, LONGVARBINARY, BLOB"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Unsupported_Data_Type", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {"type_name": {"lazy": false, "type": "Text|Nothing", "checked": true, "default": "Nothing"}, "underlying_type": {"lazy": false, "type": "Any|Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Unsupported SQL type.  Fallback provided to allow describing types that are not supported by Enso at this time."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Mixed", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "A mix of values can be stored in the Column.  In-Memory and SQLite tables support this."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "Null", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Value_Type", "arguments": {},"aliases": [],"description": "A special type indicating no values present.  It can be used when a column does not have any values, so no proper type  could be inferred for it. Columns of this type cannot hold any values  other than `Nothing`.   Because the column with type `Null` contains no values, it can be used in  any operation.","remarks": "? Implementation Note    The `is_*` methods will return `False` for this type, as they require    more precision. E.g. `Value_Type.Null.is_boolean` will return `False`.    However, the sibling `expect_*` methods will accept a `Value_Type.Null`    column."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "are_comparable", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"type_1": {"lazy": false}, "type_2": {"lazy": false}},"aliases": [],"description": "Specifies if values of the given type can be compared for ordering."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_comparable", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"arg1": {"lazy": false}, "arg2": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks that both arguments can be compared for ordering and runs the following action or reports an error."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) is of a text type and runs the following action or reports a type error."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_boolean", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) is of a text type and runs the following action or reports a type error."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_numeric", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) is of a numeric type and runs the following action or reports a type error."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_floating_point", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) is of a floating point type and runs the following action or reports a type error."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_integer", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) is of an integer type and runs the following action or reports a type error."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_has_date", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) has type `Date` or `Date_Time`."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_has_time", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"argument": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Checks if the provided argument (which may be a value or a Column) has type `Time_Of_Day` or `Date_Time`."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "expect_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "predicate": {"lazy": false}, "type_kind": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "A helper for generating the `Value_Type.expect_` checks."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_null", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a null type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_boolean", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a boolean type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_floating_point", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a floating-point number type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_text", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a text type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_numeric", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents any numeric type - integer, byte, floating point or decimal."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_integer", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents an integer type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_decimal", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a decimal type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_date", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a Date type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a Time type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_mixed", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a Mixed type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_date_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a Date_Time type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "has_date", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a type that holds a date.  It will return true for both `Date` and `Date_Time` types."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "has_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a type that holds a time of day.  It will return true for both `Time_Of_Day` and `Date_Time` types."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_date_or_time", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Checks if the `Value_Type` represents a date/time type."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "has_ordering", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies if values of the given type can be compared for ordering."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "can_be_widened_to", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"target_type": {"lazy": false}},"aliases": [],"description": "Checks if this type can be widened to the provided type.  The widening is permitted if the target type is in a way \u0027larger\u0027 than the source type, so that there is no loss of information. In practice, there are cases where widening can still lose information - notably integers can be widened into floats and big enough integers may not be able to be exactly represented in floats."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a text representation of the `Value_Type` meant for displaying to the user."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides a JS object representation for use in visualizations."},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "to_name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Provides the constructor name"},
{"module": "Standard.Table.Value_Type", "type": "Value_Type", "name": "is_same_type", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"other": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Check if the same type of value ignoring size, precision and scale."},
{"module": "Standard.Table.Value_Type", "type": "Auto", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Auto", "arguments": {},"aliases": [],"description": "The type representing inferring the column type automatically based on values present in the column.  The most specific type which is valid for all values in a column is chosen: - if all values are integers, `Integer` is chosen, - if all values are decimals or integers, `Decimal` is chosen, - if the values are all the same time type (a date, a time or a date-time),   the corresponding type is chosen, `Date`, `Time_Of_Day` or `Date_Time`,   respectively, - if all values are booleans, `Boolean` is chosen, - otherwise, `Text` is chosen as a fallback and the column is kept as-is   without parsing."},
{"module": "Standard.Table.Value_Type", "type": "By_Type", "name": "By_Type", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "By_Type", "arguments": {"type": {"lazy": false, "type": "Value_Type", "checked": true}},"aliases": [],"description": "The type representing the column type being explicitly selected by the user."},
{"module": "Standard.Table.Value_Type", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Bits", "checked": true}},"aliases": []},
{"module": "Standard.Tableau.Internal.Telemetry", "type": "", "name": "log", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {"logger_name": {"lazy": false, "type": "Text", "checked": true}, "msg": {"lazy": false, "type": "Text", "checked": true}, "args": {"lazy": false, "type": "Vector", "checked": true}},"aliases": [],"description": "Schedules a single telemetry message for sending."},
{"module": "Standard.Tableau.Internal.Telemetry", "type": "", "name": "_root_logger_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Hyper_Column", "type": "Hyper_Column", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hyper_Column", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "value_type": {"lazy": false, "type": "Value_Type", "checked": true}, "nullable": {"lazy": false, "type": "Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Tableau.Hyper_Column", "type": "Hyper_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Hyper_Column", "type": "Hyper_Column", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Hyper_Errors", "type": "Hyper_Table_Not_Found", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hyper_Table_Not_Found", "arguments": {"schema": {"lazy": false, "type": "Text", "checked": true}, "name": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Tableau.Hyper_Errors", "type": "Query_Failed", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Query_Failed", "arguments": {"message": {"lazy": false, "type": "Text", "checked": true}, "query": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Tableau.Hyper_Errors", "type": "", "name": "handle_java_exceptions", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": []},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hyper_File", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "internal_schema": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "A representation of a Tableau Hyper Extract file."},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File", "checked": true}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027*\u0027"}},"aliases": [],"icon": "data_input","description": "Creates a Hyper_File"},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "schemas", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the list of schemas for the connection within the current database (or catalog)."},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "Returns the name of the current schema. `*` represents all schemas."},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "set_schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false}},"aliases": [],"icon": "data_input","description": "Returns a new Hyper_File with the specified schema set as default."},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "tables", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"schema": {"lazy": false, "type": "Text", "checked": true, "default": "self.schema"}},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns the list of tables for the connection within the current database (or catalog)."},
{"module": "Standard.Tableau.Hyper_File", "type": "Hyper_File", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false, "type": "Text", "checked": true}, "schema": {"lazy": false, "type": "Text", "checked": true, "default": "self.schema"}, "limit": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": ["get", "import", "load", "open", "sheet"],"group": "Standard.Base.Input","icon": "data_input","description": "Read a table from the Hyper_File into a Table."},
{"module": "Standard.Tableau.Hyper_File", "type": "", "name": "make_schema_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"hyper_file": {"lazy": false, "type": "Hyper_File", "checked": true}, "include_any": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": []},
{"module": "Standard.Tableau.Hyper_File", "type": "", "name": "make_table_selector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"hyper_file": {"lazy": false, "type": "Hyper_File", "checked": true}, "cache": {"lazy": false, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Hyper_Table", "arguments": {"file": {"lazy": false, "type": "Hyper_File", "checked": true}, "internal_schema": {"lazy": false, "type": "Text", "checked": true}, "internal_table": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Represents a Tableau Hyper Table."},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "schema", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "metadata","description": "The schema of the table."},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "table", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "The name of the table."},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "column_metadata", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Reads The Columns for the Table"},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "column_info", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Metadata","icon": "metadata","description": "Returns a Table describing this table\u0027s contents.  The table lists all columns and value types of each column."},
{"module": "Standard.Tableau.Hyper_Table", "type": "Hyper_Table", "name": "read", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"max_rows": {"lazy": false, "type": "Rows_To_Read", "checked": true, "default": "..All_Rows"}},"aliases": ["import", "load", "open"],"group": "Standard.Base.Input","icon": "data_input","description": "Reads the Table into Enso Table"},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "Hyper_File", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Tableau_Format", "arguments": {"schema": {"lazy": false, "type": "Text", "checked": true, "default": "\u0027*\u0027"}},"aliases": [],"description": "Read the file to a `Hyper_File` object."},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "resolve", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"constructor": {"lazy": false}},"aliases": [],"description": "Resolve an unresolved constructor to the actual type."},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "for_read", "methodType": "static", "accessor": "PRIVATE", "modifiers": "ADVANCED", "returnType": "", "arguments": {"file": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "If the File_Format supports reading from the file, return a configured instance."},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "for_file_write", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false, "type": "Writable_File", "checked": true}},"aliases": [],"description": "If this File_Format should be used for writing to that file, return a configured instance. Not currently supported."},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "get_dropdown_options", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "get_name_patterns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Vector File_Name_Pattern", "arguments": {},"aliases": []},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "read", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"file": {"lazy": false}, "on_problems": {"lazy": false, "type": "Problem_Behavior", "checked": true}},"aliases": [],"description": "Implements the `File.read` for this `File_Format`"},
{"module": "Standard.Tableau.Tableau_Format", "type": "Tableau_Format", "name": "read_stream", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stream": {"lazy": false, "type": "Input_Stream", "checked": true}, "metadata": {"lazy": false, "type": "File_Format_Metadata", "checked": true}},"aliases": [],"description": "Implements decoding the format from a stream."},
{"module": "Standard.Test.Internal.Stack_Trace_Helpers", "type": "", "name": "decorate_stack_trace_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {"project_root": {"lazy": false, "type": "File", "checked": true}, "decorator": {"lazy": false, "type": "Text -> Text", "checked": true}, "stack_trace_text": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Phase_Conf", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Phase_Conf", "arguments": {"iterations": {"lazy": false, "type": "Integer", "checked": true}, "seconds": {"lazy": false, "type": "Integer", "checked": true}},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Phase_Conf", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Phase_Conf", "name": "validate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Validates the config and throws a Panic if it is invalid."},
{"module": "Standard.Test.Bench", "type": "Bench_Options", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Bench_Options", "arguments": {"warmup": {"lazy": false, "type": "Phase_Conf", "checked": true}, "measure": {"lazy": false, "type": "Phase_Conf", "checked": true}},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Bench_Options", "name": "set_warmup", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"warm": {"lazy": false, "type": "Phase_Conf", "checked": true}},"aliases": [],"description": "Sets the warmup phase."},
{"module": "Standard.Test.Bench", "type": "Bench_Options", "name": "set_measure", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"meas": {"lazy": false, "type": "Phase_Conf", "checked": true}},"aliases": [],"description": "Sets the measurement phase."},
{"module": "Standard.Test.Bench", "type": "Bench_Options", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Bench_Options", "name": "validate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Validates the config and throws a Panic if it is invalid."},
{"module": "Standard.Test.Bench", "type": "Bench_Builder", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Bench_Builder", "arguments": {"builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Bench_Builder", "name": "group", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "configuration": {"lazy": false, "type": "Bench_Options", "checked": true}, "fn": {"lazy": false}},"aliases": [],"description": "Add a group to the builder."},
{"module": "Standard.Test.Bench", "type": "Group_Builder", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Group_Builder", "arguments": {"name": {"lazy": false}, "builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Bench", "type": "Group_Builder", "name": "specify", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "benchmark": {"lazy": true}},"aliases": [],"description": "Adds a benchmark specification to the group."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "All", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bench", "arguments": {"groups": {"lazy": false, "type": "Vector Bench", "checked": true}},"aliases": [],"description": "A set of groups of benchmarks."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "Group", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bench", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "configuration": {"lazy": false, "type": "Bench_Options", "checked": true}, "specs": {"lazy": false, "type": "Vector Bench", "checked": true}},"aliases": [],"description": "A single group of benchmarks sharing configuration."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "Spec", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Bench", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "code": {"lazy": false, "type": "Any -> Any", "checked": true}},"aliases": [],"description": "A specific single benchmark."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "build", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fn": {"lazy": false}},"aliases": [],"description": "Construct a Bench object."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "options", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "The default options for benchmarks."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "phase_conf", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"iterations": {"lazy": false, "default": "2"}, "seconds": {"lazy": false, "default": "3"}},"aliases": [],"description": "Returns the default phase configuration.  The default used for the JMH library are 5 iterations for 10 seconds each. However, our defaults are lower to make the benchmarks run faster."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "measure", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "warmup_conf": {"lazy": false, "type": "Phase_Conf", "checked": true}, "measure_conf": {"lazy": false, "type": "Phase_Conf", "checked": true}, "act": {"lazy": true}},"aliases": [],"description": "Measure the amount of time it takes to execute a given computation."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "single_call", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"act": {"lazy": true}},"aliases": [],"description": "Measure the amount of time in ns it takes to execute a given suspended computation."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "run_phase", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "phase_name": {"lazy": false, "type": "Text", "checked": true}, "conf": {"lazy": false, "type": "Phase_Conf", "checked": true}, "act": {"lazy": true}},"aliases": [],"description": "Run a single phase of the benchmark.  The total run time of the phase is computed as `conf.seconds * conf.iterations`, so that it is the same as in JMH."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "summarize_phase", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"label": {"lazy": false, "type": "Text", "checked": true}, "phase_name": {"lazy": false, "type": "Text", "checked": true}, "invocations": {"lazy": false, "type": "Integer", "checked": true}, "average_time": {"lazy": false, "type": "Float", "checked": true}, "time_stddev": {"lazy": false, "type": "Float", "checked": true}, "phase_duration": {"lazy": false, "type": "Duration", "checked": true}},"aliases": [],"description": "This is a very simple implementation of summarizing the benchmark results.  We may want to improve it later, but it gets the job done to give us simple summary that can be analysed more easily than logs."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "validate", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Validates the benchmark and throws a Panic if it is invalid. Returns self if the benchmark is valid."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "fold", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "fn": {"lazy": false}},"aliases": [],"description": "Fold over the set of benchmarks merging using the specified function."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "total_specs", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Counts all the specs in the benchmark."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "estimated_runtime", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Estimates the runtime based on configurations."},
{"module": "Standard.Test.Bench", "type": "Bench", "name": "run_main", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"filter": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Run the specified set of benchmarks."},
{"module": "Standard.Test.Bench", "type": "", "name": "validate_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Checks whether the given name is a valid benchmark name - either group name or a spec name. The name should be a valid Java identifier. Throw a Panic error if the validation fails."},
{"module": "Standard.Test.Bench", "type": "", "name": "get_benchmark_report_path", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Clue", "type": "Clue", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Clue", "arguments": {"add_clue": {"lazy": false}},"aliases": [],"description": "Represents a clue as to why a test failed"},
{"module": "Standard.Test.Execution_Context_Helpers", "type": "", "name": "run_with_and_without_output", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Runs the action twice, once with the Output context enabled and once with it disabled, to check that the behaviour is the same regardless of context."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_fail_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"matcher": {"lazy": false}, "unwrap_errors": {"lazy": false, "default": "True"}},"aliases": [],"description": "Expect a function to fail with the provided dataflow error."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_fail_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"matcher": {"lazy": false}, "unwrap_errors": {"lazy": false, "default": "True"}},"aliases": [],"description": "Expect a function to fail with the provided dataflow error."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is equal to the expected value."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_equal_type", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is equal to the expected type value."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_equal_type", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Added so that dataflow errors are not silently lost."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_not_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is not equal to the expected value."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_not_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Added so that dataflow errors are not silently lost."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_not_equal_type", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is not equal to the expected type value."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_not_equal_type", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Added so that dataflow errors are not silently lost."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_start_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is a Text value and starts with `that`."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_end_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is a Text value and ends with `that`."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_start_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is a Text value and starts with `that`."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_end_with", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is a Text value and ends with `that`."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value is equal to the expected value."},
{"module": "Standard.Test.Extensions", "type": "Number", "name": "should_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}, "epsilon": {"lazy": false, "default": "0"}},"aliases": [],"description": "Asserts that `self` is within `epsilon` from `that`."},
{"module": "Standard.Test.Extensions", "type": "Decimal", "name": "should_equal", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}, "epsilon": {"lazy": false, "default": "0"}},"aliases": [],"description": "Asserts that `self` is within `epsilon` from `that`."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_succeed", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that `self` value is not an error.  It returns the original value, so that it can be inspected further."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_succeed", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that `self` value is not an error.  It returns the original value, so that it can be inspected further."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_be_a", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"typ": {"lazy": false}},"aliases": [],"description": "Handles an unexpected dataflow error."},
{"module": "Standard.Test.Extensions", "type": "Boolean", "name": "should_be_true", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that the given `Boolean` is `True`"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_be_true", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that the given `Boolean` is `True`."},
{"module": "Standard.Test.Extensions", "type": "Boolean", "name": "should_be_false", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that the given `Boolean` is `False`"},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_be_false", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Asserts that the given `Boolean` is `False`"},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_be_a", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"typ": {"lazy": false}},"aliases": [],"description": "Asserts that a value is of a given type."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_equal_ignoring_order", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains the same elements as `that`.  It only checks that all elements from one collection are also present in the other one. Arities of elements are not checked, so the collections can still differ in length by containing duplicate elements.  It will work on any collection which supports the methods `each : (Any -\u003e Nothing) -\u003e Any` and `contains : Any -\u003e Boolean`."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_equal_ignoring_order", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains the same elements as `that`.  It only checks that all elements from one collection are also present in the other one. Arities of elements are not checked, so the collections can still differ in length by containing duplicate elements.  It will work on any collection which supports the methods `each : (Any -\u003e Nothing) -\u003e Any` and `contains : Any -\u003e Boolean`."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_only_contain_elements_in", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains only elements in `that`.  It checks that all elements from `self` are also present in `that`. It does not require that all elements of `that` are contained in `self`. Arities of elements are not checked, so `self` may still contain more elements than `that` by containing duplicates.  It will work on any collection which supports the methods `each : (Any -\u003e Nothing) -\u003e Any` and `contains : Any -\u003e Boolean`."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_only_contain_elements_in", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains only elements in `that`.  It checks that all elements from `self` are also present in `that`. It does not require that all elements of `that` are contained in `self`. Arities of elements are not checked, so the collections can still differ in length by containing duplicate elements.  It will work on any collection which supports the methods `each : (Any -\u003e Nothing) -\u003e Any` and `contains : Any -\u003e Boolean`."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_contain", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains an element. \n\n This method delegates to the `contains` method of `self` and will use the rules of the particular type - be it a `Vector`, `Text` or any custom type implementing a method `contains : a -\u003e Boolean`."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_contain", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value contains an element. \n\n This method delegates to the `contains` method of `self` and will use the rules of the particular type - be it a `Vector`, `Text` or any custom type implementing a method `contains : a -\u003e Boolean`."},
{"module": "Standard.Test.Extensions", "type": "Any", "name": "should_not_contain", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value does not contain an element. \n\n This method delegates to the `contains` method of `self` and will use the rules of the particular type - be it a `Vector`, `Text` or any custom type implementing a method `contains : a -\u003e Boolean`."},
{"module": "Standard.Test.Extensions", "type": "Error", "name": "should_not_contain", "methodType": "extension", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"element": {"lazy": false}},"aliases": [],"description": "Asserts that `self` value does not contain an element. \n\n This method delegates to the `contains` method of `self` and will use the rules of the particular type - be it a `Vector`, `Text` or any custom type implementing a method `contains : a -\u003e Boolean`."},
{"module": "Standard.Test.Extensions_Helpers", "type": "", "name": "rhs_error_check", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false}},"aliases": [],"description": "A helper that ensures that the expected value provided in some of the Test operations is not an error. The left-hand side may be an error and that will cause a test failure. But the right-hand side being an error is bad test design and should be fixed."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Faker", "arguments": {"generator": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "upper_case_letters", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Set of upper case letters."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "lower_case_letters", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Set of lower case letters."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "digits", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"icon": "text","description": "Set of numerical digits."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"seed": {"lazy": false, "default": "0"}},"aliases": [],"icon": "random","description": "Creates a new Faker which can be used for creating test values."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "text_value", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"template": {"lazy": false}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Creates a random Text based on a template of character sets."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "alpha", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false, "default": "1"}, "upper_case": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Generates a Text consisting of lower/upper case characters."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "alpha_numeric", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false, "default": "1"}, "upper_case": {"lazy": false, "default": "False"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Generates a Text consisting of lower/upper case characters and digits."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "hexadecimal", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"length": {"lazy": false, "default": "1"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Generates a Text for a hexadecimal number"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "boolean", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random Boolean value"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "integer", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"minimum": {"lazy": false, "default": "0"}, "maximum": {"lazy": false, "default": "100"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random Integer value"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "large_integer", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"bit_length": {"lazy": false}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random large Integer value (represented internally as a Java `BigInteger`.  The values provided by this method are selected from a sparse set within the specified range. For example, with `bit_length=4`, the possible range is -16 to 16, but the actual values only include 9, 11, 13 and 15.  Arguments - bit_length: specifies the range of values to select from. The values   will be between -2^bit_length and 2^bit_length."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "decimal", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"bit_length": {"lazy": false}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random Decimal value (represented internally as a Java `BigDecimal`.  This generator uses `large_integer` to generate an `Integer`, and then adds a random `Float`. See `large_integer` for a description of the range of values that this can return.  Arguments - bit_length: specifies the range of values to select from. The values   will be between -2^bit_length and 2^bit_length."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "float", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"minimum": {"lazy": false, "default": "0.0"}, "maximum": {"lazy": false, "default": "1.0"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random Float value"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "float_full_range_exp", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Create a random Float value in full range of allowed values, exponentially distributed (exponents are uniformly distributed)."},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "vector_item", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"items": {"lazy": false}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Picks an item at Random from a list"},
{"module": "Standard.Test.Faker", "type": "Faker", "name": "make_some_nothing", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "chance": {"lazy": false, "default": "0.1"}},"aliases": [],"group": "Standard.Base.Random","icon": "random","description": "Randomly converts some values to Nothing"},
{"module": "Standard.Test.Frame_Hider", "type": "", "name": "hide", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Hides the stack frames of the contained code from `get_top_stack_frame`.   \u003e Example      Wrap the body of a test utility to hide its stack frames.       Any.should_equal self that = Frame_Hider.hide \u003c|          ...          Error.throw (\"Not equal at \" + Frame_Hider.get_top_stack_frame)"},
{"module": "Standard.Test.Frame_Hider", "type": "", "name": "unhide", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "Unhides the stack frames of the call to the user-supplied callback  application.   \u003e Example      Wrap a callback invocation to unhide its stack frames.       test_utility test_predicate x =          ...          Frame_Hider.unhide (test_predicate x)"},
{"module": "Standard.Test.Frame_Hider", "type": "", "name": "unhide_1", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}, "x": {"lazy": false}},"aliases": [],"description": "Unhides the stack frames of the call to the user-supplied callback  application, uncurried for one argument.   `unhide_1 f x` is Equivalent to `unhide (f x)`.   \u003e Example      Wrap a callback invocation to unhide its stack frames.       test_utility test_predicate x =          ...          Frame_Hider.unhide_1 test_predicate x"},
{"module": "Standard.Test.Frame_Hider", "type": "", "name": "unhide_2", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}, "x": {"lazy": false}, "y": {"lazy": false}},"aliases": [],"description": "Unhides the stack frames of the call to the user-supplied callback  application, uncurried for two arguments.   `unhide_1 f x y` is Equivalent to `unhide (f x y)`.   \u003e Example      Wrap a callback invocation to unhide its stack frames.       test_utility test_predicate x y =          ...          Frame_Hider.unhide_2 test_predicate x y"},
{"module": "Standard.Test.Frame_Hider", "type": "", "name": "get_top_stack_frame", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Text", "arguments": {},"aliases": [],"description": "Identify the correct top stack frame by skipping over the stack frames  inside test utilities."},
{"module": "Standard.Test.Group", "type": "Group_Builder", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Group_Builder", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "builder": {"lazy": false, "default": "Builder.new"}, "teardown_ref": {"lazy": false, "default": "Ref.new (_ -\u003e Nothing)"}},"aliases": []},
{"module": "Standard.Test.Group", "type": "Group_Builder", "name": "specify", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "code": {"lazy": true, "type": "Any", "checked": true}, "pending": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Specifies a single test."},
{"module": "Standard.Test.Group", "type": "Group_Builder", "name": "teardown", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"code": {"lazy": true, "type": "Any", "checked": true}},"aliases": [],"description": "Provide a teardown of a group - a method that will be called once all the tests from the group are finished.  If called multiple times, the teardown operations will be chained."},
{"module": "Standard.Test.Group", "type": "Group", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Group", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "teardown": {"lazy": false, "type": "Any -> Any", "checked": true}, "specs": {"lazy": false, "type": "Vector Spec", "checked": true}, "pending": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": []},
{"module": "Standard.Test.Group", "type": "Group", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Group", "type": "Group", "name": "is_pending", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": []},
{"module": "Standard.Test.Group", "type": "Group_Comparator", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Group_Comparator", "arguments": {},"aliases": [],"description": "Group is used as a key inside a map, so we define its comparator which uses only the `name` field."},
{"module": "Standard.Test.Group", "type": "Group_Comparator", "name": "compare", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "(Ordering | Nothing)", "arguments": {"g1": {"lazy": false, "type": "Group", "checked": true}, "g2": {"lazy": false, "type": "Group", "checked": true}},"aliases": []},
{"module": "Standard.Test.Group", "type": "Group_Comparator", "name": "hash", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"g": {"lazy": false, "type": "Group", "checked": true}},"aliases": []},
{"module": "Standard.Test.Group", "type": "Comparable", "name": "from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"that": {"lazy": false, "type": "Group", "checked": true}},"aliases": []},
{"module": "Standard.Test.Helpers", "type": "Finished_With", "name": "Error", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Finished_With", "arguments": {"err": {"lazy": false}, "stack_trace_text": {"lazy": false}},"aliases": [],"description": "An error describing that a test finished with an unexpected error."},
{"module": "Standard.Test.Helpers", "type": "", "name": "run_specs_from_group", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"specs": {"lazy": false, "type": "Vector Spec", "checked": true}, "group": {"lazy": false, "type": "Group", "checked": true}, "progress_reporter": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Helpers", "type": "", "name": "group_contains_spec", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"group": {"lazy": false, "type": "Group", "checked": true}, "spec": {"lazy": false, "type": "Spec", "checked": true}},"aliases": []},
{"module": "Standard.Test.Helpers", "type": "", "name": "run_spec", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"spec": {"lazy": false, "type": "Spec", "checked": true}},"aliases": []},
{"module": "Standard.Test.Helpers", "type": "", "name": "execute_spec_code", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"spec_code": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Problems", "type": "", "name": "get_attached_warnings", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"v": {"lazy": false}},"aliases": [],"description": "Returns values of warnings attached to the value."},
{"module": "Standard.Test.Problems", "type": "", "name": "test_problem_handling", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"action": {"lazy": false}, "expected_problems": {"lazy": false}, "result_checker": {"lazy": false}, "unwrap_errors": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}, "ignore_warning_cardinality": {"lazy": false, "type": "Boolean", "checked": true, "default": "False"}},"aliases": [],"description": "Tests how a specific operation behaves depending on the requested `Problem_Behavior`."},
{"module": "Standard.Test.Problems", "type": "", "name": "test_advanced_problem_handling", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"action": {"lazy": false}, "error_checker": {"lazy": false}, "warnings_checker": {"lazy": false}, "result_checker": {"lazy": false}},"aliases": [],"description": "Tests how a specific operation behaves depending on the requested `Problem_Behavior`. A variant that allows more customization over how expected problems are checked."},
{"module": "Standard.Test.Problems", "type": "", "name": "assume_no_problems", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"result": {"lazy": false}},"aliases": [],"description": "Checks if the provided value does not have any attached problems."},
{"module": "Standard.Test.Problems", "type": "", "name": "expect_warning", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"expected_warning": {"lazy": false}, "result": {"lazy": false}, "unwrap_errors": {"lazy": false, "default": "True"}},"aliases": [],"description": "Checks if the provided value has a specific warning attached. It allows other warnings to be present also."},
{"module": "Standard.Test.Problems", "type": "", "name": "expect_only_warning", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"expected_warning": {"lazy": false}, "result": {"lazy": false}, "unwrap_errors": {"lazy": false, "default": "True"}},"aliases": [],"description": "Checks if the provided value has a specific warning attached and if there are no other warnings.  As a utility, it also returns the found warning."},
{"module": "Standard.Test.Problems", "type": "", "name": "not_expect_warning", "methodType": "static", "accessor": "PUBLIC", "modifiers": "UNSTABLE", "returnType": "", "arguments": {"expected_warning_type": {"lazy": false}, "result": {"lazy": false}},"aliases": [],"description": "Checks if the provided value does _not_ have a warning of the specified type.  It allows other warnings to be present also."},
{"module": "Standard.Test.Should_Reach", "type": "Should_Reach", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Should_Reach", "arguments": {"reached_ref": {"lazy": false, "type": "Ref Boolean", "checked": true}},"aliases": []},
{"module": "Standard.Test.Should_Reach", "type": "Should_Reach", "name": "new", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates a new Should_Reach test object."},
{"module": "Standard.Test.Should_Reach", "type": "Should_Reach", "name": "reached", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Nothing", "arguments": {},"aliases": [],"description": "Records that a point has been reached."},
{"module": "Standard.Test.Should_Reach", "type": "Should_Reach", "name": "should_have_reached", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "Spec_Result", "arguments": {},"aliases": [],"description": "Checks if a point was reached in execution."},
{"module": "Standard.Test.Spec", "type": "Spec", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Spec", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "code": {"lazy": false, "type": "Any -> Any", "checked": true}, "pending": {"lazy": false, "type": "Nothing | Text", "checked": true}},"aliases": []},
{"module": "Standard.Test.Spec", "type": "Spec", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "Success", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Spec_Result", "arguments": {},"aliases": [],"description": "Represents a successful behavioral test."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "Failure", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Spec_Result", "arguments": {"message": {"lazy": false}, "details": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Represents a failing behavioral test."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "Pending", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Spec_Result", "arguments": {"reason": {"lazy": false}},"aliases": [],"description": "Represents a pending behavioral test."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "is_pending", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the Spec_Result is pending."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "is_fail", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the Spec_Result is a failure."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "is_success", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the Spec_Result is a success."},
{"module": "Standard.Test.Spec_Result", "type": "Spec_Result", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Suite", "type": "Suite_Builder", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Suite_Builder", "arguments": {"builder": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Suite", "type": "Suite_Builder", "name": "group", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "fn": {"lazy": false, "type": "Group_Builder -> Any", "checked": true}, "pending": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}},"aliases": [],"description": "Add a group to the suite builder."},
{"module": "Standard.Test.Suite", "type": "Suite", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Suite", "arguments": {"groups": {"lazy": false, "type": "Vector Group", "checked": true}},"aliases": []},
{"module": "Standard.Test.Suite", "type": "Suite", "name": "run_with_filter", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "(Boolean | Nothing)", "arguments": {"filter": {"lazy": false, "type": "Text | Nothing", "checked": true, "default": "Nothing"}, "should_exit": {"lazy": false, "type": "Boolean", "checked": true, "default": "True"}},"aliases": [],"description": "Run only tests that match the provided filter.","returns": "Boolean if `should_exit` is False, otherwise exits the process."},
{"module": "Standard.Test.Suite", "type": "Suite", "name": "group_names", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Gets the names of all the groups in this suite."},
{"module": "Standard.Test.Suite", "type": "Suite", "name": "print_all", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Print the structure of the suite to the console."},
{"module": "Standard.Test.Suite", "type": "", "name": "name_matches", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {"name": {"lazy": false, "type": "Text", "checked": true}, "filter": {"lazy": false, "type": "Text | Nothing", "checked": true}},"aliases": []},
{"module": "Standard.Test.Suite_Config", "type": "Suite_Config", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Suite_Config", "arguments": {"print_only_failures": {"lazy": false, "type": "Boolean", "checked": true}, "output_path": {"lazy": false, "type": "File | Nothing", "checked": true}, "use_ansi_colors": {"lazy": false, "type": "Boolean", "checked": true}, "caller_project_root": {"lazy": false, "type": "File | Nothing", "checked": true}},"aliases": [],"description": "Construct a configuration"},
{"module": "Standard.Test.Suite_Config", "type": "Suite_Config", "name": "from_environment", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Creates an Suite_Config based off environment and caller location"},
{"module": "Standard.Test.Suite_Config", "type": "Suite_Config", "name": "should_output_junit", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Should the results be written to JUnit XML file."},
{"module": "Standard.Test.Suite_Config", "type": "", "name": "find_project_root", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Suite_Config", "type": "", "name": "find_caller_script", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"stack": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test", "type": "Test", "name": "", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Test", "arguments": {},"aliases": [],"description": "Contains only static methods"},
{"module": "Standard.Test.Test", "type": "Test", "name": "build", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"fn": {"lazy": false}},"aliases": [],"description": "Construct a Test Suite object"},
{"module": "Standard.Test.Test", "type": "Test", "name": "expect_panic_with", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}, "matcher": {"lazy": false}},"aliases": [],"description": "Expect a function to fail with the provided panic.  It returns the caught panic if it matches the expected panic type, otherwise it fails the test."},
{"module": "Standard.Test.Test", "type": "Test", "name": "expect_panic", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"matcher": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Expect a function to fail with the provided panic.  An alternative API to `expect_panic_with` where the order of arguments is more natural - as it allows blocks without reordering the arguments."},
{"module": "Standard.Test.Test", "type": "Test", "name": "assert_no_problems", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Checks that the provided action returns without any errors or warnings.  If you just want to check for errors, usage of the `.should_succeed` extension function is preferred."},
{"module": "Standard.Test.Test", "type": "Test", "name": "fail", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": false}, "details": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Fail a test with the given message."},
{"module": "Standard.Test.Test", "type": "Test", "name": "enrich_message_with_clue", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test", "type": "Test", "name": "fail_match_on_unexpected_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Reports an unexpected dataflow error has occurred."},
{"module": "Standard.Test.Test", "type": "Test", "name": "with_clue", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"clue": {"lazy": true}, "behavior": {"lazy": true}},"aliases": [],"description": "Executes the block of code passed as behavior and adds a clue modifier which changes how assertion failures are reported.  Nesting with_clue invocations results in clue aggregation."},
{"module": "Standard.Test.Test", "type": "Test", "name": "with_retries", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"action": {"lazy": true}},"aliases": [],"description": "A helper method that retries the action a few times if it panics. It allows to make flaky tests more robust.  It waits for a short period of time between retries (in case the failures are related e.g. to network conditions or propagation delays).  This function should be placed inside of the `specify` block. It can be used to retry the whole test, or it can be applied to a specific block inside of the test to only re-run that specific block (in such case, any side-effects must be considered carefully).  The method returns the first successful value returned by the action, or fails with the last error thrown by the action after exhausting retry attempts."},
{"module": "Standard.Test.Test_Environment", "type": "", "name": "unsafe_with_environment_override", "methodType": "static", "accessor": "PUBLIC", "modifiers": "ADVANCED UNSTABLE", "returnType": "", "arguments": {"key": {"lazy": false}, "value": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Runs a given action with an environment variable modified to a given value. The environment variable is restored to its original value after the action. The environment variable override is only visible to the Enso `Environment.get` method, the environment as seen from a direct `System.getenv` Java call remains unchanged."},
{"module": "Standard.Test.Test_Reporter", "type": "Ignore_Progress_Reporter", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Ignore_Progress_Reporter", "arguments": {},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Ignore_Progress_Reporter", "name": "clear", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Ignore_Progress_Reporter", "name": "report_progress", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"status_text": {"lazy": false, "type": "Text", "checked": true}, "increment": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Command_Line_Progress_Reporter", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Command_Line_Progress_Reporter", "arguments": {"current_progress": {"lazy": false}, "total_count": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Command_Line_Progress_Reporter", "name": "make", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"total_expected": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Command_Line_Progress_Reporter", "name": "report_progress", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"status_text": {"lazy": false, "type": "Text", "checked": true}, "increment": {"lazy": false, "type": "Integer", "checked": true, "default": "1"}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "Command_Line_Progress_Reporter", "name": "clear", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "wrap_junit_testsuites", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"config": {"lazy": false}, "builder": {"lazy": false}, "action": {"lazy": true}},"aliases": [],"description": "Write the JUnit XML header."},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "red", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "green", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "highlighted", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "grey", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "maybe_red_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "maybe_green_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "maybe_highlighted_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "maybe_grey_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false, "type": "Text", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "print_single_result", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group_name": {"lazy": false, "type": "Text", "checked": true}, "test_result": {"lazy": false, "type": "Test_Result", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}},"aliases": [],"description": "Print result for a single Spec run"},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "report_github_error_message", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"title": {"lazy": true, "type": "Text", "checked": true}, "message": {"lazy": true, "type": "Text", "checked": true}},"aliases": [],"description": "Reports an error message to show up as a note in GitHub Actions, only if running in the GitHub Actions environment."},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "generate_github_error_annotation", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"title": {"lazy": false, "type": "Text", "checked": true}, "message": {"lazy": false, "type": "Text", "checked": true}},"aliases": [],"description": "Generates a GitHub Actions annotation for a failing test."},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "print_report", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"test_results": {"lazy": false, "type": "Vector Test_Result", "checked": true}, "config": {"lazy": false, "type": "Suite_Config", "checked": true}, "builder": {"lazy": false, "type": "StringBuilder | Nothing", "checked": true}},"aliases": [],"description": "Prints all the results, optionally writing them to a jUnit XML output."},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "print_pending_group", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group": {"lazy": false}, "config": {"lazy": false}, "builder": {"lazy": false}},"aliases": [],"description": "Prints a pending group, optionally writing it to a jUnit XML output."},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "print_group_report", "methodType": "static", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {"group_name": {"lazy": false}, "test_results": {"lazy": false}, "config": {"lazy": false}, "builder": {"lazy": false}},"aliases": [],"description": "Prints report for test_results from a single group."},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "escape_xml", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"input": {"lazy": false}, "inside_attribute": {"lazy": false, "default": "False"}},"aliases": [],"description": "Escape Text for XML"},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "progress_width", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "print_progress", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current_progress": {"lazy": false}, "total_count": {"lazy": false}, "status_text": {"lazy": false}},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "clear_progress", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Test.Test_Reporter", "type": "", "name": "is_terminal_interactive", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "Boolean", "arguments": {},"aliases": [],"description": "Checks if the current process is running in an interactive terminal session."},
{"module": "Standard.Test.Test_Result", "type": "Test_Result", "name": "Impl", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Test_Result", "arguments": {"group_name": {"lazy": false, "type": "Text", "checked": true}, "spec_name": {"lazy": false, "type": "Text", "checked": true}, "spec_result": {"lazy": false, "type": "Spec_Result", "checked": true}, "time_taken": {"lazy": false, "type": "Duration", "checked": true}},"aliases": []},
{"module": "Standard.Test.Test_Result", "type": "Test_Result", "name": "to_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Render as Test_Result as Text."},
{"module": "Standard.Test.Test_Result", "type": "Test_Result", "name": "is_pending", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Was the test pending?"},
{"module": "Standard.Test.Test_Result", "type": "Test_Result", "name": "is_success", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Was the test successful?"},
{"module": "Standard.Test.Test_Result", "type": "Test_Result", "name": "is_fail", "methodType": "method", "accessor": "PUBLIC", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Was the test a failure?"},
{"module": "Standard.Visualization.SQL.Visualization", "type": "", "name": "prepare_visualization", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Prepares the database table for visualization. \n\n For each interpolation it provides its value, its actual type name, its expected SQL type name and if it was possible to infer it, its expected Enso typename.  Expected Enso types are inferred based on known SQL types and their mapping to Enso types."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "prepare_visualization", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"y": {"lazy": false}, "max_rows": {"lazy": false, "default": "1000"}},"aliases": [],"description": "Prepares a table or column for visualization. \n\n In case of Database backed data, it materializes a fragment of the data."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "max_columns", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Column Limit"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_error", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"error": {"lazy": false}},"aliases": [],"description": "Render Error to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"row": {"lazy": false}},"aliases": [],"description": "Render Vector to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}, "max_rows": {"lazy": false}},"aliases": [],"description": "Render Vector to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_matrix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current": {"lazy": false}, "vector": {"lazy": false}, "idx": {"lazy": false, "default": "0"}},"aliases": [],"description": "Render Vector of Vector / Array to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_object_matrix", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"current": {"lazy": false}, "vector": {"lazy": false}, "idx": {"lazy": false, "default": "0"}},"aliases": [],"description": "Render Vector of Objects to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_dictionary", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dict": {"lazy": false}, "max_items": {"lazy": false}},"aliases": [],"description": "Render Dictionary to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_js_object", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"js_object": {"lazy": false}, "max_items": {"lazy": false}},"aliases": [],"description": "Render JS_Object to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_xml_element", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"xml_element": {"lazy": false}, "max_items": {"lazy": false}, "type": {"lazy": false, "type": "Text", "checked": true, "default": "\"XML_Element\""}},"aliases": [],"description": "Render XML_Element to JSON"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"dataframe": {"lazy": false}, "max_rows": {"lazy": false}, "all_rows_count": {"lazy": false}, "is_db_table": {"lazy": false}},"aliases": [],"description": "Creates a JSON representation for the visualizations."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "get_distinct_values_for_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "column_index": {"lazy": false}},"aliases": [],"description": "gets the distinct values of a column, used for filter options"},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "apply_sort_to_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "sort_col_index_list": {"lazy": false}, "sort_direction_list": {"lazy": false}},"aliases": [],"description": "applies the sort model to the table."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "apply_single_filter_to_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "filter_col": {"lazy": false}, "filter_action": {"lazy": false}, "filter_val": {"lazy": false}},"aliases": [],"description": "applies one filter to the table."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "apply_filter_to_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "i": {"lazy": false}, "filter_col": {"lazy": false}, "filter_action": {"lazy": false}, "filter_val": {"lazy": false}},"aliases": [],"description": "applies the filter model to the table."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "get_rows_for_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "start_number": {"lazy": false}, "sort_col_index_list": {"lazy": false, "default": "Nothing"}, "sort_direction_list": {"lazy": false, "default": "Nothing"}, "filter_col": {"lazy": false, "default": "Nothing"}, "filter_action": {"lazy": false, "default": "Nothing"}, "filter_val": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Prepares the row data table for visualizations using the server side row model."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_other", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Create JSON serialization of values."},
{"module": "Standard.Visualization.Table.Visualization", "type": "", "name": "make_json_for_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": false}, "level": {"lazy": false, "default": "0"}},"aliases": [],"description": "Create JSON serialization of values for the table."},
{"module": "Standard.Visualization.AI", "type": "", "name": "goal_placeholder", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.AI", "type": "Table", "name": "build_ai_prompt", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.AI", "type": "", "name": "build_ai_prompt", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"subject": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.AI", "type": "", "name": "print", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"subject": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.File_Upload", "type": "File_Being_Uploaded", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "File_Being_Uploaded", "arguments": {"file_path": {"lazy": false, "type": "Text", "checked": true}},"aliases": []},
{"module": "Standard.Visualization.File_Upload", "type": "", "name": "file_uploading", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"path": {"lazy": false}},"aliases": [],"description": "A function that throws an error to indicate that a file is being uploaded to `path`."},
{"module": "Standard.Visualization.Geo_Map", "type": "", "name": "json_from_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": [],"description": "Construct JSON describing table geo map visualization."},
{"module": "Standard.Visualization.Geo_Map", "type": "", "name": "process_to_json_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Default preprocessor for the geo map visualization, generating JSON text describing the geo map visualization."},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies that the builtin Table visualization should be used for any type, unless specified otherwise."},
{"module": "Standard.Visualization.Helpers", "type": "JS_Object", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Specifies that the builtin JSON visualization should be used for any JS_Objects"},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a Text used to display this value in the IDE.  The particular representation is left unspecified and subject to change in the future. The current implementation uses JSON serialization as the default.  Types defining their own versions of this method should ensure that the result is reasonably small and that the operation is quick to compute."},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "when_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": true}},"aliases": [],"description": "Returns the given value if this is not an error. Propagates error otherwise."},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "is_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the value is not an error."},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "map_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Maps over non-error value."},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "catch_", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": true}},"aliases": [],"description": "Recovers from the error by returning the parameter value.  The error contents will be ignored."},
{"module": "Standard.Visualization.Helpers", "type": "Nothing", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a Text used to display this value in the IDE."},
{"module": "Standard.Visualization.Helpers", "type": "Error", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a display representation of the dataflow error on which it is called."},
{"module": "Standard.Visualization.Helpers", "type": "Error", "name": "when_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": true}},"aliases": [],"description": "Returns the given value if this is not an error. Propagates error otherwise."},
{"module": "Standard.Visualization.Helpers", "type": "Error", "name": "is_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the value is not an error."},
{"module": "Standard.Visualization.Helpers", "type": "Error", "name": "map_valid", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}},"aliases": [],"description": "Maps over non-error value."},
{"module": "Standard.Visualization.Helpers", "type": "Error", "name": "catch_", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"val": {"lazy": true}},"aliases": [],"description": "Recovers from the error by returning the parameter value.  The error contents will be ignored."},
{"module": "Standard.Visualization.Helpers", "type": "Vector", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Guides the visualization system to display the most suitable graphical representation for this table."},
{"module": "Standard.Visualization.Helpers", "type": "Vector", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Transform the vector into text for displaying as part of its default visualization."},
{"module": "Standard.Visualization.Helpers", "type": "", "name": "render_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"object": {"lazy": false}, "depth": {"lazy": false, "default": "0"}, "max_depth": {"lazy": false, "default": "5"}, "max_length": {"lazy": false, "default": "100"}},"aliases": [],"description": "Internal function to convert a Vector to a JSON string."},
{"module": "Standard.Visualization.Helpers", "type": "Array", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Guides the visualization system to display the most suitable graphical representation for this table."},
{"module": "Standard.Visualization.Helpers", "type": "Array", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a Text used to display this value in the IDE.  The particular representation is left unspecified and subject to change in the future. The current implementation uses JSON serialization as the default."},
{"module": "Standard.Visualization.Helpers", "type": "Table", "name": "lookup_ignore_case", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "Looks for a column by a given name.  Unlike `Table.at` looks into index columns and name comparison is case-insensitive."},
{"module": "Standard.Visualization.Helpers", "type": "Table", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Guides the visualization system to display the most suitable graphical representation for this table."},
{"module": "Standard.Visualization.Helpers", "type": "Table", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a Text used to display this table in the IDE by default.  Returns a JSON object containing useful metadata and previews of column values."},
{"module": "Standard.Visualization.Helpers", "type": "Column", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Guides the visualization system to display the most suitable graphical representation for this Column."},
{"module": "Standard.Visualization.Helpers", "type": "Column", "name": "is_numeric", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Checks if the column stores numbers."},
{"module": "Standard.Visualization.Helpers", "type": "", "name": "make_lazy_visualization_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Returns the data requested to render a lazy view of the default visualization. Decides whether to return a simplified version of the lazy data format."},
{"module": "Standard.Visualization.Helpers", "type": "Any", "name": "to_lazy_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Returns the data requested to render a lazy view of the default visualization."},
{"module": "Standard.Visualization.Helpers", "type": "Text", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the data requested to render a lazy view of the default visualization."},
{"module": "Standard.Visualization.Helpers", "type": "Text", "name": "to_lazy_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Returns the data requested to render a lazy view of the default visualization."},
{"module": "Standard.Visualization.Helpers", "type": "Column", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Shows a JSON serialization of a truncated version of this column, for the benefit of visualization in the IDE."},
{"module": "Standard.Visualization.Helpers", "type": "Row", "name": "default_visualization", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Guides the visualization system to display the most suitable graphical representation for this Row."},
{"module": "Standard.Visualization.Helpers", "type": "Row", "name": "to_default_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns a Text used to display this table in the IDE by default.  Returns a JSON object containing useful metadata and previews of column values."},
{"module": "Standard.Visualization.Helpers", "type": "Table", "name": "to_lazy_visualization_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table_cell_position": {"lazy": false}, "text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Returns the data requested to render a lazy view of the default visualization."},
{"module": "Standard.Visualization.Helpers", "type": "", "name": "truncate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"message": {"lazy": false}, "max_length": {"lazy": false, "default": "256"}, "suffix": {"lazy": false, "default": "\u0027...\u0027"}},"aliases": [],"description": "Truncate message to the provided max length."},
{"module": "Standard.Visualization.Histogram", "type": "Update", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Update", "arguments": {"values": {"lazy": false}, "label": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Histogram", "type": "Update", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generate JSON that can be consumed by the visualization."},
{"module": "Standard.Visualization.Histogram", "type": "Table", "name": "first_numeric", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get first numeric column of the table."},
{"module": "Standard.Visualization.Histogram", "type": "Table", "name": "value_column", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Get the value column - the column that will be used to create histogram."},
{"module": "Standard.Visualization.Histogram", "type": "", "name": "from_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Histogram", "type": "", "name": "from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Histogram", "type": "", "name": "from_value", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Histogram", "type": "", "name": "process_to_json_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Default preprocessor for the histogram visualization.  Generates JSON text describing the histogram visualization."},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "Builtin", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Id", "arguments": {"name": {"lazy": false}},"aliases": [],"description": "A builtin visualization, implemented in the graphical interface and not imported from any library."},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "Library", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Id", "arguments": {"project": {"lazy": false}, "name": {"lazy": false}},"aliases": [],"description": "A visualization implemented in a library."},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin JSON visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "scatter_plot", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Scatter Plot visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "histogram", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Histogram visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "heatmap", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Heatmap visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Table visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "sql_query", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin SQL Query visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "geo_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Geo Map visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "image", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "An identifier for the builtin Image visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "from_module", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"module": {"lazy": false}, "visualization_name": {"lazy": false}},"aliases": [],"description": "Creates an ID for a library-defined visualization"},
{"module": "Standard.Visualization.Id", "type": "Id", "name": "to_js_object", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Serializes this ID to a JSON format understandable by the graphical interface."},
{"module": "Standard.Visualization.Preprocessor", "type": "", "name": "default_preprocessor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Default visualization preprocessor."},
{"module": "Standard.Visualization.Preprocessor", "type": "", "name": "lazy_preprocessor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Lazy visualization preprocessor."},
{"module": "Standard.Visualization.Preprocessor", "type": "", "name": "error_preprocessor", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"x": {"lazy": false}},"aliases": [],"description": "Error visualization preprocessor."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "X", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Y", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Y_multi", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {"number": {"lazy": false, "type": "Integer", "checked": true, "default": "0"}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Color", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Shape", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Label", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Size", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "Row_Number", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Point_Data", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "all_fields", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns all recognized point data fields."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "recognized_names", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "iota", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"count": {"lazy": false}},"aliases": [],"description": "Returns a vector of subsequent integers beginning from 0."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "is_recognized", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "name", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "fallback_column", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Point_Data", "name": "lookup_in", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "No_Fallback_Column", "name": "", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "No_Fallback_Column", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "No_Fallback_Column", "name": "to_display_text", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Extreme", "name": "Value", "methodType": "ctor", "accessor": "PUBLIC", "modifiers": "", "returnType": "Extreme", "arguments": {"min_x": {"lazy": false}, "max_x": {"lazy": false}, "min_y": {"lazy": false}, "max_y": {"lazy": false}},"aliases": [],"description": "Create an extreme range of points."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "index_name", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Name of the index column that may be generated to plot against."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "data_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "axis_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "label_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Table", "name": "point_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"all_fields": {"lazy": false}},"aliases": [],"description": "Generates JSON that describes points data."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Table", "name": "numeric_column_count", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Returns the number of numeric columns for the plot."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Table", "name": "axes", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"all_fields": {"lazy": false}},"aliases": [],"description": "Generates JSON that describes plot axes."},
{"module": "Standard.Visualization.Scatter_Plot", "type": "Vector", "name": "point_data", "methodType": "extension", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "bound_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"bounds": {"lazy": false}, "data": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "limit_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"limit": {"lazy": false}, "data": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "get_axes_field", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"number_of_numeric": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "get_x_value_type", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}},"aliases": [],"description": "Returns whether the x axis should be time/date. This is either a column named \u0027X\u0027 or the left most column"},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "json_from_table", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "bounds": {"lazy": false}, "limit": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "json_from_vector", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vec": {"lazy": false}, "bounds": {"lazy": false}, "limit": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Scatter_Plot", "type": "", "name": "process_to_json_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "bounds": {"lazy": false, "default": "Nothing"}, "limit": {"lazy": false, "default": "Nothing"}},"aliases": [],"description": "Default preprocessor for the scatter-plot visualization.  Generates JSON text describing the scatter-plot visualization."},
{"module": "Standard.Visualization.Table", "type": "Table_Specification_Update", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Specification_Update", "arguments": {"row_heights": {"lazy": false, "type": "Vector Number", "checked": true}, "column_widths": {"lazy": false, "type": "Vector Number", "checked": true}, "column_names": {"lazy": false, "type": "Vector Text", "checked": true}, "row_names": {"lazy": false, "type": "Vector Text", "checked": true}},"aliases": []},
{"module": "Standard.Visualization.Table", "type": "Table_Update", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Table_Update", "arguments": {"chunks": {"lazy": false}, "table_specification_update": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Table", "type": "Table_Update", "name": "to_json", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generate JSON that can be consumed by the visualization."},
{"module": "Standard.Visualization.Table", "type": "", "name": "get_lazy_visualization_data", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "table_cell_position": {"lazy": false}, "text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Return a sub-window of a table. The window is defined by a cell row/col and line/chunk coordinate as origin and the extent of the window in text chunks and lines. The size of a chunk (the characters in it) is defined by `chunk_width`. The output is formatted as a message that can be sent to the IDE\u0027s lazy text visualization."},
{"module": "Standard.Visualization.Table", "type": "", "name": "compute_table_update", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "table_cell_position": {"lazy": false}, "text_window_position": {"lazy": false}, "text_window_size": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Compute the table visualization update. The table update contains information about the table layout and the table content."},
{"module": "Standard.Visualization.Table", "type": "", "name": "compute_vertical_indices", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "start_row": {"lazy": false}, "end_row": {"lazy": false}, "start_line": {"lazy": false}, "lines_to_get": {"lazy": false}},"aliases": [],"description": "Returns a vector that contains a pairs of row index and vector of corresponding lines indices."},
{"module": "Standard.Visualization.Table", "type": "", "name": "get_chunks_for_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "row_ix": {"lazy": false}, "line_ix": {"lazy": false}, "initial_chunk_offset": {"lazy": false}, "column_range": {"lazy": false}, "chunk_size": {"lazy": false}, "chunks_to_get": {"lazy": false}},"aliases": [],"description": "Compute the text chunks for the row/line defined by the given indices limited to the given column indices. The number of chunks to get is defined by `chunks_to_get`."},
{"module": "Standard.Visualization.Table", "type": "", "name": "max", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": [],"description": "Return the max value in the given vector."},
{"module": "Standard.Visualization.Table", "type": "", "name": "get_longest_line", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}},"aliases": [],"description": "Return the longest line in the given text."},
{"module": "Standard.Visualization.Table", "type": "", "name": "get_column_width", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"column": {"lazy": false}},"aliases": [],"description": "Return the length of the longest line in the given column."},
{"module": "Standard.Visualization.Table", "type": "", "name": "get_row_height", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "row_ix": {"lazy": false}},"aliases": [],"description": "Return the height of the row defined by the given index."},
{"module": "Standard.Visualization.Table", "type": "", "name": "find_first_over_cum_sum", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"items": {"lazy": false}, "target": {"lazy": false}},"aliases": [],"description": "Return the index of the first item in the given vector that brings the cummulative sum of items above the target value. If no such item exists, return `Nothing`."},
{"module": "Standard.Visualization.Table", "type": "", "name": "find_end_column", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "start_column_ix": {"lazy": false}, "chunks": {"lazy": false}, "chunk_size": {"lazy": false}},"aliases": [],"description": "Return the index of the column that is at the end of the given text width, when starting from the given start column index."},
{"module": "Standard.Visualization.Table", "type": "", "name": "find_end_row", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"table": {"lazy": false}, "start_row_ix": {"lazy": false}, "max_height": {"lazy": false}},"aliases": [],"description": "Return the index of the row that is at the end of the given text height, when starting from the given start row index."},
{"module": "Standard.Visualization.Table", "type": "", "name": "fold_map_inner", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"f": {"lazy": false}, "acc": {"lazy": false}, "item": {"lazy": false}},"aliases": [],"description": "Helper for fold_map that takes a function, an accumulator value and the current item and returns a tuple of the new accumulator value and the result of the function."},
{"module": "Standard.Visualization.Table", "type": "", "name": "fold_map", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"acc": {"lazy": false}, "f": {"lazy": false}, "iterable": {"lazy": false}},"aliases": [],"description": "Map a function over a vectors, but also pass on a accumulator value from one step to the next. The function must return a tuple of the result of the function and the new accumulator value."},
{"module": "Standard.Visualization.Table", "type": "", "name": "map_to_cumulative_sum", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"iterable": {"lazy": false}},"aliases": [],"description": "Return a vector of the cumulative sum of the given vector."},
{"module": "Standard.Visualization.Table", "type": "", "name": "enumerate", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"vector": {"lazy": false}},"aliases": [],"description": "Return the given vector where each item is mapped to itself and its index in the vector."},
{"module": "Standard.Visualization.Text", "type": "Message", "name": "Value", "methodType": "ctor", "accessor": "PRIVATE", "modifiers": "", "returnType": "Message", "arguments": {"chunks": {"lazy": false}, "line_count": {"lazy": false}, "max_line_length": {"lazy": false}},"aliases": []},
{"module": "Standard.Visualization.Text", "type": "Message", "name": "to_json", "methodType": "method", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {},"aliases": [],"description": "Generate JSON that can be consumed by the visualization."},
{"module": "Standard.Visualization.Text", "type": "", "name": "get_lazy_visualization_text_window", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "pos": {"lazy": false}, "size": {"lazy": false}, "chunk_width": {"lazy": false}},"aliases": [],"description": "Return a sub-window of a string. The window is defined by line/chunk coordinates. The size of a chunk is defined by `chunk_width`. The output is formatted as a message that can be sent to the IDE\u0027s lazy text visualization."},
{"module": "Standard.Visualization.Text", "type": "", "name": "make_grid_visualization_response", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"chunks": {"lazy": false}, "lines": {"lazy": false}, "max_line_length": {"lazy": false}},"aliases": [],"description": "Format a chunk of text and meta information for the lazy visualization."},
{"module": "Standard.Visualization.Text", "type": "", "name": "get_item_from", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "chunk_size": {"lazy": false}, "index": {"lazy": false}},"aliases": [],"description": "Return a chunk of text from a string. The chunk is defined by a its size and a line/chunk index coordinate."},
{"module": "Standard.Visualization.Text", "type": "", "name": "get_chunk_from_line", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"text": {"lazy": false}, "chunk_size": {"lazy": false}, "ix": {"lazy": false}},"aliases": [],"description": "Return a chunk of text from a line. The chunk is defined by a its size and a chunk index."},
{"module": "Standard.Visualization.Warnings", "type": "", "name": "process_to_json_text", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}},"aliases": [],"description": "Default preprocessor for the warnings visualization.  Generates JSON text describing the warnings visualization."},
{"module": "Standard.Visualization.Widgets", "type": "", "name": "get_widget_json", "methodType": "static", "accessor": "PRIVATE", "modifiers": "", "returnType": "", "arguments": {"value": {"lazy": false}, "call_name": {"lazy": false}, "argument_names": {"lazy": false}, "uuids": {"lazy": false, "default": "\"{}\""}},"aliases": [],"description": "Basic preprocessor for widgets metadata visualization.  Returns full annotation data for all requested arguments."}
]
